
SynthUnitTest.elf:     file format elf32-littlenios2
SynthUnitTest.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0080019c

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0080019c paddr 0x0080019c align 2**12
         filesz 0x000162b4 memsz 0x000162b4 flags r-x
    LOAD off    0x00018450 vaddr 0x00816450 paddr 0x00817f60 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x0001aa70 vaddr 0x00819a70 paddr 0x00819a70 align 2**12
         filesz 0x00000000 memsz 0x00005574 flags rw-
    LOAD off    0x0001a000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  0001a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015e2c  0080019c  0080019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000488  00815fc8  00815fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  00816450  00817f60  00018450  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005574  00819a70  00819a70  0001aa70  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  0001a048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002497  00000000  00000000  0001aea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000314e3  00000000  00000000  0001d337  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000964d  00000000  00000000  0004e81a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b99d  00000000  00000000  00057e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002818  00000000  00000000  00073804  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024c6  00000000  00000000  0007601c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d6fe  00000000  00000000  000784e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00085be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009a8  00000000  00000000  00085c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0008b395  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008b39b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008b3a7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008b3a8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008b3a9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008b3ad  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008b3b1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0008b3b5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0008b3c0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0008b3cb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0008b3d6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000028  00000000  00000000  0008b3e3  2**0
                  CONTENTS, READONLY
 29 .jdi          00005269  00000000  00000000  0008b40b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00063237  00000000  00000000  00090674  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
0080019c l    d  .text	00000000 .text
00815fc8 l    d  .rodata	00000000 .rodata
00816450 l    d  .rwdata	00000000 .rwdata
00819a70 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001e4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008002f8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 vfprintf.c
008004e0 l     F .text	00000058 __sprint_r
00816042 l     O .rodata	00000010 blanks.3452
00816032 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802544 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00803f40 l     F .text	00000058 std
0080404c l     F .text	00000008 __fp_lock
00804054 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00816450 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00817eb0 l     O .rwdata	00000004 charset
00816078 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008161c0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080858c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00809de0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00809e40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00809f40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a060 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a140 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a29c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080a4e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00817ed4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080a780 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00817ed8 l     O .rwdata	00000004 lockid
00819a9c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00817edc l     O .rwdata	00000004 lockid
00819aa4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080c1b8 l     F .text	00000044 OS_InitMisc
0080c1fc l     F .text	0000006c OS_InitRdyList
0080c360 l     F .text	000000e0 OS_InitTCBList
0080c0dc l     F .text	000000dc OS_InitEventList
0080c268 l     F .text	0000007c OS_InitTaskIdle
0080c2e4 l     F .text	0000007c OS_InitTaskStat
0080c5d4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080e4f4 l     F .text	00000110 OS_FlagTaskRdy
0080e24c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00816e0c l     O .rwdata	0000106c jtag_uart_0
00817e78 l     O .rwdata	0000002c character_lcd_0
00812e34 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0081364c l     F .text	000002c4 altera_avalon_jtag_uart_irq
00813910 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00814128 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008149a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814e5c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00814f98 l     F .text	000000dc alt_file_locked
008151fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00815da4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00815f58 l     F .text	00000040 alt_sim_halt
008004bc g     F .text	0000001c putchar
00805cfc g     F .text	00000094 _mprec_log10
00817f2a g     O .rwdata	00000002 OSTaskNameSize
00805de8 g     F .text	00000088 __any_on
008078a0 g     F .text	00000070 _isatty_r
00816198 g     O .rodata	00000028 __mprec_tinytens
0080a2fc g     F .text	000000c8 alt_main
0081ed54 g     O .bss	00000100 alt_irq
00807910 g     F .text	00000078 _lseek_r
0080ede8 g     F .text	000000d0 OS_MemInit
00813124 g     F .text	00000060 altera_avalon_fifo_write_almostfull
00817f60 g       *ABS*	00000000 __flash_rwdata_start
00812d28 g     F .text	00000064 OSTimeSet
008142a4 g     F .text	00000034 alt_up_character_lcd_send_cmd
008090ac g     F .text	00000088 __eqdf2
0080ad34 g     F .text	000006b4 OSEventPendMulti
0081efe4 g       *ABS*	00000000 __alt_heap_start
00815804 g     F .text	00000020 OSTaskCreateHook
00819b30 g     O .bss	00002000 task1_stk
00800444 g     F .text	00000044 printf
00817f02 g     O .rwdata	00000002 OSMboxEn
0080b43c g     F .text	0000007c OSIntEnter
008071ac g     F .text	00000068 __sseek
00803fa8 g     F .text	000000a4 __sinit
00807420 g     F .text	00000130 __swbuf_r
00817f12 g     O .rwdata	00000002 OSQEn
00804c80 g     F .text	00000084 _setlocale_r
008040a8 g     F .text	00000068 __sfmoreglue
0080a9f0 g     F .text	000000d0 __malloc_unlock
00815860 g     F .text	0000001c OSTaskStatHook
00819aac g     O .bss	00000001 OSLockNesting
00817f50 g     O .rwdata	00000002 OSDataSize
00819aad g     O .bss	00000001 OSRunning
00805778 g     F .text	000000e0 memmove
00815898 g     F .text	0000001c OSInitHookBegin
00812e6c g     F .text	000000bc altera_avalon_fifo_init
00817f48 g     O .rwdata	00000002 OSTmrSize
00804098 g     F .text	00000010 _cleanup
008131e4 g     F .text	00000064 altera_avalon_fifo_write_fifo
00805e70 g     F .text	000000bc _Balloc
00819ab0 g     O .bss	00000004 OSIdleCtr
008091bc g     F .text	00000088 __gtdf2
008154d0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00814228 g     F .text	0000007c get_DDRAM_addr
0080c908 g     F .text	000002e0 OS_TCBInit
01104000 g     F .entry	0000001c __reset
008133a4 g     F .text	00000028 altera_avalon_fifo_read_backpressure
00817f4e g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
00817eee g     O .rwdata	00000002 OSEventSize
00819ab4 g     O .bss	00000001 OSPrioHighRdy
0080782c g     F .text	00000074 _fstat_r
00815824 g     F .text	00000020 OSTaskDelHook
00819a88 g     O .bss	00000004 errno
008154b0 g       .text	00000000 OSStartHighRdy
008114fc g     F .text	00000200 OSTaskCreateExt
0080dd68 g     F .text	00000068 OSFlagPendGetFlagsRdy
00817f2e g     O .rwdata	00000002 OSTaskStatStkSize
0080cd74 g     F .text	00000334 OSFlagAccept
0080f520 g     F .text	000000c8 OSQFlush
0080eeb8 g     F .text	00000154 OSQAccept
00819a94 g     O .bss	00000004 alt_argv
0081fea4 g       *ABS*	00000000 _gp
00811328 g     F .text	000001d4 OSTaskCreate
00810db4 g     F .text	00000574 OSTaskChangePrio
00819aa8 g     O .bss	00000004 alt_heapsem
0081305c g     F .text	00000068 altera_avalon_fifo_clear_event
0080cbe8 g     F .text	0000018c OSDebugInit
008116fc g     F .text	0000040c OSTaskDel
00816c8c g     O .rwdata	00000180 alt_fd_list
0081bb30 g     O .bss	00000370 OSFlagTbl
008004d8 g     F .text	00000008 _putchar_r
0080beb8 g     F .text	000000b8 OS_EventTaskRemove
00814acc g     F .text	00000094 alt_find_dev
008056d8 g     F .text	000000a0 memcpy
00817f18 g     O .rwdata	00000002 OSRdyTblSize
0081443c g     F .text	0000004c alt_up_character_lcd_write_fd
0080408c g     F .text	0000000c _cleanup_r
00809354 g     F .text	000000f8 __floatsidf
00814f20 g     F .text	00000078 alt_io_redirect
008092cc g     F .text	00000088 __ltdf2
00815fc8 g       *ABS*	00000000 __DTOR_END__
0080aac0 g     F .text	00000130 OSEventNameGet
00817efc g     O .rwdata	00000002 OSFlagMax
00805c4c g     F .text	000000b0 __ratio
0080b4b8 g     F .text	00000100 OSIntExit
00817f36 g     O .rwdata	00000002 OSTCBSize
00819ab5 g     O .bss	00000001 OSPrioCur
00813b8c g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00800488 g     F .text	00000034 _printf_r
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00800434 g     F .text	00000008 __udivsi3
00809fa0 g     F .text	000000c0 isatty
00817f1c g     O .rwdata	00000002 OSStkWidth
008160a8 g     O .rodata	000000c8 __mprec_tens
00817f10 g     O .rwdata	00000002 OSPtrSize
00804c5c g     F .text	00000008 __locale_charset
00817ef0 g     O .rwdata	00000002 OSEventTblSize
00815424 g       .text	00000000 OSCtxSw
00815b20 g     F .text	00000090 alt_icache_flush
00819a7c g     O .bss	00000004 __malloc_top_pad
00819ab8 g     O .bss	00000004 OSTCBList
00819a8c g     O .bss	00000004 alt_fd_list_lock
00817eac g     O .rwdata	00000004 __mb_cur_max
00804c64 g     F .text	0000000c _localeconv_r
00806568 g     F .text	0000003c __i2b
00804640 g     F .text	0000049c __sfvwrite_r
0081bea0 g     O .bss	00000c30 OSMemTbl
00819abc g     O .bss	00000001 OSTickStepState
00807134 g     F .text	00000070 _sbrk_r
00817f14 g     O .rwdata	00000002 OSQMax
0081cad0 g     O .bss	00000800 OSTaskStatStk
0080e9d0 g     F .text	0000010c OSMemNameGet
00817ef4 g     O .rwdata	00000002 OSFlagEn
00807988 g     F .text	00000078 _read_r
00817f3a g     O .rwdata	00000002 OSTimeTickHookEn
0080fa84 g     F .text	00000180 OSQPost
0080e604 g     F .text	000000ac OS_FlagUnlink
00816850 g     O .rwdata	0000000c __lc_ctype
00817ecc g     O .rwdata	00000004 alt_max_fd
0080c494 g     F .text	0000006c OS_MemCopy
0080c500 g     F .text	000000d4 OS_Sched
00809ae4 g     F .text	00000138 __unpack_d
00807708 g     F .text	00000110 _fclose_r
0080e8cc g     F .text	00000104 OSMemGet
00811e30 g     F .text	000001c4 OSTaskNameSet
00803f0c g     F .text	00000034 fflush
00819a80 g     O .bss	00000004 __malloc_max_sbrked_mem
00819ac0 g     O .bss	00000004 OSCtxSwCtr
0081587c g     F .text	0000001c OSTimeTickHook
00817efe g     O .rwdata	00000002 OSFlagNameSize
0080bf70 g     F .text	00000104 OS_EventTaskRemoveMulti
00808a1c g     F .text	00000074 __adddf3
0080bd64 g     F .text	00000154 OS_EventTaskWaitMulti
00805b2c g     F .text	00000120 __b2d
00817f16 g     O .rwdata	00000002 OSQSize
00807fdc g     F .text	000005b0 __umoddi3
0080a1ac g     F .text	000000f0 lseek
00810660 g     F .text	0000027c OSSemPend
00817ea8 g     O .rwdata	00000004 _global_impure_ptr
00806ad0 g     F .text	000005f4 _realloc_r
00817f00 g     O .rwdata	00000002 OSLowestPrio
0081efe4 g       *ABS*	00000000 __bss_end
00814d64 g     F .text	000000f8 alt_iic_isr_register
008158ec g     F .text	00000020 OSTCBInitHook
00817f46 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
008152f4 g     F .text	00000110 alt_tick
00807a00 g     F .text	000005dc __udivdi3
00817ee8 g     O .rwdata	00000002 OSEventEn
00816170 g     O .rodata	00000028 __mprec_bigtens
008067c4 g     F .text	00000120 __s2b
00817f42 g     O .rwdata	00000002 OSTmrCfgNameSize
00809524 g     F .text	00000194 __floatunsidf
00805a4c g     F .text	00000060 __mcmp
00804074 g     F .text	00000018 __fp_lock_all
00814d1c g     F .text	00000048 alt_ic_irq_enabled
0080e410 g     F .text	000000e4 OS_FlagInit
0081525c g     F .text	00000098 alt_alarm_stop
00817f24 g     O .rwdata	00000002 OSTaskIdleStkSize
00819afc g     O .bss	00000004 alt_irq_active
008101ec g     F .text	000000c0 OSSemAccept
0080ebfc g     F .text	000000f0 OSMemPut
0080e6b0 g     F .text	0000021c OSMemCreate
00819ac4 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d0 alt_irq_handler
00816c64 g     O .rwdata	00000028 alt_dev_null
00817f38 g     O .rwdata	00000002 OSTicksPerSec
00814724 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00815424 g       .text	00000000 OSIntCtxSw
008148ac g     F .text	00000044 alt_dcache_flush_all
00805918 g     F .text	00000070 __hi0bits
0080944c g     F .text	000000d8 __fixdfsi
008130c4 g     F .text	00000060 altera_avalon_fifo_write_ienable
00819ac8 g     O .bss	00000004 OSTCBFreeList
00817f60 g       *ABS*	00000000 __ram_rwdata_end
008108dc g     F .text	0000017c OSSemPendAbort
00812fcc g     F .text	0000002c altera_avalon_fifo_read_almostempty
00817ec4 g     O .rwdata	00000008 alt_dev_list
0080a660 g     F .text	00000120 write
008069e8 g     F .text	000000e8 _putc_r
00817f3c g     O .rwdata	00000002 OSVersionNbr
00816450 g       *ABS*	00000000 __ram_rodata_end
00809e6c g     F .text	000000d4 fstat
00817ee4 g     O .rwdata	00000004 OSEndiannessTest
008066a4 g     F .text	00000120 __pow5mult
00819a70 g     O .bss	00000004 __nlocale_changed
0080043c g     F .text	00000008 __umodsi3
00817ef6 g     O .rwdata	00000002 OSFlagGrpSize
0081efe4 g       *ABS*	00000000 end
00813514 g     F .text	00000138 altera_avalon_jtag_uart_init
0080c778 g     F .text	000000c8 OS_TaskStat
00812ff8 g     F .text	0000003c altera_avalon_fifo_read_event
00815fc4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00814198 g     F .text	00000090 alt_avalon_timer_sc_init
00809750 g     F .text	00000080 __clzsi2
00813e4c g     F .text	000002dc altera_avalon_jtag_uart_write
00803f98 g     F .text	00000004 __sfp_lock_acquire
008132b8 g     F .text	00000058 altera_avalon_fifo_read_fifo
008055f4 g     F .text	000000e4 memchr
0080c440 g     F .text	00000054 OS_MemClr
0081434c g     F .text	00000078 alt_up_character_lcd_write
00800538 g     F .text	00001eac ___vfprintf_internal_r
008154f4 g     F .text	00000310 OSTaskStkInit
008001e8 g     F .text	000000a4 task1
0080432c g     F .text	00000314 _free_r
0080bac0 g     F .text	00000194 OS_EventTaskRdy
00815da8 g     F .text	000001b0 __call_exitprocs
00819acc g     O .bss	00000001 OSCPUUsage
00819a74 g     O .bss	00000004 __mlocale_changed
00817eb8 g     O .rwdata	00000004 __malloc_sbrk_base
0080019c g     F .text	0000004c _start
00819b00 g     O .bss	00000004 _alt_tick_rate
0080f5e8 g     F .text	00000320 OSQPend
008127f4 g     F .text	0000014c OSTimeDly
00806234 g     F .text	0000014c __lshift
00819b04 g     O .bss	00000004 _alt_nticks
0080a3c4 g     F .text	00000120 read
00812dc0 g     F .text	00000074 alt_sys_init
008145b0 g     F .text	000000b0 alt_up_character_lcd_shift_display
00815c70 g     F .text	00000134 __register_exitproc
00819acd g     O .bss	00000001 OSTaskCtr
00812940 g     F .text	00000174 OSTimeDlyHMSM
00806380 g     F .text	000001e8 __multiply
00814660 g     F .text	00000090 alt_up_character_lcd_erase_pos
00813a24 g     F .text	00000074 altera_avalon_jtag_uart_close
00816450 g       *ABS*	00000000 __ram_rwdata_start
00815fc8 g       *ABS*	00000000 __ram_rodata_start
00819b08 g     O .bss	00000028 __malloc_current_mallinfo
00817eea g     O .rwdata	00000002 OSEventMax
00805f2c g     F .text	0000017c __d2b
00810a58 g     F .text	00000128 OSSemPost
0080b644 g     F .text	000000e4 OSSchedUnlock
008133cc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00815a2c g     F .text	000000f4 alt_get_fd
00819ad0 g     O .bss	00000004 OSMemFreeList
0080b798 g     F .text	000000ac OSStatInit
0080e178 g     F .text	000000d4 OSFlagQuery
00809c1c g     F .text	000000c8 __fpcmp_parts_d
00817f20 g     O .rwdata	00000002 OSTaskCreateExtEn
00807698 g     F .text	00000070 _close_r
00815bfc g     F .text	00000074 memcmp
0080baa4 g     F .text	0000001c OS_Dummy
0081347c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0081efe4 g       *ABS*	00000000 __alt_stack_base
008134c4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802408 g     F .text	0000013c __swsetup_r
0081d2d0 g     O .bss	000001e0 OSQTbl
00812f28 g     F .text	0000003c altera_avalon_fifo_read_status
00808e54 g     F .text	00000258 __divdf3
00804110 g     F .text	000000f0 __sfp
00805d90 g     F .text	00000058 __copybits
0081685c g     O .rwdata	00000408 __malloc_av_
00803fa4 g     F .text	00000004 __sinit_lock_release
00819ad4 g     O .bss	00000004 OSTCBHighRdy
00808a90 g     F .text	000003c4 __muldf3
00807290 g     F .text	00000060 __sread
00813378 g     F .text	0000002c altera_avalon_fifo_read_other_info
00819ad8 g     O .bss	00000004 OSQFreeList
0081590c g     F .text	00000120 alt_find_file
008148f0 g     F .text	000000b4 alt_dev_llist_insert
0080a8e8 g     F .text	00000108 __malloc_lock
0080a5a4 g     F .text	000000bc sbrk
0080abf0 g     F .text	00000144 OSEventNameSet
00803d10 g     F .text	000001fc _fflush_r
008075e4 g     F .text	000000b4 _calloc_r
00819adc g     O .bss	00000001 OSRdyGrp
00819a70 g       *ABS*	00000000 __bss_start
00805858 g     F .text	00000098 memset
0080028c g     F .text	0000006c main
00819a98 g     O .bss	00000004 alt_envp
00819a84 g     O .bss	00000004 __malloc_max_total_mem
00813424 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00813034 g     F .text	00000028 altera_avalon_fifo_read_level
00807550 g     F .text	0000001c __swbuf
00816300 g     O .rodata	00000100 OSUnMapTbl
00817f1a g     O .rwdata	00000002 OSSemEn
00814500 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080ddd0 g     F .text	000003a8 OSFlagPost
008071a4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00807818 g     F .text	00000014 fclose
0080bc54 g     F .text	00000110 OS_EventTaskWait
0080c840 g     F .text	000000c8 OS_TaskStatStkChk
0081ee54 g     O .bss	00000190 _atexit0
00811b08 g     F .text	00000170 OSTaskDelReq
0080275c g     F .text	000015b4 _dtoa_r
00804eb4 g     F .text	00000740 _malloc_r
00817ed0 g     O .rwdata	00000004 alt_errno
0080b728 g     F .text	00000070 OSStart
0080a88c g     F .text	0000005c __env_unlock
00804ba4 g     F .text	000000b8 _fwalk
00811ff4 g     F .text	00000218 OSTaskResume
0080ecec g     F .text	000000fc OSMemQuery
00817f2c g     O .rwdata	00000002 OSTaskStatEn
00817f06 g     O .rwdata	00000002 OSMemMax
0080fc04 g     F .text	00000188 OSQPostFront
008068e4 g     F .text	00000104 putc
00800374 g     F .text	00000060 __divsi3
00819add g     O .bss	00000003 OSRdyTbl
00817ee0 g     O .rwdata	00000002 OSDebugEn
008161cc g     O .rodata	00000014 __thenan_df
0081430c g     F .text	00000040 alt_up_character_lcd_open_dev
00804200 g     F .text	0000012c _malloc_trim_r
00815fc8 g       *ABS*	00000000 __CTOR_END__
00817ef8 g     O .rwdata	00000002 OSFlagNodeSize
00817f40 g     O .rwdata	00000002 OSTmrCfgMax
008142d8 g     F .text	00000034 alt_up_character_lcd_init
008072f0 g     F .text	000000bc strcmp
0080f00c g     F .text	00000214 OSQCreate
00811c78 g     F .text	000001b8 OSTaskNameGet
00815fc8 g       *ABS*	00000000 __flash_rodata_start
0080fd8c g     F .text	00000234 OSQPostOpt
0080b844 g     F .text	00000240 OSTimeTick
00817f28 g     O .rwdata	00000002 OSTaskMax
00815fc8 g       *ABS*	00000000 __DTOR_LIST__
008102ac g     F .text	00000114 OSSemCreate
00817f4c g     O .rwdata	00000002 OSTmrWheelSize
00809134 g     F .text	00000088 __nedf2
00817f22 g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00810b80 g     F .text	00000130 OSSemQuery
0080f220 g     F .text	00000300 OSQDel
0080f908 g     F .text	0000017c OSQPendAbort
00812d8c g     F .text	00000034 alt_irq_init
0080a544 g     F .text	00000060 alt_release_fd
008146f0 g     F .text	00000034 alt_up_character_lcd_cursor_off
008161e0 g     O .rodata	00000100 __clz_tab
00819a78 g     O .bss	00000004 _PathLocale
00815bb0 g     F .text	00000014 atexit
0080756c g     F .text	00000078 _write_r
0080b5b8 g     F .text	0000008c OSSchedLock
00804d04 g     F .text	0000001c setlocale
0080d0a8 g     F .text	0000013c OSFlagCreate
00817ea4 g     O .rwdata	00000004 _impure_ptr
00819a90 g     O .bss	00000004 alt_argc
00814a68 g     F .text	00000064 _do_dtors
00817ef2 g     O .rwdata	00000002 OSEventMultiEn
0080d1e4 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00819ae0 g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
00805aac g     F .text	00000080 __ulp
008070c4 g     F .text	00000040 __isinfd
0080d724 g     F .text	00000644 OSFlagPend
00817f3e g     O .rwdata	00000002 OSTmrEn
0080405c g     F .text	00000018 __fp_unlock_all
00817ebc g     O .rwdata	00000008 alt_fs_list
0080c644 g     F .text	00000080 OS_StrCopy
00817f08 g     O .rwdata	00000002 OSMemNameSize
008158b4 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
00817f34 g     O .rwdata	00000002 OSTCBPrioTblMax
00804c70 g     F .text	00000010 localeconv
00817f30 g     O .rwdata	00000002 OSTaskStatStkChkEn
00813310 g     F .text	00000068 altera_avalon_fifo_write_other_info
00814b90 g     F .text	00000050 alt_ic_isr_register
00817f04 g     O .rwdata	00000002 OSMemEn
00817f0e g     O .rwdata	00000002 OSMutexEn
00817f60 g       *ABS*	00000000 _edata
0081efe4 g       *ABS*	00000000 _end
00819ae4 g     O .bss	00000001 OSIntNesting
011041bc g       *ABS*	00000000 __ram_exceptions_end
00813a98 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00812ab4 g     F .text	00000210 OSTimeDlyResume
0080d5d0 g     F .text	00000154 OSFlagNameSet
0081220c g     F .text	000001fc OSTaskStkChk
00814c7c g     F .text	000000a0 alt_ic_irq_disable
00817f0a g     O .rwdata	00000002 OSMemSize
00807214 g     F .text	0000007c __swrite
00817eb4 g     O .rwdata	00000004 __malloc_trim_threshold
00815404 g     F .text	00000020 altera_nios2_qsys_irq_init
00819ae8 g     O .bss	00000004 OSTCBCur
00815bc4 g     F .text	00000038 exit
00817f0c g     O .rwdata	00000002 OSMemTblSize
00804adc g     F .text	000000c8 _fwalk_reent
008060a8 g     F .text	0000018c __mdiff
008003d4 g     F .text	00000060 __modsi3
00812f64 g     F .text	0000003c altera_avalon_fifo_read_ienable
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00803f9c g     F .text	00000004 __sfp_lock_release
0080b3e8 g     F .text	00000054 OSInit
00812634 g     F .text	00000144 OSTaskQuery
008143c4 g     F .text	00000078 alt_up_character_lcd_string
00810140 g     F .text	000000ac OS_QInit
0080c6c4 g     F .text	00000058 OS_StrLen
0080eadc g     F .text	00000120 OSMemNameSet
00817f26 g     O .rwdata	00000002 OSTaskProfileEn
00819aec g     O .bss	00000004 OSTime
0081d4b0 g     O .bss	00000800 OSTaskIdleStk
00815f98 g     F .text	0000002c _exit
00807104 g     F .text	00000030 __isnand
00814758 g     F .text	00000154 alt_alarm_start
0080d48c g     F .text	00000144 OSFlagNameGet
00812cc4 g     F .text	00000064 OSTimeGet
008096b8 g     F .text	00000098 __muldi3
00812fa0 g     F .text	0000002c altera_avalon_fifo_read_almostfull
00804d20 g     F .text	00000194 __smakebuf_r
008073ac g     F .text	00000074 strlen
00815844 g     F .text	0000001c OSTaskSwHook
00815074 g     F .text	00000188 open
0081dcb0 g     O .bss	00000b40 OSEventTbl
00813248 g     F .text	00000070 altera_avalon_read_fifo
00809244 g     F .text	00000088 __gedf2
0081e7f0 g     O .bss	00000510 OSTCBTbl
00810cb0 g     F .text	00000104 OSSemSet
00814b60 g     F .text	00000030 alt_icache_flush_all
00814488 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00817f54 g     O .rwdata	00000004 alt_priority_mask
008103c0 g     F .text	000002a0 OSSemDel
00819af0 g     O .bss	00000004 OSFlagFreeList
00814be0 g     F .text	0000009c alt_ic_irq_enable
00817eec g     O .rwdata	00000002 OSEventNameSize
008023e4 g     F .text	00000024 __vfprintf_internal
00819af4 g     O .bss	00000001 OSStatRdy
0081ed00 g     O .bss	00000054 OSTCBPrioTbl
0080a7e0 g     F .text	000000ac __env_lock
00817f32 g     O .rwdata	00000002 OSTaskSwHookEn
0080899c g     F .text	00000080 __subdf3
00805988 g     F .text	000000c4 __lo0bits
00813184 g     F .text	00000060 altera_avalon_fifo_write_almostempty
00817f58 g     O .rwdata	00000008 alt_alarm_list
00817efa g     O .rwdata	00000002 OSFlagWidth
00814a04 g     F .text	00000064 _do_ctors
00809ce4 g     F .text	000000fc close
00819aa0 g     O .bss	00000004 alt_envsem
00819af8 g     O .bss	00000004 OSIdleCtrRun
0080ba84 g     F .text	00000020 OSVersion
00817f44 g     O .rwdata	00000002 OSTmrCfgWheelSize
0080a0c0 g     F .text	00000080 alt_load
00812778 g     F .text	0000007c OS_TaskStkClr
008097d0 g     F .text	00000314 __pack_d
00817f1e g     O .rwdata	00000002 OSTaskCreateEn
0080c074 g     F .text	00000068 OS_EventWaitListInit
008158d0 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00803fa0 g     F .text	00000004 __sinit_lock_acquire
008065a4 g     F .text	00000100 __multadd
00812408 g     F .text	0000022c OSTaskSuspend
008058f0 g     F .text	00000028 _Bfree
0080c71c g     F .text	0000005c OS_TaskIdle
00817f4a g     O .rwdata	00000002 OSTmrTblSize
0080ffc0 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1104000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 110400c:	00bffd16 	blt	zero,r2,1104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104014:	08406714 	ori	at,at,412
    jmp r1
 1104018:	0800683a 	jmp	at
 110401c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	080b43c0 	call	80b43c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000161e 	bne	r2,zero,1104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020b4 	movhi	r3,130
 1104138:	18fb5504 	addi	r3,r3,-4780
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11400017 	ldw	r5,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020b4 	movhi	r3,130
 1104150:	18fb5504 	addi	r3,r3,-4780
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104168:	0005313a 	rdctl	r2,ipending
 110416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1104178:	e0bfff17 	ldw	r2,-4(fp)
 110417c:	1004c03a 	cmpne	r2,r2,zero
 1104180:	103fe31e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104184:	00000706 	br	11041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1104188:	e0bffe17 	ldw	r2,-8(fp)
 110418c:	1085883a 	add	r2,r2,r2
 1104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104194:	e0bffd17 	ldw	r2,-12(fp)
 1104198:	10800044 	addi	r2,r2,1
 110419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a0:	003fde06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a4:	080b4b80 	call	80b4b8 <OSIntExit>
}
 11041a8:	e037883a 	mov	sp,fp
 11041ac:	dfc00117 	ldw	ra,4(sp)
 11041b0:	df000017 	ldw	fp,0(sp)
 11041b4:	dec00204 	addi	sp,sp,8
 11041b8:	f800283a 	ret

Disassembly of section .text:

0080019c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  80019c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001a0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001a4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001a8:	00bffd16 	blt	zero,r2,8001a0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001ac:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001b4:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b8:	d6bfa914 	ori	gp,gp,65188
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001bc:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c0:	10a69c14 	ori	r2,r2,39536

    movhi r3, %hi(__bss_end)
  8001c4:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001c8:	18fbf914 	ori	r3,r3,61412

    beq r2, r3, 1f
  8001cc:	10c00326 	beq	r2,r3,8001dc <_start+0x40>

0:
    stw zero, (r2)
  8001d0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001d4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d8:	10fffd36 	bltu	r2,r3,8001d0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001dc:	080a0c00 	call	80a0c0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e0:	080a2fc0 	call	80a2fc <alt_main>

008001e4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001e4:	003fff06 	br	8001e4 <alt_after_alt_main>

008001e8 <task1>:
/* Definition of Task Priorities */

#define TASK1_PRIORITY      1

void task1(void* pdata)
{
  8001e8:	defffa04 	addi	sp,sp,-24
  8001ec:	dfc00515 	stw	ra,20(sp)
  8001f0:	df000415 	stw	fp,16(sp)
  8001f4:	df000404 	addi	fp,sp,16
  8001f8:	e13fff15 	stw	r4,-4(fp)


	altera_avalon_fifo_init(FIFO_0_OUT_CSR_BASE, 0x0, 10, FIFO_0_OUT_CSR_FIFO_DEPTH-10);
  8001fc:	01004474 	movhi	r4,273
  800200:	21240804 	addi	r4,r4,-28640
  800204:	000b883a 	mov	r5,zero
  800208:	01800284 	movi	r6,10
  80020c:	01c01d84 	movi	r7,118
  800210:	0812e6c0 	call	812e6c <altera_avalon_fifo_init>
  800214:	00000006 	br	800218 <task1+0x30>
	unsigned int data;
	unsigned int temp;
	int counter;
	while (1){

		temp = altera_avalon_fifo_read_fifo(FIFO_0_OUT_BASE, FIFO_0_OUT_CSR_BASE);
  800218:	01004474 	movhi	r4,273
  80021c:	21241c04 	addi	r4,r4,-28560
  800220:	01404474 	movhi	r5,273
  800224:	29640804 	addi	r5,r5,-28640
  800228:	08132b80 	call	8132b8 <altera_avalon_fifo_read_fifo>
  80022c:	e0bffd15 	stw	r2,-12(fp)

		if (temp!=0){							//if there is new data
  800230:	e0bffd17 	ldw	r2,-12(fp)
  800234:	1005003a 	cmpeq	r2,r2,zero
  800238:	10000c1e 	bne	r2,zero,80026c <task1+0x84>
			data = temp;
  80023c:	e0bffd17 	ldw	r2,-12(fp)
  800240:	e0bffe15 	stw	r2,-8(fp)
			if (data!=0x12300000){				//check if data is corrupted.
  800244:	e0fffe17 	ldw	r3,-8(fp)
  800248:	00848c34 	movhi	r2,4656
  80024c:	18800426 	beq	r3,r2,800260 <task1+0x78>
				printf("\n[error]%x\n",data);
  800250:	01002074 	movhi	r4,129
  800254:	2117f204 	addi	r4,r4,24520
  800258:	e17ffe17 	ldw	r5,-8(fp)
  80025c:	08004440 	call	800444 <printf>
			}
			counter ++;							//increment everytime new data comes in
  800260:	e0bffc17 	ldw	r2,-16(fp)
  800264:	10800044 	addi	r2,r2,1
  800268:	e0bffc15 	stw	r2,-16(fp)
		}

		if (counter%40000==0){					//40000 for slowing down the printf
  80026c:	e13ffc17 	ldw	r4,-16(fp)
  800270:	01671014 	movui	r5,40000
  800274:	08003d40 	call	8003d4 <__modsi3>
  800278:	1004c03a 	cmpne	r2,r2,zero
  80027c:	103fe61e 	bne	r2,zero,800218 <task1+0x30>
			printf(".");						//print dot to indicate the program is still running
  800280:	01000b84 	movi	r4,46
  800284:	08004bc0 	call	8004bc <putchar>
		}


	}
  800288:	003fe306 	br	800218 <task1+0x30>

0080028c <main>:
}


int main(void)
{
  80028c:	defff904 	addi	sp,sp,-28
  800290:	dfc00615 	stw	ra,24(sp)
  800294:	df000515 	stw	fp,20(sp)
  800298:	df000504 	addi	fp,sp,20
  OSTaskCreateExt(task1,
  80029c:	018020b4 	movhi	r6,130
  8002a0:	31aecb04 	addi	r6,r6,-17620
  8002a4:	00800044 	movi	r2,1
  8002a8:	d8800015 	stw	r2,0(sp)
  8002ac:	008020b4 	movhi	r2,130
  8002b0:	10a6cc04 	addi	r2,r2,-25808
  8002b4:	d8800115 	stw	r2,4(sp)
  8002b8:	00820004 	movi	r2,2048
  8002bc:	d8800215 	stw	r2,8(sp)
  8002c0:	d8000315 	stw	zero,12(sp)
  8002c4:	d8000415 	stw	zero,16(sp)
  8002c8:	01002034 	movhi	r4,128
  8002cc:	21007a04 	addi	r4,r4,488
  8002d0:	000b883a 	mov	r5,zero
  8002d4:	01c00044 	movi	r7,1
  8002d8:	08114fc0 	call	8114fc <OSTaskCreateExt>
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
  8002dc:	080b7280 	call	80b728 <OSStart>
  return 0;
  8002e0:	0005883a 	mov	r2,zero
}
  8002e4:	e037883a 	mov	sp,fp
  8002e8:	dfc00117 	ldw	ra,4(sp)
  8002ec:	df000017 	ldw	fp,0(sp)
  8002f0:	dec00204 	addi	sp,sp,8
  8002f4:	f800283a 	ret

008002f8 <udivmodsi4>:
  8002f8:	29001b2e 	bgeu	r5,r4,800368 <udivmodsi4+0x70>
  8002fc:	28001a16 	blt	r5,zero,800368 <udivmodsi4+0x70>
  800300:	00800044 	movi	r2,1
  800304:	0007883a 	mov	r3,zero
  800308:	01c007c4 	movi	r7,31
  80030c:	00000306 	br	80031c <udivmodsi4+0x24>
  800310:	19c01326 	beq	r3,r7,800360 <udivmodsi4+0x68>
  800314:	18c00044 	addi	r3,r3,1
  800318:	28000416 	blt	r5,zero,80032c <udivmodsi4+0x34>
  80031c:	294b883a 	add	r5,r5,r5
  800320:	1085883a 	add	r2,r2,r2
  800324:	293ffa36 	bltu	r5,r4,800310 <udivmodsi4+0x18>
  800328:	10000d26 	beq	r2,zero,800360 <udivmodsi4+0x68>
  80032c:	0007883a 	mov	r3,zero
  800330:	21400236 	bltu	r4,r5,80033c <udivmodsi4+0x44>
  800334:	2149c83a 	sub	r4,r4,r5
  800338:	1886b03a 	or	r3,r3,r2
  80033c:	1004d07a 	srli	r2,r2,1
  800340:	280ad07a 	srli	r5,r5,1
  800344:	103ffa1e 	bne	r2,zero,800330 <udivmodsi4+0x38>
  800348:	30000226 	beq	r6,zero,800354 <udivmodsi4+0x5c>
  80034c:	2005883a 	mov	r2,r4
  800350:	f800283a 	ret
  800354:	1809883a 	mov	r4,r3
  800358:	2005883a 	mov	r2,r4
  80035c:	f800283a 	ret
  800360:	0007883a 	mov	r3,zero
  800364:	003ff806 	br	800348 <udivmodsi4+0x50>
  800368:	00800044 	movi	r2,1
  80036c:	0007883a 	mov	r3,zero
  800370:	003fef06 	br	800330 <udivmodsi4+0x38>

00800374 <__divsi3>:
  800374:	defffe04 	addi	sp,sp,-8
  800378:	dc000015 	stw	r16,0(sp)
  80037c:	dfc00115 	stw	ra,4(sp)
  800380:	0021883a 	mov	r16,zero
  800384:	20000c16 	blt	r4,zero,8003b8 <__divsi3+0x44>
  800388:	000d883a 	mov	r6,zero
  80038c:	28000e16 	blt	r5,zero,8003c8 <__divsi3+0x54>
  800390:	08002f80 	call	8002f8 <udivmodsi4>
  800394:	1007883a 	mov	r3,r2
  800398:	8005003a 	cmpeq	r2,r16,zero
  80039c:	1000011e 	bne	r2,zero,8003a4 <__divsi3+0x30>
  8003a0:	00c7c83a 	sub	r3,zero,r3
  8003a4:	1805883a 	mov	r2,r3
  8003a8:	dfc00117 	ldw	ra,4(sp)
  8003ac:	dc000017 	ldw	r16,0(sp)
  8003b0:	dec00204 	addi	sp,sp,8
  8003b4:	f800283a 	ret
  8003b8:	0109c83a 	sub	r4,zero,r4
  8003bc:	04000044 	movi	r16,1
  8003c0:	000d883a 	mov	r6,zero
  8003c4:	283ff20e 	bge	r5,zero,800390 <__divsi3+0x1c>
  8003c8:	014bc83a 	sub	r5,zero,r5
  8003cc:	8021003a 	cmpeq	r16,r16,zero
  8003d0:	003fef06 	br	800390 <__divsi3+0x1c>

008003d4 <__modsi3>:
  8003d4:	deffff04 	addi	sp,sp,-4
  8003d8:	dfc00015 	stw	ra,0(sp)
  8003dc:	01800044 	movi	r6,1
  8003e0:	2807883a 	mov	r3,r5
  8003e4:	20000416 	blt	r4,zero,8003f8 <__modsi3+0x24>
  8003e8:	28000c16 	blt	r5,zero,80041c <__modsi3+0x48>
  8003ec:	dfc00017 	ldw	ra,0(sp)
  8003f0:	dec00104 	addi	sp,sp,4
  8003f4:	08002f81 	jmpi	8002f8 <udivmodsi4>
  8003f8:	0109c83a 	sub	r4,zero,r4
  8003fc:	28000b16 	blt	r5,zero,80042c <__modsi3+0x58>
  800400:	180b883a 	mov	r5,r3
  800404:	01800044 	movi	r6,1
  800408:	08002f80 	call	8002f8 <udivmodsi4>
  80040c:	0085c83a 	sub	r2,zero,r2
  800410:	dfc00017 	ldw	ra,0(sp)
  800414:	dec00104 	addi	sp,sp,4
  800418:	f800283a 	ret
  80041c:	014bc83a 	sub	r5,zero,r5
  800420:	dfc00017 	ldw	ra,0(sp)
  800424:	dec00104 	addi	sp,sp,4
  800428:	08002f81 	jmpi	8002f8 <udivmodsi4>
  80042c:	0147c83a 	sub	r3,zero,r5
  800430:	003ff306 	br	800400 <__modsi3+0x2c>

00800434 <__udivsi3>:
  800434:	000d883a 	mov	r6,zero
  800438:	08002f81 	jmpi	8002f8 <udivmodsi4>

0080043c <__umodsi3>:
  80043c:	01800044 	movi	r6,1
  800440:	08002f81 	jmpi	8002f8 <udivmodsi4>

00800444 <printf>:
  800444:	defffb04 	addi	sp,sp,-20
  800448:	dfc00115 	stw	ra,4(sp)
  80044c:	d9400215 	stw	r5,8(sp)
  800450:	d9800315 	stw	r6,12(sp)
  800454:	d9c00415 	stw	r7,16(sp)
  800458:	00802074 	movhi	r2,129
  80045c:	109fa904 	addi	r2,r2,32420
  800460:	10c00017 	ldw	r3,0(r2)
  800464:	200b883a 	mov	r5,r4
  800468:	d8800204 	addi	r2,sp,8
  80046c:	19000217 	ldw	r4,8(r3)
  800470:	100d883a 	mov	r6,r2
  800474:	d8800015 	stw	r2,0(sp)
  800478:	08023e40 	call	8023e4 <__vfprintf_internal>
  80047c:	dfc00117 	ldw	ra,4(sp)
  800480:	dec00504 	addi	sp,sp,20
  800484:	f800283a 	ret

00800488 <_printf_r>:
  800488:	defffc04 	addi	sp,sp,-16
  80048c:	dfc00115 	stw	ra,4(sp)
  800490:	d9800215 	stw	r6,8(sp)
  800494:	d9c00315 	stw	r7,12(sp)
  800498:	280d883a 	mov	r6,r5
  80049c:	21400217 	ldw	r5,8(r4)
  8004a0:	d8c00204 	addi	r3,sp,8
  8004a4:	180f883a 	mov	r7,r3
  8004a8:	d8c00015 	stw	r3,0(sp)
  8004ac:	08005380 	call	800538 <___vfprintf_internal_r>
  8004b0:	dfc00117 	ldw	ra,4(sp)
  8004b4:	dec00404 	addi	sp,sp,16
  8004b8:	f800283a 	ret

008004bc <putchar>:
  8004bc:	00802074 	movhi	r2,129
  8004c0:	109fa904 	addi	r2,r2,32420
  8004c4:	11800017 	ldw	r6,0(r2)
  8004c8:	200b883a 	mov	r5,r4
  8004cc:	3009883a 	mov	r4,r6
  8004d0:	31800217 	ldw	r6,8(r6)
  8004d4:	08069e81 	jmpi	8069e8 <_putc_r>

008004d8 <_putchar_r>:
  8004d8:	21800217 	ldw	r6,8(r4)
  8004dc:	08069e81 	jmpi	8069e8 <_putc_r>

008004e0 <__sprint_r>:
  8004e0:	30800217 	ldw	r2,8(r6)
  8004e4:	defffe04 	addi	sp,sp,-8
  8004e8:	dc000015 	stw	r16,0(sp)
  8004ec:	dfc00115 	stw	ra,4(sp)
  8004f0:	3021883a 	mov	r16,r6
  8004f4:	0007883a 	mov	r3,zero
  8004f8:	1000061e 	bne	r2,zero,800514 <__sprint_r+0x34>
  8004fc:	1805883a 	mov	r2,r3
  800500:	30000115 	stw	zero,4(r6)
  800504:	dfc00117 	ldw	ra,4(sp)
  800508:	dc000017 	ldw	r16,0(sp)
  80050c:	dec00204 	addi	sp,sp,8
  800510:	f800283a 	ret
  800514:	08046400 	call	804640 <__sfvwrite_r>
  800518:	1007883a 	mov	r3,r2
  80051c:	1805883a 	mov	r2,r3
  800520:	80000115 	stw	zero,4(r16)
  800524:	80000215 	stw	zero,8(r16)
  800528:	dfc00117 	ldw	ra,4(sp)
  80052c:	dc000017 	ldw	r16,0(sp)
  800530:	dec00204 	addi	sp,sp,8
  800534:	f800283a 	ret

00800538 <___vfprintf_internal_r>:
  800538:	defea404 	addi	sp,sp,-1392
  80053c:	dd815815 	stw	r22,1376(sp)
  800540:	dc015215 	stw	r16,1352(sp)
  800544:	d9c15115 	stw	r7,1348(sp)
  800548:	dfc15b15 	stw	ra,1388(sp)
  80054c:	df015a15 	stw	fp,1384(sp)
  800550:	ddc15915 	stw	r23,1380(sp)
  800554:	dd415715 	stw	r21,1372(sp)
  800558:	dd015615 	stw	r20,1368(sp)
  80055c:	dcc15515 	stw	r19,1364(sp)
  800560:	dc815415 	stw	r18,1360(sp)
  800564:	dc415315 	stw	r17,1356(sp)
  800568:	282d883a 	mov	r22,r5
  80056c:	3021883a 	mov	r16,r6
  800570:	d9014f15 	stw	r4,1340(sp)
  800574:	0804c640 	call	804c64 <_localeconv_r>
  800578:	10800017 	ldw	r2,0(r2)
  80057c:	d9c15117 	ldw	r7,1348(sp)
  800580:	d8814915 	stw	r2,1316(sp)
  800584:	d8814f17 	ldw	r2,1340(sp)
  800588:	10000226 	beq	r2,zero,800594 <___vfprintf_internal_r+0x5c>
  80058c:	10800e17 	ldw	r2,56(r2)
  800590:	10020d26 	beq	r2,zero,800dc8 <___vfprintf_internal_r+0x890>
  800594:	b080030b 	ldhu	r2,12(r22)
  800598:	1080020c 	andi	r2,r2,8
  80059c:	10020e26 	beq	r2,zero,800dd8 <___vfprintf_internal_r+0x8a0>
  8005a0:	b0800417 	ldw	r2,16(r22)
  8005a4:	10020c26 	beq	r2,zero,800dd8 <___vfprintf_internal_r+0x8a0>
  8005a8:	b200030b 	ldhu	r8,12(r22)
  8005ac:	00800284 	movi	r2,10
  8005b0:	40c0068c 	andi	r3,r8,26
  8005b4:	18802f1e 	bne	r3,r2,800674 <___vfprintf_internal_r+0x13c>
  8005b8:	b080038f 	ldh	r2,14(r22)
  8005bc:	10002d16 	blt	r2,zero,800674 <___vfprintf_internal_r+0x13c>
  8005c0:	b240038b 	ldhu	r9,14(r22)
  8005c4:	b2800717 	ldw	r10,28(r22)
  8005c8:	b2c00917 	ldw	r11,36(r22)
  8005cc:	d9014f17 	ldw	r4,1340(sp)
  8005d0:	dc402904 	addi	r17,sp,164
  8005d4:	d8804004 	addi	r2,sp,256
  8005d8:	00c10004 	movi	r3,1024
  8005dc:	423fff4c 	andi	r8,r8,65533
  8005e0:	800d883a 	mov	r6,r16
  8005e4:	880b883a 	mov	r5,r17
  8005e8:	da002c0d 	sth	r8,176(sp)
  8005ec:	da402c8d 	sth	r9,178(sp)
  8005f0:	da803015 	stw	r10,192(sp)
  8005f4:	dac03215 	stw	r11,200(sp)
  8005f8:	d8802d15 	stw	r2,180(sp)
  8005fc:	d8c02e15 	stw	r3,184(sp)
  800600:	d8802915 	stw	r2,164(sp)
  800604:	d8c02b15 	stw	r3,172(sp)
  800608:	d8002f15 	stw	zero,188(sp)
  80060c:	08005380 	call	800538 <___vfprintf_internal_r>
  800610:	d8814b15 	stw	r2,1324(sp)
  800614:	10000416 	blt	r2,zero,800628 <___vfprintf_internal_r+0xf0>
  800618:	d9014f17 	ldw	r4,1340(sp)
  80061c:	880b883a 	mov	r5,r17
  800620:	0803d100 	call	803d10 <_fflush_r>
  800624:	1002321e 	bne	r2,zero,800ef0 <___vfprintf_internal_r+0x9b8>
  800628:	d8802c0b 	ldhu	r2,176(sp)
  80062c:	1080100c 	andi	r2,r2,64
  800630:	10000326 	beq	r2,zero,800640 <___vfprintf_internal_r+0x108>
  800634:	b080030b 	ldhu	r2,12(r22)
  800638:	10801014 	ori	r2,r2,64
  80063c:	b080030d 	sth	r2,12(r22)
  800640:	d8814b17 	ldw	r2,1324(sp)
  800644:	dfc15b17 	ldw	ra,1388(sp)
  800648:	df015a17 	ldw	fp,1384(sp)
  80064c:	ddc15917 	ldw	r23,1380(sp)
  800650:	dd815817 	ldw	r22,1376(sp)
  800654:	dd415717 	ldw	r21,1372(sp)
  800658:	dd015617 	ldw	r20,1368(sp)
  80065c:	dcc15517 	ldw	r19,1364(sp)
  800660:	dc815417 	ldw	r18,1360(sp)
  800664:	dc415317 	ldw	r17,1356(sp)
  800668:	dc015217 	ldw	r16,1352(sp)
  80066c:	dec15c04 	addi	sp,sp,1392
  800670:	f800283a 	ret
  800674:	0005883a 	mov	r2,zero
  800678:	0007883a 	mov	r3,zero
  80067c:	dd401904 	addi	r21,sp,100
  800680:	d8814215 	stw	r2,1288(sp)
  800684:	802f883a 	mov	r23,r16
  800688:	d8c14315 	stw	r3,1292(sp)
  80068c:	d8014b15 	stw	zero,1324(sp)
  800690:	d8014815 	stw	zero,1312(sp)
  800694:	d8014415 	stw	zero,1296(sp)
  800698:	d8014715 	stw	zero,1308(sp)
  80069c:	dd400c15 	stw	r21,48(sp)
  8006a0:	d8000e15 	stw	zero,56(sp)
  8006a4:	d8000d15 	stw	zero,52(sp)
  8006a8:	b8800007 	ldb	r2,0(r23)
  8006ac:	10001926 	beq	r2,zero,800714 <___vfprintf_internal_r+0x1dc>
  8006b0:	00c00944 	movi	r3,37
  8006b4:	10c01726 	beq	r2,r3,800714 <___vfprintf_internal_r+0x1dc>
  8006b8:	b821883a 	mov	r16,r23
  8006bc:	00000106 	br	8006c4 <___vfprintf_internal_r+0x18c>
  8006c0:	10c00326 	beq	r2,r3,8006d0 <___vfprintf_internal_r+0x198>
  8006c4:	84000044 	addi	r16,r16,1
  8006c8:	80800007 	ldb	r2,0(r16)
  8006cc:	103ffc1e 	bne	r2,zero,8006c0 <___vfprintf_internal_r+0x188>
  8006d0:	85e7c83a 	sub	r19,r16,r23
  8006d4:	98000e26 	beq	r19,zero,800710 <___vfprintf_internal_r+0x1d8>
  8006d8:	dc800e17 	ldw	r18,56(sp)
  8006dc:	dc400d17 	ldw	r17,52(sp)
  8006e0:	008001c4 	movi	r2,7
  8006e4:	94e5883a 	add	r18,r18,r19
  8006e8:	8c400044 	addi	r17,r17,1
  8006ec:	adc00015 	stw	r23,0(r21)
  8006f0:	dc800e15 	stw	r18,56(sp)
  8006f4:	acc00115 	stw	r19,4(r21)
  8006f8:	dc400d15 	stw	r17,52(sp)
  8006fc:	14428b16 	blt	r2,r17,80112c <___vfprintf_internal_r+0xbf4>
  800700:	ad400204 	addi	r21,r21,8
  800704:	d9014b17 	ldw	r4,1324(sp)
  800708:	24c9883a 	add	r4,r4,r19
  80070c:	d9014b15 	stw	r4,1324(sp)
  800710:	802f883a 	mov	r23,r16
  800714:	b8800007 	ldb	r2,0(r23)
  800718:	10013c26 	beq	r2,zero,800c0c <___vfprintf_internal_r+0x6d4>
  80071c:	bdc00044 	addi	r23,r23,1
  800720:	d8000405 	stb	zero,16(sp)
  800724:	b8c00007 	ldb	r3,0(r23)
  800728:	04ffffc4 	movi	r19,-1
  80072c:	d8014c15 	stw	zero,1328(sp)
  800730:	d8014a15 	stw	zero,1320(sp)
  800734:	d8c14d15 	stw	r3,1332(sp)
  800738:	bdc00044 	addi	r23,r23,1
  80073c:	d9414d17 	ldw	r5,1332(sp)
  800740:	00801604 	movi	r2,88
  800744:	28fff804 	addi	r3,r5,-32
  800748:	10c06036 	bltu	r2,r3,8008cc <___vfprintf_internal_r+0x394>
  80074c:	18c5883a 	add	r2,r3,r3
  800750:	1085883a 	add	r2,r2,r2
  800754:	00c02034 	movhi	r3,128
  800758:	18c1da04 	addi	r3,r3,1896
  80075c:	10c5883a 	add	r2,r2,r3
  800760:	11000017 	ldw	r4,0(r2)
  800764:	2000683a 	jmp	r4
  800768:	008016dc 	xori	r2,zero,91
  80076c:	008008cc 	andi	r2,zero,35
  800770:	008008cc 	andi	r2,zero,35
  800774:	008016c8 	cmpgei	r2,zero,91
  800778:	008008cc 	andi	r2,zero,35
  80077c:	008008cc 	andi	r2,zero,35
  800780:	008008cc 	andi	r2,zero,35
  800784:	008008cc 	andi	r2,zero,35
  800788:	008008cc 	andi	r2,zero,35
  80078c:	008008cc 	andi	r2,zero,35
  800790:	008014a8 	cmpgeui	r2,zero,82
  800794:	008016b8 	rdprs	r2,zero,90
  800798:	008008cc 	andi	r2,zero,35
  80079c:	008014c0 	call	8014c <OSCtxSw_SWITCH_PC+0x8010c>
  8007a0:	00801754 	movui	r2,93
  8007a4:	008008cc 	andi	r2,zero,35
  8007a8:	00801740 	call	80174 <OSCtxSw_SWITCH_PC+0x80134>
  8007ac:	00801708 	cmpgei	r2,zero,92
  8007b0:	00801708 	cmpgei	r2,zero,92
  8007b4:	00801708 	cmpgei	r2,zero,92
  8007b8:	00801708 	cmpgei	r2,zero,92
  8007bc:	00801708 	cmpgei	r2,zero,92
  8007c0:	00801708 	cmpgei	r2,zero,92
  8007c4:	00801708 	cmpgei	r2,zero,92
  8007c8:	00801708 	cmpgei	r2,zero,92
  8007cc:	00801708 	cmpgei	r2,zero,92
  8007d0:	008008cc 	andi	r2,zero,35
  8007d4:	008008cc 	andi	r2,zero,35
  8007d8:	008008cc 	andi	r2,zero,35
  8007dc:	008008cc 	andi	r2,zero,35
  8007e0:	008008cc 	andi	r2,zero,35
  8007e4:	008008cc 	andi	r2,zero,35
  8007e8:	008008cc 	andi	r2,zero,35
  8007ec:	008008cc 	andi	r2,zero,35
  8007f0:	008008cc 	andi	r2,zero,35
  8007f4:	008008cc 	andi	r2,zero,35
  8007f8:	00800f24 	muli	r2,zero,60
  8007fc:	00801590 	cmplti	r2,zero,86
  800800:	008008cc 	andi	r2,zero,35
  800804:	00801590 	cmplti	r2,zero,86
  800808:	008008cc 	andi	r2,zero,35
  80080c:	008008cc 	andi	r2,zero,35
  800810:	008008cc 	andi	r2,zero,35
  800814:	008008cc 	andi	r2,zero,35
  800818:	008016f4 	movhi	r2,91
  80081c:	008008cc 	andi	r2,zero,35
  800820:	008008cc 	andi	r2,zero,35
  800824:	00800fd8 	cmpnei	r2,zero,63
  800828:	008008cc 	andi	r2,zero,35
  80082c:	008008cc 	andi	r2,zero,35
  800830:	008008cc 	andi	r2,zero,35
  800834:	008008cc 	andi	r2,zero,35
  800838:	008008cc 	andi	r2,zero,35
  80083c:	00801024 	muli	r2,zero,64
  800840:	008008cc 	andi	r2,zero,35
  800844:	008008cc 	andi	r2,zero,35
  800848:	00801644 	movi	r2,89
  80084c:	008008cc 	andi	r2,zero,35
  800850:	008008cc 	andi	r2,zero,35
  800854:	008008cc 	andi	r2,zero,35
  800858:	008008cc 	andi	r2,zero,35
  80085c:	008008cc 	andi	r2,zero,35
  800860:	008008cc 	andi	r2,zero,35
  800864:	008008cc 	andi	r2,zero,35
  800868:	008008cc 	andi	r2,zero,35
  80086c:	008008cc 	andi	r2,zero,35
  800870:	008008cc 	andi	r2,zero,35
  800874:	00801618 	cmpnei	r2,zero,88
  800878:	00800f30 	cmpltui	r2,zero,60
  80087c:	00801590 	cmplti	r2,zero,86
  800880:	00801590 	cmplti	r2,zero,86
  800884:	00801590 	cmplti	r2,zero,86
  800888:	0080157c 	xorhi	r2,zero,85
  80088c:	00800f30 	cmpltui	r2,zero,60
  800890:	008008cc 	andi	r2,zero,35
  800894:	008008cc 	andi	r2,zero,35
  800898:	00801504 	movi	r2,84
  80089c:	008008cc 	andi	r2,zero,35
  8008a0:	008014d4 	movui	r2,83
  8008a4:	00800fe4 	muli	r2,zero,63
  8008a8:	00801534 	movhi	r2,84
  8008ac:	00801520 	cmpeqi	r2,zero,84
  8008b0:	008008cc 	andi	r2,zero,35
  8008b4:	008017b0 	cmpltui	r2,zero,94
  8008b8:	008008cc 	andi	r2,zero,35
  8008bc:	00801030 	cmpltui	r2,zero,64
  8008c0:	008008cc 	andi	r2,zero,35
  8008c4:	008008cc 	andi	r2,zero,35
  8008c8:	008016a8 	cmpgeui	r2,zero,90
  8008cc:	d9014d17 	ldw	r4,1332(sp)
  8008d0:	2000ce26 	beq	r4,zero,800c0c <___vfprintf_internal_r+0x6d4>
  8008d4:	01400044 	movi	r5,1
  8008d8:	d9800f04 	addi	r6,sp,60
  8008dc:	d9c14015 	stw	r7,1280(sp)
  8008e0:	d9414515 	stw	r5,1300(sp)
  8008e4:	d9814115 	stw	r6,1284(sp)
  8008e8:	280f883a 	mov	r7,r5
  8008ec:	d9000f05 	stb	r4,60(sp)
  8008f0:	d8000405 	stb	zero,16(sp)
  8008f4:	d8014615 	stw	zero,1304(sp)
  8008f8:	d8c14c17 	ldw	r3,1328(sp)
  8008fc:	1880008c 	andi	r2,r3,2
  800900:	1005003a 	cmpeq	r2,r2,zero
  800904:	d8815015 	stw	r2,1344(sp)
  800908:	1000031e 	bne	r2,zero,800918 <___vfprintf_internal_r+0x3e0>
  80090c:	d9014517 	ldw	r4,1300(sp)
  800910:	21000084 	addi	r4,r4,2
  800914:	d9014515 	stw	r4,1300(sp)
  800918:	d9414c17 	ldw	r5,1328(sp)
  80091c:	2940210c 	andi	r5,r5,132
  800920:	d9414e15 	stw	r5,1336(sp)
  800924:	28002d1e 	bne	r5,zero,8009dc <___vfprintf_internal_r+0x4a4>
  800928:	d9814a17 	ldw	r6,1320(sp)
  80092c:	d8814517 	ldw	r2,1300(sp)
  800930:	30a1c83a 	sub	r16,r6,r2
  800934:	0400290e 	bge	zero,r16,8009dc <___vfprintf_internal_r+0x4a4>
  800938:	00800404 	movi	r2,16
  80093c:	1404580e 	bge	r2,r16,801aa0 <___vfprintf_internal_r+0x1568>
  800940:	dc800e17 	ldw	r18,56(sp)
  800944:	dc400d17 	ldw	r17,52(sp)
  800948:	1027883a 	mov	r19,r2
  80094c:	07002074 	movhi	fp,129
  800950:	e7181084 	addi	fp,fp,24642
  800954:	050001c4 	movi	r20,7
  800958:	00000306 	br	800968 <___vfprintf_internal_r+0x430>
  80095c:	843ffc04 	addi	r16,r16,-16
  800960:	ad400204 	addi	r21,r21,8
  800964:	9c00130e 	bge	r19,r16,8009b4 <___vfprintf_internal_r+0x47c>
  800968:	94800404 	addi	r18,r18,16
  80096c:	8c400044 	addi	r17,r17,1
  800970:	af000015 	stw	fp,0(r21)
  800974:	acc00115 	stw	r19,4(r21)
  800978:	dc800e15 	stw	r18,56(sp)
  80097c:	dc400d15 	stw	r17,52(sp)
  800980:	a47ff60e 	bge	r20,r17,80095c <___vfprintf_internal_r+0x424>
  800984:	d9014f17 	ldw	r4,1340(sp)
  800988:	b00b883a 	mov	r5,r22
  80098c:	d9800c04 	addi	r6,sp,48
  800990:	d9c15115 	stw	r7,1348(sp)
  800994:	08004e00 	call	8004e0 <__sprint_r>
  800998:	d9c15117 	ldw	r7,1348(sp)
  80099c:	10009e1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  8009a0:	843ffc04 	addi	r16,r16,-16
  8009a4:	dc800e17 	ldw	r18,56(sp)
  8009a8:	dc400d17 	ldw	r17,52(sp)
  8009ac:	dd401904 	addi	r21,sp,100
  8009b0:	9c3fed16 	blt	r19,r16,800968 <___vfprintf_internal_r+0x430>
  8009b4:	9425883a 	add	r18,r18,r16
  8009b8:	8c400044 	addi	r17,r17,1
  8009bc:	008001c4 	movi	r2,7
  8009c0:	af000015 	stw	fp,0(r21)
  8009c4:	ac000115 	stw	r16,4(r21)
  8009c8:	dc800e15 	stw	r18,56(sp)
  8009cc:	dc400d15 	stw	r17,52(sp)
  8009d0:	1441f516 	blt	r2,r17,8011a8 <___vfprintf_internal_r+0xc70>
  8009d4:	ad400204 	addi	r21,r21,8
  8009d8:	00000206 	br	8009e4 <___vfprintf_internal_r+0x4ac>
  8009dc:	dc800e17 	ldw	r18,56(sp)
  8009e0:	dc400d17 	ldw	r17,52(sp)
  8009e4:	d8800407 	ldb	r2,16(sp)
  8009e8:	10000b26 	beq	r2,zero,800a18 <___vfprintf_internal_r+0x4e0>
  8009ec:	00800044 	movi	r2,1
  8009f0:	94800044 	addi	r18,r18,1
  8009f4:	8c400044 	addi	r17,r17,1
  8009f8:	a8800115 	stw	r2,4(r21)
  8009fc:	d8c00404 	addi	r3,sp,16
  800a00:	008001c4 	movi	r2,7
  800a04:	a8c00015 	stw	r3,0(r21)
  800a08:	dc800e15 	stw	r18,56(sp)
  800a0c:	dc400d15 	stw	r17,52(sp)
  800a10:	1441da16 	blt	r2,r17,80117c <___vfprintf_internal_r+0xc44>
  800a14:	ad400204 	addi	r21,r21,8
  800a18:	d9015017 	ldw	r4,1344(sp)
  800a1c:	20000b1e 	bne	r4,zero,800a4c <___vfprintf_internal_r+0x514>
  800a20:	d8800444 	addi	r2,sp,17
  800a24:	94800084 	addi	r18,r18,2
  800a28:	8c400044 	addi	r17,r17,1
  800a2c:	a8800015 	stw	r2,0(r21)
  800a30:	00c00084 	movi	r3,2
  800a34:	008001c4 	movi	r2,7
  800a38:	a8c00115 	stw	r3,4(r21)
  800a3c:	dc800e15 	stw	r18,56(sp)
  800a40:	dc400d15 	stw	r17,52(sp)
  800a44:	1441c216 	blt	r2,r17,801150 <___vfprintf_internal_r+0xc18>
  800a48:	ad400204 	addi	r21,r21,8
  800a4c:	d9414e17 	ldw	r5,1336(sp)
  800a50:	00802004 	movi	r2,128
  800a54:	2880b126 	beq	r5,r2,800d1c <___vfprintf_internal_r+0x7e4>
  800a58:	d8c14617 	ldw	r3,1304(sp)
  800a5c:	19e1c83a 	sub	r16,r3,r7
  800a60:	0400260e 	bge	zero,r16,800afc <___vfprintf_internal_r+0x5c4>
  800a64:	00800404 	movi	r2,16
  800a68:	1403c90e 	bge	r2,r16,801990 <___vfprintf_internal_r+0x1458>
  800a6c:	1027883a 	mov	r19,r2
  800a70:	07002074 	movhi	fp,129
  800a74:	e7180c84 	addi	fp,fp,24626
  800a78:	050001c4 	movi	r20,7
  800a7c:	00000306 	br	800a8c <___vfprintf_internal_r+0x554>
  800a80:	843ffc04 	addi	r16,r16,-16
  800a84:	ad400204 	addi	r21,r21,8
  800a88:	9c00130e 	bge	r19,r16,800ad8 <___vfprintf_internal_r+0x5a0>
  800a8c:	94800404 	addi	r18,r18,16
  800a90:	8c400044 	addi	r17,r17,1
  800a94:	af000015 	stw	fp,0(r21)
  800a98:	acc00115 	stw	r19,4(r21)
  800a9c:	dc800e15 	stw	r18,56(sp)
  800aa0:	dc400d15 	stw	r17,52(sp)
  800aa4:	a47ff60e 	bge	r20,r17,800a80 <___vfprintf_internal_r+0x548>
  800aa8:	d9014f17 	ldw	r4,1340(sp)
  800aac:	b00b883a 	mov	r5,r22
  800ab0:	d9800c04 	addi	r6,sp,48
  800ab4:	d9c15115 	stw	r7,1348(sp)
  800ab8:	08004e00 	call	8004e0 <__sprint_r>
  800abc:	d9c15117 	ldw	r7,1348(sp)
  800ac0:	1000551e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  800ac4:	843ffc04 	addi	r16,r16,-16
  800ac8:	dc800e17 	ldw	r18,56(sp)
  800acc:	dc400d17 	ldw	r17,52(sp)
  800ad0:	dd401904 	addi	r21,sp,100
  800ad4:	9c3fed16 	blt	r19,r16,800a8c <___vfprintf_internal_r+0x554>
  800ad8:	9425883a 	add	r18,r18,r16
  800adc:	8c400044 	addi	r17,r17,1
  800ae0:	008001c4 	movi	r2,7
  800ae4:	af000015 	stw	fp,0(r21)
  800ae8:	ac000115 	stw	r16,4(r21)
  800aec:	dc800e15 	stw	r18,56(sp)
  800af0:	dc400d15 	stw	r17,52(sp)
  800af4:	14418216 	blt	r2,r17,801100 <___vfprintf_internal_r+0xbc8>
  800af8:	ad400204 	addi	r21,r21,8
  800afc:	d9014c17 	ldw	r4,1328(sp)
  800b00:	2080400c 	andi	r2,r4,256
  800b04:	10004a1e 	bne	r2,zero,800c30 <___vfprintf_internal_r+0x6f8>
  800b08:	d9414117 	ldw	r5,1284(sp)
  800b0c:	91e5883a 	add	r18,r18,r7
  800b10:	8c400044 	addi	r17,r17,1
  800b14:	008001c4 	movi	r2,7
  800b18:	a9400015 	stw	r5,0(r21)
  800b1c:	a9c00115 	stw	r7,4(r21)
  800b20:	dc800e15 	stw	r18,56(sp)
  800b24:	dc400d15 	stw	r17,52(sp)
  800b28:	14416716 	blt	r2,r17,8010c8 <___vfprintf_internal_r+0xb90>
  800b2c:	a8c00204 	addi	r3,r21,8
  800b30:	d9814c17 	ldw	r6,1328(sp)
  800b34:	3080010c 	andi	r2,r6,4
  800b38:	10002826 	beq	r2,zero,800bdc <___vfprintf_internal_r+0x6a4>
  800b3c:	d8814a17 	ldw	r2,1320(sp)
  800b40:	d9014517 	ldw	r4,1300(sp)
  800b44:	1121c83a 	sub	r16,r2,r4
  800b48:	0400240e 	bge	zero,r16,800bdc <___vfprintf_internal_r+0x6a4>
  800b4c:	00800404 	movi	r2,16
  800b50:	14044f0e 	bge	r2,r16,801c90 <___vfprintf_internal_r+0x1758>
  800b54:	dc400d17 	ldw	r17,52(sp)
  800b58:	1027883a 	mov	r19,r2
  800b5c:	07002074 	movhi	fp,129
  800b60:	e7181084 	addi	fp,fp,24642
  800b64:	050001c4 	movi	r20,7
  800b68:	00000306 	br	800b78 <___vfprintf_internal_r+0x640>
  800b6c:	843ffc04 	addi	r16,r16,-16
  800b70:	18c00204 	addi	r3,r3,8
  800b74:	9c00110e 	bge	r19,r16,800bbc <___vfprintf_internal_r+0x684>
  800b78:	94800404 	addi	r18,r18,16
  800b7c:	8c400044 	addi	r17,r17,1
  800b80:	1f000015 	stw	fp,0(r3)
  800b84:	1cc00115 	stw	r19,4(r3)
  800b88:	dc800e15 	stw	r18,56(sp)
  800b8c:	dc400d15 	stw	r17,52(sp)
  800b90:	a47ff60e 	bge	r20,r17,800b6c <___vfprintf_internal_r+0x634>
  800b94:	d9014f17 	ldw	r4,1340(sp)
  800b98:	b00b883a 	mov	r5,r22
  800b9c:	d9800c04 	addi	r6,sp,48
  800ba0:	08004e00 	call	8004e0 <__sprint_r>
  800ba4:	10001c1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  800ba8:	843ffc04 	addi	r16,r16,-16
  800bac:	dc800e17 	ldw	r18,56(sp)
  800bb0:	dc400d17 	ldw	r17,52(sp)
  800bb4:	d8c01904 	addi	r3,sp,100
  800bb8:	9c3fef16 	blt	r19,r16,800b78 <___vfprintf_internal_r+0x640>
  800bbc:	9425883a 	add	r18,r18,r16
  800bc0:	8c400044 	addi	r17,r17,1
  800bc4:	008001c4 	movi	r2,7
  800bc8:	1f000015 	stw	fp,0(r3)
  800bcc:	1c000115 	stw	r16,4(r3)
  800bd0:	dc800e15 	stw	r18,56(sp)
  800bd4:	dc400d15 	stw	r17,52(sp)
  800bd8:	1440cb16 	blt	r2,r17,800f08 <___vfprintf_internal_r+0x9d0>
  800bdc:	d8814a17 	ldw	r2,1320(sp)
  800be0:	d9414517 	ldw	r5,1300(sp)
  800be4:	1140010e 	bge	r2,r5,800bec <___vfprintf_internal_r+0x6b4>
  800be8:	2805883a 	mov	r2,r5
  800bec:	d9814b17 	ldw	r6,1324(sp)
  800bf0:	308d883a 	add	r6,r6,r2
  800bf4:	d9814b15 	stw	r6,1324(sp)
  800bf8:	90013b1e 	bne	r18,zero,8010e8 <___vfprintf_internal_r+0xbb0>
  800bfc:	d9c14017 	ldw	r7,1280(sp)
  800c00:	dd401904 	addi	r21,sp,100
  800c04:	d8000d15 	stw	zero,52(sp)
  800c08:	003ea706 	br	8006a8 <___vfprintf_internal_r+0x170>
  800c0c:	d8800e17 	ldw	r2,56(sp)
  800c10:	10053f1e 	bne	r2,zero,802110 <___vfprintf_internal_r+0x1bd8>
  800c14:	d8000d15 	stw	zero,52(sp)
  800c18:	b080030b 	ldhu	r2,12(r22)
  800c1c:	1080100c 	andi	r2,r2,64
  800c20:	103e8726 	beq	r2,zero,800640 <___vfprintf_internal_r+0x108>
  800c24:	00bfffc4 	movi	r2,-1
  800c28:	d8814b15 	stw	r2,1324(sp)
  800c2c:	003e8406 	br	800640 <___vfprintf_internal_r+0x108>
  800c30:	d9814d17 	ldw	r6,1332(sp)
  800c34:	00801944 	movi	r2,101
  800c38:	11806e16 	blt	r2,r6,800df4 <___vfprintf_internal_r+0x8bc>
  800c3c:	d9414717 	ldw	r5,1308(sp)
  800c40:	00c00044 	movi	r3,1
  800c44:	1943430e 	bge	r3,r5,801954 <___vfprintf_internal_r+0x141c>
  800c48:	d8814117 	ldw	r2,1284(sp)
  800c4c:	94800044 	addi	r18,r18,1
  800c50:	8c400044 	addi	r17,r17,1
  800c54:	a8800015 	stw	r2,0(r21)
  800c58:	008001c4 	movi	r2,7
  800c5c:	a8c00115 	stw	r3,4(r21)
  800c60:	dc800e15 	stw	r18,56(sp)
  800c64:	dc400d15 	stw	r17,52(sp)
  800c68:	1441ca16 	blt	r2,r17,801394 <___vfprintf_internal_r+0xe5c>
  800c6c:	a8c00204 	addi	r3,r21,8
  800c70:	d9014917 	ldw	r4,1316(sp)
  800c74:	00800044 	movi	r2,1
  800c78:	94800044 	addi	r18,r18,1
  800c7c:	8c400044 	addi	r17,r17,1
  800c80:	18800115 	stw	r2,4(r3)
  800c84:	008001c4 	movi	r2,7
  800c88:	19000015 	stw	r4,0(r3)
  800c8c:	dc800e15 	stw	r18,56(sp)
  800c90:	dc400d15 	stw	r17,52(sp)
  800c94:	1441b616 	blt	r2,r17,801370 <___vfprintf_internal_r+0xe38>
  800c98:	1cc00204 	addi	r19,r3,8
  800c9c:	d9014217 	ldw	r4,1288(sp)
  800ca0:	d9414317 	ldw	r5,1292(sp)
  800ca4:	000d883a 	mov	r6,zero
  800ca8:	000f883a 	mov	r7,zero
  800cac:	08091340 	call	809134 <__nedf2>
  800cb0:	10017426 	beq	r2,zero,801284 <___vfprintf_internal_r+0xd4c>
  800cb4:	d9414717 	ldw	r5,1308(sp)
  800cb8:	d9814117 	ldw	r6,1284(sp)
  800cbc:	8c400044 	addi	r17,r17,1
  800cc0:	2c85883a 	add	r2,r5,r18
  800cc4:	14bfffc4 	addi	r18,r2,-1
  800cc8:	28bfffc4 	addi	r2,r5,-1
  800ccc:	30c00044 	addi	r3,r6,1
  800cd0:	98800115 	stw	r2,4(r19)
  800cd4:	008001c4 	movi	r2,7
  800cd8:	98c00015 	stw	r3,0(r19)
  800cdc:	dc800e15 	stw	r18,56(sp)
  800ce0:	dc400d15 	stw	r17,52(sp)
  800ce4:	14418e16 	blt	r2,r17,801320 <___vfprintf_internal_r+0xde8>
  800ce8:	9cc00204 	addi	r19,r19,8
  800cec:	d9414817 	ldw	r5,1312(sp)
  800cf0:	d8800804 	addi	r2,sp,32
  800cf4:	8c400044 	addi	r17,r17,1
  800cf8:	9165883a 	add	r18,r18,r5
  800cfc:	98800015 	stw	r2,0(r19)
  800d00:	008001c4 	movi	r2,7
  800d04:	99400115 	stw	r5,4(r19)
  800d08:	dc800e15 	stw	r18,56(sp)
  800d0c:	dc400d15 	stw	r17,52(sp)
  800d10:	1440ed16 	blt	r2,r17,8010c8 <___vfprintf_internal_r+0xb90>
  800d14:	98c00204 	addi	r3,r19,8
  800d18:	003f8506 	br	800b30 <___vfprintf_internal_r+0x5f8>
  800d1c:	d9814a17 	ldw	r6,1320(sp)
  800d20:	d8814517 	ldw	r2,1300(sp)
  800d24:	30a1c83a 	sub	r16,r6,r2
  800d28:	043f4b0e 	bge	zero,r16,800a58 <___vfprintf_internal_r+0x520>
  800d2c:	00800404 	movi	r2,16
  800d30:	1404340e 	bge	r2,r16,801e04 <___vfprintf_internal_r+0x18cc>
  800d34:	1027883a 	mov	r19,r2
  800d38:	07002074 	movhi	fp,129
  800d3c:	e7180c84 	addi	fp,fp,24626
  800d40:	050001c4 	movi	r20,7
  800d44:	00000306 	br	800d54 <___vfprintf_internal_r+0x81c>
  800d48:	843ffc04 	addi	r16,r16,-16
  800d4c:	ad400204 	addi	r21,r21,8
  800d50:	9c00130e 	bge	r19,r16,800da0 <___vfprintf_internal_r+0x868>
  800d54:	94800404 	addi	r18,r18,16
  800d58:	8c400044 	addi	r17,r17,1
  800d5c:	af000015 	stw	fp,0(r21)
  800d60:	acc00115 	stw	r19,4(r21)
  800d64:	dc800e15 	stw	r18,56(sp)
  800d68:	dc400d15 	stw	r17,52(sp)
  800d6c:	a47ff60e 	bge	r20,r17,800d48 <___vfprintf_internal_r+0x810>
  800d70:	d9014f17 	ldw	r4,1340(sp)
  800d74:	b00b883a 	mov	r5,r22
  800d78:	d9800c04 	addi	r6,sp,48
  800d7c:	d9c15115 	stw	r7,1348(sp)
  800d80:	08004e00 	call	8004e0 <__sprint_r>
  800d84:	d9c15117 	ldw	r7,1348(sp)
  800d88:	103fa31e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  800d8c:	843ffc04 	addi	r16,r16,-16
  800d90:	dc800e17 	ldw	r18,56(sp)
  800d94:	dc400d17 	ldw	r17,52(sp)
  800d98:	dd401904 	addi	r21,sp,100
  800d9c:	9c3fed16 	blt	r19,r16,800d54 <___vfprintf_internal_r+0x81c>
  800da0:	9425883a 	add	r18,r18,r16
  800da4:	8c400044 	addi	r17,r17,1
  800da8:	008001c4 	movi	r2,7
  800dac:	af000015 	stw	fp,0(r21)
  800db0:	ac000115 	stw	r16,4(r21)
  800db4:	dc800e15 	stw	r18,56(sp)
  800db8:	dc400d15 	stw	r17,52(sp)
  800dbc:	14416116 	blt	r2,r17,801344 <___vfprintf_internal_r+0xe0c>
  800dc0:	ad400204 	addi	r21,r21,8
  800dc4:	003f2406 	br	800a58 <___vfprintf_internal_r+0x520>
  800dc8:	d9014f17 	ldw	r4,1340(sp)
  800dcc:	0803fa80 	call	803fa8 <__sinit>
  800dd0:	d9c15117 	ldw	r7,1348(sp)
  800dd4:	003def06 	br	800594 <___vfprintf_internal_r+0x5c>
  800dd8:	d9014f17 	ldw	r4,1340(sp)
  800ddc:	b00b883a 	mov	r5,r22
  800de0:	d9c15115 	stw	r7,1348(sp)
  800de4:	08024080 	call	802408 <__swsetup_r>
  800de8:	d9c15117 	ldw	r7,1348(sp)
  800dec:	103dee26 	beq	r2,zero,8005a8 <___vfprintf_internal_r+0x70>
  800df0:	003f8c06 	br	800c24 <___vfprintf_internal_r+0x6ec>
  800df4:	d9014217 	ldw	r4,1288(sp)
  800df8:	d9414317 	ldw	r5,1292(sp)
  800dfc:	000d883a 	mov	r6,zero
  800e00:	000f883a 	mov	r7,zero
  800e04:	08090ac0 	call	8090ac <__eqdf2>
  800e08:	1000f21e 	bne	r2,zero,8011d4 <___vfprintf_internal_r+0xc9c>
  800e0c:	00802074 	movhi	r2,129
  800e10:	10980c04 	addi	r2,r2,24624
  800e14:	94800044 	addi	r18,r18,1
  800e18:	8c400044 	addi	r17,r17,1
  800e1c:	a8800015 	stw	r2,0(r21)
  800e20:	00c00044 	movi	r3,1
  800e24:	008001c4 	movi	r2,7
  800e28:	a8c00115 	stw	r3,4(r21)
  800e2c:	dc800e15 	stw	r18,56(sp)
  800e30:	dc400d15 	stw	r17,52(sp)
  800e34:	1442fa16 	blt	r2,r17,801a20 <___vfprintf_internal_r+0x14e8>
  800e38:	a8c00204 	addi	r3,r21,8
  800e3c:	d8800517 	ldw	r2,20(sp)
  800e40:	d9014717 	ldw	r4,1308(sp)
  800e44:	11015c0e 	bge	r2,r4,8013b8 <___vfprintf_internal_r+0xe80>
  800e48:	dc400d17 	ldw	r17,52(sp)
  800e4c:	d9814917 	ldw	r6,1316(sp)
  800e50:	00800044 	movi	r2,1
  800e54:	94800044 	addi	r18,r18,1
  800e58:	8c400044 	addi	r17,r17,1
  800e5c:	18800115 	stw	r2,4(r3)
  800e60:	008001c4 	movi	r2,7
  800e64:	19800015 	stw	r6,0(r3)
  800e68:	dc800e15 	stw	r18,56(sp)
  800e6c:	dc400d15 	stw	r17,52(sp)
  800e70:	14431016 	blt	r2,r17,801ab4 <___vfprintf_internal_r+0x157c>
  800e74:	18c00204 	addi	r3,r3,8
  800e78:	d8814717 	ldw	r2,1308(sp)
  800e7c:	143fffc4 	addi	r16,r2,-1
  800e80:	043f2b0e 	bge	zero,r16,800b30 <___vfprintf_internal_r+0x5f8>
  800e84:	00800404 	movi	r2,16
  800e88:	1402a20e 	bge	r2,r16,801914 <___vfprintf_internal_r+0x13dc>
  800e8c:	dc400d17 	ldw	r17,52(sp)
  800e90:	1027883a 	mov	r19,r2
  800e94:	07002074 	movhi	fp,129
  800e98:	e7180c84 	addi	fp,fp,24626
  800e9c:	050001c4 	movi	r20,7
  800ea0:	00000306 	br	800eb0 <___vfprintf_internal_r+0x978>
  800ea4:	18c00204 	addi	r3,r3,8
  800ea8:	843ffc04 	addi	r16,r16,-16
  800eac:	9c029c0e 	bge	r19,r16,801920 <___vfprintf_internal_r+0x13e8>
  800eb0:	94800404 	addi	r18,r18,16
  800eb4:	8c400044 	addi	r17,r17,1
  800eb8:	1f000015 	stw	fp,0(r3)
  800ebc:	1cc00115 	stw	r19,4(r3)
  800ec0:	dc800e15 	stw	r18,56(sp)
  800ec4:	dc400d15 	stw	r17,52(sp)
  800ec8:	a47ff60e 	bge	r20,r17,800ea4 <___vfprintf_internal_r+0x96c>
  800ecc:	d9014f17 	ldw	r4,1340(sp)
  800ed0:	b00b883a 	mov	r5,r22
  800ed4:	d9800c04 	addi	r6,sp,48
  800ed8:	08004e00 	call	8004e0 <__sprint_r>
  800edc:	103f4e1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  800ee0:	dc800e17 	ldw	r18,56(sp)
  800ee4:	dc400d17 	ldw	r17,52(sp)
  800ee8:	d8c01904 	addi	r3,sp,100
  800eec:	003fee06 	br	800ea8 <___vfprintf_internal_r+0x970>
  800ef0:	d8802c0b 	ldhu	r2,176(sp)
  800ef4:	00ffffc4 	movi	r3,-1
  800ef8:	d8c14b15 	stw	r3,1324(sp)
  800efc:	1080100c 	andi	r2,r2,64
  800f00:	103dcc1e 	bne	r2,zero,800634 <___vfprintf_internal_r+0xfc>
  800f04:	003dce06 	br	800640 <___vfprintf_internal_r+0x108>
  800f08:	d9014f17 	ldw	r4,1340(sp)
  800f0c:	b00b883a 	mov	r5,r22
  800f10:	d9800c04 	addi	r6,sp,48
  800f14:	08004e00 	call	8004e0 <__sprint_r>
  800f18:	103f3f1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  800f1c:	dc800e17 	ldw	r18,56(sp)
  800f20:	003f2e06 	br	800bdc <___vfprintf_internal_r+0x6a4>
  800f24:	d9414c17 	ldw	r5,1328(sp)
  800f28:	29400414 	ori	r5,r5,16
  800f2c:	d9414c15 	stw	r5,1328(sp)
  800f30:	d9814c17 	ldw	r6,1328(sp)
  800f34:	3080080c 	andi	r2,r6,32
  800f38:	10014f1e 	bne	r2,zero,801478 <___vfprintf_internal_r+0xf40>
  800f3c:	d8c14c17 	ldw	r3,1328(sp)
  800f40:	1880040c 	andi	r2,r3,16
  800f44:	1002ea1e 	bne	r2,zero,801af0 <___vfprintf_internal_r+0x15b8>
  800f48:	d9014c17 	ldw	r4,1328(sp)
  800f4c:	2080100c 	andi	r2,r4,64
  800f50:	1002e726 	beq	r2,zero,801af0 <___vfprintf_internal_r+0x15b8>
  800f54:	3880000f 	ldh	r2,0(r7)
  800f58:	39c00104 	addi	r7,r7,4
  800f5c:	d9c14015 	stw	r7,1280(sp)
  800f60:	1023d7fa 	srai	r17,r2,31
  800f64:	1021883a 	mov	r16,r2
  800f68:	88037216 	blt	r17,zero,801d34 <___vfprintf_internal_r+0x17fc>
  800f6c:	01000044 	movi	r4,1
  800f70:	98000416 	blt	r19,zero,800f84 <___vfprintf_internal_r+0xa4c>
  800f74:	d8c14c17 	ldw	r3,1328(sp)
  800f78:	00bfdfc4 	movi	r2,-129
  800f7c:	1886703a 	and	r3,r3,r2
  800f80:	d8c14c15 	stw	r3,1328(sp)
  800f84:	8444b03a 	or	r2,r16,r17
  800f88:	1002261e 	bne	r2,zero,801824 <___vfprintf_internal_r+0x12ec>
  800f8c:	9802251e 	bne	r19,zero,801824 <___vfprintf_internal_r+0x12ec>
  800f90:	20803fcc 	andi	r2,r4,255
  800f94:	10029b26 	beq	r2,zero,801a04 <___vfprintf_internal_r+0x14cc>
  800f98:	d8c01904 	addi	r3,sp,100
  800f9c:	dd000f04 	addi	r20,sp,60
  800fa0:	d8c14115 	stw	r3,1284(sp)
  800fa4:	d8c14117 	ldw	r3,1284(sp)
  800fa8:	dcc14515 	stw	r19,1300(sp)
  800fac:	a0c5c83a 	sub	r2,r20,r3
  800fb0:	11c00a04 	addi	r7,r2,40
  800fb4:	99c0010e 	bge	r19,r7,800fbc <___vfprintf_internal_r+0xa84>
  800fb8:	d9c14515 	stw	r7,1300(sp)
  800fbc:	dcc14615 	stw	r19,1304(sp)
  800fc0:	d8800407 	ldb	r2,16(sp)
  800fc4:	103e4c26 	beq	r2,zero,8008f8 <___vfprintf_internal_r+0x3c0>
  800fc8:	d8814517 	ldw	r2,1300(sp)
  800fcc:	10800044 	addi	r2,r2,1
  800fd0:	d8814515 	stw	r2,1300(sp)
  800fd4:	003e4806 	br	8008f8 <___vfprintf_internal_r+0x3c0>
  800fd8:	d9814c17 	ldw	r6,1328(sp)
  800fdc:	31800414 	ori	r6,r6,16
  800fe0:	d9814c15 	stw	r6,1328(sp)
  800fe4:	d8c14c17 	ldw	r3,1328(sp)
  800fe8:	1880080c 	andi	r2,r3,32
  800fec:	1001271e 	bne	r2,zero,80148c <___vfprintf_internal_r+0xf54>
  800ff0:	d9414c17 	ldw	r5,1328(sp)
  800ff4:	2880040c 	andi	r2,r5,16
  800ff8:	1002b61e 	bne	r2,zero,801ad4 <___vfprintf_internal_r+0x159c>
  800ffc:	d9814c17 	ldw	r6,1328(sp)
  801000:	3080100c 	andi	r2,r6,64
  801004:	1002b326 	beq	r2,zero,801ad4 <___vfprintf_internal_r+0x159c>
  801008:	3c00000b 	ldhu	r16,0(r7)
  80100c:	0009883a 	mov	r4,zero
  801010:	39c00104 	addi	r7,r7,4
  801014:	0023883a 	mov	r17,zero
  801018:	d9c14015 	stw	r7,1280(sp)
  80101c:	d8000405 	stb	zero,16(sp)
  801020:	003fd306 	br	800f70 <___vfprintf_internal_r+0xa38>
  801024:	d9014c17 	ldw	r4,1328(sp)
  801028:	21000414 	ori	r4,r4,16
  80102c:	d9014c15 	stw	r4,1328(sp)
  801030:	d9414c17 	ldw	r5,1328(sp)
  801034:	2880080c 	andi	r2,r5,32
  801038:	1001081e 	bne	r2,zero,80145c <___vfprintf_internal_r+0xf24>
  80103c:	d8c14c17 	ldw	r3,1328(sp)
  801040:	1880040c 	andi	r2,r3,16
  801044:	1002b01e 	bne	r2,zero,801b08 <___vfprintf_internal_r+0x15d0>
  801048:	d9014c17 	ldw	r4,1328(sp)
  80104c:	2080100c 	andi	r2,r4,64
  801050:	1002ad26 	beq	r2,zero,801b08 <___vfprintf_internal_r+0x15d0>
  801054:	3c00000b 	ldhu	r16,0(r7)
  801058:	01000044 	movi	r4,1
  80105c:	39c00104 	addi	r7,r7,4
  801060:	0023883a 	mov	r17,zero
  801064:	d9c14015 	stw	r7,1280(sp)
  801068:	d8000405 	stb	zero,16(sp)
  80106c:	003fc006 	br	800f70 <___vfprintf_internal_r+0xa38>
  801070:	d9014f17 	ldw	r4,1340(sp)
  801074:	b00b883a 	mov	r5,r22
  801078:	d9800c04 	addi	r6,sp,48
  80107c:	08004e00 	call	8004e0 <__sprint_r>
  801080:	103ee51e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801084:	dc800e17 	ldw	r18,56(sp)
  801088:	d8c01904 	addi	r3,sp,100
  80108c:	d9814c17 	ldw	r6,1328(sp)
  801090:	3080004c 	andi	r2,r6,1
  801094:	1005003a 	cmpeq	r2,r2,zero
  801098:	103ea51e 	bne	r2,zero,800b30 <___vfprintf_internal_r+0x5f8>
  80109c:	00800044 	movi	r2,1
  8010a0:	dc400d17 	ldw	r17,52(sp)
  8010a4:	18800115 	stw	r2,4(r3)
  8010a8:	d8814917 	ldw	r2,1316(sp)
  8010ac:	94800044 	addi	r18,r18,1
  8010b0:	8c400044 	addi	r17,r17,1
  8010b4:	18800015 	stw	r2,0(r3)
  8010b8:	008001c4 	movi	r2,7
  8010bc:	dc800e15 	stw	r18,56(sp)
  8010c0:	dc400d15 	stw	r17,52(sp)
  8010c4:	14421e0e 	bge	r2,r17,801940 <___vfprintf_internal_r+0x1408>
  8010c8:	d9014f17 	ldw	r4,1340(sp)
  8010cc:	b00b883a 	mov	r5,r22
  8010d0:	d9800c04 	addi	r6,sp,48
  8010d4:	08004e00 	call	8004e0 <__sprint_r>
  8010d8:	103ecf1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  8010dc:	dc800e17 	ldw	r18,56(sp)
  8010e0:	d8c01904 	addi	r3,sp,100
  8010e4:	003e9206 	br	800b30 <___vfprintf_internal_r+0x5f8>
  8010e8:	d9014f17 	ldw	r4,1340(sp)
  8010ec:	b00b883a 	mov	r5,r22
  8010f0:	d9800c04 	addi	r6,sp,48
  8010f4:	08004e00 	call	8004e0 <__sprint_r>
  8010f8:	103ec026 	beq	r2,zero,800bfc <___vfprintf_internal_r+0x6c4>
  8010fc:	003ec606 	br	800c18 <___vfprintf_internal_r+0x6e0>
  801100:	d9014f17 	ldw	r4,1340(sp)
  801104:	b00b883a 	mov	r5,r22
  801108:	d9800c04 	addi	r6,sp,48
  80110c:	d9c15115 	stw	r7,1348(sp)
  801110:	08004e00 	call	8004e0 <__sprint_r>
  801114:	d9c15117 	ldw	r7,1348(sp)
  801118:	103ebf1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  80111c:	dc800e17 	ldw	r18,56(sp)
  801120:	dc400d17 	ldw	r17,52(sp)
  801124:	dd401904 	addi	r21,sp,100
  801128:	003e7406 	br	800afc <___vfprintf_internal_r+0x5c4>
  80112c:	d9014f17 	ldw	r4,1340(sp)
  801130:	b00b883a 	mov	r5,r22
  801134:	d9800c04 	addi	r6,sp,48
  801138:	d9c15115 	stw	r7,1348(sp)
  80113c:	08004e00 	call	8004e0 <__sprint_r>
  801140:	d9c15117 	ldw	r7,1348(sp)
  801144:	103eb41e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801148:	dd401904 	addi	r21,sp,100
  80114c:	003d6d06 	br	800704 <___vfprintf_internal_r+0x1cc>
  801150:	d9014f17 	ldw	r4,1340(sp)
  801154:	b00b883a 	mov	r5,r22
  801158:	d9800c04 	addi	r6,sp,48
  80115c:	d9c15115 	stw	r7,1348(sp)
  801160:	08004e00 	call	8004e0 <__sprint_r>
  801164:	d9c15117 	ldw	r7,1348(sp)
  801168:	103eab1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  80116c:	dc800e17 	ldw	r18,56(sp)
  801170:	dc400d17 	ldw	r17,52(sp)
  801174:	dd401904 	addi	r21,sp,100
  801178:	003e3406 	br	800a4c <___vfprintf_internal_r+0x514>
  80117c:	d9014f17 	ldw	r4,1340(sp)
  801180:	b00b883a 	mov	r5,r22
  801184:	d9800c04 	addi	r6,sp,48
  801188:	d9c15115 	stw	r7,1348(sp)
  80118c:	08004e00 	call	8004e0 <__sprint_r>
  801190:	d9c15117 	ldw	r7,1348(sp)
  801194:	103ea01e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801198:	dc800e17 	ldw	r18,56(sp)
  80119c:	dc400d17 	ldw	r17,52(sp)
  8011a0:	dd401904 	addi	r21,sp,100
  8011a4:	003e1c06 	br	800a18 <___vfprintf_internal_r+0x4e0>
  8011a8:	d9014f17 	ldw	r4,1340(sp)
  8011ac:	b00b883a 	mov	r5,r22
  8011b0:	d9800c04 	addi	r6,sp,48
  8011b4:	d9c15115 	stw	r7,1348(sp)
  8011b8:	08004e00 	call	8004e0 <__sprint_r>
  8011bc:	d9c15117 	ldw	r7,1348(sp)
  8011c0:	103e951e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  8011c4:	dc800e17 	ldw	r18,56(sp)
  8011c8:	dc400d17 	ldw	r17,52(sp)
  8011cc:	dd401904 	addi	r21,sp,100
  8011d0:	003e0406 	br	8009e4 <___vfprintf_internal_r+0x4ac>
  8011d4:	d9000517 	ldw	r4,20(sp)
  8011d8:	0102520e 	bge	zero,r4,801b24 <___vfprintf_internal_r+0x15ec>
  8011dc:	d9814717 	ldw	r6,1308(sp)
  8011e0:	21807a16 	blt	r4,r6,8013cc <___vfprintf_internal_r+0xe94>
  8011e4:	d8814117 	ldw	r2,1284(sp)
  8011e8:	91a5883a 	add	r18,r18,r6
  8011ec:	8c400044 	addi	r17,r17,1
  8011f0:	a8800015 	stw	r2,0(r21)
  8011f4:	008001c4 	movi	r2,7
  8011f8:	a9800115 	stw	r6,4(r21)
  8011fc:	dc800e15 	stw	r18,56(sp)
  801200:	dc400d15 	stw	r17,52(sp)
  801204:	1442f616 	blt	r2,r17,801de0 <___vfprintf_internal_r+0x18a8>
  801208:	a8c00204 	addi	r3,r21,8
  80120c:	d9414717 	ldw	r5,1308(sp)
  801210:	2161c83a 	sub	r16,r4,r5
  801214:	043f9d0e 	bge	zero,r16,80108c <___vfprintf_internal_r+0xb54>
  801218:	00800404 	movi	r2,16
  80121c:	1402130e 	bge	r2,r16,801a6c <___vfprintf_internal_r+0x1534>
  801220:	dc400d17 	ldw	r17,52(sp)
  801224:	1027883a 	mov	r19,r2
  801228:	07002074 	movhi	fp,129
  80122c:	e7180c84 	addi	fp,fp,24626
  801230:	050001c4 	movi	r20,7
  801234:	00000306 	br	801244 <___vfprintf_internal_r+0xd0c>
  801238:	18c00204 	addi	r3,r3,8
  80123c:	843ffc04 	addi	r16,r16,-16
  801240:	9c020d0e 	bge	r19,r16,801a78 <___vfprintf_internal_r+0x1540>
  801244:	94800404 	addi	r18,r18,16
  801248:	8c400044 	addi	r17,r17,1
  80124c:	1f000015 	stw	fp,0(r3)
  801250:	1cc00115 	stw	r19,4(r3)
  801254:	dc800e15 	stw	r18,56(sp)
  801258:	dc400d15 	stw	r17,52(sp)
  80125c:	a47ff60e 	bge	r20,r17,801238 <___vfprintf_internal_r+0xd00>
  801260:	d9014f17 	ldw	r4,1340(sp)
  801264:	b00b883a 	mov	r5,r22
  801268:	d9800c04 	addi	r6,sp,48
  80126c:	08004e00 	call	8004e0 <__sprint_r>
  801270:	103e691e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801274:	dc800e17 	ldw	r18,56(sp)
  801278:	dc400d17 	ldw	r17,52(sp)
  80127c:	d8c01904 	addi	r3,sp,100
  801280:	003fee06 	br	80123c <___vfprintf_internal_r+0xd04>
  801284:	d8814717 	ldw	r2,1308(sp)
  801288:	143fffc4 	addi	r16,r2,-1
  80128c:	043e970e 	bge	zero,r16,800cec <___vfprintf_internal_r+0x7b4>
  801290:	00800404 	movi	r2,16
  801294:	1400180e 	bge	r2,r16,8012f8 <___vfprintf_internal_r+0xdc0>
  801298:	1029883a 	mov	r20,r2
  80129c:	07002074 	movhi	fp,129
  8012a0:	e7180c84 	addi	fp,fp,24626
  8012a4:	054001c4 	movi	r21,7
  8012a8:	00000306 	br	8012b8 <___vfprintf_internal_r+0xd80>
  8012ac:	9cc00204 	addi	r19,r19,8
  8012b0:	843ffc04 	addi	r16,r16,-16
  8012b4:	a400120e 	bge	r20,r16,801300 <___vfprintf_internal_r+0xdc8>
  8012b8:	94800404 	addi	r18,r18,16
  8012bc:	8c400044 	addi	r17,r17,1
  8012c0:	9f000015 	stw	fp,0(r19)
  8012c4:	9d000115 	stw	r20,4(r19)
  8012c8:	dc800e15 	stw	r18,56(sp)
  8012cc:	dc400d15 	stw	r17,52(sp)
  8012d0:	ac7ff60e 	bge	r21,r17,8012ac <___vfprintf_internal_r+0xd74>
  8012d4:	d9014f17 	ldw	r4,1340(sp)
  8012d8:	b00b883a 	mov	r5,r22
  8012dc:	d9800c04 	addi	r6,sp,48
  8012e0:	08004e00 	call	8004e0 <__sprint_r>
  8012e4:	103e4c1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  8012e8:	dc800e17 	ldw	r18,56(sp)
  8012ec:	dc400d17 	ldw	r17,52(sp)
  8012f0:	dcc01904 	addi	r19,sp,100
  8012f4:	003fee06 	br	8012b0 <___vfprintf_internal_r+0xd78>
  8012f8:	07002074 	movhi	fp,129
  8012fc:	e7180c84 	addi	fp,fp,24626
  801300:	9425883a 	add	r18,r18,r16
  801304:	8c400044 	addi	r17,r17,1
  801308:	008001c4 	movi	r2,7
  80130c:	9f000015 	stw	fp,0(r19)
  801310:	9c000115 	stw	r16,4(r19)
  801314:	dc800e15 	stw	r18,56(sp)
  801318:	dc400d15 	stw	r17,52(sp)
  80131c:	147e720e 	bge	r2,r17,800ce8 <___vfprintf_internal_r+0x7b0>
  801320:	d9014f17 	ldw	r4,1340(sp)
  801324:	b00b883a 	mov	r5,r22
  801328:	d9800c04 	addi	r6,sp,48
  80132c:	08004e00 	call	8004e0 <__sprint_r>
  801330:	103e391e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801334:	dc800e17 	ldw	r18,56(sp)
  801338:	dc400d17 	ldw	r17,52(sp)
  80133c:	dcc01904 	addi	r19,sp,100
  801340:	003e6a06 	br	800cec <___vfprintf_internal_r+0x7b4>
  801344:	d9014f17 	ldw	r4,1340(sp)
  801348:	b00b883a 	mov	r5,r22
  80134c:	d9800c04 	addi	r6,sp,48
  801350:	d9c15115 	stw	r7,1348(sp)
  801354:	08004e00 	call	8004e0 <__sprint_r>
  801358:	d9c15117 	ldw	r7,1348(sp)
  80135c:	103e2e1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801360:	dc800e17 	ldw	r18,56(sp)
  801364:	dc400d17 	ldw	r17,52(sp)
  801368:	dd401904 	addi	r21,sp,100
  80136c:	003dba06 	br	800a58 <___vfprintf_internal_r+0x520>
  801370:	d9014f17 	ldw	r4,1340(sp)
  801374:	b00b883a 	mov	r5,r22
  801378:	d9800c04 	addi	r6,sp,48
  80137c:	08004e00 	call	8004e0 <__sprint_r>
  801380:	103e251e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801384:	dc800e17 	ldw	r18,56(sp)
  801388:	dc400d17 	ldw	r17,52(sp)
  80138c:	dcc01904 	addi	r19,sp,100
  801390:	003e4206 	br	800c9c <___vfprintf_internal_r+0x764>
  801394:	d9014f17 	ldw	r4,1340(sp)
  801398:	b00b883a 	mov	r5,r22
  80139c:	d9800c04 	addi	r6,sp,48
  8013a0:	08004e00 	call	8004e0 <__sprint_r>
  8013a4:	103e1c1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  8013a8:	dc800e17 	ldw	r18,56(sp)
  8013ac:	dc400d17 	ldw	r17,52(sp)
  8013b0:	d8c01904 	addi	r3,sp,100
  8013b4:	003e2e06 	br	800c70 <___vfprintf_internal_r+0x738>
  8013b8:	d9414c17 	ldw	r5,1328(sp)
  8013bc:	2880004c 	andi	r2,r5,1
  8013c0:	1005003a 	cmpeq	r2,r2,zero
  8013c4:	103dda1e 	bne	r2,zero,800b30 <___vfprintf_internal_r+0x5f8>
  8013c8:	003e9f06 	br	800e48 <___vfprintf_internal_r+0x910>
  8013cc:	d8c14117 	ldw	r3,1284(sp)
  8013d0:	9125883a 	add	r18,r18,r4
  8013d4:	8c400044 	addi	r17,r17,1
  8013d8:	008001c4 	movi	r2,7
  8013dc:	a8c00015 	stw	r3,0(r21)
  8013e0:	a9000115 	stw	r4,4(r21)
  8013e4:	dc800e15 	stw	r18,56(sp)
  8013e8:	dc400d15 	stw	r17,52(sp)
  8013ec:	14426616 	blt	r2,r17,801d88 <___vfprintf_internal_r+0x1850>
  8013f0:	a8c00204 	addi	r3,r21,8
  8013f4:	d9414917 	ldw	r5,1316(sp)
  8013f8:	00800044 	movi	r2,1
  8013fc:	94800044 	addi	r18,r18,1
  801400:	8c400044 	addi	r17,r17,1
  801404:	18800115 	stw	r2,4(r3)
  801408:	008001c4 	movi	r2,7
  80140c:	19400015 	stw	r5,0(r3)
  801410:	dc800e15 	stw	r18,56(sp)
  801414:	dc400d15 	stw	r17,52(sp)
  801418:	2021883a 	mov	r16,r4
  80141c:	14425016 	blt	r2,r17,801d60 <___vfprintf_internal_r+0x1828>
  801420:	19400204 	addi	r5,r3,8
  801424:	d9814717 	ldw	r6,1308(sp)
  801428:	8c400044 	addi	r17,r17,1
  80142c:	dc400d15 	stw	r17,52(sp)
  801430:	3107c83a 	sub	r3,r6,r4
  801434:	d9014117 	ldw	r4,1284(sp)
  801438:	90e5883a 	add	r18,r18,r3
  80143c:	28c00115 	stw	r3,4(r5)
  801440:	8105883a 	add	r2,r16,r4
  801444:	28800015 	stw	r2,0(r5)
  801448:	008001c4 	movi	r2,7
  80144c:	dc800e15 	stw	r18,56(sp)
  801450:	147f1d16 	blt	r2,r17,8010c8 <___vfprintf_internal_r+0xb90>
  801454:	28c00204 	addi	r3,r5,8
  801458:	003db506 	br	800b30 <___vfprintf_internal_r+0x5f8>
  80145c:	3c000017 	ldw	r16,0(r7)
  801460:	3c400117 	ldw	r17,4(r7)
  801464:	39800204 	addi	r6,r7,8
  801468:	01000044 	movi	r4,1
  80146c:	d9814015 	stw	r6,1280(sp)
  801470:	d8000405 	stb	zero,16(sp)
  801474:	003ebe06 	br	800f70 <___vfprintf_internal_r+0xa38>
  801478:	3c000017 	ldw	r16,0(r7)
  80147c:	3c400117 	ldw	r17,4(r7)
  801480:	38800204 	addi	r2,r7,8
  801484:	d8814015 	stw	r2,1280(sp)
  801488:	003eb706 	br	800f68 <___vfprintf_internal_r+0xa30>
  80148c:	3c000017 	ldw	r16,0(r7)
  801490:	3c400117 	ldw	r17,4(r7)
  801494:	39000204 	addi	r4,r7,8
  801498:	d9014015 	stw	r4,1280(sp)
  80149c:	0009883a 	mov	r4,zero
  8014a0:	d8000405 	stb	zero,16(sp)
  8014a4:	003eb206 	br	800f70 <___vfprintf_internal_r+0xa38>
  8014a8:	38c00017 	ldw	r3,0(r7)
  8014ac:	39c00104 	addi	r7,r7,4
  8014b0:	d8c14a15 	stw	r3,1320(sp)
  8014b4:	1800d10e 	bge	r3,zero,8017fc <___vfprintf_internal_r+0x12c4>
  8014b8:	00c7c83a 	sub	r3,zero,r3
  8014bc:	d8c14a15 	stw	r3,1320(sp)
  8014c0:	d9014c17 	ldw	r4,1328(sp)
  8014c4:	b8c00007 	ldb	r3,0(r23)
  8014c8:	21000114 	ori	r4,r4,4
  8014cc:	d9014c15 	stw	r4,1328(sp)
  8014d0:	003c9806 	br	800734 <___vfprintf_internal_r+0x1fc>
  8014d4:	d9814c17 	ldw	r6,1328(sp)
  8014d8:	3080080c 	andi	r2,r6,32
  8014dc:	1001f026 	beq	r2,zero,801ca0 <___vfprintf_internal_r+0x1768>
  8014e0:	d9014b17 	ldw	r4,1324(sp)
  8014e4:	38800017 	ldw	r2,0(r7)
  8014e8:	39c00104 	addi	r7,r7,4
  8014ec:	d9c14015 	stw	r7,1280(sp)
  8014f0:	2007d7fa 	srai	r3,r4,31
  8014f4:	d9c14017 	ldw	r7,1280(sp)
  8014f8:	11000015 	stw	r4,0(r2)
  8014fc:	10c00115 	stw	r3,4(r2)
  801500:	003c6906 	br	8006a8 <___vfprintf_internal_r+0x170>
  801504:	b8c00007 	ldb	r3,0(r23)
  801508:	00801b04 	movi	r2,108
  80150c:	18824f26 	beq	r3,r2,801e4c <___vfprintf_internal_r+0x1914>
  801510:	d9414c17 	ldw	r5,1328(sp)
  801514:	29400414 	ori	r5,r5,16
  801518:	d9414c15 	stw	r5,1328(sp)
  80151c:	003c8506 	br	800734 <___vfprintf_internal_r+0x1fc>
  801520:	d9814c17 	ldw	r6,1328(sp)
  801524:	b8c00007 	ldb	r3,0(r23)
  801528:	31800814 	ori	r6,r6,32
  80152c:	d9814c15 	stw	r6,1328(sp)
  801530:	003c8006 	br	800734 <___vfprintf_internal_r+0x1fc>
  801534:	d8814c17 	ldw	r2,1328(sp)
  801538:	3c000017 	ldw	r16,0(r7)
  80153c:	00c01e04 	movi	r3,120
  801540:	10800094 	ori	r2,r2,2
  801544:	d8814c15 	stw	r2,1328(sp)
  801548:	39c00104 	addi	r7,r7,4
  80154c:	01402074 	movhi	r5,129
  801550:	2957f504 	addi	r5,r5,24532
  801554:	00800c04 	movi	r2,48
  801558:	0023883a 	mov	r17,zero
  80155c:	01000084 	movi	r4,2
  801560:	d9c14015 	stw	r7,1280(sp)
  801564:	d8c14d15 	stw	r3,1332(sp)
  801568:	d9414415 	stw	r5,1296(sp)
  80156c:	d8800445 	stb	r2,17(sp)
  801570:	d8c00485 	stb	r3,18(sp)
  801574:	d8000405 	stb	zero,16(sp)
  801578:	003e7d06 	br	800f70 <___vfprintf_internal_r+0xa38>
  80157c:	d8814c17 	ldw	r2,1328(sp)
  801580:	b8c00007 	ldb	r3,0(r23)
  801584:	10801014 	ori	r2,r2,64
  801588:	d8814c15 	stw	r2,1328(sp)
  80158c:	003c6906 	br	800734 <___vfprintf_internal_r+0x1fc>
  801590:	d9414c17 	ldw	r5,1328(sp)
  801594:	2880020c 	andi	r2,r5,8
  801598:	1001df26 	beq	r2,zero,801d18 <___vfprintf_internal_r+0x17e0>
  80159c:	39800017 	ldw	r6,0(r7)
  8015a0:	38800204 	addi	r2,r7,8
  8015a4:	d8814015 	stw	r2,1280(sp)
  8015a8:	d9814215 	stw	r6,1288(sp)
  8015ac:	39c00117 	ldw	r7,4(r7)
  8015b0:	d9c14315 	stw	r7,1292(sp)
  8015b4:	d9014217 	ldw	r4,1288(sp)
  8015b8:	d9414317 	ldw	r5,1292(sp)
  8015bc:	08070c40 	call	8070c4 <__isinfd>
  8015c0:	10021726 	beq	r2,zero,801e20 <___vfprintf_internal_r+0x18e8>
  8015c4:	d9014217 	ldw	r4,1288(sp)
  8015c8:	d9414317 	ldw	r5,1292(sp)
  8015cc:	000d883a 	mov	r6,zero
  8015d0:	000f883a 	mov	r7,zero
  8015d4:	08092cc0 	call	8092cc <__ltdf2>
  8015d8:	1002ca16 	blt	r2,zero,802104 <___vfprintf_internal_r+0x1bcc>
  8015dc:	d9414d17 	ldw	r5,1332(sp)
  8015e0:	008011c4 	movi	r2,71
  8015e4:	11420a16 	blt	r2,r5,801e10 <___vfprintf_internal_r+0x18d8>
  8015e8:	01802074 	movhi	r6,129
  8015ec:	3197fa04 	addi	r6,r6,24552
  8015f0:	d9814115 	stw	r6,1284(sp)
  8015f4:	d9014c17 	ldw	r4,1328(sp)
  8015f8:	00c000c4 	movi	r3,3
  8015fc:	00bfdfc4 	movi	r2,-129
  801600:	2088703a 	and	r4,r4,r2
  801604:	180f883a 	mov	r7,r3
  801608:	d8c14515 	stw	r3,1300(sp)
  80160c:	d9014c15 	stw	r4,1328(sp)
  801610:	d8014615 	stw	zero,1304(sp)
  801614:	003e6a06 	br	800fc0 <___vfprintf_internal_r+0xa88>
  801618:	38800017 	ldw	r2,0(r7)
  80161c:	00c00044 	movi	r3,1
  801620:	39c00104 	addi	r7,r7,4
  801624:	d9c14015 	stw	r7,1280(sp)
  801628:	d9000f04 	addi	r4,sp,60
  80162c:	180f883a 	mov	r7,r3
  801630:	d8c14515 	stw	r3,1300(sp)
  801634:	d9014115 	stw	r4,1284(sp)
  801638:	d8800f05 	stb	r2,60(sp)
  80163c:	d8000405 	stb	zero,16(sp)
  801640:	003cac06 	br	8008f4 <___vfprintf_internal_r+0x3bc>
  801644:	01402074 	movhi	r5,129
  801648:	29580004 	addi	r5,r5,24576
  80164c:	d9414415 	stw	r5,1296(sp)
  801650:	d9814c17 	ldw	r6,1328(sp)
  801654:	3080080c 	andi	r2,r6,32
  801658:	1000f926 	beq	r2,zero,801a40 <___vfprintf_internal_r+0x1508>
  80165c:	3c000017 	ldw	r16,0(r7)
  801660:	3c400117 	ldw	r17,4(r7)
  801664:	38800204 	addi	r2,r7,8
  801668:	d8814015 	stw	r2,1280(sp)
  80166c:	d9414c17 	ldw	r5,1328(sp)
  801670:	2880004c 	andi	r2,r5,1
  801674:	1005003a 	cmpeq	r2,r2,zero
  801678:	1000b31e 	bne	r2,zero,801948 <___vfprintf_internal_r+0x1410>
  80167c:	8444b03a 	or	r2,r16,r17
  801680:	1000b126 	beq	r2,zero,801948 <___vfprintf_internal_r+0x1410>
  801684:	d9814d17 	ldw	r6,1332(sp)
  801688:	29400094 	ori	r5,r5,2
  80168c:	00800c04 	movi	r2,48
  801690:	01000084 	movi	r4,2
  801694:	d9414c15 	stw	r5,1328(sp)
  801698:	d8800445 	stb	r2,17(sp)
  80169c:	d9800485 	stb	r6,18(sp)
  8016a0:	d8000405 	stb	zero,16(sp)
  8016a4:	003e3206 	br	800f70 <___vfprintf_internal_r+0xa38>
  8016a8:	01802074 	movhi	r6,129
  8016ac:	3197f504 	addi	r6,r6,24532
  8016b0:	d9814415 	stw	r6,1296(sp)
  8016b4:	003fe606 	br	801650 <___vfprintf_internal_r+0x1118>
  8016b8:	00800ac4 	movi	r2,43
  8016bc:	d8800405 	stb	r2,16(sp)
  8016c0:	b8c00007 	ldb	r3,0(r23)
  8016c4:	003c1b06 	br	800734 <___vfprintf_internal_r+0x1fc>
  8016c8:	d8814c17 	ldw	r2,1328(sp)
  8016cc:	b8c00007 	ldb	r3,0(r23)
  8016d0:	10800054 	ori	r2,r2,1
  8016d4:	d8814c15 	stw	r2,1328(sp)
  8016d8:	003c1606 	br	800734 <___vfprintf_internal_r+0x1fc>
  8016dc:	d8800407 	ldb	r2,16(sp)
  8016e0:	1000461e 	bne	r2,zero,8017fc <___vfprintf_internal_r+0x12c4>
  8016e4:	00800804 	movi	r2,32
  8016e8:	d8800405 	stb	r2,16(sp)
  8016ec:	b8c00007 	ldb	r3,0(r23)
  8016f0:	003c1006 	br	800734 <___vfprintf_internal_r+0x1fc>
  8016f4:	d9814c17 	ldw	r6,1328(sp)
  8016f8:	b8c00007 	ldb	r3,0(r23)
  8016fc:	31800214 	ori	r6,r6,8
  801700:	d9814c15 	stw	r6,1328(sp)
  801704:	003c0b06 	br	800734 <___vfprintf_internal_r+0x1fc>
  801708:	0007883a 	mov	r3,zero
  80170c:	01000244 	movi	r4,9
  801710:	188002a4 	muli	r2,r3,10
  801714:	b8c00007 	ldb	r3,0(r23)
  801718:	d9814d17 	ldw	r6,1332(sp)
  80171c:	bdc00044 	addi	r23,r23,1
  801720:	d8c14d15 	stw	r3,1332(sp)
  801724:	d9414d17 	ldw	r5,1332(sp)
  801728:	3085883a 	add	r2,r6,r2
  80172c:	10fff404 	addi	r3,r2,-48
  801730:	28bff404 	addi	r2,r5,-48
  801734:	20bff62e 	bgeu	r4,r2,801710 <___vfprintf_internal_r+0x11d8>
  801738:	d8c14a15 	stw	r3,1320(sp)
  80173c:	003bff06 	br	80073c <___vfprintf_internal_r+0x204>
  801740:	d9414c17 	ldw	r5,1328(sp)
  801744:	b8c00007 	ldb	r3,0(r23)
  801748:	29402014 	ori	r5,r5,128
  80174c:	d9414c15 	stw	r5,1328(sp)
  801750:	003bf806 	br	800734 <___vfprintf_internal_r+0x1fc>
  801754:	b8c00007 	ldb	r3,0(r23)
  801758:	00800a84 	movi	r2,42
  80175c:	bdc00044 	addi	r23,r23,1
  801760:	18831526 	beq	r3,r2,8023b8 <___vfprintf_internal_r+0x1e80>
  801764:	d8c14d15 	stw	r3,1332(sp)
  801768:	18bff404 	addi	r2,r3,-48
  80176c:	00c00244 	movi	r3,9
  801770:	18827836 	bltu	r3,r2,802154 <___vfprintf_internal_r+0x1c1c>
  801774:	000d883a 	mov	r6,zero
  801778:	308002a4 	muli	r2,r6,10
  80177c:	b9800007 	ldb	r6,0(r23)
  801780:	d9414d17 	ldw	r5,1332(sp)
  801784:	bdc00044 	addi	r23,r23,1
  801788:	d9814d15 	stw	r6,1332(sp)
  80178c:	d9014d17 	ldw	r4,1332(sp)
  801790:	1145883a 	add	r2,r2,r5
  801794:	11bff404 	addi	r6,r2,-48
  801798:	20bff404 	addi	r2,r4,-48
  80179c:	18bff62e 	bgeu	r3,r2,801778 <___vfprintf_internal_r+0x1240>
  8017a0:	3027883a 	mov	r19,r6
  8017a4:	303be50e 	bge	r6,zero,80073c <___vfprintf_internal_r+0x204>
  8017a8:	04ffffc4 	movi	r19,-1
  8017ac:	003be306 	br	80073c <___vfprintf_internal_r+0x204>
  8017b0:	d8000405 	stb	zero,16(sp)
  8017b4:	39800017 	ldw	r6,0(r7)
  8017b8:	39c00104 	addi	r7,r7,4
  8017bc:	d9c14015 	stw	r7,1280(sp)
  8017c0:	d9814115 	stw	r6,1284(sp)
  8017c4:	3001c926 	beq	r6,zero,801eec <___vfprintf_internal_r+0x19b4>
  8017c8:	98000e16 	blt	r19,zero,801804 <___vfprintf_internal_r+0x12cc>
  8017cc:	d9014117 	ldw	r4,1284(sp)
  8017d0:	000b883a 	mov	r5,zero
  8017d4:	980d883a 	mov	r6,r19
  8017d8:	08055f40 	call	8055f4 <memchr>
  8017dc:	10025926 	beq	r2,zero,802144 <___vfprintf_internal_r+0x1c0c>
  8017e0:	d8c14117 	ldw	r3,1284(sp)
  8017e4:	10cfc83a 	sub	r7,r2,r3
  8017e8:	99c19e16 	blt	r19,r7,801e64 <___vfprintf_internal_r+0x192c>
  8017ec:	d9c14515 	stw	r7,1300(sp)
  8017f0:	38000916 	blt	r7,zero,801818 <___vfprintf_internal_r+0x12e0>
  8017f4:	d8014615 	stw	zero,1304(sp)
  8017f8:	003df106 	br	800fc0 <___vfprintf_internal_r+0xa88>
  8017fc:	b8c00007 	ldb	r3,0(r23)
  801800:	003bcc06 	br	800734 <___vfprintf_internal_r+0x1fc>
  801804:	d9014117 	ldw	r4,1284(sp)
  801808:	08073ac0 	call	8073ac <strlen>
  80180c:	d8814515 	stw	r2,1300(sp)
  801810:	100f883a 	mov	r7,r2
  801814:	103ff70e 	bge	r2,zero,8017f4 <___vfprintf_internal_r+0x12bc>
  801818:	d8014515 	stw	zero,1300(sp)
  80181c:	d8014615 	stw	zero,1304(sp)
  801820:	003de706 	br	800fc0 <___vfprintf_internal_r+0xa88>
  801824:	20c03fcc 	andi	r3,r4,255
  801828:	00800044 	movi	r2,1
  80182c:	18802d26 	beq	r3,r2,8018e4 <___vfprintf_internal_r+0x13ac>
  801830:	18800e36 	bltu	r3,r2,80186c <___vfprintf_internal_r+0x1334>
  801834:	00800084 	movi	r2,2
  801838:	1880fa26 	beq	r3,r2,801c24 <___vfprintf_internal_r+0x16ec>
  80183c:	01002074 	movhi	r4,129
  801840:	21180504 	addi	r4,r4,24596
  801844:	08073ac0 	call	8073ac <strlen>
  801848:	100f883a 	mov	r7,r2
  80184c:	dcc14515 	stw	r19,1300(sp)
  801850:	9880010e 	bge	r19,r2,801858 <___vfprintf_internal_r+0x1320>
  801854:	d8814515 	stw	r2,1300(sp)
  801858:	00802074 	movhi	r2,129
  80185c:	10980504 	addi	r2,r2,24596
  801860:	dcc14615 	stw	r19,1304(sp)
  801864:	d8814115 	stw	r2,1284(sp)
  801868:	003dd506 	br	800fc0 <___vfprintf_internal_r+0xa88>
  80186c:	d9401904 	addi	r5,sp,100
  801870:	dd000f04 	addi	r20,sp,60
  801874:	d9414115 	stw	r5,1284(sp)
  801878:	880a977a 	slli	r5,r17,29
  80187c:	d9814117 	ldw	r6,1284(sp)
  801880:	8004d0fa 	srli	r2,r16,3
  801884:	8806d0fa 	srli	r3,r17,3
  801888:	810001cc 	andi	r4,r16,7
  80188c:	2884b03a 	or	r2,r5,r2
  801890:	31bfffc4 	addi	r6,r6,-1
  801894:	21000c04 	addi	r4,r4,48
  801898:	d9814115 	stw	r6,1284(sp)
  80189c:	10cab03a 	or	r5,r2,r3
  8018a0:	31000005 	stb	r4,0(r6)
  8018a4:	1021883a 	mov	r16,r2
  8018a8:	1823883a 	mov	r17,r3
  8018ac:	283ff21e 	bne	r5,zero,801878 <___vfprintf_internal_r+0x1340>
  8018b0:	d8c14c17 	ldw	r3,1328(sp)
  8018b4:	1880004c 	andi	r2,r3,1
  8018b8:	1005003a 	cmpeq	r2,r2,zero
  8018bc:	103db91e 	bne	r2,zero,800fa4 <___vfprintf_internal_r+0xa6c>
  8018c0:	20803fcc 	andi	r2,r4,255
  8018c4:	1080201c 	xori	r2,r2,128
  8018c8:	10bfe004 	addi	r2,r2,-128
  8018cc:	00c00c04 	movi	r3,48
  8018d0:	10fdb426 	beq	r2,r3,800fa4 <___vfprintf_internal_r+0xa6c>
  8018d4:	31bfffc4 	addi	r6,r6,-1
  8018d8:	d9814115 	stw	r6,1284(sp)
  8018dc:	30c00005 	stb	r3,0(r6)
  8018e0:	003db006 	br	800fa4 <___vfprintf_internal_r+0xa6c>
  8018e4:	88800068 	cmpgeui	r2,r17,1
  8018e8:	10002c1e 	bne	r2,zero,80199c <___vfprintf_internal_r+0x1464>
  8018ec:	8800021e 	bne	r17,zero,8018f8 <___vfprintf_internal_r+0x13c0>
  8018f0:	00800244 	movi	r2,9
  8018f4:	14002936 	bltu	r2,r16,80199c <___vfprintf_internal_r+0x1464>
  8018f8:	d90018c4 	addi	r4,sp,99
  8018fc:	dd000f04 	addi	r20,sp,60
  801900:	d9014115 	stw	r4,1284(sp)
  801904:	d9014117 	ldw	r4,1284(sp)
  801908:	80800c04 	addi	r2,r16,48
  80190c:	20800005 	stb	r2,0(r4)
  801910:	003da406 	br	800fa4 <___vfprintf_internal_r+0xa6c>
  801914:	dc400d17 	ldw	r17,52(sp)
  801918:	07002074 	movhi	fp,129
  80191c:	e7180c84 	addi	fp,fp,24626
  801920:	9425883a 	add	r18,r18,r16
  801924:	8c400044 	addi	r17,r17,1
  801928:	008001c4 	movi	r2,7
  80192c:	1f000015 	stw	fp,0(r3)
  801930:	1c000115 	stw	r16,4(r3)
  801934:	dc800e15 	stw	r18,56(sp)
  801938:	dc400d15 	stw	r17,52(sp)
  80193c:	147de216 	blt	r2,r17,8010c8 <___vfprintf_internal_r+0xb90>
  801940:	18c00204 	addi	r3,r3,8
  801944:	003c7a06 	br	800b30 <___vfprintf_internal_r+0x5f8>
  801948:	01000084 	movi	r4,2
  80194c:	d8000405 	stb	zero,16(sp)
  801950:	003d8706 	br	800f70 <___vfprintf_internal_r+0xa38>
  801954:	d9814c17 	ldw	r6,1328(sp)
  801958:	30c4703a 	and	r2,r6,r3
  80195c:	1005003a 	cmpeq	r2,r2,zero
  801960:	103cb926 	beq	r2,zero,800c48 <___vfprintf_internal_r+0x710>
  801964:	d9014117 	ldw	r4,1284(sp)
  801968:	94800044 	addi	r18,r18,1
  80196c:	8c400044 	addi	r17,r17,1
  801970:	008001c4 	movi	r2,7
  801974:	a9000015 	stw	r4,0(r21)
  801978:	a8c00115 	stw	r3,4(r21)
  80197c:	dc800e15 	stw	r18,56(sp)
  801980:	dc400d15 	stw	r17,52(sp)
  801984:	147e6616 	blt	r2,r17,801320 <___vfprintf_internal_r+0xde8>
  801988:	acc00204 	addi	r19,r21,8
  80198c:	003cd706 	br	800cec <___vfprintf_internal_r+0x7b4>
  801990:	07002074 	movhi	fp,129
  801994:	e7180c84 	addi	fp,fp,24626
  801998:	003c4f06 	br	800ad8 <___vfprintf_internal_r+0x5a0>
  80199c:	dd000f04 	addi	r20,sp,60
  8019a0:	dc801904 	addi	r18,sp,100
  8019a4:	8009883a 	mov	r4,r16
  8019a8:	880b883a 	mov	r5,r17
  8019ac:	01800284 	movi	r6,10
  8019b0:	000f883a 	mov	r7,zero
  8019b4:	0807fdc0 	call	807fdc <__umoddi3>
  8019b8:	12000c04 	addi	r8,r2,48
  8019bc:	94bfffc4 	addi	r18,r18,-1
  8019c0:	8009883a 	mov	r4,r16
  8019c4:	880b883a 	mov	r5,r17
  8019c8:	01800284 	movi	r6,10
  8019cc:	000f883a 	mov	r7,zero
  8019d0:	92000005 	stb	r8,0(r18)
  8019d4:	0807a000 	call	807a00 <__udivdi3>
  8019d8:	1009883a 	mov	r4,r2
  8019dc:	1021883a 	mov	r16,r2
  8019e0:	18800068 	cmpgeui	r2,r3,1
  8019e4:	1823883a 	mov	r17,r3
  8019e8:	103fee1e 	bne	r2,zero,8019a4 <___vfprintf_internal_r+0x146c>
  8019ec:	1800021e 	bne	r3,zero,8019f8 <___vfprintf_internal_r+0x14c0>
  8019f0:	00800244 	movi	r2,9
  8019f4:	113feb36 	bltu	r2,r4,8019a4 <___vfprintf_internal_r+0x146c>
  8019f8:	94bfffc4 	addi	r18,r18,-1
  8019fc:	dc814115 	stw	r18,1284(sp)
  801a00:	003fc006 	br	801904 <___vfprintf_internal_r+0x13cc>
  801a04:	d9014c17 	ldw	r4,1328(sp)
  801a08:	2080004c 	andi	r2,r4,1
  801a0c:	10009a1e 	bne	r2,zero,801c78 <___vfprintf_internal_r+0x1740>
  801a10:	d9401904 	addi	r5,sp,100
  801a14:	dd000f04 	addi	r20,sp,60
  801a18:	d9414115 	stw	r5,1284(sp)
  801a1c:	003d6106 	br	800fa4 <___vfprintf_internal_r+0xa6c>
  801a20:	d9014f17 	ldw	r4,1340(sp)
  801a24:	b00b883a 	mov	r5,r22
  801a28:	d9800c04 	addi	r6,sp,48
  801a2c:	08004e00 	call	8004e0 <__sprint_r>
  801a30:	103c791e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801a34:	dc800e17 	ldw	r18,56(sp)
  801a38:	d8c01904 	addi	r3,sp,100
  801a3c:	003cff06 	br	800e3c <___vfprintf_internal_r+0x904>
  801a40:	d8c14c17 	ldw	r3,1328(sp)
  801a44:	1880040c 	andi	r2,r3,16
  801a48:	1000711e 	bne	r2,zero,801c10 <___vfprintf_internal_r+0x16d8>
  801a4c:	d9014c17 	ldw	r4,1328(sp)
  801a50:	2080100c 	andi	r2,r4,64
  801a54:	10006e26 	beq	r2,zero,801c10 <___vfprintf_internal_r+0x16d8>
  801a58:	3c00000b 	ldhu	r16,0(r7)
  801a5c:	0023883a 	mov	r17,zero
  801a60:	39c00104 	addi	r7,r7,4
  801a64:	d9c14015 	stw	r7,1280(sp)
  801a68:	003f0006 	br	80166c <___vfprintf_internal_r+0x1134>
  801a6c:	dc400d17 	ldw	r17,52(sp)
  801a70:	07002074 	movhi	fp,129
  801a74:	e7180c84 	addi	fp,fp,24626
  801a78:	9425883a 	add	r18,r18,r16
  801a7c:	8c400044 	addi	r17,r17,1
  801a80:	008001c4 	movi	r2,7
  801a84:	1f000015 	stw	fp,0(r3)
  801a88:	1c000115 	stw	r16,4(r3)
  801a8c:	dc800e15 	stw	r18,56(sp)
  801a90:	dc400d15 	stw	r17,52(sp)
  801a94:	147d7616 	blt	r2,r17,801070 <___vfprintf_internal_r+0xb38>
  801a98:	18c00204 	addi	r3,r3,8
  801a9c:	003d7b06 	br	80108c <___vfprintf_internal_r+0xb54>
  801aa0:	dc800e17 	ldw	r18,56(sp)
  801aa4:	dc400d17 	ldw	r17,52(sp)
  801aa8:	07002074 	movhi	fp,129
  801aac:	e7181084 	addi	fp,fp,24642
  801ab0:	003bc006 	br	8009b4 <___vfprintf_internal_r+0x47c>
  801ab4:	d9014f17 	ldw	r4,1340(sp)
  801ab8:	b00b883a 	mov	r5,r22
  801abc:	d9800c04 	addi	r6,sp,48
  801ac0:	08004e00 	call	8004e0 <__sprint_r>
  801ac4:	103c541e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801ac8:	dc800e17 	ldw	r18,56(sp)
  801acc:	d8c01904 	addi	r3,sp,100
  801ad0:	003ce906 	br	800e78 <___vfprintf_internal_r+0x940>
  801ad4:	3c000017 	ldw	r16,0(r7)
  801ad8:	0009883a 	mov	r4,zero
  801adc:	39c00104 	addi	r7,r7,4
  801ae0:	0023883a 	mov	r17,zero
  801ae4:	d9c14015 	stw	r7,1280(sp)
  801ae8:	d8000405 	stb	zero,16(sp)
  801aec:	003d2006 	br	800f70 <___vfprintf_internal_r+0xa38>
  801af0:	38800017 	ldw	r2,0(r7)
  801af4:	39c00104 	addi	r7,r7,4
  801af8:	d9c14015 	stw	r7,1280(sp)
  801afc:	1023d7fa 	srai	r17,r2,31
  801b00:	1021883a 	mov	r16,r2
  801b04:	003d1806 	br	800f68 <___vfprintf_internal_r+0xa30>
  801b08:	3c000017 	ldw	r16,0(r7)
  801b0c:	01000044 	movi	r4,1
  801b10:	39c00104 	addi	r7,r7,4
  801b14:	0023883a 	mov	r17,zero
  801b18:	d9c14015 	stw	r7,1280(sp)
  801b1c:	d8000405 	stb	zero,16(sp)
  801b20:	003d1306 	br	800f70 <___vfprintf_internal_r+0xa38>
  801b24:	00802074 	movhi	r2,129
  801b28:	10980c04 	addi	r2,r2,24624
  801b2c:	94800044 	addi	r18,r18,1
  801b30:	8c400044 	addi	r17,r17,1
  801b34:	a8800015 	stw	r2,0(r21)
  801b38:	00c00044 	movi	r3,1
  801b3c:	008001c4 	movi	r2,7
  801b40:	a8c00115 	stw	r3,4(r21)
  801b44:	dc800e15 	stw	r18,56(sp)
  801b48:	dc400d15 	stw	r17,52(sp)
  801b4c:	1440ca16 	blt	r2,r17,801e78 <___vfprintf_internal_r+0x1940>
  801b50:	a8c00204 	addi	r3,r21,8
  801b54:	2000061e 	bne	r4,zero,801b70 <___vfprintf_internal_r+0x1638>
  801b58:	d9414717 	ldw	r5,1308(sp)
  801b5c:	2800041e 	bne	r5,zero,801b70 <___vfprintf_internal_r+0x1638>
  801b60:	d9814c17 	ldw	r6,1328(sp)
  801b64:	3080004c 	andi	r2,r6,1
  801b68:	1005003a 	cmpeq	r2,r2,zero
  801b6c:	103bf01e 	bne	r2,zero,800b30 <___vfprintf_internal_r+0x5f8>
  801b70:	00800044 	movi	r2,1
  801b74:	dc400d17 	ldw	r17,52(sp)
  801b78:	18800115 	stw	r2,4(r3)
  801b7c:	d8814917 	ldw	r2,1316(sp)
  801b80:	94800044 	addi	r18,r18,1
  801b84:	8c400044 	addi	r17,r17,1
  801b88:	18800015 	stw	r2,0(r3)
  801b8c:	008001c4 	movi	r2,7
  801b90:	dc800e15 	stw	r18,56(sp)
  801b94:	dc400d15 	stw	r17,52(sp)
  801b98:	1440ca16 	blt	r2,r17,801ec4 <___vfprintf_internal_r+0x198c>
  801b9c:	18c00204 	addi	r3,r3,8
  801ba0:	0121c83a 	sub	r16,zero,r4
  801ba4:	0400500e 	bge	zero,r16,801ce8 <___vfprintf_internal_r+0x17b0>
  801ba8:	00800404 	movi	r2,16
  801bac:	1400800e 	bge	r2,r16,801db0 <___vfprintf_internal_r+0x1878>
  801bb0:	1027883a 	mov	r19,r2
  801bb4:	07002074 	movhi	fp,129
  801bb8:	e7180c84 	addi	fp,fp,24626
  801bbc:	050001c4 	movi	r20,7
  801bc0:	00000306 	br	801bd0 <___vfprintf_internal_r+0x1698>
  801bc4:	18c00204 	addi	r3,r3,8
  801bc8:	843ffc04 	addi	r16,r16,-16
  801bcc:	9c007a0e 	bge	r19,r16,801db8 <___vfprintf_internal_r+0x1880>
  801bd0:	94800404 	addi	r18,r18,16
  801bd4:	8c400044 	addi	r17,r17,1
  801bd8:	1f000015 	stw	fp,0(r3)
  801bdc:	1cc00115 	stw	r19,4(r3)
  801be0:	dc800e15 	stw	r18,56(sp)
  801be4:	dc400d15 	stw	r17,52(sp)
  801be8:	a47ff60e 	bge	r20,r17,801bc4 <___vfprintf_internal_r+0x168c>
  801bec:	d9014f17 	ldw	r4,1340(sp)
  801bf0:	b00b883a 	mov	r5,r22
  801bf4:	d9800c04 	addi	r6,sp,48
  801bf8:	08004e00 	call	8004e0 <__sprint_r>
  801bfc:	103c061e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801c00:	dc800e17 	ldw	r18,56(sp)
  801c04:	dc400d17 	ldw	r17,52(sp)
  801c08:	d8c01904 	addi	r3,sp,100
  801c0c:	003fee06 	br	801bc8 <___vfprintf_internal_r+0x1690>
  801c10:	3c000017 	ldw	r16,0(r7)
  801c14:	0023883a 	mov	r17,zero
  801c18:	39c00104 	addi	r7,r7,4
  801c1c:	d9c14015 	stw	r7,1280(sp)
  801c20:	003e9206 	br	80166c <___vfprintf_internal_r+0x1134>
  801c24:	d9401904 	addi	r5,sp,100
  801c28:	dd000f04 	addi	r20,sp,60
  801c2c:	d9414115 	stw	r5,1284(sp)
  801c30:	d9814417 	ldw	r6,1296(sp)
  801c34:	880a973a 	slli	r5,r17,28
  801c38:	8004d13a 	srli	r2,r16,4
  801c3c:	810003cc 	andi	r4,r16,15
  801c40:	3109883a 	add	r4,r6,r4
  801c44:	2884b03a 	or	r2,r5,r2
  801c48:	21400003 	ldbu	r5,0(r4)
  801c4c:	d9014117 	ldw	r4,1284(sp)
  801c50:	8806d13a 	srli	r3,r17,4
  801c54:	1021883a 	mov	r16,r2
  801c58:	213fffc4 	addi	r4,r4,-1
  801c5c:	d9014115 	stw	r4,1284(sp)
  801c60:	d9814117 	ldw	r6,1284(sp)
  801c64:	10c8b03a 	or	r4,r2,r3
  801c68:	1823883a 	mov	r17,r3
  801c6c:	31400005 	stb	r5,0(r6)
  801c70:	203fef1e 	bne	r4,zero,801c30 <___vfprintf_internal_r+0x16f8>
  801c74:	003ccb06 	br	800fa4 <___vfprintf_internal_r+0xa6c>
  801c78:	00800c04 	movi	r2,48
  801c7c:	d98018c4 	addi	r6,sp,99
  801c80:	dd000f04 	addi	r20,sp,60
  801c84:	d88018c5 	stb	r2,99(sp)
  801c88:	d9814115 	stw	r6,1284(sp)
  801c8c:	003cc506 	br	800fa4 <___vfprintf_internal_r+0xa6c>
  801c90:	dc400d17 	ldw	r17,52(sp)
  801c94:	07002074 	movhi	fp,129
  801c98:	e7181084 	addi	fp,fp,24642
  801c9c:	003bc706 	br	800bbc <___vfprintf_internal_r+0x684>
  801ca0:	d9414c17 	ldw	r5,1328(sp)
  801ca4:	2880040c 	andi	r2,r5,16
  801ca8:	10007c26 	beq	r2,zero,801e9c <___vfprintf_internal_r+0x1964>
  801cac:	38800017 	ldw	r2,0(r7)
  801cb0:	39c00104 	addi	r7,r7,4
  801cb4:	d9c14015 	stw	r7,1280(sp)
  801cb8:	d9814b17 	ldw	r6,1324(sp)
  801cbc:	d9c14017 	ldw	r7,1280(sp)
  801cc0:	11800015 	stw	r6,0(r2)
  801cc4:	003a7806 	br	8006a8 <___vfprintf_internal_r+0x170>
  801cc8:	d9014f17 	ldw	r4,1340(sp)
  801ccc:	b00b883a 	mov	r5,r22
  801cd0:	d9800c04 	addi	r6,sp,48
  801cd4:	08004e00 	call	8004e0 <__sprint_r>
  801cd8:	103bcf1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801cdc:	dc800e17 	ldw	r18,56(sp)
  801ce0:	dc400d17 	ldw	r17,52(sp)
  801ce4:	d8c01904 	addi	r3,sp,100
  801ce8:	d9014717 	ldw	r4,1308(sp)
  801cec:	d9414117 	ldw	r5,1284(sp)
  801cf0:	8c400044 	addi	r17,r17,1
  801cf4:	9125883a 	add	r18,r18,r4
  801cf8:	008001c4 	movi	r2,7
  801cfc:	19400015 	stw	r5,0(r3)
  801d00:	19000115 	stw	r4,4(r3)
  801d04:	dc800e15 	stw	r18,56(sp)
  801d08:	dc400d15 	stw	r17,52(sp)
  801d0c:	147cee16 	blt	r2,r17,8010c8 <___vfprintf_internal_r+0xb90>
  801d10:	18c00204 	addi	r3,r3,8
  801d14:	003b8606 	br	800b30 <___vfprintf_internal_r+0x5f8>
  801d18:	38c00017 	ldw	r3,0(r7)
  801d1c:	39000204 	addi	r4,r7,8
  801d20:	d9014015 	stw	r4,1280(sp)
  801d24:	d8c14215 	stw	r3,1288(sp)
  801d28:	39c00117 	ldw	r7,4(r7)
  801d2c:	d9c14315 	stw	r7,1292(sp)
  801d30:	003e2006 	br	8015b4 <___vfprintf_internal_r+0x107c>
  801d34:	0005883a 	mov	r2,zero
  801d38:	1409c83a 	sub	r4,r2,r16
  801d3c:	1105803a 	cmpltu	r2,r2,r4
  801d40:	044bc83a 	sub	r5,zero,r17
  801d44:	2885c83a 	sub	r2,r5,r2
  801d48:	2021883a 	mov	r16,r4
  801d4c:	1023883a 	mov	r17,r2
  801d50:	01000044 	movi	r4,1
  801d54:	00800b44 	movi	r2,45
  801d58:	d8800405 	stb	r2,16(sp)
  801d5c:	003c8406 	br	800f70 <___vfprintf_internal_r+0xa38>
  801d60:	d9014f17 	ldw	r4,1340(sp)
  801d64:	b00b883a 	mov	r5,r22
  801d68:	d9800c04 	addi	r6,sp,48
  801d6c:	08004e00 	call	8004e0 <__sprint_r>
  801d70:	103ba91e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801d74:	dc800e17 	ldw	r18,56(sp)
  801d78:	dc400d17 	ldw	r17,52(sp)
  801d7c:	d9000517 	ldw	r4,20(sp)
  801d80:	d9401904 	addi	r5,sp,100
  801d84:	003da706 	br	801424 <___vfprintf_internal_r+0xeec>
  801d88:	d9014f17 	ldw	r4,1340(sp)
  801d8c:	b00b883a 	mov	r5,r22
  801d90:	d9800c04 	addi	r6,sp,48
  801d94:	08004e00 	call	8004e0 <__sprint_r>
  801d98:	103b9f1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801d9c:	dc800e17 	ldw	r18,56(sp)
  801da0:	dc400d17 	ldw	r17,52(sp)
  801da4:	d9000517 	ldw	r4,20(sp)
  801da8:	d8c01904 	addi	r3,sp,100
  801dac:	003d9106 	br	8013f4 <___vfprintf_internal_r+0xebc>
  801db0:	07002074 	movhi	fp,129
  801db4:	e7180c84 	addi	fp,fp,24626
  801db8:	9425883a 	add	r18,r18,r16
  801dbc:	8c400044 	addi	r17,r17,1
  801dc0:	008001c4 	movi	r2,7
  801dc4:	1f000015 	stw	fp,0(r3)
  801dc8:	1c000115 	stw	r16,4(r3)
  801dcc:	dc800e15 	stw	r18,56(sp)
  801dd0:	dc400d15 	stw	r17,52(sp)
  801dd4:	147fbc16 	blt	r2,r17,801cc8 <___vfprintf_internal_r+0x1790>
  801dd8:	18c00204 	addi	r3,r3,8
  801ddc:	003fc206 	br	801ce8 <___vfprintf_internal_r+0x17b0>
  801de0:	d9014f17 	ldw	r4,1340(sp)
  801de4:	b00b883a 	mov	r5,r22
  801de8:	d9800c04 	addi	r6,sp,48
  801dec:	08004e00 	call	8004e0 <__sprint_r>
  801df0:	103b891e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801df4:	dc800e17 	ldw	r18,56(sp)
  801df8:	d9000517 	ldw	r4,20(sp)
  801dfc:	d8c01904 	addi	r3,sp,100
  801e00:	003d0206 	br	80120c <___vfprintf_internal_r+0xcd4>
  801e04:	07002074 	movhi	fp,129
  801e08:	e7180c84 	addi	fp,fp,24626
  801e0c:	003be406 	br	800da0 <___vfprintf_internal_r+0x868>
  801e10:	00802074 	movhi	r2,129
  801e14:	1097fb04 	addi	r2,r2,24556
  801e18:	d8814115 	stw	r2,1284(sp)
  801e1c:	003df506 	br	8015f4 <___vfprintf_internal_r+0x10bc>
  801e20:	d9014217 	ldw	r4,1288(sp)
  801e24:	d9414317 	ldw	r5,1292(sp)
  801e28:	08071040 	call	807104 <__isnand>
  801e2c:	10003926 	beq	r2,zero,801f14 <___vfprintf_internal_r+0x19dc>
  801e30:	d9414d17 	ldw	r5,1332(sp)
  801e34:	008011c4 	movi	r2,71
  801e38:	1140ce16 	blt	r2,r5,802174 <___vfprintf_internal_r+0x1c3c>
  801e3c:	01802074 	movhi	r6,129
  801e40:	3197fc04 	addi	r6,r6,24560
  801e44:	d9814115 	stw	r6,1284(sp)
  801e48:	003dea06 	br	8015f4 <___vfprintf_internal_r+0x10bc>
  801e4c:	d9014c17 	ldw	r4,1328(sp)
  801e50:	bdc00044 	addi	r23,r23,1
  801e54:	b8c00007 	ldb	r3,0(r23)
  801e58:	21000814 	ori	r4,r4,32
  801e5c:	d9014c15 	stw	r4,1328(sp)
  801e60:	003a3406 	br	800734 <___vfprintf_internal_r+0x1fc>
  801e64:	dcc14515 	stw	r19,1300(sp)
  801e68:	98011016 	blt	r19,zero,8022ac <___vfprintf_internal_r+0x1d74>
  801e6c:	980f883a 	mov	r7,r19
  801e70:	d8014615 	stw	zero,1304(sp)
  801e74:	003c5206 	br	800fc0 <___vfprintf_internal_r+0xa88>
  801e78:	d9014f17 	ldw	r4,1340(sp)
  801e7c:	b00b883a 	mov	r5,r22
  801e80:	d9800c04 	addi	r6,sp,48
  801e84:	08004e00 	call	8004e0 <__sprint_r>
  801e88:	103b631e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801e8c:	dc800e17 	ldw	r18,56(sp)
  801e90:	d9000517 	ldw	r4,20(sp)
  801e94:	d8c01904 	addi	r3,sp,100
  801e98:	003f2e06 	br	801b54 <___vfprintf_internal_r+0x161c>
  801e9c:	d8c14c17 	ldw	r3,1328(sp)
  801ea0:	1880100c 	andi	r2,r3,64
  801ea4:	1000a026 	beq	r2,zero,802128 <___vfprintf_internal_r+0x1bf0>
  801ea8:	38800017 	ldw	r2,0(r7)
  801eac:	39c00104 	addi	r7,r7,4
  801eb0:	d9c14015 	stw	r7,1280(sp)
  801eb4:	d9014b17 	ldw	r4,1324(sp)
  801eb8:	d9c14017 	ldw	r7,1280(sp)
  801ebc:	1100000d 	sth	r4,0(r2)
  801ec0:	0039f906 	br	8006a8 <___vfprintf_internal_r+0x170>
  801ec4:	d9014f17 	ldw	r4,1340(sp)
  801ec8:	b00b883a 	mov	r5,r22
  801ecc:	d9800c04 	addi	r6,sp,48
  801ed0:	08004e00 	call	8004e0 <__sprint_r>
  801ed4:	103b501e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  801ed8:	dc800e17 	ldw	r18,56(sp)
  801edc:	dc400d17 	ldw	r17,52(sp)
  801ee0:	d9000517 	ldw	r4,20(sp)
  801ee4:	d8c01904 	addi	r3,sp,100
  801ee8:	003f2d06 	br	801ba0 <___vfprintf_internal_r+0x1668>
  801eec:	00800184 	movi	r2,6
  801ef0:	14c09a36 	bltu	r2,r19,80215c <___vfprintf_internal_r+0x1c24>
  801ef4:	dcc14515 	stw	r19,1300(sp)
  801ef8:	9800010e 	bge	r19,zero,801f00 <___vfprintf_internal_r+0x19c8>
  801efc:	d8014515 	stw	zero,1300(sp)
  801f00:	00802074 	movhi	r2,129
  801f04:	1097fe04 	addi	r2,r2,24568
  801f08:	980f883a 	mov	r7,r19
  801f0c:	d8814115 	stw	r2,1284(sp)
  801f10:	003a7806 	br	8008f4 <___vfprintf_internal_r+0x3bc>
  801f14:	00bfffc4 	movi	r2,-1
  801f18:	9880e226 	beq	r19,r2,8022a4 <___vfprintf_internal_r+0x1d6c>
  801f1c:	d9414d17 	ldw	r5,1332(sp)
  801f20:	008019c4 	movi	r2,103
  801f24:	2880dc26 	beq	r5,r2,802298 <___vfprintf_internal_r+0x1d60>
  801f28:	008011c4 	movi	r2,71
  801f2c:	2880da26 	beq	r5,r2,802298 <___vfprintf_internal_r+0x1d60>
  801f30:	d9414c17 	ldw	r5,1328(sp)
  801f34:	d9014317 	ldw	r4,1292(sp)
  801f38:	d9814217 	ldw	r6,1288(sp)
  801f3c:	29404014 	ori	r5,r5,256
  801f40:	d9414c15 	stw	r5,1328(sp)
  801f44:	2000cc16 	blt	r4,zero,802278 <___vfprintf_internal_r+0x1d40>
  801f48:	3021883a 	mov	r16,r6
  801f4c:	2023883a 	mov	r17,r4
  801f50:	0039883a 	mov	fp,zero
  801f54:	d9414d17 	ldw	r5,1332(sp)
  801f58:	00801984 	movi	r2,102
  801f5c:	2880b726 	beq	r5,r2,80223c <___vfprintf_internal_r+0x1d04>
  801f60:	00801184 	movi	r2,70
  801f64:	2880b526 	beq	r5,r2,80223c <___vfprintf_internal_r+0x1d04>
  801f68:	00801944 	movi	r2,101
  801f6c:	2880c826 	beq	r5,r2,802290 <___vfprintf_internal_r+0x1d58>
  801f70:	00801144 	movi	r2,69
  801f74:	2880c626 	beq	r5,r2,802290 <___vfprintf_internal_r+0x1d58>
  801f78:	9829883a 	mov	r20,r19
  801f7c:	d9014f17 	ldw	r4,1340(sp)
  801f80:	d8800504 	addi	r2,sp,20
  801f84:	880d883a 	mov	r6,r17
  801f88:	d8800115 	stw	r2,4(sp)
  801f8c:	d8c00604 	addi	r3,sp,24
  801f90:	d8800704 	addi	r2,sp,28
  801f94:	800b883a 	mov	r5,r16
  801f98:	01c00084 	movi	r7,2
  801f9c:	d8c00215 	stw	r3,8(sp)
  801fa0:	d8800315 	stw	r2,12(sp)
  801fa4:	dd000015 	stw	r20,0(sp)
  801fa8:	080275c0 	call	80275c <_dtoa_r>
  801fac:	d9814d17 	ldw	r6,1332(sp)
  801fb0:	d8814115 	stw	r2,1284(sp)
  801fb4:	008019c4 	movi	r2,103
  801fb8:	30809526 	beq	r6,r2,802210 <___vfprintf_internal_r+0x1cd8>
  801fbc:	d8c14d17 	ldw	r3,1332(sp)
  801fc0:	008011c4 	movi	r2,71
  801fc4:	18809226 	beq	r3,r2,802210 <___vfprintf_internal_r+0x1cd8>
  801fc8:	d9414117 	ldw	r5,1284(sp)
  801fcc:	d9814d17 	ldw	r6,1332(sp)
  801fd0:	00801984 	movi	r2,102
  801fd4:	2d25883a 	add	r18,r5,r20
  801fd8:	30808626 	beq	r6,r2,8021f4 <___vfprintf_internal_r+0x1cbc>
  801fdc:	00801184 	movi	r2,70
  801fe0:	30808426 	beq	r6,r2,8021f4 <___vfprintf_internal_r+0x1cbc>
  801fe4:	000d883a 	mov	r6,zero
  801fe8:	000f883a 	mov	r7,zero
  801fec:	880b883a 	mov	r5,r17
  801ff0:	8009883a 	mov	r4,r16
  801ff4:	08090ac0 	call	8090ac <__eqdf2>
  801ff8:	1000751e 	bne	r2,zero,8021d0 <___vfprintf_internal_r+0x1c98>
  801ffc:	9005883a 	mov	r2,r18
  802000:	dc800715 	stw	r18,28(sp)
  802004:	d9014117 	ldw	r4,1284(sp)
  802008:	d9414d17 	ldw	r5,1332(sp)
  80200c:	00c019c4 	movi	r3,103
  802010:	1125c83a 	sub	r18,r2,r4
  802014:	28c06826 	beq	r5,r3,8021b8 <___vfprintf_internal_r+0x1c80>
  802018:	008011c4 	movi	r2,71
  80201c:	28806626 	beq	r5,r2,8021b8 <___vfprintf_internal_r+0x1c80>
  802020:	d9000517 	ldw	r4,20(sp)
  802024:	d8c14d17 	ldw	r3,1332(sp)
  802028:	00801944 	movi	r2,101
  80202c:	10c05516 	blt	r2,r3,802184 <___vfprintf_internal_r+0x1c4c>
  802030:	213fffc4 	addi	r4,r4,-1
  802034:	d9000515 	stw	r4,20(sp)
  802038:	d8c00805 	stb	r3,32(sp)
  80203c:	2021883a 	mov	r16,r4
  802040:	2000c116 	blt	r4,zero,802348 <___vfprintf_internal_r+0x1e10>
  802044:	00800ac4 	movi	r2,43
  802048:	d8800845 	stb	r2,33(sp)
  80204c:	00800244 	movi	r2,9
  802050:	1400af0e 	bge	r2,r16,802310 <___vfprintf_internal_r+0x1dd8>
  802054:	1027883a 	mov	r19,r2
  802058:	dc400b84 	addi	r17,sp,46
  80205c:	8009883a 	mov	r4,r16
  802060:	01400284 	movi	r5,10
  802064:	08003d40 	call	8003d4 <__modsi3>
  802068:	10800c04 	addi	r2,r2,48
  80206c:	8c7fffc4 	addi	r17,r17,-1
  802070:	8009883a 	mov	r4,r16
  802074:	01400284 	movi	r5,10
  802078:	88800005 	stb	r2,0(r17)
  80207c:	08003740 	call	800374 <__divsi3>
  802080:	1021883a 	mov	r16,r2
  802084:	98bff516 	blt	r19,r2,80205c <___vfprintf_internal_r+0x1b24>
  802088:	10c00c04 	addi	r3,r2,48
  80208c:	d88009c4 	addi	r2,sp,39
  802090:	108001c4 	addi	r2,r2,7
  802094:	897fffc4 	addi	r5,r17,-1
  802098:	88ffffc5 	stb	r3,-1(r17)
  80209c:	2880a72e 	bgeu	r5,r2,80233c <___vfprintf_internal_r+0x1e04>
  8020a0:	1009883a 	mov	r4,r2
  8020a4:	d9800804 	addi	r6,sp,32
  8020a8:	d8c00884 	addi	r3,sp,34
  8020ac:	28800003 	ldbu	r2,0(r5)
  8020b0:	29400044 	addi	r5,r5,1
  8020b4:	18800005 	stb	r2,0(r3)
  8020b8:	18c00044 	addi	r3,r3,1
  8020bc:	293ffb36 	bltu	r5,r4,8020ac <___vfprintf_internal_r+0x1b74>
  8020c0:	1987c83a 	sub	r3,r3,r6
  8020c4:	00800044 	movi	r2,1
  8020c8:	d8c14815 	stw	r3,1312(sp)
  8020cc:	90cf883a 	add	r7,r18,r3
  8020d0:	1480960e 	bge	r2,r18,80232c <___vfprintf_internal_r+0x1df4>
  8020d4:	39c00044 	addi	r7,r7,1
  8020d8:	d9c14515 	stw	r7,1300(sp)
  8020dc:	38003416 	blt	r7,zero,8021b0 <___vfprintf_internal_r+0x1c78>
  8020e0:	e0803fcc 	andi	r2,fp,255
  8020e4:	1080201c 	xori	r2,r2,128
  8020e8:	10bfe004 	addi	r2,r2,-128
  8020ec:	10004e26 	beq	r2,zero,802228 <___vfprintf_internal_r+0x1cf0>
  8020f0:	00800b44 	movi	r2,45
  8020f4:	dc814715 	stw	r18,1308(sp)
  8020f8:	d8014615 	stw	zero,1304(sp)
  8020fc:	d8800405 	stb	r2,16(sp)
  802100:	003bb106 	br	800fc8 <___vfprintf_internal_r+0xa90>
  802104:	00800b44 	movi	r2,45
  802108:	d8800405 	stb	r2,16(sp)
  80210c:	003d3306 	br	8015dc <___vfprintf_internal_r+0x10a4>
  802110:	d9014f17 	ldw	r4,1340(sp)
  802114:	b00b883a 	mov	r5,r22
  802118:	d9800c04 	addi	r6,sp,48
  80211c:	08004e00 	call	8004e0 <__sprint_r>
  802120:	103abd1e 	bne	r2,zero,800c18 <___vfprintf_internal_r+0x6e0>
  802124:	003abb06 	br	800c14 <___vfprintf_internal_r+0x6dc>
  802128:	38800017 	ldw	r2,0(r7)
  80212c:	39c00104 	addi	r7,r7,4
  802130:	d9c14015 	stw	r7,1280(sp)
  802134:	d9414b17 	ldw	r5,1324(sp)
  802138:	d9c14017 	ldw	r7,1280(sp)
  80213c:	11400015 	stw	r5,0(r2)
  802140:	00395906 	br	8006a8 <___vfprintf_internal_r+0x170>
  802144:	980f883a 	mov	r7,r19
  802148:	dcc14515 	stw	r19,1300(sp)
  80214c:	d8014615 	stw	zero,1304(sp)
  802150:	003b9b06 	br	800fc0 <___vfprintf_internal_r+0xa88>
  802154:	0027883a 	mov	r19,zero
  802158:	00397806 	br	80073c <___vfprintf_internal_r+0x204>
  80215c:	00c02074 	movhi	r3,129
  802160:	18d7fe04 	addi	r3,r3,24568
  802164:	100f883a 	mov	r7,r2
  802168:	d8814515 	stw	r2,1300(sp)
  80216c:	d8c14115 	stw	r3,1284(sp)
  802170:	0039e006 	br	8008f4 <___vfprintf_internal_r+0x3bc>
  802174:	00802074 	movhi	r2,129
  802178:	1097fd04 	addi	r2,r2,24564
  80217c:	d8814115 	stw	r2,1284(sp)
  802180:	003d1c06 	br	8015f4 <___vfprintf_internal_r+0x10bc>
  802184:	d9414d17 	ldw	r5,1332(sp)
  802188:	00801984 	movi	r2,102
  80218c:	28804926 	beq	r5,r2,8022b4 <___vfprintf_internal_r+0x1d7c>
  802190:	200f883a 	mov	r7,r4
  802194:	24805716 	blt	r4,r18,8022f4 <___vfprintf_internal_r+0x1dbc>
  802198:	d9414c17 	ldw	r5,1328(sp)
  80219c:	2880004c 	andi	r2,r5,1
  8021a0:	10000126 	beq	r2,zero,8021a8 <___vfprintf_internal_r+0x1c70>
  8021a4:	21c00044 	addi	r7,r4,1
  8021a8:	d9c14515 	stw	r7,1300(sp)
  8021ac:	383fcc0e 	bge	r7,zero,8020e0 <___vfprintf_internal_r+0x1ba8>
  8021b0:	d8014515 	stw	zero,1300(sp)
  8021b4:	003fca06 	br	8020e0 <___vfprintf_internal_r+0x1ba8>
  8021b8:	d9000517 	ldw	r4,20(sp)
  8021bc:	00bfff04 	movi	r2,-4
  8021c0:	1100480e 	bge	r2,r4,8022e4 <___vfprintf_internal_r+0x1dac>
  8021c4:	99004716 	blt	r19,r4,8022e4 <___vfprintf_internal_r+0x1dac>
  8021c8:	d8c14d15 	stw	r3,1332(sp)
  8021cc:	003ff006 	br	802190 <___vfprintf_internal_r+0x1c58>
  8021d0:	d8800717 	ldw	r2,28(sp)
  8021d4:	14bf8b2e 	bgeu	r2,r18,802004 <___vfprintf_internal_r+0x1acc>
  8021d8:	9007883a 	mov	r3,r18
  8021dc:	01000c04 	movi	r4,48
  8021e0:	11000005 	stb	r4,0(r2)
  8021e4:	10800044 	addi	r2,r2,1
  8021e8:	d8800715 	stw	r2,28(sp)
  8021ec:	18bffc1e 	bne	r3,r2,8021e0 <___vfprintf_internal_r+0x1ca8>
  8021f0:	003f8406 	br	802004 <___vfprintf_internal_r+0x1acc>
  8021f4:	d8814117 	ldw	r2,1284(sp)
  8021f8:	10c00007 	ldb	r3,0(r2)
  8021fc:	00800c04 	movi	r2,48
  802200:	18805b26 	beq	r3,r2,802370 <___vfprintf_internal_r+0x1e38>
  802204:	d9000517 	ldw	r4,20(sp)
  802208:	9125883a 	add	r18,r18,r4
  80220c:	003f7506 	br	801fe4 <___vfprintf_internal_r+0x1aac>
  802210:	d9014c17 	ldw	r4,1328(sp)
  802214:	2080004c 	andi	r2,r4,1
  802218:	1005003a 	cmpeq	r2,r2,zero
  80221c:	103f6a26 	beq	r2,zero,801fc8 <___vfprintf_internal_r+0x1a90>
  802220:	d8800717 	ldw	r2,28(sp)
  802224:	003f7706 	br	802004 <___vfprintf_internal_r+0x1acc>
  802228:	d9c14515 	stw	r7,1300(sp)
  80222c:	38004d16 	blt	r7,zero,802364 <___vfprintf_internal_r+0x1e2c>
  802230:	dc814715 	stw	r18,1308(sp)
  802234:	d8014615 	stw	zero,1304(sp)
  802238:	003b6106 	br	800fc0 <___vfprintf_internal_r+0xa88>
  80223c:	d9014f17 	ldw	r4,1340(sp)
  802240:	d8800504 	addi	r2,sp,20
  802244:	d8800115 	stw	r2,4(sp)
  802248:	d8c00604 	addi	r3,sp,24
  80224c:	d8800704 	addi	r2,sp,28
  802250:	800b883a 	mov	r5,r16
  802254:	880d883a 	mov	r6,r17
  802258:	01c000c4 	movi	r7,3
  80225c:	d8c00215 	stw	r3,8(sp)
  802260:	d8800315 	stw	r2,12(sp)
  802264:	dcc00015 	stw	r19,0(sp)
  802268:	9829883a 	mov	r20,r19
  80226c:	080275c0 	call	80275c <_dtoa_r>
  802270:	d8814115 	stw	r2,1284(sp)
  802274:	003f5106 	br	801fbc <___vfprintf_internal_r+0x1a84>
  802278:	d8c14217 	ldw	r3,1288(sp)
  80227c:	d9014317 	ldw	r4,1292(sp)
  802280:	07000b44 	movi	fp,45
  802284:	1821883a 	mov	r16,r3
  802288:	2460003c 	xorhi	r17,r4,32768
  80228c:	003f3106 	br	801f54 <___vfprintf_internal_r+0x1a1c>
  802290:	9d000044 	addi	r20,r19,1
  802294:	003f3906 	br	801f7c <___vfprintf_internal_r+0x1a44>
  802298:	983f251e 	bne	r19,zero,801f30 <___vfprintf_internal_r+0x19f8>
  80229c:	04c00044 	movi	r19,1
  8022a0:	003f2306 	br	801f30 <___vfprintf_internal_r+0x19f8>
  8022a4:	04c00184 	movi	r19,6
  8022a8:	003f2106 	br	801f30 <___vfprintf_internal_r+0x19f8>
  8022ac:	d8014515 	stw	zero,1300(sp)
  8022b0:	003eee06 	br	801e6c <___vfprintf_internal_r+0x1934>
  8022b4:	200f883a 	mov	r7,r4
  8022b8:	0100370e 	bge	zero,r4,802398 <___vfprintf_internal_r+0x1e60>
  8022bc:	9800031e 	bne	r19,zero,8022cc <___vfprintf_internal_r+0x1d94>
  8022c0:	d9814c17 	ldw	r6,1328(sp)
  8022c4:	3080004c 	andi	r2,r6,1
  8022c8:	103fb726 	beq	r2,zero,8021a8 <___vfprintf_internal_r+0x1c70>
  8022cc:	20800044 	addi	r2,r4,1
  8022d0:	98a7883a 	add	r19,r19,r2
  8022d4:	dcc14515 	stw	r19,1300(sp)
  8022d8:	980f883a 	mov	r7,r19
  8022dc:	983f800e 	bge	r19,zero,8020e0 <___vfprintf_internal_r+0x1ba8>
  8022e0:	003fb306 	br	8021b0 <___vfprintf_internal_r+0x1c78>
  8022e4:	d9814d17 	ldw	r6,1332(sp)
  8022e8:	31bfff84 	addi	r6,r6,-2
  8022ec:	d9814d15 	stw	r6,1332(sp)
  8022f0:	003f4c06 	br	802024 <___vfprintf_internal_r+0x1aec>
  8022f4:	0100180e 	bge	zero,r4,802358 <___vfprintf_internal_r+0x1e20>
  8022f8:	00800044 	movi	r2,1
  8022fc:	1485883a 	add	r2,r2,r18
  802300:	d8814515 	stw	r2,1300(sp)
  802304:	100f883a 	mov	r7,r2
  802308:	103f750e 	bge	r2,zero,8020e0 <___vfprintf_internal_r+0x1ba8>
  80230c:	003fa806 	br	8021b0 <___vfprintf_internal_r+0x1c78>
  802310:	80c00c04 	addi	r3,r16,48
  802314:	00800c04 	movi	r2,48
  802318:	d8c008c5 	stb	r3,35(sp)
  80231c:	d9800804 	addi	r6,sp,32
  802320:	d8c00904 	addi	r3,sp,36
  802324:	d8800885 	stb	r2,34(sp)
  802328:	003f6506 	br	8020c0 <___vfprintf_internal_r+0x1b88>
  80232c:	d9014c17 	ldw	r4,1328(sp)
  802330:	2084703a 	and	r2,r4,r2
  802334:	103f9c26 	beq	r2,zero,8021a8 <___vfprintf_internal_r+0x1c70>
  802338:	003f6606 	br	8020d4 <___vfprintf_internal_r+0x1b9c>
  80233c:	d9800804 	addi	r6,sp,32
  802340:	d8c00884 	addi	r3,sp,34
  802344:	003f5e06 	br	8020c0 <___vfprintf_internal_r+0x1b88>
  802348:	00800b44 	movi	r2,45
  80234c:	0121c83a 	sub	r16,zero,r4
  802350:	d8800845 	stb	r2,33(sp)
  802354:	003f3d06 	br	80204c <___vfprintf_internal_r+0x1b14>
  802358:	00800084 	movi	r2,2
  80235c:	1105c83a 	sub	r2,r2,r4
  802360:	003fe606 	br	8022fc <___vfprintf_internal_r+0x1dc4>
  802364:	d8014515 	stw	zero,1300(sp)
  802368:	dc814715 	stw	r18,1308(sp)
  80236c:	003fb106 	br	802234 <___vfprintf_internal_r+0x1cfc>
  802370:	000d883a 	mov	r6,zero
  802374:	000f883a 	mov	r7,zero
  802378:	8009883a 	mov	r4,r16
  80237c:	880b883a 	mov	r5,r17
  802380:	08091340 	call	809134 <__nedf2>
  802384:	103f9f26 	beq	r2,zero,802204 <___vfprintf_internal_r+0x1ccc>
  802388:	00800044 	movi	r2,1
  80238c:	1509c83a 	sub	r4,r2,r20
  802390:	d9000515 	stw	r4,20(sp)
  802394:	003f9b06 	br	802204 <___vfprintf_internal_r+0x1ccc>
  802398:	98000d1e 	bne	r19,zero,8023d0 <___vfprintf_internal_r+0x1e98>
  80239c:	d8c14c17 	ldw	r3,1328(sp)
  8023a0:	1880004c 	andi	r2,r3,1
  8023a4:	10000a1e 	bne	r2,zero,8023d0 <___vfprintf_internal_r+0x1e98>
  8023a8:	01000044 	movi	r4,1
  8023ac:	200f883a 	mov	r7,r4
  8023b0:	d9014515 	stw	r4,1300(sp)
  8023b4:	003f4a06 	br	8020e0 <___vfprintf_internal_r+0x1ba8>
  8023b8:	3cc00017 	ldw	r19,0(r7)
  8023bc:	39c00104 	addi	r7,r7,4
  8023c0:	983d0e0e 	bge	r19,zero,8017fc <___vfprintf_internal_r+0x12c4>
  8023c4:	b8c00007 	ldb	r3,0(r23)
  8023c8:	04ffffc4 	movi	r19,-1
  8023cc:	0038d906 	br	800734 <___vfprintf_internal_r+0x1fc>
  8023d0:	9cc00084 	addi	r19,r19,2
  8023d4:	dcc14515 	stw	r19,1300(sp)
  8023d8:	980f883a 	mov	r7,r19
  8023dc:	983f400e 	bge	r19,zero,8020e0 <___vfprintf_internal_r+0x1ba8>
  8023e0:	003f7306 	br	8021b0 <___vfprintf_internal_r+0x1c78>

008023e4 <__vfprintf_internal>:
  8023e4:	00802074 	movhi	r2,129
  8023e8:	109fa904 	addi	r2,r2,32420
  8023ec:	2013883a 	mov	r9,r4
  8023f0:	11000017 	ldw	r4,0(r2)
  8023f4:	2805883a 	mov	r2,r5
  8023f8:	300f883a 	mov	r7,r6
  8023fc:	480b883a 	mov	r5,r9
  802400:	100d883a 	mov	r6,r2
  802404:	08005381 	jmpi	800538 <___vfprintf_internal_r>

00802408 <__swsetup_r>:
  802408:	00802074 	movhi	r2,129
  80240c:	109fa904 	addi	r2,r2,32420
  802410:	10c00017 	ldw	r3,0(r2)
  802414:	defffd04 	addi	sp,sp,-12
  802418:	dc400115 	stw	r17,4(sp)
  80241c:	dc000015 	stw	r16,0(sp)
  802420:	dfc00215 	stw	ra,8(sp)
  802424:	2023883a 	mov	r17,r4
  802428:	2821883a 	mov	r16,r5
  80242c:	18000226 	beq	r3,zero,802438 <__swsetup_r+0x30>
  802430:	18800e17 	ldw	r2,56(r3)
  802434:	10001f26 	beq	r2,zero,8024b4 <__swsetup_r+0xac>
  802438:	8100030b 	ldhu	r4,12(r16)
  80243c:	2080020c 	andi	r2,r4,8
  802440:	10002826 	beq	r2,zero,8024e4 <__swsetup_r+0xdc>
  802444:	81400417 	ldw	r5,16(r16)
  802448:	28001d26 	beq	r5,zero,8024c0 <__swsetup_r+0xb8>
  80244c:	2080004c 	andi	r2,r4,1
  802450:	1005003a 	cmpeq	r2,r2,zero
  802454:	10000b26 	beq	r2,zero,802484 <__swsetup_r+0x7c>
  802458:	2080008c 	andi	r2,r4,2
  80245c:	10001226 	beq	r2,zero,8024a8 <__swsetup_r+0xa0>
  802460:	0005883a 	mov	r2,zero
  802464:	80800215 	stw	r2,8(r16)
  802468:	28000b26 	beq	r5,zero,802498 <__swsetup_r+0x90>
  80246c:	0005883a 	mov	r2,zero
  802470:	dfc00217 	ldw	ra,8(sp)
  802474:	dc400117 	ldw	r17,4(sp)
  802478:	dc000017 	ldw	r16,0(sp)
  80247c:	dec00304 	addi	sp,sp,12
  802480:	f800283a 	ret
  802484:	80800517 	ldw	r2,20(r16)
  802488:	80000215 	stw	zero,8(r16)
  80248c:	0085c83a 	sub	r2,zero,r2
  802490:	80800615 	stw	r2,24(r16)
  802494:	283ff51e 	bne	r5,zero,80246c <__swsetup_r+0x64>
  802498:	2080200c 	andi	r2,r4,128
  80249c:	103ff326 	beq	r2,zero,80246c <__swsetup_r+0x64>
  8024a0:	00bfffc4 	movi	r2,-1
  8024a4:	003ff206 	br	802470 <__swsetup_r+0x68>
  8024a8:	80800517 	ldw	r2,20(r16)
  8024ac:	80800215 	stw	r2,8(r16)
  8024b0:	003fed06 	br	802468 <__swsetup_r+0x60>
  8024b4:	1809883a 	mov	r4,r3
  8024b8:	0803fa80 	call	803fa8 <__sinit>
  8024bc:	003fde06 	br	802438 <__swsetup_r+0x30>
  8024c0:	20c0a00c 	andi	r3,r4,640
  8024c4:	00808004 	movi	r2,512
  8024c8:	18bfe026 	beq	r3,r2,80244c <__swsetup_r+0x44>
  8024cc:	8809883a 	mov	r4,r17
  8024d0:	800b883a 	mov	r5,r16
  8024d4:	0804d200 	call	804d20 <__smakebuf_r>
  8024d8:	8100030b 	ldhu	r4,12(r16)
  8024dc:	81400417 	ldw	r5,16(r16)
  8024e0:	003fda06 	br	80244c <__swsetup_r+0x44>
  8024e4:	2080040c 	andi	r2,r4,16
  8024e8:	103fed26 	beq	r2,zero,8024a0 <__swsetup_r+0x98>
  8024ec:	2080010c 	andi	r2,r4,4
  8024f0:	10001226 	beq	r2,zero,80253c <__swsetup_r+0x134>
  8024f4:	81400c17 	ldw	r5,48(r16)
  8024f8:	28000526 	beq	r5,zero,802510 <__swsetup_r+0x108>
  8024fc:	80801004 	addi	r2,r16,64
  802500:	28800226 	beq	r5,r2,80250c <__swsetup_r+0x104>
  802504:	8809883a 	mov	r4,r17
  802508:	080432c0 	call	80432c <_free_r>
  80250c:	80000c15 	stw	zero,48(r16)
  802510:	8080030b 	ldhu	r2,12(r16)
  802514:	81400417 	ldw	r5,16(r16)
  802518:	80000115 	stw	zero,4(r16)
  80251c:	10bff6cc 	andi	r2,r2,65499
  802520:	8080030d 	sth	r2,12(r16)
  802524:	81400015 	stw	r5,0(r16)
  802528:	8080030b 	ldhu	r2,12(r16)
  80252c:	10800214 	ori	r2,r2,8
  802530:	113fffcc 	andi	r4,r2,65535
  802534:	8080030d 	sth	r2,12(r16)
  802538:	003fc306 	br	802448 <__swsetup_r+0x40>
  80253c:	81400417 	ldw	r5,16(r16)
  802540:	003ff906 	br	802528 <__swsetup_r+0x120>

00802544 <quorem>:
  802544:	28c00417 	ldw	r3,16(r5)
  802548:	20800417 	ldw	r2,16(r4)
  80254c:	defff604 	addi	sp,sp,-40
  802550:	ddc00715 	stw	r23,28(sp)
  802554:	dd400515 	stw	r21,20(sp)
  802558:	dfc00915 	stw	ra,36(sp)
  80255c:	df000815 	stw	fp,32(sp)
  802560:	dd800615 	stw	r22,24(sp)
  802564:	dd000415 	stw	r20,16(sp)
  802568:	dcc00315 	stw	r19,12(sp)
  80256c:	dc800215 	stw	r18,8(sp)
  802570:	dc400115 	stw	r17,4(sp)
  802574:	dc000015 	stw	r16,0(sp)
  802578:	202f883a 	mov	r23,r4
  80257c:	282b883a 	mov	r21,r5
  802580:	10c07416 	blt	r2,r3,802754 <quorem+0x210>
  802584:	1c7fffc4 	addi	r17,r3,-1
  802588:	8c45883a 	add	r2,r17,r17
  80258c:	1085883a 	add	r2,r2,r2
  802590:	2c000504 	addi	r16,r5,20
  802594:	24c00504 	addi	r19,r4,20
  802598:	14ed883a 	add	r22,r2,r19
  80259c:	80a5883a 	add	r18,r16,r2
  8025a0:	b7000017 	ldw	fp,0(r22)
  8025a4:	91400017 	ldw	r5,0(r18)
  8025a8:	e009883a 	mov	r4,fp
  8025ac:	29400044 	addi	r5,r5,1
  8025b0:	08004340 	call	800434 <__udivsi3>
  8025b4:	1029883a 	mov	r20,r2
  8025b8:	10003c1e 	bne	r2,zero,8026ac <quorem+0x168>
  8025bc:	a80b883a 	mov	r5,r21
  8025c0:	b809883a 	mov	r4,r23
  8025c4:	0805a4c0 	call	805a4c <__mcmp>
  8025c8:	10002b16 	blt	r2,zero,802678 <quorem+0x134>
  8025cc:	a5000044 	addi	r20,r20,1
  8025d0:	980f883a 	mov	r7,r19
  8025d4:	0011883a 	mov	r8,zero
  8025d8:	0009883a 	mov	r4,zero
  8025dc:	81400017 	ldw	r5,0(r16)
  8025e0:	38c00017 	ldw	r3,0(r7)
  8025e4:	84000104 	addi	r16,r16,4
  8025e8:	28bfffcc 	andi	r2,r5,65535
  8025ec:	2085883a 	add	r2,r4,r2
  8025f0:	11bfffcc 	andi	r6,r2,65535
  8025f4:	193fffcc 	andi	r4,r3,65535
  8025f8:	1004d43a 	srli	r2,r2,16
  8025fc:	280ad43a 	srli	r5,r5,16
  802600:	2189c83a 	sub	r4,r4,r6
  802604:	2209883a 	add	r4,r4,r8
  802608:	1806d43a 	srli	r3,r3,16
  80260c:	288b883a 	add	r5,r5,r2
  802610:	200dd43a 	srai	r6,r4,16
  802614:	28bfffcc 	andi	r2,r5,65535
  802618:	1887c83a 	sub	r3,r3,r2
  80261c:	1987883a 	add	r3,r3,r6
  802620:	3900000d 	sth	r4,0(r7)
  802624:	38c0008d 	sth	r3,2(r7)
  802628:	2808d43a 	srli	r4,r5,16
  80262c:	39c00104 	addi	r7,r7,4
  802630:	1811d43a 	srai	r8,r3,16
  802634:	943fe92e 	bgeu	r18,r16,8025dc <quorem+0x98>
  802638:	8c45883a 	add	r2,r17,r17
  80263c:	1085883a 	add	r2,r2,r2
  802640:	9885883a 	add	r2,r19,r2
  802644:	10c00017 	ldw	r3,0(r2)
  802648:	18000b1e 	bne	r3,zero,802678 <quorem+0x134>
  80264c:	113fff04 	addi	r4,r2,-4
  802650:	9900082e 	bgeu	r19,r4,802674 <quorem+0x130>
  802654:	10bfff17 	ldw	r2,-4(r2)
  802658:	10000326 	beq	r2,zero,802668 <quorem+0x124>
  80265c:	00000506 	br	802674 <quorem+0x130>
  802660:	20800017 	ldw	r2,0(r4)
  802664:	1000031e 	bne	r2,zero,802674 <quorem+0x130>
  802668:	213fff04 	addi	r4,r4,-4
  80266c:	8c7fffc4 	addi	r17,r17,-1
  802670:	993ffb36 	bltu	r19,r4,802660 <quorem+0x11c>
  802674:	bc400415 	stw	r17,16(r23)
  802678:	a005883a 	mov	r2,r20
  80267c:	dfc00917 	ldw	ra,36(sp)
  802680:	df000817 	ldw	fp,32(sp)
  802684:	ddc00717 	ldw	r23,28(sp)
  802688:	dd800617 	ldw	r22,24(sp)
  80268c:	dd400517 	ldw	r21,20(sp)
  802690:	dd000417 	ldw	r20,16(sp)
  802694:	dcc00317 	ldw	r19,12(sp)
  802698:	dc800217 	ldw	r18,8(sp)
  80269c:	dc400117 	ldw	r17,4(sp)
  8026a0:	dc000017 	ldw	r16,0(sp)
  8026a4:	dec00a04 	addi	sp,sp,40
  8026a8:	f800283a 	ret
  8026ac:	980f883a 	mov	r7,r19
  8026b0:	8011883a 	mov	r8,r16
  8026b4:	0013883a 	mov	r9,zero
  8026b8:	000d883a 	mov	r6,zero
  8026bc:	40c00017 	ldw	r3,0(r8)
  8026c0:	39000017 	ldw	r4,0(r7)
  8026c4:	42000104 	addi	r8,r8,4
  8026c8:	18bfffcc 	andi	r2,r3,65535
  8026cc:	a085383a 	mul	r2,r20,r2
  8026d0:	1806d43a 	srli	r3,r3,16
  8026d4:	217fffcc 	andi	r5,r4,65535
  8026d8:	3085883a 	add	r2,r6,r2
  8026dc:	11bfffcc 	andi	r6,r2,65535
  8026e0:	a0c7383a 	mul	r3,r20,r3
  8026e4:	1004d43a 	srli	r2,r2,16
  8026e8:	298bc83a 	sub	r5,r5,r6
  8026ec:	2a4b883a 	add	r5,r5,r9
  8026f0:	2008d43a 	srli	r4,r4,16
  8026f4:	1887883a 	add	r3,r3,r2
  8026f8:	280dd43a 	srai	r6,r5,16
  8026fc:	18bfffcc 	andi	r2,r3,65535
  802700:	2089c83a 	sub	r4,r4,r2
  802704:	2189883a 	add	r4,r4,r6
  802708:	3900008d 	sth	r4,2(r7)
  80270c:	3940000d 	sth	r5,0(r7)
  802710:	180cd43a 	srli	r6,r3,16
  802714:	39c00104 	addi	r7,r7,4
  802718:	2013d43a 	srai	r9,r4,16
  80271c:	923fe72e 	bgeu	r18,r8,8026bc <quorem+0x178>
  802720:	e03fa61e 	bne	fp,zero,8025bc <quorem+0x78>
  802724:	b0ffff04 	addi	r3,r22,-4
  802728:	98c0082e 	bgeu	r19,r3,80274c <quorem+0x208>
  80272c:	b0bfff17 	ldw	r2,-4(r22)
  802730:	10000326 	beq	r2,zero,802740 <quorem+0x1fc>
  802734:	00000506 	br	80274c <quorem+0x208>
  802738:	18800017 	ldw	r2,0(r3)
  80273c:	1000031e 	bne	r2,zero,80274c <quorem+0x208>
  802740:	18ffff04 	addi	r3,r3,-4
  802744:	8c7fffc4 	addi	r17,r17,-1
  802748:	98fffb36 	bltu	r19,r3,802738 <quorem+0x1f4>
  80274c:	bc400415 	stw	r17,16(r23)
  802750:	003f9a06 	br	8025bc <quorem+0x78>
  802754:	0005883a 	mov	r2,zero
  802758:	003fc806 	br	80267c <quorem+0x138>

0080275c <_dtoa_r>:
  80275c:	22001017 	ldw	r8,64(r4)
  802760:	deffda04 	addi	sp,sp,-152
  802764:	dd402115 	stw	r21,132(sp)
  802768:	dd002015 	stw	r20,128(sp)
  80276c:	dc801e15 	stw	r18,120(sp)
  802770:	dc401d15 	stw	r17,116(sp)
  802774:	dfc02515 	stw	ra,148(sp)
  802778:	df002415 	stw	fp,144(sp)
  80277c:	ddc02315 	stw	r23,140(sp)
  802780:	dd802215 	stw	r22,136(sp)
  802784:	dcc01f15 	stw	r19,124(sp)
  802788:	dc001c15 	stw	r16,112(sp)
  80278c:	d9001615 	stw	r4,88(sp)
  802790:	3023883a 	mov	r17,r6
  802794:	2829883a 	mov	r20,r5
  802798:	d9c01715 	stw	r7,92(sp)
  80279c:	dc802817 	ldw	r18,160(sp)
  8027a0:	302b883a 	mov	r21,r6
  8027a4:	40000a26 	beq	r8,zero,8027d0 <_dtoa_r+0x74>
  8027a8:	20801117 	ldw	r2,68(r4)
  8027ac:	400b883a 	mov	r5,r8
  8027b0:	40800115 	stw	r2,4(r8)
  8027b4:	20c01117 	ldw	r3,68(r4)
  8027b8:	00800044 	movi	r2,1
  8027bc:	10c4983a 	sll	r2,r2,r3
  8027c0:	40800215 	stw	r2,8(r8)
  8027c4:	08058f00 	call	8058f0 <_Bfree>
  8027c8:	d8c01617 	ldw	r3,88(sp)
  8027cc:	18001015 	stw	zero,64(r3)
  8027d0:	8800a316 	blt	r17,zero,802a60 <_dtoa_r+0x304>
  8027d4:	90000015 	stw	zero,0(r18)
  8027d8:	a8dffc2c 	andhi	r3,r21,32752
  8027dc:	009ffc34 	movhi	r2,32752
  8027e0:	18809126 	beq	r3,r2,802a28 <_dtoa_r+0x2cc>
  8027e4:	000d883a 	mov	r6,zero
  8027e8:	000f883a 	mov	r7,zero
  8027ec:	a009883a 	mov	r4,r20
  8027f0:	a80b883a 	mov	r5,r21
  8027f4:	dd001215 	stw	r20,72(sp)
  8027f8:	dd401315 	stw	r21,76(sp)
  8027fc:	08091340 	call	809134 <__nedf2>
  802800:	1000171e 	bne	r2,zero,802860 <_dtoa_r+0x104>
  802804:	d9802717 	ldw	r6,156(sp)
  802808:	00800044 	movi	r2,1
  80280c:	30800015 	stw	r2,0(r6)
  802810:	d8802917 	ldw	r2,164(sp)
  802814:	10029b26 	beq	r2,zero,803284 <_dtoa_r+0xb28>
  802818:	d9002917 	ldw	r4,164(sp)
  80281c:	00802074 	movhi	r2,129
  802820:	10980c44 	addi	r2,r2,24625
  802824:	10ffffc4 	addi	r3,r2,-1
  802828:	20800015 	stw	r2,0(r4)
  80282c:	1805883a 	mov	r2,r3
  802830:	dfc02517 	ldw	ra,148(sp)
  802834:	df002417 	ldw	fp,144(sp)
  802838:	ddc02317 	ldw	r23,140(sp)
  80283c:	dd802217 	ldw	r22,136(sp)
  802840:	dd402117 	ldw	r21,132(sp)
  802844:	dd002017 	ldw	r20,128(sp)
  802848:	dcc01f17 	ldw	r19,124(sp)
  80284c:	dc801e17 	ldw	r18,120(sp)
  802850:	dc401d17 	ldw	r17,116(sp)
  802854:	dc001c17 	ldw	r16,112(sp)
  802858:	dec02604 	addi	sp,sp,152
  80285c:	f800283a 	ret
  802860:	d9001617 	ldw	r4,88(sp)
  802864:	d9401217 	ldw	r5,72(sp)
  802868:	d8800104 	addi	r2,sp,4
  80286c:	a80d883a 	mov	r6,r21
  802870:	d9c00204 	addi	r7,sp,8
  802874:	d8800015 	stw	r2,0(sp)
  802878:	0805f2c0 	call	805f2c <__d2b>
  80287c:	d8800715 	stw	r2,28(sp)
  802880:	a804d53a 	srli	r2,r21,20
  802884:	1101ffcc 	andi	r4,r2,2047
  802888:	20008626 	beq	r4,zero,802aa4 <_dtoa_r+0x348>
  80288c:	d8c01217 	ldw	r3,72(sp)
  802890:	00800434 	movhi	r2,16
  802894:	10bfffc4 	addi	r2,r2,-1
  802898:	ddc00117 	ldw	r23,4(sp)
  80289c:	a884703a 	and	r2,r21,r2
  8028a0:	1811883a 	mov	r8,r3
  8028a4:	124ffc34 	orhi	r9,r2,16368
  8028a8:	25bf0044 	addi	r22,r4,-1023
  8028ac:	d8000815 	stw	zero,32(sp)
  8028b0:	0005883a 	mov	r2,zero
  8028b4:	00cffe34 	movhi	r3,16376
  8028b8:	480b883a 	mov	r5,r9
  8028bc:	4009883a 	mov	r4,r8
  8028c0:	180f883a 	mov	r7,r3
  8028c4:	100d883a 	mov	r6,r2
  8028c8:	080899c0 	call	80899c <__subdf3>
  8028cc:	0218dbf4 	movhi	r8,25455
  8028d0:	4210d844 	addi	r8,r8,17249
  8028d4:	024ff4f4 	movhi	r9,16339
  8028d8:	4a61e9c4 	addi	r9,r9,-30809
  8028dc:	480f883a 	mov	r7,r9
  8028e0:	400d883a 	mov	r6,r8
  8028e4:	180b883a 	mov	r5,r3
  8028e8:	1009883a 	mov	r4,r2
  8028ec:	0808a900 	call	808a90 <__muldf3>
  8028f0:	0222d874 	movhi	r8,35681
  8028f4:	42322cc4 	addi	r8,r8,-14157
  8028f8:	024ff1f4 	movhi	r9,16327
  8028fc:	4a628a04 	addi	r9,r9,-30168
  802900:	480f883a 	mov	r7,r9
  802904:	400d883a 	mov	r6,r8
  802908:	180b883a 	mov	r5,r3
  80290c:	1009883a 	mov	r4,r2
  802910:	0808a1c0 	call	808a1c <__adddf3>
  802914:	b009883a 	mov	r4,r22
  802918:	1021883a 	mov	r16,r2
  80291c:	1823883a 	mov	r17,r3
  802920:	08093540 	call	809354 <__floatsidf>
  802924:	021427f4 	movhi	r8,20639
  802928:	421e7ec4 	addi	r8,r8,31227
  80292c:	024ff4f4 	movhi	r9,16339
  802930:	4a5104c4 	addi	r9,r9,17427
  802934:	480f883a 	mov	r7,r9
  802938:	400d883a 	mov	r6,r8
  80293c:	180b883a 	mov	r5,r3
  802940:	1009883a 	mov	r4,r2
  802944:	0808a900 	call	808a90 <__muldf3>
  802948:	180f883a 	mov	r7,r3
  80294c:	880b883a 	mov	r5,r17
  802950:	100d883a 	mov	r6,r2
  802954:	8009883a 	mov	r4,r16
  802958:	0808a1c0 	call	808a1c <__adddf3>
  80295c:	1009883a 	mov	r4,r2
  802960:	180b883a 	mov	r5,r3
  802964:	1021883a 	mov	r16,r2
  802968:	1823883a 	mov	r17,r3
  80296c:	080944c0 	call	80944c <__fixdfsi>
  802970:	000d883a 	mov	r6,zero
  802974:	000f883a 	mov	r7,zero
  802978:	8009883a 	mov	r4,r16
  80297c:	880b883a 	mov	r5,r17
  802980:	d8800d15 	stw	r2,52(sp)
  802984:	08092cc0 	call	8092cc <__ltdf2>
  802988:	10031716 	blt	r2,zero,8035e8 <_dtoa_r+0xe8c>
  80298c:	d8c00d17 	ldw	r3,52(sp)
  802990:	00800584 	movi	r2,22
  802994:	10c1482e 	bgeu	r2,r3,802eb8 <_dtoa_r+0x75c>
  802998:	01000044 	movi	r4,1
  80299c:	d9000c15 	stw	r4,48(sp)
  8029a0:	bd85c83a 	sub	r2,r23,r22
  8029a4:	11bfffc4 	addi	r6,r2,-1
  8029a8:	30030b16 	blt	r6,zero,8035d8 <_dtoa_r+0xe7c>
  8029ac:	d9800a15 	stw	r6,40(sp)
  8029b0:	d8001115 	stw	zero,68(sp)
  8029b4:	d8c00d17 	ldw	r3,52(sp)
  8029b8:	1802ff16 	blt	r3,zero,8035b8 <_dtoa_r+0xe5c>
  8029bc:	d9000a17 	ldw	r4,40(sp)
  8029c0:	d8c00915 	stw	r3,36(sp)
  8029c4:	d8001015 	stw	zero,64(sp)
  8029c8:	20c9883a 	add	r4,r4,r3
  8029cc:	d9000a15 	stw	r4,40(sp)
  8029d0:	d9001717 	ldw	r4,92(sp)
  8029d4:	00800244 	movi	r2,9
  8029d8:	11004636 	bltu	r2,r4,802af4 <_dtoa_r+0x398>
  8029dc:	00800144 	movi	r2,5
  8029e0:	11020416 	blt	r2,r4,8031f4 <_dtoa_r+0xa98>
  8029e4:	04400044 	movi	r17,1
  8029e8:	d8c01717 	ldw	r3,92(sp)
  8029ec:	00800144 	movi	r2,5
  8029f0:	10c1ed36 	bltu	r2,r3,8031a8 <_dtoa_r+0xa4c>
  8029f4:	18c5883a 	add	r2,r3,r3
  8029f8:	1085883a 	add	r2,r2,r2
  8029fc:	00c02034 	movhi	r3,128
  802a00:	18ca8404 	addi	r3,r3,10768
  802a04:	10c5883a 	add	r2,r2,r3
  802a08:	11000017 	ldw	r4,0(r2)
  802a0c:	2000683a 	jmp	r4
  802a10:	00802afc 	xorhi	r2,zero,171
  802a14:	00802afc 	xorhi	r2,zero,171
  802a18:	008034fc 	xorhi	r2,zero,211
  802a1c:	008034d4 	movui	r2,211
  802a20:	00803518 	cmpnei	r2,zero,212
  802a24:	00803524 	muli	r2,zero,212
  802a28:	d9002717 	ldw	r4,156(sp)
  802a2c:	0089c3c4 	movi	r2,9999
  802a30:	20800015 	stw	r2,0(r4)
  802a34:	a0001026 	beq	r20,zero,802a78 <_dtoa_r+0x31c>
  802a38:	00c02074 	movhi	r3,129
  802a3c:	18d81804 	addi	r3,r3,24672
  802a40:	d9802917 	ldw	r6,164(sp)
  802a44:	303f7926 	beq	r6,zero,80282c <_dtoa_r+0xd0>
  802a48:	188000c7 	ldb	r2,3(r3)
  802a4c:	190000c4 	addi	r4,r3,3
  802a50:	1000101e 	bne	r2,zero,802a94 <_dtoa_r+0x338>
  802a54:	d8802917 	ldw	r2,164(sp)
  802a58:	11000015 	stw	r4,0(r2)
  802a5c:	003f7306 	br	80282c <_dtoa_r+0xd0>
  802a60:	00a00034 	movhi	r2,32768
  802a64:	10bfffc4 	addi	r2,r2,-1
  802a68:	00c00044 	movi	r3,1
  802a6c:	88aa703a 	and	r21,r17,r2
  802a70:	90c00015 	stw	r3,0(r18)
  802a74:	003f5806 	br	8027d8 <_dtoa_r+0x7c>
  802a78:	00800434 	movhi	r2,16
  802a7c:	10bfffc4 	addi	r2,r2,-1
  802a80:	a884703a 	and	r2,r21,r2
  802a84:	103fec1e 	bne	r2,zero,802a38 <_dtoa_r+0x2dc>
  802a88:	00c02074 	movhi	r3,129
  802a8c:	18d81504 	addi	r3,r3,24660
  802a90:	003feb06 	br	802a40 <_dtoa_r+0x2e4>
  802a94:	d8802917 	ldw	r2,164(sp)
  802a98:	19000204 	addi	r4,r3,8
  802a9c:	11000015 	stw	r4,0(r2)
  802aa0:	003f6206 	br	80282c <_dtoa_r+0xd0>
  802aa4:	ddc00117 	ldw	r23,4(sp)
  802aa8:	d8800217 	ldw	r2,8(sp)
  802aac:	01000804 	movi	r4,32
  802ab0:	b8c10c84 	addi	r3,r23,1074
  802ab4:	18a3883a 	add	r17,r3,r2
  802ab8:	2441b80e 	bge	r4,r17,80319c <_dtoa_r+0xa40>
  802abc:	00c01004 	movi	r3,64
  802ac0:	1c47c83a 	sub	r3,r3,r17
  802ac4:	88bff804 	addi	r2,r17,-32
  802ac8:	a8c6983a 	sll	r3,r21,r3
  802acc:	a084d83a 	srl	r2,r20,r2
  802ad0:	1888b03a 	or	r4,r3,r2
  802ad4:	08095240 	call	809524 <__floatunsidf>
  802ad8:	1011883a 	mov	r8,r2
  802adc:	00bf8434 	movhi	r2,65040
  802ae0:	01000044 	movi	r4,1
  802ae4:	10d3883a 	add	r9,r2,r3
  802ae8:	8dbef344 	addi	r22,r17,-1075
  802aec:	d9000815 	stw	r4,32(sp)
  802af0:	003f6f06 	br	8028b0 <_dtoa_r+0x154>
  802af4:	d8001715 	stw	zero,92(sp)
  802af8:	04400044 	movi	r17,1
  802afc:	00bfffc4 	movi	r2,-1
  802b00:	00c00044 	movi	r3,1
  802b04:	d8800e15 	stw	r2,56(sp)
  802b08:	d8002615 	stw	zero,152(sp)
  802b0c:	d8800f15 	stw	r2,60(sp)
  802b10:	d8c00b15 	stw	r3,44(sp)
  802b14:	1021883a 	mov	r16,r2
  802b18:	d8801617 	ldw	r2,88(sp)
  802b1c:	10001115 	stw	zero,68(r2)
  802b20:	d8801617 	ldw	r2,88(sp)
  802b24:	11401117 	ldw	r5,68(r2)
  802b28:	1009883a 	mov	r4,r2
  802b2c:	0805e700 	call	805e70 <_Balloc>
  802b30:	d8c01617 	ldw	r3,88(sp)
  802b34:	d8800515 	stw	r2,20(sp)
  802b38:	18801015 	stw	r2,64(r3)
  802b3c:	00800384 	movi	r2,14
  802b40:	14006836 	bltu	r2,r16,802ce4 <_dtoa_r+0x588>
  802b44:	8805003a 	cmpeq	r2,r17,zero
  802b48:	1000661e 	bne	r2,zero,802ce4 <_dtoa_r+0x588>
  802b4c:	d9000d17 	ldw	r4,52(sp)
  802b50:	0102300e 	bge	zero,r4,803414 <_dtoa_r+0xcb8>
  802b54:	208003cc 	andi	r2,r4,15
  802b58:	100490fa 	slli	r2,r2,3
  802b5c:	2025d13a 	srai	r18,r4,4
  802b60:	00c02074 	movhi	r3,129
  802b64:	18d82a04 	addi	r3,r3,24744
  802b68:	10c5883a 	add	r2,r2,r3
  802b6c:	90c0040c 	andi	r3,r18,16
  802b70:	14000017 	ldw	r16,0(r2)
  802b74:	14400117 	ldw	r17,4(r2)
  802b78:	18036a1e 	bne	r3,zero,803924 <_dtoa_r+0x11c8>
  802b7c:	05800084 	movi	r22,2
  802b80:	90001026 	beq	r18,zero,802bc4 <_dtoa_r+0x468>
  802b84:	04c02074 	movhi	r19,129
  802b88:	9cd85c04 	addi	r19,r19,24944
  802b8c:	9080004c 	andi	r2,r18,1
  802b90:	1005003a 	cmpeq	r2,r2,zero
  802b94:	1000081e 	bne	r2,zero,802bb8 <_dtoa_r+0x45c>
  802b98:	99800017 	ldw	r6,0(r19)
  802b9c:	99c00117 	ldw	r7,4(r19)
  802ba0:	880b883a 	mov	r5,r17
  802ba4:	8009883a 	mov	r4,r16
  802ba8:	0808a900 	call	808a90 <__muldf3>
  802bac:	1021883a 	mov	r16,r2
  802bb0:	b5800044 	addi	r22,r22,1
  802bb4:	1823883a 	mov	r17,r3
  802bb8:	9025d07a 	srai	r18,r18,1
  802bbc:	9cc00204 	addi	r19,r19,8
  802bc0:	903ff21e 	bne	r18,zero,802b8c <_dtoa_r+0x430>
  802bc4:	a80b883a 	mov	r5,r21
  802bc8:	a009883a 	mov	r4,r20
  802bcc:	880f883a 	mov	r7,r17
  802bd0:	800d883a 	mov	r6,r16
  802bd4:	0808e540 	call	808e54 <__divdf3>
  802bd8:	1029883a 	mov	r20,r2
  802bdc:	182b883a 	mov	r21,r3
  802be0:	d8c00c17 	ldw	r3,48(sp)
  802be4:	1805003a 	cmpeq	r2,r3,zero
  802be8:	1000081e 	bne	r2,zero,802c0c <_dtoa_r+0x4b0>
  802bec:	0005883a 	mov	r2,zero
  802bf0:	00cffc34 	movhi	r3,16368
  802bf4:	180f883a 	mov	r7,r3
  802bf8:	a009883a 	mov	r4,r20
  802bfc:	a80b883a 	mov	r5,r21
  802c00:	100d883a 	mov	r6,r2
  802c04:	08092cc0 	call	8092cc <__ltdf2>
  802c08:	1003fe16 	blt	r2,zero,803c04 <_dtoa_r+0x14a8>
  802c0c:	b009883a 	mov	r4,r22
  802c10:	08093540 	call	809354 <__floatsidf>
  802c14:	180b883a 	mov	r5,r3
  802c18:	1009883a 	mov	r4,r2
  802c1c:	a00d883a 	mov	r6,r20
  802c20:	a80f883a 	mov	r7,r21
  802c24:	0808a900 	call	808a90 <__muldf3>
  802c28:	0011883a 	mov	r8,zero
  802c2c:	02500734 	movhi	r9,16412
  802c30:	1009883a 	mov	r4,r2
  802c34:	180b883a 	mov	r5,r3
  802c38:	480f883a 	mov	r7,r9
  802c3c:	400d883a 	mov	r6,r8
  802c40:	0808a1c0 	call	808a1c <__adddf3>
  802c44:	d9000f17 	ldw	r4,60(sp)
  802c48:	102d883a 	mov	r22,r2
  802c4c:	00bf3034 	movhi	r2,64704
  802c50:	18b9883a 	add	fp,r3,r2
  802c54:	e02f883a 	mov	r23,fp
  802c58:	20028f1e 	bne	r4,zero,803698 <_dtoa_r+0xf3c>
  802c5c:	0005883a 	mov	r2,zero
  802c60:	00d00534 	movhi	r3,16404
  802c64:	a009883a 	mov	r4,r20
  802c68:	a80b883a 	mov	r5,r21
  802c6c:	180f883a 	mov	r7,r3
  802c70:	100d883a 	mov	r6,r2
  802c74:	080899c0 	call	80899c <__subdf3>
  802c78:	1009883a 	mov	r4,r2
  802c7c:	e00f883a 	mov	r7,fp
  802c80:	180b883a 	mov	r5,r3
  802c84:	b00d883a 	mov	r6,r22
  802c88:	1025883a 	mov	r18,r2
  802c8c:	1827883a 	mov	r19,r3
  802c90:	08091bc0 	call	8091bc <__gtdf2>
  802c94:	00834f16 	blt	zero,r2,8039d4 <_dtoa_r+0x1278>
  802c98:	e0e0003c 	xorhi	r3,fp,32768
  802c9c:	9009883a 	mov	r4,r18
  802ca0:	980b883a 	mov	r5,r19
  802ca4:	180f883a 	mov	r7,r3
  802ca8:	b00d883a 	mov	r6,r22
  802cac:	08092cc0 	call	8092cc <__ltdf2>
  802cb0:	1000080e 	bge	r2,zero,802cd4 <_dtoa_r+0x578>
  802cb4:	0027883a 	mov	r19,zero
  802cb8:	0025883a 	mov	r18,zero
  802cbc:	d8802617 	ldw	r2,152(sp)
  802cc0:	df000517 	ldw	fp,20(sp)
  802cc4:	d8000615 	stw	zero,24(sp)
  802cc8:	0084303a 	nor	r2,zero,r2
  802ccc:	d8800d15 	stw	r2,52(sp)
  802cd0:	00019b06 	br	803340 <_dtoa_r+0xbe4>
  802cd4:	d9801217 	ldw	r6,72(sp)
  802cd8:	d8801317 	ldw	r2,76(sp)
  802cdc:	3029883a 	mov	r20,r6
  802ce0:	102b883a 	mov	r21,r2
  802ce4:	d8c00217 	ldw	r3,8(sp)
  802ce8:	18008516 	blt	r3,zero,802f00 <_dtoa_r+0x7a4>
  802cec:	d9000d17 	ldw	r4,52(sp)
  802cf0:	00800384 	movi	r2,14
  802cf4:	11008216 	blt	r2,r4,802f00 <_dtoa_r+0x7a4>
  802cf8:	200490fa 	slli	r2,r4,3
  802cfc:	d9802617 	ldw	r6,152(sp)
  802d00:	00c02074 	movhi	r3,129
  802d04:	18d82a04 	addi	r3,r3,24744
  802d08:	10c5883a 	add	r2,r2,r3
  802d0c:	14800017 	ldw	r18,0(r2)
  802d10:	14c00117 	ldw	r19,4(r2)
  802d14:	30031e16 	blt	r6,zero,803990 <_dtoa_r+0x1234>
  802d18:	d9000517 	ldw	r4,20(sp)
  802d1c:	d8c00f17 	ldw	r3,60(sp)
  802d20:	a823883a 	mov	r17,r21
  802d24:	a021883a 	mov	r16,r20
  802d28:	192b883a 	add	r21,r3,r4
  802d2c:	2039883a 	mov	fp,r4
  802d30:	00000f06 	br	802d70 <_dtoa_r+0x614>
  802d34:	0005883a 	mov	r2,zero
  802d38:	00d00934 	movhi	r3,16420
  802d3c:	5009883a 	mov	r4,r10
  802d40:	580b883a 	mov	r5,r11
  802d44:	180f883a 	mov	r7,r3
  802d48:	100d883a 	mov	r6,r2
  802d4c:	0808a900 	call	808a90 <__muldf3>
  802d50:	180b883a 	mov	r5,r3
  802d54:	000d883a 	mov	r6,zero
  802d58:	000f883a 	mov	r7,zero
  802d5c:	1009883a 	mov	r4,r2
  802d60:	1021883a 	mov	r16,r2
  802d64:	1823883a 	mov	r17,r3
  802d68:	08091340 	call	809134 <__nedf2>
  802d6c:	10004526 	beq	r2,zero,802e84 <_dtoa_r+0x728>
  802d70:	900d883a 	mov	r6,r18
  802d74:	980f883a 	mov	r7,r19
  802d78:	8009883a 	mov	r4,r16
  802d7c:	880b883a 	mov	r5,r17
  802d80:	0808e540 	call	808e54 <__divdf3>
  802d84:	180b883a 	mov	r5,r3
  802d88:	1009883a 	mov	r4,r2
  802d8c:	080944c0 	call	80944c <__fixdfsi>
  802d90:	1009883a 	mov	r4,r2
  802d94:	1029883a 	mov	r20,r2
  802d98:	08093540 	call	809354 <__floatsidf>
  802d9c:	180f883a 	mov	r7,r3
  802da0:	9009883a 	mov	r4,r18
  802da4:	980b883a 	mov	r5,r19
  802da8:	100d883a 	mov	r6,r2
  802dac:	0808a900 	call	808a90 <__muldf3>
  802db0:	180f883a 	mov	r7,r3
  802db4:	880b883a 	mov	r5,r17
  802db8:	8009883a 	mov	r4,r16
  802dbc:	100d883a 	mov	r6,r2
  802dc0:	080899c0 	call	80899c <__subdf3>
  802dc4:	1015883a 	mov	r10,r2
  802dc8:	a0800c04 	addi	r2,r20,48
  802dcc:	e0800005 	stb	r2,0(fp)
  802dd0:	e7000044 	addi	fp,fp,1
  802dd4:	1817883a 	mov	r11,r3
  802dd8:	e57fd61e 	bne	fp,r21,802d34 <_dtoa_r+0x5d8>
  802ddc:	500d883a 	mov	r6,r10
  802de0:	180f883a 	mov	r7,r3
  802de4:	5009883a 	mov	r4,r10
  802de8:	180b883a 	mov	r5,r3
  802dec:	0808a1c0 	call	808a1c <__adddf3>
  802df0:	100d883a 	mov	r6,r2
  802df4:	9009883a 	mov	r4,r18
  802df8:	980b883a 	mov	r5,r19
  802dfc:	180f883a 	mov	r7,r3
  802e00:	1021883a 	mov	r16,r2
  802e04:	1823883a 	mov	r17,r3
  802e08:	08092cc0 	call	8092cc <__ltdf2>
  802e0c:	10000816 	blt	r2,zero,802e30 <_dtoa_r+0x6d4>
  802e10:	980b883a 	mov	r5,r19
  802e14:	800d883a 	mov	r6,r16
  802e18:	880f883a 	mov	r7,r17
  802e1c:	9009883a 	mov	r4,r18
  802e20:	08090ac0 	call	8090ac <__eqdf2>
  802e24:	1000171e 	bne	r2,zero,802e84 <_dtoa_r+0x728>
  802e28:	a080004c 	andi	r2,r20,1
  802e2c:	10001526 	beq	r2,zero,802e84 <_dtoa_r+0x728>
  802e30:	d8800d17 	ldw	r2,52(sp)
  802e34:	d8800415 	stw	r2,16(sp)
  802e38:	e009883a 	mov	r4,fp
  802e3c:	213fffc4 	addi	r4,r4,-1
  802e40:	20c00007 	ldb	r3,0(r4)
  802e44:	00800e44 	movi	r2,57
  802e48:	1880081e 	bne	r3,r2,802e6c <_dtoa_r+0x710>
  802e4c:	d8800517 	ldw	r2,20(sp)
  802e50:	113ffa1e 	bne	r2,r4,802e3c <_dtoa_r+0x6e0>
  802e54:	d8c00417 	ldw	r3,16(sp)
  802e58:	d9800517 	ldw	r6,20(sp)
  802e5c:	00800c04 	movi	r2,48
  802e60:	18c00044 	addi	r3,r3,1
  802e64:	d8c00415 	stw	r3,16(sp)
  802e68:	30800005 	stb	r2,0(r6)
  802e6c:	20800003 	ldbu	r2,0(r4)
  802e70:	d8c00417 	ldw	r3,16(sp)
  802e74:	27000044 	addi	fp,r4,1
  802e78:	10800044 	addi	r2,r2,1
  802e7c:	d8c00d15 	stw	r3,52(sp)
  802e80:	20800005 	stb	r2,0(r4)
  802e84:	d9001617 	ldw	r4,88(sp)
  802e88:	d9400717 	ldw	r5,28(sp)
  802e8c:	08058f00 	call	8058f0 <_Bfree>
  802e90:	e0000005 	stb	zero,0(fp)
  802e94:	d9800d17 	ldw	r6,52(sp)
  802e98:	d8c02717 	ldw	r3,156(sp)
  802e9c:	d9002917 	ldw	r4,164(sp)
  802ea0:	30800044 	addi	r2,r6,1
  802ea4:	18800015 	stw	r2,0(r3)
  802ea8:	20029c26 	beq	r4,zero,80391c <_dtoa_r+0x11c0>
  802eac:	d8c00517 	ldw	r3,20(sp)
  802eb0:	27000015 	stw	fp,0(r4)
  802eb4:	003e5d06 	br	80282c <_dtoa_r+0xd0>
  802eb8:	d9800d17 	ldw	r6,52(sp)
  802ebc:	00c02074 	movhi	r3,129
  802ec0:	18d82a04 	addi	r3,r3,24744
  802ec4:	d9001217 	ldw	r4,72(sp)
  802ec8:	300490fa 	slli	r2,r6,3
  802ecc:	d9401317 	ldw	r5,76(sp)
  802ed0:	10c5883a 	add	r2,r2,r3
  802ed4:	12000017 	ldw	r8,0(r2)
  802ed8:	12400117 	ldw	r9,4(r2)
  802edc:	400d883a 	mov	r6,r8
  802ee0:	480f883a 	mov	r7,r9
  802ee4:	08092cc0 	call	8092cc <__ltdf2>
  802ee8:	1000030e 	bge	r2,zero,802ef8 <_dtoa_r+0x79c>
  802eec:	d8800d17 	ldw	r2,52(sp)
  802ef0:	10bfffc4 	addi	r2,r2,-1
  802ef4:	d8800d15 	stw	r2,52(sp)
  802ef8:	d8000c15 	stw	zero,48(sp)
  802efc:	003ea806 	br	8029a0 <_dtoa_r+0x244>
  802f00:	d9000b17 	ldw	r4,44(sp)
  802f04:	202cc03a 	cmpne	r22,r4,zero
  802f08:	b000c71e 	bne	r22,zero,803228 <_dtoa_r+0xacc>
  802f0c:	dc001117 	ldw	r16,68(sp)
  802f10:	dc801017 	ldw	r18,64(sp)
  802f14:	0027883a 	mov	r19,zero
  802f18:	04000b0e 	bge	zero,r16,802f48 <_dtoa_r+0x7ec>
  802f1c:	d8c00a17 	ldw	r3,40(sp)
  802f20:	00c0090e 	bge	zero,r3,802f48 <_dtoa_r+0x7ec>
  802f24:	8005883a 	mov	r2,r16
  802f28:	1c011316 	blt	r3,r16,803378 <_dtoa_r+0xc1c>
  802f2c:	d9000a17 	ldw	r4,40(sp)
  802f30:	d9801117 	ldw	r6,68(sp)
  802f34:	80a1c83a 	sub	r16,r16,r2
  802f38:	2089c83a 	sub	r4,r4,r2
  802f3c:	308dc83a 	sub	r6,r6,r2
  802f40:	d9000a15 	stw	r4,40(sp)
  802f44:	d9801115 	stw	r6,68(sp)
  802f48:	d8801017 	ldw	r2,64(sp)
  802f4c:	0080150e 	bge	zero,r2,802fa4 <_dtoa_r+0x848>
  802f50:	d8c00b17 	ldw	r3,44(sp)
  802f54:	1805003a 	cmpeq	r2,r3,zero
  802f58:	1001c91e 	bne	r2,zero,803680 <_dtoa_r+0xf24>
  802f5c:	04800e0e 	bge	zero,r18,802f98 <_dtoa_r+0x83c>
  802f60:	d9001617 	ldw	r4,88(sp)
  802f64:	980b883a 	mov	r5,r19
  802f68:	900d883a 	mov	r6,r18
  802f6c:	08066a40 	call	8066a4 <__pow5mult>
  802f70:	d9001617 	ldw	r4,88(sp)
  802f74:	d9800717 	ldw	r6,28(sp)
  802f78:	100b883a 	mov	r5,r2
  802f7c:	1027883a 	mov	r19,r2
  802f80:	08063800 	call	806380 <__multiply>
  802f84:	d9001617 	ldw	r4,88(sp)
  802f88:	d9400717 	ldw	r5,28(sp)
  802f8c:	1023883a 	mov	r17,r2
  802f90:	08058f00 	call	8058f0 <_Bfree>
  802f94:	dc400715 	stw	r17,28(sp)
  802f98:	d9001017 	ldw	r4,64(sp)
  802f9c:	248dc83a 	sub	r6,r4,r18
  802fa0:	30010e1e 	bne	r6,zero,8033dc <_dtoa_r+0xc80>
  802fa4:	d9001617 	ldw	r4,88(sp)
  802fa8:	04400044 	movi	r17,1
  802fac:	880b883a 	mov	r5,r17
  802fb0:	08065680 	call	806568 <__i2b>
  802fb4:	d9800917 	ldw	r6,36(sp)
  802fb8:	1025883a 	mov	r18,r2
  802fbc:	0180040e 	bge	zero,r6,802fd0 <_dtoa_r+0x874>
  802fc0:	d9001617 	ldw	r4,88(sp)
  802fc4:	100b883a 	mov	r5,r2
  802fc8:	08066a40 	call	8066a4 <__pow5mult>
  802fcc:	1025883a 	mov	r18,r2
  802fd0:	d8801717 	ldw	r2,92(sp)
  802fd4:	8880f30e 	bge	r17,r2,8033a4 <_dtoa_r+0xc48>
  802fd8:	0023883a 	mov	r17,zero
  802fdc:	d9800917 	ldw	r6,36(sp)
  802fe0:	30019e1e 	bne	r6,zero,80365c <_dtoa_r+0xf00>
  802fe4:	00c00044 	movi	r3,1
  802fe8:	d9000a17 	ldw	r4,40(sp)
  802fec:	20c5883a 	add	r2,r4,r3
  802ff0:	10c007cc 	andi	r3,r2,31
  802ff4:	1800841e 	bne	r3,zero,803208 <_dtoa_r+0xaac>
  802ff8:	00800704 	movi	r2,28
  802ffc:	d9000a17 	ldw	r4,40(sp)
  803000:	d9801117 	ldw	r6,68(sp)
  803004:	80a1883a 	add	r16,r16,r2
  803008:	2089883a 	add	r4,r4,r2
  80300c:	308d883a 	add	r6,r6,r2
  803010:	d9000a15 	stw	r4,40(sp)
  803014:	d9801115 	stw	r6,68(sp)
  803018:	d8801117 	ldw	r2,68(sp)
  80301c:	0080050e 	bge	zero,r2,803034 <_dtoa_r+0x8d8>
  803020:	d9400717 	ldw	r5,28(sp)
  803024:	d9001617 	ldw	r4,88(sp)
  803028:	100d883a 	mov	r6,r2
  80302c:	08062340 	call	806234 <__lshift>
  803030:	d8800715 	stw	r2,28(sp)
  803034:	d8c00a17 	ldw	r3,40(sp)
  803038:	00c0050e 	bge	zero,r3,803050 <_dtoa_r+0x8f4>
  80303c:	d9001617 	ldw	r4,88(sp)
  803040:	900b883a 	mov	r5,r18
  803044:	180d883a 	mov	r6,r3
  803048:	08062340 	call	806234 <__lshift>
  80304c:	1025883a 	mov	r18,r2
  803050:	d9000c17 	ldw	r4,48(sp)
  803054:	2005003a 	cmpeq	r2,r4,zero
  803058:	10016f26 	beq	r2,zero,803618 <_dtoa_r+0xebc>
  80305c:	d9000f17 	ldw	r4,60(sp)
  803060:	0102170e 	bge	zero,r4,8038c0 <_dtoa_r+0x1164>
  803064:	d9800b17 	ldw	r6,44(sp)
  803068:	3005003a 	cmpeq	r2,r6,zero
  80306c:	1000881e 	bne	r2,zero,803290 <_dtoa_r+0xb34>
  803070:	0400050e 	bge	zero,r16,803088 <_dtoa_r+0x92c>
  803074:	d9001617 	ldw	r4,88(sp)
  803078:	980b883a 	mov	r5,r19
  80307c:	800d883a 	mov	r6,r16
  803080:	08062340 	call	806234 <__lshift>
  803084:	1027883a 	mov	r19,r2
  803088:	8804c03a 	cmpne	r2,r17,zero
  80308c:	1002541e 	bne	r2,zero,8039e0 <_dtoa_r+0x1284>
  803090:	980b883a 	mov	r5,r19
  803094:	dd800517 	ldw	r22,20(sp)
  803098:	dcc00615 	stw	r19,24(sp)
  80309c:	a700004c 	andi	fp,r20,1
  8030a0:	2827883a 	mov	r19,r5
  8030a4:	d9000717 	ldw	r4,28(sp)
  8030a8:	900b883a 	mov	r5,r18
  8030ac:	08025440 	call	802544 <quorem>
  8030b0:	d9000717 	ldw	r4,28(sp)
  8030b4:	d9400617 	ldw	r5,24(sp)
  8030b8:	1023883a 	mov	r17,r2
  8030bc:	8dc00c04 	addi	r23,r17,48
  8030c0:	0805a4c0 	call	805a4c <__mcmp>
  8030c4:	d9001617 	ldw	r4,88(sp)
  8030c8:	900b883a 	mov	r5,r18
  8030cc:	980d883a 	mov	r6,r19
  8030d0:	1029883a 	mov	r20,r2
  8030d4:	08060a80 	call	8060a8 <__mdiff>
  8030d8:	102b883a 	mov	r21,r2
  8030dc:	10800317 	ldw	r2,12(r2)
  8030e0:	1001281e 	bne	r2,zero,803584 <_dtoa_r+0xe28>
  8030e4:	d9000717 	ldw	r4,28(sp)
  8030e8:	a80b883a 	mov	r5,r21
  8030ec:	0805a4c0 	call	805a4c <__mcmp>
  8030f0:	d9001617 	ldw	r4,88(sp)
  8030f4:	1021883a 	mov	r16,r2
  8030f8:	a80b883a 	mov	r5,r21
  8030fc:	08058f00 	call	8058f0 <_Bfree>
  803100:	8000041e 	bne	r16,zero,803114 <_dtoa_r+0x9b8>
  803104:	d8801717 	ldw	r2,92(sp)
  803108:	1000021e 	bne	r2,zero,803114 <_dtoa_r+0x9b8>
  80310c:	e004c03a 	cmpne	r2,fp,zero
  803110:	10011726 	beq	r2,zero,803570 <_dtoa_r+0xe14>
  803114:	a0010616 	blt	r20,zero,803530 <_dtoa_r+0xdd4>
  803118:	a000041e 	bne	r20,zero,80312c <_dtoa_r+0x9d0>
  80311c:	d8c01717 	ldw	r3,92(sp)
  803120:	1800021e 	bne	r3,zero,80312c <_dtoa_r+0x9d0>
  803124:	e004c03a 	cmpne	r2,fp,zero
  803128:	10010126 	beq	r2,zero,803530 <_dtoa_r+0xdd4>
  80312c:	04023d16 	blt	zero,r16,803a24 <_dtoa_r+0x12c8>
  803130:	b5c00005 	stb	r23,0(r22)
  803134:	d9800517 	ldw	r6,20(sp)
  803138:	d9000f17 	ldw	r4,60(sp)
  80313c:	b5800044 	addi	r22,r22,1
  803140:	3105883a 	add	r2,r6,r4
  803144:	b0806526 	beq	r22,r2,8032dc <_dtoa_r+0xb80>
  803148:	d9400717 	ldw	r5,28(sp)
  80314c:	d9001617 	ldw	r4,88(sp)
  803150:	01800284 	movi	r6,10
  803154:	000f883a 	mov	r7,zero
  803158:	08065a40 	call	8065a4 <__multadd>
  80315c:	d8800715 	stw	r2,28(sp)
  803160:	d8800617 	ldw	r2,24(sp)
  803164:	14c10c26 	beq	r2,r19,803598 <_dtoa_r+0xe3c>
  803168:	d9400617 	ldw	r5,24(sp)
  80316c:	d9001617 	ldw	r4,88(sp)
  803170:	01800284 	movi	r6,10
  803174:	000f883a 	mov	r7,zero
  803178:	08065a40 	call	8065a4 <__multadd>
  80317c:	d9001617 	ldw	r4,88(sp)
  803180:	980b883a 	mov	r5,r19
  803184:	01800284 	movi	r6,10
  803188:	000f883a 	mov	r7,zero
  80318c:	d8800615 	stw	r2,24(sp)
  803190:	08065a40 	call	8065a4 <__multadd>
  803194:	1027883a 	mov	r19,r2
  803198:	003fc206 	br	8030a4 <_dtoa_r+0x948>
  80319c:	2445c83a 	sub	r2,r4,r17
  8031a0:	a088983a 	sll	r4,r20,r2
  8031a4:	003e4b06 	br	802ad4 <_dtoa_r+0x378>
  8031a8:	01bfffc4 	movi	r6,-1
  8031ac:	00800044 	movi	r2,1
  8031b0:	d9800e15 	stw	r6,56(sp)
  8031b4:	d9800f15 	stw	r6,60(sp)
  8031b8:	d8800b15 	stw	r2,44(sp)
  8031bc:	d8c01617 	ldw	r3,88(sp)
  8031c0:	008005c4 	movi	r2,23
  8031c4:	18001115 	stw	zero,68(r3)
  8031c8:	1580082e 	bgeu	r2,r22,8031ec <_dtoa_r+0xa90>
  8031cc:	00c00104 	movi	r3,4
  8031d0:	0009883a 	mov	r4,zero
  8031d4:	18c7883a 	add	r3,r3,r3
  8031d8:	18800504 	addi	r2,r3,20
  8031dc:	21000044 	addi	r4,r4,1
  8031e0:	b0bffc2e 	bgeu	r22,r2,8031d4 <_dtoa_r+0xa78>
  8031e4:	d9801617 	ldw	r6,88(sp)
  8031e8:	31001115 	stw	r4,68(r6)
  8031ec:	dc000f17 	ldw	r16,60(sp)
  8031f0:	003e4b06 	br	802b20 <_dtoa_r+0x3c4>
  8031f4:	d9801717 	ldw	r6,92(sp)
  8031f8:	0023883a 	mov	r17,zero
  8031fc:	31bfff04 	addi	r6,r6,-4
  803200:	d9801715 	stw	r6,92(sp)
  803204:	003df806 	br	8029e8 <_dtoa_r+0x28c>
  803208:	00800804 	movi	r2,32
  80320c:	10c9c83a 	sub	r4,r2,r3
  803210:	00c00104 	movi	r3,4
  803214:	19005a16 	blt	r3,r4,803380 <_dtoa_r+0xc24>
  803218:	008000c4 	movi	r2,3
  80321c:	113f7e16 	blt	r2,r4,803018 <_dtoa_r+0x8bc>
  803220:	20800704 	addi	r2,r4,28
  803224:	003f7506 	br	802ffc <_dtoa_r+0x8a0>
  803228:	d9801717 	ldw	r6,92(sp)
  80322c:	00800044 	movi	r2,1
  803230:	1180a10e 	bge	r2,r6,8034b8 <_dtoa_r+0xd5c>
  803234:	d9800f17 	ldw	r6,60(sp)
  803238:	d8c01017 	ldw	r3,64(sp)
  80323c:	30bfffc4 	addi	r2,r6,-1
  803240:	1881c616 	blt	r3,r2,80395c <_dtoa_r+0x1200>
  803244:	18a5c83a 	sub	r18,r3,r2
  803248:	d8800f17 	ldw	r2,60(sp)
  80324c:	10026216 	blt	r2,zero,803bd8 <_dtoa_r+0x147c>
  803250:	dc001117 	ldw	r16,68(sp)
  803254:	1007883a 	mov	r3,r2
  803258:	d9800a17 	ldw	r6,40(sp)
  80325c:	d8801117 	ldw	r2,68(sp)
  803260:	d9001617 	ldw	r4,88(sp)
  803264:	30cd883a 	add	r6,r6,r3
  803268:	10c5883a 	add	r2,r2,r3
  80326c:	01400044 	movi	r5,1
  803270:	d9800a15 	stw	r6,40(sp)
  803274:	d8801115 	stw	r2,68(sp)
  803278:	08065680 	call	806568 <__i2b>
  80327c:	1027883a 	mov	r19,r2
  803280:	003f2506 	br	802f18 <_dtoa_r+0x7bc>
  803284:	00c02074 	movhi	r3,129
  803288:	18d80c04 	addi	r3,r3,24624
  80328c:	003d6706 	br	80282c <_dtoa_r+0xd0>
  803290:	dd800517 	ldw	r22,20(sp)
  803294:	04000044 	movi	r16,1
  803298:	00000706 	br	8032b8 <_dtoa_r+0xb5c>
  80329c:	d9400717 	ldw	r5,28(sp)
  8032a0:	d9001617 	ldw	r4,88(sp)
  8032a4:	01800284 	movi	r6,10
  8032a8:	000f883a 	mov	r7,zero
  8032ac:	08065a40 	call	8065a4 <__multadd>
  8032b0:	d8800715 	stw	r2,28(sp)
  8032b4:	84000044 	addi	r16,r16,1
  8032b8:	d9000717 	ldw	r4,28(sp)
  8032bc:	900b883a 	mov	r5,r18
  8032c0:	08025440 	call	802544 <quorem>
  8032c4:	15c00c04 	addi	r23,r2,48
  8032c8:	b5c00005 	stb	r23,0(r22)
  8032cc:	d8c00f17 	ldw	r3,60(sp)
  8032d0:	b5800044 	addi	r22,r22,1
  8032d4:	80fff116 	blt	r16,r3,80329c <_dtoa_r+0xb40>
  8032d8:	d8000615 	stw	zero,24(sp)
  8032dc:	d9400717 	ldw	r5,28(sp)
  8032e0:	d9001617 	ldw	r4,88(sp)
  8032e4:	01800044 	movi	r6,1
  8032e8:	08062340 	call	806234 <__lshift>
  8032ec:	1009883a 	mov	r4,r2
  8032f0:	900b883a 	mov	r5,r18
  8032f4:	d8800715 	stw	r2,28(sp)
  8032f8:	0805a4c0 	call	805a4c <__mcmp>
  8032fc:	00803c0e 	bge	zero,r2,8033f0 <_dtoa_r+0xc94>
  803300:	b009883a 	mov	r4,r22
  803304:	213fffc4 	addi	r4,r4,-1
  803308:	21400003 	ldbu	r5,0(r4)
  80330c:	00800e44 	movi	r2,57
  803310:	28c03fcc 	andi	r3,r5,255
  803314:	18c0201c 	xori	r3,r3,128
  803318:	18ffe004 	addi	r3,r3,-128
  80331c:	1881981e 	bne	r3,r2,803980 <_dtoa_r+0x1224>
  803320:	d9800517 	ldw	r6,20(sp)
  803324:	21bff71e 	bne	r4,r6,803304 <_dtoa_r+0xba8>
  803328:	d8800d17 	ldw	r2,52(sp)
  80332c:	37000044 	addi	fp,r6,1
  803330:	10800044 	addi	r2,r2,1
  803334:	d8800d15 	stw	r2,52(sp)
  803338:	00800c44 	movi	r2,49
  80333c:	30800005 	stb	r2,0(r6)
  803340:	d9001617 	ldw	r4,88(sp)
  803344:	900b883a 	mov	r5,r18
  803348:	08058f00 	call	8058f0 <_Bfree>
  80334c:	983ecd26 	beq	r19,zero,802e84 <_dtoa_r+0x728>
  803350:	d8c00617 	ldw	r3,24(sp)
  803354:	18000426 	beq	r3,zero,803368 <_dtoa_r+0xc0c>
  803358:	1cc00326 	beq	r3,r19,803368 <_dtoa_r+0xc0c>
  80335c:	d9001617 	ldw	r4,88(sp)
  803360:	180b883a 	mov	r5,r3
  803364:	08058f00 	call	8058f0 <_Bfree>
  803368:	d9001617 	ldw	r4,88(sp)
  80336c:	980b883a 	mov	r5,r19
  803370:	08058f00 	call	8058f0 <_Bfree>
  803374:	003ec306 	br	802e84 <_dtoa_r+0x728>
  803378:	1805883a 	mov	r2,r3
  80337c:	003eeb06 	br	802f2c <_dtoa_r+0x7d0>
  803380:	d9800a17 	ldw	r6,40(sp)
  803384:	d8c01117 	ldw	r3,68(sp)
  803388:	20bfff04 	addi	r2,r4,-4
  80338c:	308d883a 	add	r6,r6,r2
  803390:	1887883a 	add	r3,r3,r2
  803394:	80a1883a 	add	r16,r16,r2
  803398:	d9800a15 	stw	r6,40(sp)
  80339c:	d8c01115 	stw	r3,68(sp)
  8033a0:	003f1d06 	br	803018 <_dtoa_r+0x8bc>
  8033a4:	a03f0c1e 	bne	r20,zero,802fd8 <_dtoa_r+0x87c>
  8033a8:	00800434 	movhi	r2,16
  8033ac:	10bfffc4 	addi	r2,r2,-1
  8033b0:	a884703a 	and	r2,r21,r2
  8033b4:	103f081e 	bne	r2,zero,802fd8 <_dtoa_r+0x87c>
  8033b8:	a89ffc2c 	andhi	r2,r21,32752
  8033bc:	103f0626 	beq	r2,zero,802fd8 <_dtoa_r+0x87c>
  8033c0:	d8c01117 	ldw	r3,68(sp)
  8033c4:	d9000a17 	ldw	r4,40(sp)
  8033c8:	18c00044 	addi	r3,r3,1
  8033cc:	21000044 	addi	r4,r4,1
  8033d0:	d8c01115 	stw	r3,68(sp)
  8033d4:	d9000a15 	stw	r4,40(sp)
  8033d8:	003f0006 	br	802fdc <_dtoa_r+0x880>
  8033dc:	d9400717 	ldw	r5,28(sp)
  8033e0:	d9001617 	ldw	r4,88(sp)
  8033e4:	08066a40 	call	8066a4 <__pow5mult>
  8033e8:	d8800715 	stw	r2,28(sp)
  8033ec:	003eed06 	br	802fa4 <_dtoa_r+0x848>
  8033f0:	1000021e 	bne	r2,zero,8033fc <_dtoa_r+0xca0>
  8033f4:	b880004c 	andi	r2,r23,1
  8033f8:	103fc11e 	bne	r2,zero,803300 <_dtoa_r+0xba4>
  8033fc:	b5bfffc4 	addi	r22,r22,-1
  803400:	b0c00007 	ldb	r3,0(r22)
  803404:	00800c04 	movi	r2,48
  803408:	18bffc26 	beq	r3,r2,8033fc <_dtoa_r+0xca0>
  80340c:	b7000044 	addi	fp,r22,1
  803410:	003fcb06 	br	803340 <_dtoa_r+0xbe4>
  803414:	d9800d17 	ldw	r6,52(sp)
  803418:	018fc83a 	sub	r7,zero,r6
  80341c:	3801f726 	beq	r7,zero,803bfc <_dtoa_r+0x14a0>
  803420:	398003cc 	andi	r6,r7,15
  803424:	300c90fa 	slli	r6,r6,3
  803428:	01402074 	movhi	r5,129
  80342c:	29582a04 	addi	r5,r5,24744
  803430:	d9001217 	ldw	r4,72(sp)
  803434:	314d883a 	add	r6,r6,r5
  803438:	30c00117 	ldw	r3,4(r6)
  80343c:	30800017 	ldw	r2,0(r6)
  803440:	d9401317 	ldw	r5,76(sp)
  803444:	3821d13a 	srai	r16,r7,4
  803448:	100d883a 	mov	r6,r2
  80344c:	180f883a 	mov	r7,r3
  803450:	0808a900 	call	808a90 <__muldf3>
  803454:	1011883a 	mov	r8,r2
  803458:	1813883a 	mov	r9,r3
  80345c:	1029883a 	mov	r20,r2
  803460:	182b883a 	mov	r21,r3
  803464:	8001e526 	beq	r16,zero,803bfc <_dtoa_r+0x14a0>
  803468:	05800084 	movi	r22,2
  80346c:	04402074 	movhi	r17,129
  803470:	8c585c04 	addi	r17,r17,24944
  803474:	8080004c 	andi	r2,r16,1
  803478:	1005003a 	cmpeq	r2,r2,zero
  80347c:	1000081e 	bne	r2,zero,8034a0 <_dtoa_r+0xd44>
  803480:	89800017 	ldw	r6,0(r17)
  803484:	89c00117 	ldw	r7,4(r17)
  803488:	480b883a 	mov	r5,r9
  80348c:	4009883a 	mov	r4,r8
  803490:	0808a900 	call	808a90 <__muldf3>
  803494:	1011883a 	mov	r8,r2
  803498:	b5800044 	addi	r22,r22,1
  80349c:	1813883a 	mov	r9,r3
  8034a0:	8021d07a 	srai	r16,r16,1
  8034a4:	8c400204 	addi	r17,r17,8
  8034a8:	803ff21e 	bne	r16,zero,803474 <_dtoa_r+0xd18>
  8034ac:	4029883a 	mov	r20,r8
  8034b0:	482b883a 	mov	r21,r9
  8034b4:	003dca06 	br	802be0 <_dtoa_r+0x484>
  8034b8:	d9000817 	ldw	r4,32(sp)
  8034bc:	2005003a 	cmpeq	r2,r4,zero
  8034c0:	1001f61e 	bne	r2,zero,803c9c <_dtoa_r+0x1540>
  8034c4:	dc001117 	ldw	r16,68(sp)
  8034c8:	dc801017 	ldw	r18,64(sp)
  8034cc:	18c10cc4 	addi	r3,r3,1075
  8034d0:	003f6106 	br	803258 <_dtoa_r+0xafc>
  8034d4:	d8000b15 	stw	zero,44(sp)
  8034d8:	d9802617 	ldw	r6,152(sp)
  8034dc:	d8c00d17 	ldw	r3,52(sp)
  8034e0:	30800044 	addi	r2,r6,1
  8034e4:	18ad883a 	add	r22,r3,r2
  8034e8:	b13fffc4 	addi	r4,r22,-1
  8034ec:	d9000e15 	stw	r4,56(sp)
  8034f0:	0581f60e 	bge	zero,r22,803ccc <_dtoa_r+0x1570>
  8034f4:	dd800f15 	stw	r22,60(sp)
  8034f8:	003f3006 	br	8031bc <_dtoa_r+0xa60>
  8034fc:	d8000b15 	stw	zero,44(sp)
  803500:	d9002617 	ldw	r4,152(sp)
  803504:	0101eb0e 	bge	zero,r4,803cb4 <_dtoa_r+0x1558>
  803508:	202d883a 	mov	r22,r4
  80350c:	d9000e15 	stw	r4,56(sp)
  803510:	d9000f15 	stw	r4,60(sp)
  803514:	003f2906 	br	8031bc <_dtoa_r+0xa60>
  803518:	01800044 	movi	r6,1
  80351c:	d9800b15 	stw	r6,44(sp)
  803520:	003ff706 	br	803500 <_dtoa_r+0xda4>
  803524:	01000044 	movi	r4,1
  803528:	d9000b15 	stw	r4,44(sp)
  80352c:	003fea06 	br	8034d8 <_dtoa_r+0xd7c>
  803530:	04000c0e 	bge	zero,r16,803564 <_dtoa_r+0xe08>
  803534:	d9400717 	ldw	r5,28(sp)
  803538:	d9001617 	ldw	r4,88(sp)
  80353c:	01800044 	movi	r6,1
  803540:	08062340 	call	806234 <__lshift>
  803544:	1009883a 	mov	r4,r2
  803548:	900b883a 	mov	r5,r18
  80354c:	d8800715 	stw	r2,28(sp)
  803550:	0805a4c0 	call	805a4c <__mcmp>
  803554:	0081e00e 	bge	zero,r2,803cd8 <_dtoa_r+0x157c>
  803558:	bdc00044 	addi	r23,r23,1
  80355c:	00800e84 	movi	r2,58
  803560:	b881a226 	beq	r23,r2,803bec <_dtoa_r+0x1490>
  803564:	b7000044 	addi	fp,r22,1
  803568:	b5c00005 	stb	r23,0(r22)
  80356c:	003f7406 	br	803340 <_dtoa_r+0xbe4>
  803570:	00800e44 	movi	r2,57
  803574:	b8819d26 	beq	r23,r2,803bec <_dtoa_r+0x1490>
  803578:	053ffa0e 	bge	zero,r20,803564 <_dtoa_r+0xe08>
  80357c:	8dc00c44 	addi	r23,r17,49
  803580:	003ff806 	br	803564 <_dtoa_r+0xe08>
  803584:	d9001617 	ldw	r4,88(sp)
  803588:	a80b883a 	mov	r5,r21
  80358c:	04000044 	movi	r16,1
  803590:	08058f00 	call	8058f0 <_Bfree>
  803594:	003edf06 	br	803114 <_dtoa_r+0x9b8>
  803598:	d9001617 	ldw	r4,88(sp)
  80359c:	980b883a 	mov	r5,r19
  8035a0:	01800284 	movi	r6,10
  8035a4:	000f883a 	mov	r7,zero
  8035a8:	08065a40 	call	8065a4 <__multadd>
  8035ac:	1027883a 	mov	r19,r2
  8035b0:	d8800615 	stw	r2,24(sp)
  8035b4:	003ebb06 	br	8030a4 <_dtoa_r+0x948>
  8035b8:	d9801117 	ldw	r6,68(sp)
  8035bc:	d8800d17 	ldw	r2,52(sp)
  8035c0:	d8000915 	stw	zero,36(sp)
  8035c4:	308dc83a 	sub	r6,r6,r2
  8035c8:	0087c83a 	sub	r3,zero,r2
  8035cc:	d9801115 	stw	r6,68(sp)
  8035d0:	d8c01015 	stw	r3,64(sp)
  8035d4:	003cfe06 	br	8029d0 <_dtoa_r+0x274>
  8035d8:	018dc83a 	sub	r6,zero,r6
  8035dc:	d9801115 	stw	r6,68(sp)
  8035e0:	d8000a15 	stw	zero,40(sp)
  8035e4:	003cf306 	br	8029b4 <_dtoa_r+0x258>
  8035e8:	d9000d17 	ldw	r4,52(sp)
  8035ec:	08093540 	call	809354 <__floatsidf>
  8035f0:	880b883a 	mov	r5,r17
  8035f4:	8009883a 	mov	r4,r16
  8035f8:	180f883a 	mov	r7,r3
  8035fc:	100d883a 	mov	r6,r2
  803600:	08091340 	call	809134 <__nedf2>
  803604:	103ce126 	beq	r2,zero,80298c <_dtoa_r+0x230>
  803608:	d9800d17 	ldw	r6,52(sp)
  80360c:	31bfffc4 	addi	r6,r6,-1
  803610:	d9800d15 	stw	r6,52(sp)
  803614:	003cdd06 	br	80298c <_dtoa_r+0x230>
  803618:	d9000717 	ldw	r4,28(sp)
  80361c:	900b883a 	mov	r5,r18
  803620:	0805a4c0 	call	805a4c <__mcmp>
  803624:	103e8d0e 	bge	r2,zero,80305c <_dtoa_r+0x900>
  803628:	d9400717 	ldw	r5,28(sp)
  80362c:	d9001617 	ldw	r4,88(sp)
  803630:	01800284 	movi	r6,10
  803634:	000f883a 	mov	r7,zero
  803638:	08065a40 	call	8065a4 <__multadd>
  80363c:	d9800d17 	ldw	r6,52(sp)
  803640:	d8800715 	stw	r2,28(sp)
  803644:	31bfffc4 	addi	r6,r6,-1
  803648:	d9800d15 	stw	r6,52(sp)
  80364c:	b001a71e 	bne	r22,zero,803cec <_dtoa_r+0x1590>
  803650:	d8800e17 	ldw	r2,56(sp)
  803654:	d8800f15 	stw	r2,60(sp)
  803658:	003e8006 	br	80305c <_dtoa_r+0x900>
  80365c:	90800417 	ldw	r2,16(r18)
  803660:	1085883a 	add	r2,r2,r2
  803664:	1085883a 	add	r2,r2,r2
  803668:	1485883a 	add	r2,r2,r18
  80366c:	11000417 	ldw	r4,16(r2)
  803670:	08059180 	call	805918 <__hi0bits>
  803674:	00c00804 	movi	r3,32
  803678:	1887c83a 	sub	r3,r3,r2
  80367c:	003e5a06 	br	802fe8 <_dtoa_r+0x88c>
  803680:	d9400717 	ldw	r5,28(sp)
  803684:	d9801017 	ldw	r6,64(sp)
  803688:	d9001617 	ldw	r4,88(sp)
  80368c:	08066a40 	call	8066a4 <__pow5mult>
  803690:	d8800715 	stw	r2,28(sp)
  803694:	003e4306 	br	802fa4 <_dtoa_r+0x848>
  803698:	d9800f17 	ldw	r6,60(sp)
  80369c:	d8800d17 	ldw	r2,52(sp)
  8036a0:	d9800315 	stw	r6,12(sp)
  8036a4:	d8800415 	stw	r2,16(sp)
  8036a8:	d8c00b17 	ldw	r3,44(sp)
  8036ac:	1805003a 	cmpeq	r2,r3,zero
  8036b0:	1000e21e 	bne	r2,zero,803a3c <_dtoa_r+0x12e0>
  8036b4:	d9000317 	ldw	r4,12(sp)
  8036b8:	0005883a 	mov	r2,zero
  8036bc:	00cff834 	movhi	r3,16352
  8036c0:	200c90fa 	slli	r6,r4,3
  8036c4:	01002074 	movhi	r4,129
  8036c8:	21182a04 	addi	r4,r4,24744
  8036cc:	180b883a 	mov	r5,r3
  8036d0:	310d883a 	add	r6,r6,r4
  8036d4:	327fff17 	ldw	r9,-4(r6)
  8036d8:	323ffe17 	ldw	r8,-8(r6)
  8036dc:	1009883a 	mov	r4,r2
  8036e0:	480f883a 	mov	r7,r9
  8036e4:	400d883a 	mov	r6,r8
  8036e8:	0808e540 	call	808e54 <__divdf3>
  8036ec:	180b883a 	mov	r5,r3
  8036f0:	b00d883a 	mov	r6,r22
  8036f4:	b80f883a 	mov	r7,r23
  8036f8:	1009883a 	mov	r4,r2
  8036fc:	080899c0 	call	80899c <__subdf3>
  803700:	a80b883a 	mov	r5,r21
  803704:	a009883a 	mov	r4,r20
  803708:	d8c01915 	stw	r3,100(sp)
  80370c:	d8801815 	stw	r2,96(sp)
  803710:	080944c0 	call	80944c <__fixdfsi>
  803714:	1009883a 	mov	r4,r2
  803718:	1027883a 	mov	r19,r2
  80371c:	08093540 	call	809354 <__floatsidf>
  803720:	a80b883a 	mov	r5,r21
  803724:	a009883a 	mov	r4,r20
  803728:	180f883a 	mov	r7,r3
  80372c:	100d883a 	mov	r6,r2
  803730:	080899c0 	call	80899c <__subdf3>
  803734:	d9801817 	ldw	r6,96(sp)
  803738:	1823883a 	mov	r17,r3
  80373c:	d8801415 	stw	r2,80(sp)
  803740:	302d883a 	mov	r22,r6
  803744:	d9800517 	ldw	r6,20(sp)
  803748:	9cc00c04 	addi	r19,r19,48
  80374c:	dc401515 	stw	r17,84(sp)
  803750:	d8c01917 	ldw	r3,100(sp)
  803754:	34c00005 	stb	r19,0(r6)
  803758:	d8800517 	ldw	r2,20(sp)
  80375c:	d9401917 	ldw	r5,100(sp)
  803760:	d9801417 	ldw	r6,80(sp)
  803764:	b009883a 	mov	r4,r22
  803768:	880f883a 	mov	r7,r17
  80376c:	182f883a 	mov	r23,r3
  803770:	17000044 	addi	fp,r2,1
  803774:	08091bc0 	call	8091bc <__gtdf2>
  803778:	00804e16 	blt	zero,r2,8038b4 <_dtoa_r+0x1158>
  80377c:	d9801417 	ldw	r6,80(sp)
  803780:	0005883a 	mov	r2,zero
  803784:	00cffc34 	movhi	r3,16368
  803788:	180b883a 	mov	r5,r3
  80378c:	880f883a 	mov	r7,r17
  803790:	1009883a 	mov	r4,r2
  803794:	080899c0 	call	80899c <__subdf3>
  803798:	d9401917 	ldw	r5,100(sp)
  80379c:	180f883a 	mov	r7,r3
  8037a0:	b009883a 	mov	r4,r22
  8037a4:	100d883a 	mov	r6,r2
  8037a8:	08091bc0 	call	8091bc <__gtdf2>
  8037ac:	00bda216 	blt	zero,r2,802e38 <_dtoa_r+0x6dc>
  8037b0:	d8c00317 	ldw	r3,12(sp)
  8037b4:	00800044 	movi	r2,1
  8037b8:	10c01216 	blt	r2,r3,803804 <_dtoa_r+0x10a8>
  8037bc:	003d4506 	br	802cd4 <_dtoa_r+0x578>
  8037c0:	d9801417 	ldw	r6,80(sp)
  8037c4:	0005883a 	mov	r2,zero
  8037c8:	00cffc34 	movhi	r3,16368
  8037cc:	180b883a 	mov	r5,r3
  8037d0:	880f883a 	mov	r7,r17
  8037d4:	1009883a 	mov	r4,r2
  8037d8:	080899c0 	call	80899c <__subdf3>
  8037dc:	d9c01b17 	ldw	r7,108(sp)
  8037e0:	180b883a 	mov	r5,r3
  8037e4:	1009883a 	mov	r4,r2
  8037e8:	b00d883a 	mov	r6,r22
  8037ec:	08092cc0 	call	8092cc <__ltdf2>
  8037f0:	103d9116 	blt	r2,zero,802e38 <_dtoa_r+0x6dc>
  8037f4:	d9800517 	ldw	r6,20(sp)
  8037f8:	d9000317 	ldw	r4,12(sp)
  8037fc:	3105883a 	add	r2,r6,r4
  803800:	e0bd3426 	beq	fp,r2,802cd4 <_dtoa_r+0x578>
  803804:	04500934 	movhi	r17,16420
  803808:	0021883a 	mov	r16,zero
  80380c:	b80b883a 	mov	r5,r23
  803810:	b009883a 	mov	r4,r22
  803814:	800d883a 	mov	r6,r16
  803818:	880f883a 	mov	r7,r17
  80381c:	0808a900 	call	808a90 <__muldf3>
  803820:	d9401517 	ldw	r5,84(sp)
  803824:	d9001417 	ldw	r4,80(sp)
  803828:	880f883a 	mov	r7,r17
  80382c:	000d883a 	mov	r6,zero
  803830:	d8801a15 	stw	r2,104(sp)
  803834:	d8c01b15 	stw	r3,108(sp)
  803838:	0808a900 	call	808a90 <__muldf3>
  80383c:	180b883a 	mov	r5,r3
  803840:	1009883a 	mov	r4,r2
  803844:	1823883a 	mov	r17,r3
  803848:	1021883a 	mov	r16,r2
  80384c:	080944c0 	call	80944c <__fixdfsi>
  803850:	1009883a 	mov	r4,r2
  803854:	102b883a 	mov	r21,r2
  803858:	08093540 	call	809354 <__floatsidf>
  80385c:	880b883a 	mov	r5,r17
  803860:	8009883a 	mov	r4,r16
  803864:	180f883a 	mov	r7,r3
  803868:	100d883a 	mov	r6,r2
  80386c:	080899c0 	call	80899c <__subdf3>
  803870:	1021883a 	mov	r16,r2
  803874:	d9001b17 	ldw	r4,108(sp)
  803878:	1823883a 	mov	r17,r3
  80387c:	dc001415 	stw	r16,80(sp)
  803880:	ad400c04 	addi	r21,r21,48
  803884:	dc401515 	stw	r17,84(sp)
  803888:	d8801a17 	ldw	r2,104(sp)
  80388c:	e5400005 	stb	r21,0(fp)
  803890:	202f883a 	mov	r23,r4
  803894:	d9c01b17 	ldw	r7,108(sp)
  803898:	d9001417 	ldw	r4,80(sp)
  80389c:	880b883a 	mov	r5,r17
  8038a0:	100d883a 	mov	r6,r2
  8038a4:	102d883a 	mov	r22,r2
  8038a8:	e7000044 	addi	fp,fp,1
  8038ac:	08092cc0 	call	8092cc <__ltdf2>
  8038b0:	103fc30e 	bge	r2,zero,8037c0 <_dtoa_r+0x1064>
  8038b4:	d9000417 	ldw	r4,16(sp)
  8038b8:	d9000d15 	stw	r4,52(sp)
  8038bc:	003d7106 	br	802e84 <_dtoa_r+0x728>
  8038c0:	d9801717 	ldw	r6,92(sp)
  8038c4:	00800084 	movi	r2,2
  8038c8:	11bde60e 	bge	r2,r6,803064 <_dtoa_r+0x908>
  8038cc:	203cfb1e 	bne	r4,zero,802cbc <_dtoa_r+0x560>
  8038d0:	d9001617 	ldw	r4,88(sp)
  8038d4:	900b883a 	mov	r5,r18
  8038d8:	01800144 	movi	r6,5
  8038dc:	000f883a 	mov	r7,zero
  8038e0:	08065a40 	call	8065a4 <__multadd>
  8038e4:	d9000717 	ldw	r4,28(sp)
  8038e8:	100b883a 	mov	r5,r2
  8038ec:	1025883a 	mov	r18,r2
  8038f0:	0805a4c0 	call	805a4c <__mcmp>
  8038f4:	00bcf10e 	bge	zero,r2,802cbc <_dtoa_r+0x560>
  8038f8:	d8c00d17 	ldw	r3,52(sp)
  8038fc:	d9000517 	ldw	r4,20(sp)
  803900:	d8000615 	stw	zero,24(sp)
  803904:	18c00044 	addi	r3,r3,1
  803908:	d8c00d15 	stw	r3,52(sp)
  80390c:	00800c44 	movi	r2,49
  803910:	27000044 	addi	fp,r4,1
  803914:	20800005 	stb	r2,0(r4)
  803918:	003e8906 	br	803340 <_dtoa_r+0xbe4>
  80391c:	d8c00517 	ldw	r3,20(sp)
  803920:	003bc206 	br	80282c <_dtoa_r+0xd0>
  803924:	01802074 	movhi	r6,129
  803928:	31985c04 	addi	r6,r6,24944
  80392c:	30c00917 	ldw	r3,36(r6)
  803930:	30800817 	ldw	r2,32(r6)
  803934:	d9001217 	ldw	r4,72(sp)
  803938:	d9401317 	ldw	r5,76(sp)
  80393c:	180f883a 	mov	r7,r3
  803940:	100d883a 	mov	r6,r2
  803944:	0808e540 	call	808e54 <__divdf3>
  803948:	948003cc 	andi	r18,r18,15
  80394c:	058000c4 	movi	r22,3
  803950:	1029883a 	mov	r20,r2
  803954:	182b883a 	mov	r21,r3
  803958:	003c8906 	br	802b80 <_dtoa_r+0x424>
  80395c:	d9001017 	ldw	r4,64(sp)
  803960:	d9800917 	ldw	r6,36(sp)
  803964:	0025883a 	mov	r18,zero
  803968:	1105c83a 	sub	r2,r2,r4
  80396c:	2089883a 	add	r4,r4,r2
  803970:	308d883a 	add	r6,r6,r2
  803974:	d9001015 	stw	r4,64(sp)
  803978:	d9800915 	stw	r6,36(sp)
  80397c:	003e3206 	br	803248 <_dtoa_r+0xaec>
  803980:	28800044 	addi	r2,r5,1
  803984:	27000044 	addi	fp,r4,1
  803988:	20800005 	stb	r2,0(r4)
  80398c:	003e6c06 	br	803340 <_dtoa_r+0xbe4>
  803990:	d8800f17 	ldw	r2,60(sp)
  803994:	00bce016 	blt	zero,r2,802d18 <_dtoa_r+0x5bc>
  803998:	d9800f17 	ldw	r6,60(sp)
  80399c:	303cc51e 	bne	r6,zero,802cb4 <_dtoa_r+0x558>
  8039a0:	0005883a 	mov	r2,zero
  8039a4:	00d00534 	movhi	r3,16404
  8039a8:	980b883a 	mov	r5,r19
  8039ac:	180f883a 	mov	r7,r3
  8039b0:	9009883a 	mov	r4,r18
  8039b4:	100d883a 	mov	r6,r2
  8039b8:	0808a900 	call	808a90 <__muldf3>
  8039bc:	180b883a 	mov	r5,r3
  8039c0:	a80f883a 	mov	r7,r21
  8039c4:	1009883a 	mov	r4,r2
  8039c8:	a00d883a 	mov	r6,r20
  8039cc:	08092440 	call	809244 <__gedf2>
  8039d0:	103cb80e 	bge	r2,zero,802cb4 <_dtoa_r+0x558>
  8039d4:	0027883a 	mov	r19,zero
  8039d8:	0025883a 	mov	r18,zero
  8039dc:	003fc606 	br	8038f8 <_dtoa_r+0x119c>
  8039e0:	99400117 	ldw	r5,4(r19)
  8039e4:	d9001617 	ldw	r4,88(sp)
  8039e8:	0805e700 	call	805e70 <_Balloc>
  8039ec:	99800417 	ldw	r6,16(r19)
  8039f0:	11000304 	addi	r4,r2,12
  8039f4:	99400304 	addi	r5,r19,12
  8039f8:	318d883a 	add	r6,r6,r6
  8039fc:	318d883a 	add	r6,r6,r6
  803a00:	31800204 	addi	r6,r6,8
  803a04:	1023883a 	mov	r17,r2
  803a08:	08056d80 	call	8056d8 <memcpy>
  803a0c:	d9001617 	ldw	r4,88(sp)
  803a10:	880b883a 	mov	r5,r17
  803a14:	01800044 	movi	r6,1
  803a18:	08062340 	call	806234 <__lshift>
  803a1c:	100b883a 	mov	r5,r2
  803a20:	003d9c06 	br	803094 <_dtoa_r+0x938>
  803a24:	00800e44 	movi	r2,57
  803a28:	b8807026 	beq	r23,r2,803bec <_dtoa_r+0x1490>
  803a2c:	b8800044 	addi	r2,r23,1
  803a30:	b7000044 	addi	fp,r22,1
  803a34:	b0800005 	stb	r2,0(r22)
  803a38:	003e4106 	br	803340 <_dtoa_r+0xbe4>
  803a3c:	d8800317 	ldw	r2,12(sp)
  803a40:	01802074 	movhi	r6,129
  803a44:	31982a04 	addi	r6,r6,24744
  803a48:	b009883a 	mov	r4,r22
  803a4c:	100e90fa 	slli	r7,r2,3
  803a50:	b80b883a 	mov	r5,r23
  803a54:	398f883a 	add	r7,r7,r6
  803a58:	38bffe17 	ldw	r2,-8(r7)
  803a5c:	d9800517 	ldw	r6,20(sp)
  803a60:	38ffff17 	ldw	r3,-4(r7)
  803a64:	37000044 	addi	fp,r6,1
  803a68:	180f883a 	mov	r7,r3
  803a6c:	100d883a 	mov	r6,r2
  803a70:	0808a900 	call	808a90 <__muldf3>
  803a74:	a80b883a 	mov	r5,r21
  803a78:	a009883a 	mov	r4,r20
  803a7c:	182f883a 	mov	r23,r3
  803a80:	102d883a 	mov	r22,r2
  803a84:	080944c0 	call	80944c <__fixdfsi>
  803a88:	1009883a 	mov	r4,r2
  803a8c:	1027883a 	mov	r19,r2
  803a90:	08093540 	call	809354 <__floatsidf>
  803a94:	a80b883a 	mov	r5,r21
  803a98:	a009883a 	mov	r4,r20
  803a9c:	180f883a 	mov	r7,r3
  803aa0:	100d883a 	mov	r6,r2
  803aa4:	080899c0 	call	80899c <__subdf3>
  803aa8:	180b883a 	mov	r5,r3
  803aac:	d8c00517 	ldw	r3,20(sp)
  803ab0:	9cc00c04 	addi	r19,r19,48
  803ab4:	1009883a 	mov	r4,r2
  803ab8:	1cc00005 	stb	r19,0(r3)
  803abc:	2021883a 	mov	r16,r4
  803ac0:	d9000317 	ldw	r4,12(sp)
  803ac4:	00800044 	movi	r2,1
  803ac8:	2823883a 	mov	r17,r5
  803acc:	20802226 	beq	r4,r2,803b58 <_dtoa_r+0x13fc>
  803ad0:	1029883a 	mov	r20,r2
  803ad4:	0005883a 	mov	r2,zero
  803ad8:	00d00934 	movhi	r3,16420
  803adc:	180f883a 	mov	r7,r3
  803ae0:	100d883a 	mov	r6,r2
  803ae4:	880b883a 	mov	r5,r17
  803ae8:	8009883a 	mov	r4,r16
  803aec:	0808a900 	call	808a90 <__muldf3>
  803af0:	180b883a 	mov	r5,r3
  803af4:	1009883a 	mov	r4,r2
  803af8:	1823883a 	mov	r17,r3
  803afc:	1021883a 	mov	r16,r2
  803b00:	080944c0 	call	80944c <__fixdfsi>
  803b04:	1009883a 	mov	r4,r2
  803b08:	102b883a 	mov	r21,r2
  803b0c:	08093540 	call	809354 <__floatsidf>
  803b10:	880b883a 	mov	r5,r17
  803b14:	8009883a 	mov	r4,r16
  803b18:	180f883a 	mov	r7,r3
  803b1c:	100d883a 	mov	r6,r2
  803b20:	080899c0 	call	80899c <__subdf3>
  803b24:	180b883a 	mov	r5,r3
  803b28:	d8c00517 	ldw	r3,20(sp)
  803b2c:	1009883a 	mov	r4,r2
  803b30:	ad400c04 	addi	r21,r21,48
  803b34:	1d05883a 	add	r2,r3,r20
  803b38:	15400005 	stb	r21,0(r2)
  803b3c:	2021883a 	mov	r16,r4
  803b40:	d9000317 	ldw	r4,12(sp)
  803b44:	a5000044 	addi	r20,r20,1
  803b48:	2823883a 	mov	r17,r5
  803b4c:	a13fe11e 	bne	r20,r4,803ad4 <_dtoa_r+0x1378>
  803b50:	e505883a 	add	r2,fp,r20
  803b54:	173fffc4 	addi	fp,r2,-1
  803b58:	0025883a 	mov	r18,zero
  803b5c:	04cff834 	movhi	r19,16352
  803b60:	b009883a 	mov	r4,r22
  803b64:	b80b883a 	mov	r5,r23
  803b68:	900d883a 	mov	r6,r18
  803b6c:	980f883a 	mov	r7,r19
  803b70:	0808a1c0 	call	808a1c <__adddf3>
  803b74:	180b883a 	mov	r5,r3
  803b78:	1009883a 	mov	r4,r2
  803b7c:	800d883a 	mov	r6,r16
  803b80:	880f883a 	mov	r7,r17
  803b84:	08092cc0 	call	8092cc <__ltdf2>
  803b88:	103cab16 	blt	r2,zero,802e38 <_dtoa_r+0x6dc>
  803b8c:	0009883a 	mov	r4,zero
  803b90:	980b883a 	mov	r5,r19
  803b94:	b80f883a 	mov	r7,r23
  803b98:	b00d883a 	mov	r6,r22
  803b9c:	080899c0 	call	80899c <__subdf3>
  803ba0:	180b883a 	mov	r5,r3
  803ba4:	880f883a 	mov	r7,r17
  803ba8:	1009883a 	mov	r4,r2
  803bac:	800d883a 	mov	r6,r16
  803bb0:	08091bc0 	call	8091bc <__gtdf2>
  803bb4:	00bc470e 	bge	zero,r2,802cd4 <_dtoa_r+0x578>
  803bb8:	00c00c04 	movi	r3,48
  803bbc:	e73fffc4 	addi	fp,fp,-1
  803bc0:	e0800007 	ldb	r2,0(fp)
  803bc4:	10fffd26 	beq	r2,r3,803bbc <_dtoa_r+0x1460>
  803bc8:	d9800417 	ldw	r6,16(sp)
  803bcc:	e7000044 	addi	fp,fp,1
  803bd0:	d9800d15 	stw	r6,52(sp)
  803bd4:	003cab06 	br	802e84 <_dtoa_r+0x728>
  803bd8:	d8c00f17 	ldw	r3,60(sp)
  803bdc:	d9001117 	ldw	r4,68(sp)
  803be0:	20e1c83a 	sub	r16,r4,r3
  803be4:	0007883a 	mov	r3,zero
  803be8:	003d9b06 	br	803258 <_dtoa_r+0xafc>
  803bec:	00800e44 	movi	r2,57
  803bf0:	b0800005 	stb	r2,0(r22)
  803bf4:	b5800044 	addi	r22,r22,1
  803bf8:	003dc106 	br	803300 <_dtoa_r+0xba4>
  803bfc:	05800084 	movi	r22,2
  803c00:	003bf706 	br	802be0 <_dtoa_r+0x484>
  803c04:	d9000f17 	ldw	r4,60(sp)
  803c08:	013c000e 	bge	zero,r4,802c0c <_dtoa_r+0x4b0>
  803c0c:	d9800e17 	ldw	r6,56(sp)
  803c10:	01bc300e 	bge	zero,r6,802cd4 <_dtoa_r+0x578>
  803c14:	0005883a 	mov	r2,zero
  803c18:	00d00934 	movhi	r3,16420
  803c1c:	a80b883a 	mov	r5,r21
  803c20:	180f883a 	mov	r7,r3
  803c24:	a009883a 	mov	r4,r20
  803c28:	100d883a 	mov	r6,r2
  803c2c:	0808a900 	call	808a90 <__muldf3>
  803c30:	b1000044 	addi	r4,r22,1
  803c34:	1021883a 	mov	r16,r2
  803c38:	1823883a 	mov	r17,r3
  803c3c:	08093540 	call	809354 <__floatsidf>
  803c40:	880b883a 	mov	r5,r17
  803c44:	8009883a 	mov	r4,r16
  803c48:	180f883a 	mov	r7,r3
  803c4c:	100d883a 	mov	r6,r2
  803c50:	0808a900 	call	808a90 <__muldf3>
  803c54:	0011883a 	mov	r8,zero
  803c58:	02500734 	movhi	r9,16412
  803c5c:	180b883a 	mov	r5,r3
  803c60:	480f883a 	mov	r7,r9
  803c64:	1009883a 	mov	r4,r2
  803c68:	400d883a 	mov	r6,r8
  803c6c:	0808a1c0 	call	808a1c <__adddf3>
  803c70:	102d883a 	mov	r22,r2
  803c74:	00bf3034 	movhi	r2,64704
  803c78:	10ef883a 	add	r23,r2,r3
  803c7c:	d8800d17 	ldw	r2,52(sp)
  803c80:	d8c00e17 	ldw	r3,56(sp)
  803c84:	8029883a 	mov	r20,r16
  803c88:	10bfffc4 	addi	r2,r2,-1
  803c8c:	882b883a 	mov	r21,r17
  803c90:	d8800415 	stw	r2,16(sp)
  803c94:	d8c00315 	stw	r3,12(sp)
  803c98:	003e8306 	br	8036a8 <_dtoa_r+0xf4c>
  803c9c:	d8800117 	ldw	r2,4(sp)
  803ca0:	dc001117 	ldw	r16,68(sp)
  803ca4:	dc801017 	ldw	r18,64(sp)
  803ca8:	00c00d84 	movi	r3,54
  803cac:	1887c83a 	sub	r3,r3,r2
  803cb0:	003d6906 	br	803258 <_dtoa_r+0xafc>
  803cb4:	01800044 	movi	r6,1
  803cb8:	3021883a 	mov	r16,r6
  803cbc:	d9800f15 	stw	r6,60(sp)
  803cc0:	d9802615 	stw	r6,152(sp)
  803cc4:	d9800e15 	stw	r6,56(sp)
  803cc8:	003b9306 	br	802b18 <_dtoa_r+0x3bc>
  803ccc:	b021883a 	mov	r16,r22
  803cd0:	dd800f15 	stw	r22,60(sp)
  803cd4:	003b9006 	br	802b18 <_dtoa_r+0x3bc>
  803cd8:	103e221e 	bne	r2,zero,803564 <_dtoa_r+0xe08>
  803cdc:	b880004c 	andi	r2,r23,1
  803ce0:	1005003a 	cmpeq	r2,r2,zero
  803ce4:	103e1f1e 	bne	r2,zero,803564 <_dtoa_r+0xe08>
  803ce8:	003e1b06 	br	803558 <_dtoa_r+0xdfc>
  803cec:	d9001617 	ldw	r4,88(sp)
  803cf0:	980b883a 	mov	r5,r19
  803cf4:	01800284 	movi	r6,10
  803cf8:	000f883a 	mov	r7,zero
  803cfc:	08065a40 	call	8065a4 <__multadd>
  803d00:	d8c00e17 	ldw	r3,56(sp)
  803d04:	1027883a 	mov	r19,r2
  803d08:	d8c00f15 	stw	r3,60(sp)
  803d0c:	003cd306 	br	80305c <_dtoa_r+0x900>

00803d10 <_fflush_r>:
  803d10:	defffb04 	addi	sp,sp,-20
  803d14:	dcc00315 	stw	r19,12(sp)
  803d18:	dc800215 	stw	r18,8(sp)
  803d1c:	dfc00415 	stw	ra,16(sp)
  803d20:	dc400115 	stw	r17,4(sp)
  803d24:	dc000015 	stw	r16,0(sp)
  803d28:	2027883a 	mov	r19,r4
  803d2c:	2825883a 	mov	r18,r5
  803d30:	20000226 	beq	r4,zero,803d3c <_fflush_r+0x2c>
  803d34:	20800e17 	ldw	r2,56(r4)
  803d38:	10005626 	beq	r2,zero,803e94 <_fflush_r+0x184>
  803d3c:	9100030b 	ldhu	r4,12(r18)
  803d40:	20ffffcc 	andi	r3,r4,65535
  803d44:	18e0001c 	xori	r3,r3,32768
  803d48:	18e00004 	addi	r3,r3,-32768
  803d4c:	1880020c 	andi	r2,r3,8
  803d50:	1000261e 	bne	r2,zero,803dec <_fflush_r+0xdc>
  803d54:	90c00117 	ldw	r3,4(r18)
  803d58:	20820014 	ori	r2,r4,2048
  803d5c:	9080030d 	sth	r2,12(r18)
  803d60:	1009883a 	mov	r4,r2
  803d64:	00c0400e 	bge	zero,r3,803e68 <_fflush_r+0x158>
  803d68:	92000a17 	ldw	r8,40(r18)
  803d6c:	40004026 	beq	r8,zero,803e70 <_fflush_r+0x160>
  803d70:	2084000c 	andi	r2,r4,4096
  803d74:	10005326 	beq	r2,zero,803ec4 <_fflush_r+0x1b4>
  803d78:	94001417 	ldw	r16,80(r18)
  803d7c:	9080030b 	ldhu	r2,12(r18)
  803d80:	1080010c 	andi	r2,r2,4
  803d84:	1000481e 	bne	r2,zero,803ea8 <_fflush_r+0x198>
  803d88:	91400717 	ldw	r5,28(r18)
  803d8c:	9809883a 	mov	r4,r19
  803d90:	800d883a 	mov	r6,r16
  803d94:	000f883a 	mov	r7,zero
  803d98:	403ee83a 	callr	r8
  803d9c:	8080261e 	bne	r16,r2,803e38 <_fflush_r+0x128>
  803da0:	9080030b 	ldhu	r2,12(r18)
  803da4:	91000417 	ldw	r4,16(r18)
  803da8:	90000115 	stw	zero,4(r18)
  803dac:	10bdffcc 	andi	r2,r2,63487
  803db0:	10ffffcc 	andi	r3,r2,65535
  803db4:	18c4000c 	andi	r3,r3,4096
  803db8:	9080030d 	sth	r2,12(r18)
  803dbc:	91000015 	stw	r4,0(r18)
  803dc0:	18002b26 	beq	r3,zero,803e70 <_fflush_r+0x160>
  803dc4:	0007883a 	mov	r3,zero
  803dc8:	1805883a 	mov	r2,r3
  803dcc:	94001415 	stw	r16,80(r18)
  803dd0:	dfc00417 	ldw	ra,16(sp)
  803dd4:	dcc00317 	ldw	r19,12(sp)
  803dd8:	dc800217 	ldw	r18,8(sp)
  803ddc:	dc400117 	ldw	r17,4(sp)
  803de0:	dc000017 	ldw	r16,0(sp)
  803de4:	dec00504 	addi	sp,sp,20
  803de8:	f800283a 	ret
  803dec:	94400417 	ldw	r17,16(r18)
  803df0:	88001f26 	beq	r17,zero,803e70 <_fflush_r+0x160>
  803df4:	90800017 	ldw	r2,0(r18)
  803df8:	18c000cc 	andi	r3,r3,3
  803dfc:	94400015 	stw	r17,0(r18)
  803e00:	1461c83a 	sub	r16,r2,r17
  803e04:	18002526 	beq	r3,zero,803e9c <_fflush_r+0x18c>
  803e08:	0005883a 	mov	r2,zero
  803e0c:	90800215 	stw	r2,8(r18)
  803e10:	0400170e 	bge	zero,r16,803e70 <_fflush_r+0x160>
  803e14:	90c00917 	ldw	r3,36(r18)
  803e18:	91400717 	ldw	r5,28(r18)
  803e1c:	880d883a 	mov	r6,r17
  803e20:	800f883a 	mov	r7,r16
  803e24:	9809883a 	mov	r4,r19
  803e28:	183ee83a 	callr	r3
  803e2c:	88a3883a 	add	r17,r17,r2
  803e30:	80a1c83a 	sub	r16,r16,r2
  803e34:	00bff616 	blt	zero,r2,803e10 <_fflush_r+0x100>
  803e38:	9080030b 	ldhu	r2,12(r18)
  803e3c:	00ffffc4 	movi	r3,-1
  803e40:	10801014 	ori	r2,r2,64
  803e44:	9080030d 	sth	r2,12(r18)
  803e48:	1805883a 	mov	r2,r3
  803e4c:	dfc00417 	ldw	ra,16(sp)
  803e50:	dcc00317 	ldw	r19,12(sp)
  803e54:	dc800217 	ldw	r18,8(sp)
  803e58:	dc400117 	ldw	r17,4(sp)
  803e5c:	dc000017 	ldw	r16,0(sp)
  803e60:	dec00504 	addi	sp,sp,20
  803e64:	f800283a 	ret
  803e68:	90800f17 	ldw	r2,60(r18)
  803e6c:	00bfbe16 	blt	zero,r2,803d68 <_fflush_r+0x58>
  803e70:	0007883a 	mov	r3,zero
  803e74:	1805883a 	mov	r2,r3
  803e78:	dfc00417 	ldw	ra,16(sp)
  803e7c:	dcc00317 	ldw	r19,12(sp)
  803e80:	dc800217 	ldw	r18,8(sp)
  803e84:	dc400117 	ldw	r17,4(sp)
  803e88:	dc000017 	ldw	r16,0(sp)
  803e8c:	dec00504 	addi	sp,sp,20
  803e90:	f800283a 	ret
  803e94:	0803fa80 	call	803fa8 <__sinit>
  803e98:	003fa806 	br	803d3c <_fflush_r+0x2c>
  803e9c:	90800517 	ldw	r2,20(r18)
  803ea0:	90800215 	stw	r2,8(r18)
  803ea4:	003fda06 	br	803e10 <_fflush_r+0x100>
  803ea8:	90800117 	ldw	r2,4(r18)
  803eac:	90c00c17 	ldw	r3,48(r18)
  803eb0:	80a1c83a 	sub	r16,r16,r2
  803eb4:	183fb426 	beq	r3,zero,803d88 <_fflush_r+0x78>
  803eb8:	90800f17 	ldw	r2,60(r18)
  803ebc:	80a1c83a 	sub	r16,r16,r2
  803ec0:	003fb106 	br	803d88 <_fflush_r+0x78>
  803ec4:	91400717 	ldw	r5,28(r18)
  803ec8:	9809883a 	mov	r4,r19
  803ecc:	000d883a 	mov	r6,zero
  803ed0:	01c00044 	movi	r7,1
  803ed4:	403ee83a 	callr	r8
  803ed8:	1021883a 	mov	r16,r2
  803edc:	00bfffc4 	movi	r2,-1
  803ee0:	80800226 	beq	r16,r2,803eec <_fflush_r+0x1dc>
  803ee4:	92000a17 	ldw	r8,40(r18)
  803ee8:	003fa406 	br	803d7c <_fflush_r+0x6c>
  803eec:	98c00017 	ldw	r3,0(r19)
  803ef0:	00800744 	movi	r2,29
  803ef4:	18bfde26 	beq	r3,r2,803e70 <_fflush_r+0x160>
  803ef8:	9080030b 	ldhu	r2,12(r18)
  803efc:	8007883a 	mov	r3,r16
  803f00:	10801014 	ori	r2,r2,64
  803f04:	9080030d 	sth	r2,12(r18)
  803f08:	003fcf06 	br	803e48 <_fflush_r+0x138>

00803f0c <fflush>:
  803f0c:	01402034 	movhi	r5,128
  803f10:	294f4404 	addi	r5,r5,15632
  803f14:	2007883a 	mov	r3,r4
  803f18:	20000526 	beq	r4,zero,803f30 <fflush+0x24>
  803f1c:	00802074 	movhi	r2,129
  803f20:	109fa904 	addi	r2,r2,32420
  803f24:	11000017 	ldw	r4,0(r2)
  803f28:	180b883a 	mov	r5,r3
  803f2c:	0803d101 	jmpi	803d10 <_fflush_r>
  803f30:	00802074 	movhi	r2,129
  803f34:	109faa04 	addi	r2,r2,32424
  803f38:	11000017 	ldw	r4,0(r2)
  803f3c:	0804adc1 	jmpi	804adc <_fwalk_reent>

00803f40 <std>:
  803f40:	00802034 	movhi	r2,128
  803f44:	109c6904 	addi	r2,r2,29092
  803f48:	20800b15 	stw	r2,44(r4)
  803f4c:	00802034 	movhi	r2,128
  803f50:	109ca404 	addi	r2,r2,29328
  803f54:	20800815 	stw	r2,32(r4)
  803f58:	00c02034 	movhi	r3,128
  803f5c:	18dc8504 	addi	r3,r3,29204
  803f60:	00802034 	movhi	r2,128
  803f64:	109c6b04 	addi	r2,r2,29100
  803f68:	2140030d 	sth	r5,12(r4)
  803f6c:	2180038d 	sth	r6,14(r4)
  803f70:	20c00915 	stw	r3,36(r4)
  803f74:	20800a15 	stw	r2,40(r4)
  803f78:	20000015 	stw	zero,0(r4)
  803f7c:	20000115 	stw	zero,4(r4)
  803f80:	20000215 	stw	zero,8(r4)
  803f84:	20000415 	stw	zero,16(r4)
  803f88:	20000515 	stw	zero,20(r4)
  803f8c:	20000615 	stw	zero,24(r4)
  803f90:	21000715 	stw	r4,28(r4)
  803f94:	f800283a 	ret

00803f98 <__sfp_lock_acquire>:
  803f98:	f800283a 	ret

00803f9c <__sfp_lock_release>:
  803f9c:	f800283a 	ret

00803fa0 <__sinit_lock_acquire>:
  803fa0:	f800283a 	ret

00803fa4 <__sinit_lock_release>:
  803fa4:	f800283a 	ret

00803fa8 <__sinit>:
  803fa8:	20800e17 	ldw	r2,56(r4)
  803fac:	defffd04 	addi	sp,sp,-12
  803fb0:	dc400115 	stw	r17,4(sp)
  803fb4:	dc000015 	stw	r16,0(sp)
  803fb8:	dfc00215 	stw	ra,8(sp)
  803fbc:	04400044 	movi	r17,1
  803fc0:	01400104 	movi	r5,4
  803fc4:	000d883a 	mov	r6,zero
  803fc8:	2021883a 	mov	r16,r4
  803fcc:	2200bb04 	addi	r8,r4,748
  803fd0:	200f883a 	mov	r7,r4
  803fd4:	10000526 	beq	r2,zero,803fec <__sinit+0x44>
  803fd8:	dfc00217 	ldw	ra,8(sp)
  803fdc:	dc400117 	ldw	r17,4(sp)
  803fe0:	dc000017 	ldw	r16,0(sp)
  803fe4:	dec00304 	addi	sp,sp,12
  803fe8:	f800283a 	ret
  803fec:	21000117 	ldw	r4,4(r4)
  803ff0:	00802034 	movhi	r2,128
  803ff4:	10902304 	addi	r2,r2,16524
  803ff8:	00c000c4 	movi	r3,3
  803ffc:	80800f15 	stw	r2,60(r16)
  804000:	80c0b915 	stw	r3,740(r16)
  804004:	8200ba15 	stw	r8,744(r16)
  804008:	84400e15 	stw	r17,56(r16)
  80400c:	8000b815 	stw	zero,736(r16)
  804010:	0803f400 	call	803f40 <std>
  804014:	81000217 	ldw	r4,8(r16)
  804018:	880d883a 	mov	r6,r17
  80401c:	800f883a 	mov	r7,r16
  804020:	01400284 	movi	r5,10
  804024:	0803f400 	call	803f40 <std>
  804028:	81000317 	ldw	r4,12(r16)
  80402c:	800f883a 	mov	r7,r16
  804030:	01400484 	movi	r5,18
  804034:	01800084 	movi	r6,2
  804038:	dfc00217 	ldw	ra,8(sp)
  80403c:	dc400117 	ldw	r17,4(sp)
  804040:	dc000017 	ldw	r16,0(sp)
  804044:	dec00304 	addi	sp,sp,12
  804048:	0803f401 	jmpi	803f40 <std>

0080404c <__fp_lock>:
  80404c:	0005883a 	mov	r2,zero
  804050:	f800283a 	ret

00804054 <__fp_unlock>:
  804054:	0005883a 	mov	r2,zero
  804058:	f800283a 	ret

0080405c <__fp_unlock_all>:
  80405c:	00802074 	movhi	r2,129
  804060:	109fa904 	addi	r2,r2,32420
  804064:	11000017 	ldw	r4,0(r2)
  804068:	01402034 	movhi	r5,128
  80406c:	29501504 	addi	r5,r5,16468
  804070:	0804ba41 	jmpi	804ba4 <_fwalk>

00804074 <__fp_lock_all>:
  804074:	00802074 	movhi	r2,129
  804078:	109fa904 	addi	r2,r2,32420
  80407c:	11000017 	ldw	r4,0(r2)
  804080:	01402034 	movhi	r5,128
  804084:	29501304 	addi	r5,r5,16460
  804088:	0804ba41 	jmpi	804ba4 <_fwalk>

0080408c <_cleanup_r>:
  80408c:	01402034 	movhi	r5,128
  804090:	295e0604 	addi	r5,r5,30744
  804094:	0804ba41 	jmpi	804ba4 <_fwalk>

00804098 <_cleanup>:
  804098:	00802074 	movhi	r2,129
  80409c:	109faa04 	addi	r2,r2,32424
  8040a0:	11000017 	ldw	r4,0(r2)
  8040a4:	080408c1 	jmpi	80408c <_cleanup_r>

008040a8 <__sfmoreglue>:
  8040a8:	defffc04 	addi	sp,sp,-16
  8040ac:	dc400115 	stw	r17,4(sp)
  8040b0:	2c401724 	muli	r17,r5,92
  8040b4:	dc800215 	stw	r18,8(sp)
  8040b8:	2825883a 	mov	r18,r5
  8040bc:	89400304 	addi	r5,r17,12
  8040c0:	dc000015 	stw	r16,0(sp)
  8040c4:	dfc00315 	stw	ra,12(sp)
  8040c8:	0804eb40 	call	804eb4 <_malloc_r>
  8040cc:	0021883a 	mov	r16,zero
  8040d0:	880d883a 	mov	r6,r17
  8040d4:	000b883a 	mov	r5,zero
  8040d8:	10000626 	beq	r2,zero,8040f4 <__sfmoreglue+0x4c>
  8040dc:	11000304 	addi	r4,r2,12
  8040e0:	14800115 	stw	r18,4(r2)
  8040e4:	10000015 	stw	zero,0(r2)
  8040e8:	11000215 	stw	r4,8(r2)
  8040ec:	1021883a 	mov	r16,r2
  8040f0:	08058580 	call	805858 <memset>
  8040f4:	8005883a 	mov	r2,r16
  8040f8:	dfc00317 	ldw	ra,12(sp)
  8040fc:	dc800217 	ldw	r18,8(sp)
  804100:	dc400117 	ldw	r17,4(sp)
  804104:	dc000017 	ldw	r16,0(sp)
  804108:	dec00404 	addi	sp,sp,16
  80410c:	f800283a 	ret

00804110 <__sfp>:
  804110:	defffd04 	addi	sp,sp,-12
  804114:	00802074 	movhi	r2,129
  804118:	109faa04 	addi	r2,r2,32424
  80411c:	dc000015 	stw	r16,0(sp)
  804120:	14000017 	ldw	r16,0(r2)
  804124:	dc400115 	stw	r17,4(sp)
  804128:	dfc00215 	stw	ra,8(sp)
  80412c:	80800e17 	ldw	r2,56(r16)
  804130:	2023883a 	mov	r17,r4
  804134:	10002626 	beq	r2,zero,8041d0 <__sfp+0xc0>
  804138:	8400b804 	addi	r16,r16,736
  80413c:	80800117 	ldw	r2,4(r16)
  804140:	81000217 	ldw	r4,8(r16)
  804144:	10ffffc4 	addi	r3,r2,-1
  804148:	18000916 	blt	r3,zero,804170 <__sfp+0x60>
  80414c:	2080030f 	ldh	r2,12(r4)
  804150:	10000b26 	beq	r2,zero,804180 <__sfp+0x70>
  804154:	017fffc4 	movi	r5,-1
  804158:	00000206 	br	804164 <__sfp+0x54>
  80415c:	2080030f 	ldh	r2,12(r4)
  804160:	10000726 	beq	r2,zero,804180 <__sfp+0x70>
  804164:	18ffffc4 	addi	r3,r3,-1
  804168:	21001704 	addi	r4,r4,92
  80416c:	197ffb1e 	bne	r3,r5,80415c <__sfp+0x4c>
  804170:	80800017 	ldw	r2,0(r16)
  804174:	10001926 	beq	r2,zero,8041dc <__sfp+0xcc>
  804178:	1021883a 	mov	r16,r2
  80417c:	003fef06 	br	80413c <__sfp+0x2c>
  804180:	00bfffc4 	movi	r2,-1
  804184:	00c00044 	movi	r3,1
  804188:	2080038d 	sth	r2,14(r4)
  80418c:	20c0030d 	sth	r3,12(r4)
  804190:	20000015 	stw	zero,0(r4)
  804194:	20000215 	stw	zero,8(r4)
  804198:	20000115 	stw	zero,4(r4)
  80419c:	20000415 	stw	zero,16(r4)
  8041a0:	20000515 	stw	zero,20(r4)
  8041a4:	20000615 	stw	zero,24(r4)
  8041a8:	20000c15 	stw	zero,48(r4)
  8041ac:	20000d15 	stw	zero,52(r4)
  8041b0:	20001115 	stw	zero,68(r4)
  8041b4:	20001215 	stw	zero,72(r4)
  8041b8:	2005883a 	mov	r2,r4
  8041bc:	dfc00217 	ldw	ra,8(sp)
  8041c0:	dc400117 	ldw	r17,4(sp)
  8041c4:	dc000017 	ldw	r16,0(sp)
  8041c8:	dec00304 	addi	sp,sp,12
  8041cc:	f800283a 	ret
  8041d0:	8009883a 	mov	r4,r16
  8041d4:	0803fa80 	call	803fa8 <__sinit>
  8041d8:	003fd706 	br	804138 <__sfp+0x28>
  8041dc:	8809883a 	mov	r4,r17
  8041e0:	01400104 	movi	r5,4
  8041e4:	08040a80 	call	8040a8 <__sfmoreglue>
  8041e8:	80800015 	stw	r2,0(r16)
  8041ec:	103fe21e 	bne	r2,zero,804178 <__sfp+0x68>
  8041f0:	00800304 	movi	r2,12
  8041f4:	0009883a 	mov	r4,zero
  8041f8:	88800015 	stw	r2,0(r17)
  8041fc:	003fee06 	br	8041b8 <__sfp+0xa8>

00804200 <_malloc_trim_r>:
  804200:	defffb04 	addi	sp,sp,-20
  804204:	dcc00315 	stw	r19,12(sp)
  804208:	04c02074 	movhi	r19,129
  80420c:	9cda1704 	addi	r19,r19,26716
  804210:	dc800215 	stw	r18,8(sp)
  804214:	dc400115 	stw	r17,4(sp)
  804218:	dc000015 	stw	r16,0(sp)
  80421c:	2823883a 	mov	r17,r5
  804220:	2025883a 	mov	r18,r4
  804224:	dfc00415 	stw	ra,16(sp)
  804228:	080a8e80 	call	80a8e8 <__malloc_lock>
  80422c:	98800217 	ldw	r2,8(r19)
  804230:	9009883a 	mov	r4,r18
  804234:	000b883a 	mov	r5,zero
  804238:	10c00117 	ldw	r3,4(r2)
  80423c:	00bfff04 	movi	r2,-4
  804240:	18a0703a 	and	r16,r3,r2
  804244:	8463c83a 	sub	r17,r16,r17
  804248:	8c43fbc4 	addi	r17,r17,4079
  80424c:	8822d33a 	srli	r17,r17,12
  804250:	0083ffc4 	movi	r2,4095
  804254:	8c7fffc4 	addi	r17,r17,-1
  804258:	8822933a 	slli	r17,r17,12
  80425c:	1440060e 	bge	r2,r17,804278 <_malloc_trim_r+0x78>
  804260:	08071340 	call	807134 <_sbrk_r>
  804264:	98c00217 	ldw	r3,8(r19)
  804268:	9009883a 	mov	r4,r18
  80426c:	044bc83a 	sub	r5,zero,r17
  804270:	80c7883a 	add	r3,r16,r3
  804274:	10c00926 	beq	r2,r3,80429c <_malloc_trim_r+0x9c>
  804278:	080a9f00 	call	80a9f0 <__malloc_unlock>
  80427c:	0005883a 	mov	r2,zero
  804280:	dfc00417 	ldw	ra,16(sp)
  804284:	dcc00317 	ldw	r19,12(sp)
  804288:	dc800217 	ldw	r18,8(sp)
  80428c:	dc400117 	ldw	r17,4(sp)
  804290:	dc000017 	ldw	r16,0(sp)
  804294:	dec00504 	addi	sp,sp,20
  804298:	f800283a 	ret
  80429c:	9009883a 	mov	r4,r18
  8042a0:	08071340 	call	807134 <_sbrk_r>
  8042a4:	844dc83a 	sub	r6,r16,r17
  8042a8:	00ffffc4 	movi	r3,-1
  8042ac:	9009883a 	mov	r4,r18
  8042b0:	000b883a 	mov	r5,zero
  8042b4:	01c020b4 	movhi	r7,130
  8042b8:	39e6c204 	addi	r7,r7,-25848
  8042bc:	31800054 	ori	r6,r6,1
  8042c0:	10c00926 	beq	r2,r3,8042e8 <_malloc_trim_r+0xe8>
  8042c4:	38800017 	ldw	r2,0(r7)
  8042c8:	98c00217 	ldw	r3,8(r19)
  8042cc:	9009883a 	mov	r4,r18
  8042d0:	1445c83a 	sub	r2,r2,r17
  8042d4:	38800015 	stw	r2,0(r7)
  8042d8:	19800115 	stw	r6,4(r3)
  8042dc:	080a9f00 	call	80a9f0 <__malloc_unlock>
  8042e0:	00800044 	movi	r2,1
  8042e4:	003fe606 	br	804280 <_malloc_trim_r+0x80>
  8042e8:	08071340 	call	807134 <_sbrk_r>
  8042ec:	99800217 	ldw	r6,8(r19)
  8042f0:	100f883a 	mov	r7,r2
  8042f4:	9009883a 	mov	r4,r18
  8042f8:	1187c83a 	sub	r3,r2,r6
  8042fc:	008003c4 	movi	r2,15
  804300:	19400054 	ori	r5,r3,1
  804304:	10ffdc0e 	bge	r2,r3,804278 <_malloc_trim_r+0x78>
  804308:	00802074 	movhi	r2,129
  80430c:	109fae04 	addi	r2,r2,32440
  804310:	10c00017 	ldw	r3,0(r2)
  804314:	008020b4 	movhi	r2,130
  804318:	10a6c204 	addi	r2,r2,-25848
  80431c:	31400115 	stw	r5,4(r6)
  804320:	38c7c83a 	sub	r3,r7,r3
  804324:	10c00015 	stw	r3,0(r2)
  804328:	003fd306 	br	804278 <_malloc_trim_r+0x78>

0080432c <_free_r>:
  80432c:	defffd04 	addi	sp,sp,-12
  804330:	dc400115 	stw	r17,4(sp)
  804334:	dc000015 	stw	r16,0(sp)
  804338:	dfc00215 	stw	ra,8(sp)
  80433c:	2821883a 	mov	r16,r5
  804340:	2023883a 	mov	r17,r4
  804344:	28005a26 	beq	r5,zero,8044b0 <_free_r+0x184>
  804348:	080a8e80 	call	80a8e8 <__malloc_lock>
  80434c:	823ffe04 	addi	r8,r16,-8
  804350:	41400117 	ldw	r5,4(r8)
  804354:	00bfff84 	movi	r2,-2
  804358:	02802074 	movhi	r10,129
  80435c:	529a1704 	addi	r10,r10,26716
  804360:	288e703a 	and	r7,r5,r2
  804364:	41cd883a 	add	r6,r8,r7
  804368:	30c00117 	ldw	r3,4(r6)
  80436c:	51000217 	ldw	r4,8(r10)
  804370:	00bfff04 	movi	r2,-4
  804374:	1892703a 	and	r9,r3,r2
  804378:	5017883a 	mov	r11,r10
  80437c:	31006726 	beq	r6,r4,80451c <_free_r+0x1f0>
  804380:	2880004c 	andi	r2,r5,1
  804384:	1005003a 	cmpeq	r2,r2,zero
  804388:	32400115 	stw	r9,4(r6)
  80438c:	10001a1e 	bne	r2,zero,8043f8 <_free_r+0xcc>
  804390:	000b883a 	mov	r5,zero
  804394:	3247883a 	add	r3,r6,r9
  804398:	18800117 	ldw	r2,4(r3)
  80439c:	1080004c 	andi	r2,r2,1
  8043a0:	1000231e 	bne	r2,zero,804430 <_free_r+0x104>
  8043a4:	280ac03a 	cmpne	r5,r5,zero
  8043a8:	3a4f883a 	add	r7,r7,r9
  8043ac:	2800451e 	bne	r5,zero,8044c4 <_free_r+0x198>
  8043b0:	31000217 	ldw	r4,8(r6)
  8043b4:	00802074 	movhi	r2,129
  8043b8:	109a1904 	addi	r2,r2,26724
  8043bc:	20807b26 	beq	r4,r2,8045ac <_free_r+0x280>
  8043c0:	30800317 	ldw	r2,12(r6)
  8043c4:	3a07883a 	add	r3,r7,r8
  8043c8:	19c00015 	stw	r7,0(r3)
  8043cc:	11000215 	stw	r4,8(r2)
  8043d0:	20800315 	stw	r2,12(r4)
  8043d4:	38800054 	ori	r2,r7,1
  8043d8:	40800115 	stw	r2,4(r8)
  8043dc:	28001a26 	beq	r5,zero,804448 <_free_r+0x11c>
  8043e0:	8809883a 	mov	r4,r17
  8043e4:	dfc00217 	ldw	ra,8(sp)
  8043e8:	dc400117 	ldw	r17,4(sp)
  8043ec:	dc000017 	ldw	r16,0(sp)
  8043f0:	dec00304 	addi	sp,sp,12
  8043f4:	080a9f01 	jmpi	80a9f0 <__malloc_unlock>
  8043f8:	80bffe17 	ldw	r2,-8(r16)
  8043fc:	50c00204 	addi	r3,r10,8
  804400:	4091c83a 	sub	r8,r8,r2
  804404:	41000217 	ldw	r4,8(r8)
  804408:	388f883a 	add	r7,r7,r2
  80440c:	20c06126 	beq	r4,r3,804594 <_free_r+0x268>
  804410:	40800317 	ldw	r2,12(r8)
  804414:	3247883a 	add	r3,r6,r9
  804418:	000b883a 	mov	r5,zero
  80441c:	11000215 	stw	r4,8(r2)
  804420:	20800315 	stw	r2,12(r4)
  804424:	18800117 	ldw	r2,4(r3)
  804428:	1080004c 	andi	r2,r2,1
  80442c:	103fdd26 	beq	r2,zero,8043a4 <_free_r+0x78>
  804430:	38800054 	ori	r2,r7,1
  804434:	3a07883a 	add	r3,r7,r8
  804438:	280ac03a 	cmpne	r5,r5,zero
  80443c:	40800115 	stw	r2,4(r8)
  804440:	19c00015 	stw	r7,0(r3)
  804444:	283fe61e 	bne	r5,zero,8043e0 <_free_r+0xb4>
  804448:	00807fc4 	movi	r2,511
  80444c:	11c01f2e 	bgeu	r2,r7,8044cc <_free_r+0x1a0>
  804450:	3806d27a 	srli	r3,r7,9
  804454:	1800481e 	bne	r3,zero,804578 <_free_r+0x24c>
  804458:	3804d0fa 	srli	r2,r7,3
  80445c:	100690fa 	slli	r3,r2,3
  804460:	1acd883a 	add	r6,r3,r11
  804464:	31400217 	ldw	r5,8(r6)
  804468:	31405926 	beq	r6,r5,8045d0 <_free_r+0x2a4>
  80446c:	28800117 	ldw	r2,4(r5)
  804470:	00ffff04 	movi	r3,-4
  804474:	10c4703a 	and	r2,r2,r3
  804478:	3880022e 	bgeu	r7,r2,804484 <_free_r+0x158>
  80447c:	29400217 	ldw	r5,8(r5)
  804480:	317ffa1e 	bne	r6,r5,80446c <_free_r+0x140>
  804484:	29800317 	ldw	r6,12(r5)
  804488:	41800315 	stw	r6,12(r8)
  80448c:	41400215 	stw	r5,8(r8)
  804490:	8809883a 	mov	r4,r17
  804494:	2a000315 	stw	r8,12(r5)
  804498:	32000215 	stw	r8,8(r6)
  80449c:	dfc00217 	ldw	ra,8(sp)
  8044a0:	dc400117 	ldw	r17,4(sp)
  8044a4:	dc000017 	ldw	r16,0(sp)
  8044a8:	dec00304 	addi	sp,sp,12
  8044ac:	080a9f01 	jmpi	80a9f0 <__malloc_unlock>
  8044b0:	dfc00217 	ldw	ra,8(sp)
  8044b4:	dc400117 	ldw	r17,4(sp)
  8044b8:	dc000017 	ldw	r16,0(sp)
  8044bc:	dec00304 	addi	sp,sp,12
  8044c0:	f800283a 	ret
  8044c4:	31000217 	ldw	r4,8(r6)
  8044c8:	003fbd06 	br	8043c0 <_free_r+0x94>
  8044cc:	3806d0fa 	srli	r3,r7,3
  8044d0:	00800044 	movi	r2,1
  8044d4:	51400117 	ldw	r5,4(r10)
  8044d8:	180890fa 	slli	r4,r3,3
  8044dc:	1807d0ba 	srai	r3,r3,2
  8044e0:	22c9883a 	add	r4,r4,r11
  8044e4:	21800217 	ldw	r6,8(r4)
  8044e8:	10c4983a 	sll	r2,r2,r3
  8044ec:	41000315 	stw	r4,12(r8)
  8044f0:	41800215 	stw	r6,8(r8)
  8044f4:	288ab03a 	or	r5,r5,r2
  8044f8:	22000215 	stw	r8,8(r4)
  8044fc:	8809883a 	mov	r4,r17
  804500:	51400115 	stw	r5,4(r10)
  804504:	32000315 	stw	r8,12(r6)
  804508:	dfc00217 	ldw	ra,8(sp)
  80450c:	dc400117 	ldw	r17,4(sp)
  804510:	dc000017 	ldw	r16,0(sp)
  804514:	dec00304 	addi	sp,sp,12
  804518:	080a9f01 	jmpi	80a9f0 <__malloc_unlock>
  80451c:	2880004c 	andi	r2,r5,1
  804520:	3a4d883a 	add	r6,r7,r9
  804524:	1000071e 	bne	r2,zero,804544 <_free_r+0x218>
  804528:	80bffe17 	ldw	r2,-8(r16)
  80452c:	4091c83a 	sub	r8,r8,r2
  804530:	41000317 	ldw	r4,12(r8)
  804534:	40c00217 	ldw	r3,8(r8)
  804538:	308d883a 	add	r6,r6,r2
  80453c:	20c00215 	stw	r3,8(r4)
  804540:	19000315 	stw	r4,12(r3)
  804544:	00802074 	movhi	r2,129
  804548:	109fad04 	addi	r2,r2,32436
  80454c:	11000017 	ldw	r4,0(r2)
  804550:	30c00054 	ori	r3,r6,1
  804554:	52000215 	stw	r8,8(r10)
  804558:	40c00115 	stw	r3,4(r8)
  80455c:	313fa036 	bltu	r6,r4,8043e0 <_free_r+0xb4>
  804560:	008020b4 	movhi	r2,130
  804564:	10a69f04 	addi	r2,r2,-25988
  804568:	11400017 	ldw	r5,0(r2)
  80456c:	8809883a 	mov	r4,r17
  804570:	08042000 	call	804200 <_malloc_trim_r>
  804574:	003f9a06 	br	8043e0 <_free_r+0xb4>
  804578:	00800104 	movi	r2,4
  80457c:	10c0072e 	bgeu	r2,r3,80459c <_free_r+0x270>
  804580:	00800504 	movi	r2,20
  804584:	10c01936 	bltu	r2,r3,8045ec <_free_r+0x2c0>
  804588:	188016c4 	addi	r2,r3,91
  80458c:	100690fa 	slli	r3,r2,3
  804590:	003fb306 	br	804460 <_free_r+0x134>
  804594:	01400044 	movi	r5,1
  804598:	003f7e06 	br	804394 <_free_r+0x68>
  80459c:	3804d1ba 	srli	r2,r7,6
  8045a0:	10800e04 	addi	r2,r2,56
  8045a4:	100690fa 	slli	r3,r2,3
  8045a8:	003fad06 	br	804460 <_free_r+0x134>
  8045ac:	22000315 	stw	r8,12(r4)
  8045b0:	22000215 	stw	r8,8(r4)
  8045b4:	3a05883a 	add	r2,r7,r8
  8045b8:	38c00054 	ori	r3,r7,1
  8045bc:	11c00015 	stw	r7,0(r2)
  8045c0:	41000215 	stw	r4,8(r8)
  8045c4:	40c00115 	stw	r3,4(r8)
  8045c8:	41000315 	stw	r4,12(r8)
  8045cc:	003f8406 	br	8043e0 <_free_r+0xb4>
  8045d0:	1005d0ba 	srai	r2,r2,2
  8045d4:	00c00044 	movi	r3,1
  8045d8:	51000117 	ldw	r4,4(r10)
  8045dc:	1886983a 	sll	r3,r3,r2
  8045e0:	20c8b03a 	or	r4,r4,r3
  8045e4:	51000115 	stw	r4,4(r10)
  8045e8:	003fa706 	br	804488 <_free_r+0x15c>
  8045ec:	00801504 	movi	r2,84
  8045f0:	10c00436 	bltu	r2,r3,804604 <_free_r+0x2d8>
  8045f4:	3804d33a 	srli	r2,r7,12
  8045f8:	10801b84 	addi	r2,r2,110
  8045fc:	100690fa 	slli	r3,r2,3
  804600:	003f9706 	br	804460 <_free_r+0x134>
  804604:	00805504 	movi	r2,340
  804608:	10c00436 	bltu	r2,r3,80461c <_free_r+0x2f0>
  80460c:	3804d3fa 	srli	r2,r7,15
  804610:	10801dc4 	addi	r2,r2,119
  804614:	100690fa 	slli	r3,r2,3
  804618:	003f9106 	br	804460 <_free_r+0x134>
  80461c:	00815504 	movi	r2,1364
  804620:	10c0032e 	bgeu	r2,r3,804630 <_free_r+0x304>
  804624:	00801f84 	movi	r2,126
  804628:	00c0fc04 	movi	r3,1008
  80462c:	003f8c06 	br	804460 <_free_r+0x134>
  804630:	3804d4ba 	srli	r2,r7,18
  804634:	10801f04 	addi	r2,r2,124
  804638:	100690fa 	slli	r3,r2,3
  80463c:	003f8806 	br	804460 <_free_r+0x134>

00804640 <__sfvwrite_r>:
  804640:	30800217 	ldw	r2,8(r6)
  804644:	defff504 	addi	sp,sp,-44
  804648:	df000915 	stw	fp,36(sp)
  80464c:	dd800715 	stw	r22,28(sp)
  804650:	dc800315 	stw	r18,12(sp)
  804654:	dfc00a15 	stw	ra,40(sp)
  804658:	ddc00815 	stw	r23,32(sp)
  80465c:	dd400615 	stw	r21,24(sp)
  804660:	dd000515 	stw	r20,20(sp)
  804664:	dcc00415 	stw	r19,16(sp)
  804668:	dc400215 	stw	r17,8(sp)
  80466c:	dc000115 	stw	r16,4(sp)
  804670:	302d883a 	mov	r22,r6
  804674:	2039883a 	mov	fp,r4
  804678:	2825883a 	mov	r18,r5
  80467c:	10001c26 	beq	r2,zero,8046f0 <__sfvwrite_r+0xb0>
  804680:	29c0030b 	ldhu	r7,12(r5)
  804684:	3880020c 	andi	r2,r7,8
  804688:	10002726 	beq	r2,zero,804728 <__sfvwrite_r+0xe8>
  80468c:	28800417 	ldw	r2,16(r5)
  804690:	10002526 	beq	r2,zero,804728 <__sfvwrite_r+0xe8>
  804694:	3880008c 	andi	r2,r7,2
  804698:	b5400017 	ldw	r21,0(r22)
  80469c:	10002826 	beq	r2,zero,804740 <__sfvwrite_r+0x100>
  8046a0:	0021883a 	mov	r16,zero
  8046a4:	0023883a 	mov	r17,zero
  8046a8:	880d883a 	mov	r6,r17
  8046ac:	e009883a 	mov	r4,fp
  8046b0:	00810004 	movi	r2,1024
  8046b4:	80006e26 	beq	r16,zero,804870 <__sfvwrite_r+0x230>
  8046b8:	800f883a 	mov	r7,r16
  8046bc:	91400717 	ldw	r5,28(r18)
  8046c0:	1400012e 	bgeu	r2,r16,8046c8 <__sfvwrite_r+0x88>
  8046c4:	100f883a 	mov	r7,r2
  8046c8:	90c00917 	ldw	r3,36(r18)
  8046cc:	183ee83a 	callr	r3
  8046d0:	1007883a 	mov	r3,r2
  8046d4:	80a1c83a 	sub	r16,r16,r2
  8046d8:	88a3883a 	add	r17,r17,r2
  8046dc:	00806d0e 	bge	zero,r2,804894 <__sfvwrite_r+0x254>
  8046e0:	b0800217 	ldw	r2,8(r22)
  8046e4:	10c5c83a 	sub	r2,r2,r3
  8046e8:	b0800215 	stw	r2,8(r22)
  8046ec:	103fee1e 	bne	r2,zero,8046a8 <__sfvwrite_r+0x68>
  8046f0:	0009883a 	mov	r4,zero
  8046f4:	2005883a 	mov	r2,r4
  8046f8:	dfc00a17 	ldw	ra,40(sp)
  8046fc:	df000917 	ldw	fp,36(sp)
  804700:	ddc00817 	ldw	r23,32(sp)
  804704:	dd800717 	ldw	r22,28(sp)
  804708:	dd400617 	ldw	r21,24(sp)
  80470c:	dd000517 	ldw	r20,20(sp)
  804710:	dcc00417 	ldw	r19,16(sp)
  804714:	dc800317 	ldw	r18,12(sp)
  804718:	dc400217 	ldw	r17,8(sp)
  80471c:	dc000117 	ldw	r16,4(sp)
  804720:	dec00b04 	addi	sp,sp,44
  804724:	f800283a 	ret
  804728:	08024080 	call	802408 <__swsetup_r>
  80472c:	1000e41e 	bne	r2,zero,804ac0 <__sfvwrite_r+0x480>
  804730:	91c0030b 	ldhu	r7,12(r18)
  804734:	b5400017 	ldw	r21,0(r22)
  804738:	3880008c 	andi	r2,r7,2
  80473c:	103fd81e 	bne	r2,zero,8046a0 <__sfvwrite_r+0x60>
  804740:	3880004c 	andi	r2,r7,1
  804744:	1005003a 	cmpeq	r2,r2,zero
  804748:	10005726 	beq	r2,zero,8048a8 <__sfvwrite_r+0x268>
  80474c:	0029883a 	mov	r20,zero
  804750:	002f883a 	mov	r23,zero
  804754:	a0004226 	beq	r20,zero,804860 <__sfvwrite_r+0x220>
  804758:	3880800c 	andi	r2,r7,512
  80475c:	94000217 	ldw	r16,8(r18)
  804760:	10008b26 	beq	r2,zero,804990 <__sfvwrite_r+0x350>
  804764:	800d883a 	mov	r6,r16
  804768:	a400a536 	bltu	r20,r16,804a00 <__sfvwrite_r+0x3c0>
  80476c:	3881200c 	andi	r2,r7,1152
  804770:	10002726 	beq	r2,zero,804810 <__sfvwrite_r+0x1d0>
  804774:	90800517 	ldw	r2,20(r18)
  804778:	92000417 	ldw	r8,16(r18)
  80477c:	91400017 	ldw	r5,0(r18)
  804780:	1087883a 	add	r3,r2,r2
  804784:	1887883a 	add	r3,r3,r2
  804788:	1808d7fa 	srli	r4,r3,31
  80478c:	2a21c83a 	sub	r16,r5,r8
  804790:	80800044 	addi	r2,r16,1
  804794:	20c9883a 	add	r4,r4,r3
  804798:	2027d07a 	srai	r19,r4,1
  80479c:	a085883a 	add	r2,r20,r2
  8047a0:	980d883a 	mov	r6,r19
  8047a4:	9880022e 	bgeu	r19,r2,8047b0 <__sfvwrite_r+0x170>
  8047a8:	1027883a 	mov	r19,r2
  8047ac:	100d883a 	mov	r6,r2
  8047b0:	3881000c 	andi	r2,r7,1024
  8047b4:	1000b826 	beq	r2,zero,804a98 <__sfvwrite_r+0x458>
  8047b8:	300b883a 	mov	r5,r6
  8047bc:	e009883a 	mov	r4,fp
  8047c0:	0804eb40 	call	804eb4 <_malloc_r>
  8047c4:	10003126 	beq	r2,zero,80488c <__sfvwrite_r+0x24c>
  8047c8:	91400417 	ldw	r5,16(r18)
  8047cc:	1009883a 	mov	r4,r2
  8047d0:	800d883a 	mov	r6,r16
  8047d4:	1023883a 	mov	r17,r2
  8047d8:	08056d80 	call	8056d8 <memcpy>
  8047dc:	90c0030b 	ldhu	r3,12(r18)
  8047e0:	00beffc4 	movi	r2,-1025
  8047e4:	1886703a 	and	r3,r3,r2
  8047e8:	18c02014 	ori	r3,r3,128
  8047ec:	90c0030d 	sth	r3,12(r18)
  8047f0:	9c07c83a 	sub	r3,r19,r16
  8047f4:	8c05883a 	add	r2,r17,r16
  8047f8:	a00d883a 	mov	r6,r20
  8047fc:	a021883a 	mov	r16,r20
  804800:	90800015 	stw	r2,0(r18)
  804804:	90c00215 	stw	r3,8(r18)
  804808:	94400415 	stw	r17,16(r18)
  80480c:	94c00515 	stw	r19,20(r18)
  804810:	91000017 	ldw	r4,0(r18)
  804814:	b80b883a 	mov	r5,r23
  804818:	a023883a 	mov	r17,r20
  80481c:	08057780 	call	805778 <memmove>
  804820:	90c00217 	ldw	r3,8(r18)
  804824:	90800017 	ldw	r2,0(r18)
  804828:	a027883a 	mov	r19,r20
  80482c:	1c07c83a 	sub	r3,r3,r16
  804830:	1405883a 	add	r2,r2,r16
  804834:	90c00215 	stw	r3,8(r18)
  804838:	a021883a 	mov	r16,r20
  80483c:	90800015 	stw	r2,0(r18)
  804840:	b0800217 	ldw	r2,8(r22)
  804844:	1405c83a 	sub	r2,r2,r16
  804848:	b0800215 	stw	r2,8(r22)
  80484c:	103fa826 	beq	r2,zero,8046f0 <__sfvwrite_r+0xb0>
  804850:	a469c83a 	sub	r20,r20,r17
  804854:	91c0030b 	ldhu	r7,12(r18)
  804858:	bcef883a 	add	r23,r23,r19
  80485c:	a03fbe1e 	bne	r20,zero,804758 <__sfvwrite_r+0x118>
  804860:	adc00017 	ldw	r23,0(r21)
  804864:	ad000117 	ldw	r20,4(r21)
  804868:	ad400204 	addi	r21,r21,8
  80486c:	003fb906 	br	804754 <__sfvwrite_r+0x114>
  804870:	ac400017 	ldw	r17,0(r21)
  804874:	ac000117 	ldw	r16,4(r21)
  804878:	ad400204 	addi	r21,r21,8
  80487c:	003f8a06 	br	8046a8 <__sfvwrite_r+0x68>
  804880:	91400417 	ldw	r5,16(r18)
  804884:	e009883a 	mov	r4,fp
  804888:	080432c0 	call	80432c <_free_r>
  80488c:	00800304 	movi	r2,12
  804890:	e0800015 	stw	r2,0(fp)
  804894:	9080030b 	ldhu	r2,12(r18)
  804898:	013fffc4 	movi	r4,-1
  80489c:	10801014 	ori	r2,r2,64
  8048a0:	9080030d 	sth	r2,12(r18)
  8048a4:	003f9306 	br	8046f4 <__sfvwrite_r+0xb4>
  8048a8:	0027883a 	mov	r19,zero
  8048ac:	002f883a 	mov	r23,zero
  8048b0:	d8000015 	stw	zero,0(sp)
  8048b4:	0029883a 	mov	r20,zero
  8048b8:	98001e26 	beq	r19,zero,804934 <__sfvwrite_r+0x2f4>
  8048bc:	d8c00017 	ldw	r3,0(sp)
  8048c0:	1804c03a 	cmpne	r2,r3,zero
  8048c4:	10005e26 	beq	r2,zero,804a40 <__sfvwrite_r+0x400>
  8048c8:	9821883a 	mov	r16,r19
  8048cc:	a4c0012e 	bgeu	r20,r19,8048d4 <__sfvwrite_r+0x294>
  8048d0:	a021883a 	mov	r16,r20
  8048d4:	91000017 	ldw	r4,0(r18)
  8048d8:	90800417 	ldw	r2,16(r18)
  8048dc:	91800217 	ldw	r6,8(r18)
  8048e0:	91c00517 	ldw	r7,20(r18)
  8048e4:	1100022e 	bgeu	r2,r4,8048f0 <__sfvwrite_r+0x2b0>
  8048e8:	31e3883a 	add	r17,r6,r7
  8048ec:	8c001616 	blt	r17,r16,804948 <__sfvwrite_r+0x308>
  8048f0:	81c03816 	blt	r16,r7,8049d4 <__sfvwrite_r+0x394>
  8048f4:	90c00917 	ldw	r3,36(r18)
  8048f8:	91400717 	ldw	r5,28(r18)
  8048fc:	e009883a 	mov	r4,fp
  804900:	b80d883a 	mov	r6,r23
  804904:	183ee83a 	callr	r3
  804908:	1023883a 	mov	r17,r2
  80490c:	00bfe10e 	bge	zero,r2,804894 <__sfvwrite_r+0x254>
  804910:	a469c83a 	sub	r20,r20,r17
  804914:	a0001826 	beq	r20,zero,804978 <__sfvwrite_r+0x338>
  804918:	b0800217 	ldw	r2,8(r22)
  80491c:	1445c83a 	sub	r2,r2,r17
  804920:	b0800215 	stw	r2,8(r22)
  804924:	103f7226 	beq	r2,zero,8046f0 <__sfvwrite_r+0xb0>
  804928:	9c67c83a 	sub	r19,r19,r17
  80492c:	bc6f883a 	add	r23,r23,r17
  804930:	983fe21e 	bne	r19,zero,8048bc <__sfvwrite_r+0x27c>
  804934:	adc00017 	ldw	r23,0(r21)
  804938:	acc00117 	ldw	r19,4(r21)
  80493c:	ad400204 	addi	r21,r21,8
  804940:	d8000015 	stw	zero,0(sp)
  804944:	003fdc06 	br	8048b8 <__sfvwrite_r+0x278>
  804948:	b80b883a 	mov	r5,r23
  80494c:	880d883a 	mov	r6,r17
  804950:	08057780 	call	805778 <memmove>
  804954:	90c00017 	ldw	r3,0(r18)
  804958:	e009883a 	mov	r4,fp
  80495c:	900b883a 	mov	r5,r18
  804960:	1c47883a 	add	r3,r3,r17
  804964:	90c00015 	stw	r3,0(r18)
  804968:	0803d100 	call	803d10 <_fflush_r>
  80496c:	103fc91e 	bne	r2,zero,804894 <__sfvwrite_r+0x254>
  804970:	a469c83a 	sub	r20,r20,r17
  804974:	a03fe81e 	bne	r20,zero,804918 <__sfvwrite_r+0x2d8>
  804978:	e009883a 	mov	r4,fp
  80497c:	900b883a 	mov	r5,r18
  804980:	0803d100 	call	803d10 <_fflush_r>
  804984:	103fc31e 	bne	r2,zero,804894 <__sfvwrite_r+0x254>
  804988:	d8000015 	stw	zero,0(sp)
  80498c:	003fe206 	br	804918 <__sfvwrite_r+0x2d8>
  804990:	91000017 	ldw	r4,0(r18)
  804994:	90800417 	ldw	r2,16(r18)
  804998:	1100022e 	bgeu	r2,r4,8049a4 <__sfvwrite_r+0x364>
  80499c:	8023883a 	mov	r17,r16
  8049a0:	85003136 	bltu	r16,r20,804a68 <__sfvwrite_r+0x428>
  8049a4:	91c00517 	ldw	r7,20(r18)
  8049a8:	a1c01836 	bltu	r20,r7,804a0c <__sfvwrite_r+0x3cc>
  8049ac:	90c00917 	ldw	r3,36(r18)
  8049b0:	91400717 	ldw	r5,28(r18)
  8049b4:	e009883a 	mov	r4,fp
  8049b8:	b80d883a 	mov	r6,r23
  8049bc:	183ee83a 	callr	r3
  8049c0:	1021883a 	mov	r16,r2
  8049c4:	00bfb30e 	bge	zero,r2,804894 <__sfvwrite_r+0x254>
  8049c8:	1023883a 	mov	r17,r2
  8049cc:	1027883a 	mov	r19,r2
  8049d0:	003f9b06 	br	804840 <__sfvwrite_r+0x200>
  8049d4:	b80b883a 	mov	r5,r23
  8049d8:	800d883a 	mov	r6,r16
  8049dc:	08057780 	call	805778 <memmove>
  8049e0:	90c00217 	ldw	r3,8(r18)
  8049e4:	90800017 	ldw	r2,0(r18)
  8049e8:	8023883a 	mov	r17,r16
  8049ec:	1c07c83a 	sub	r3,r3,r16
  8049f0:	1405883a 	add	r2,r2,r16
  8049f4:	90c00215 	stw	r3,8(r18)
  8049f8:	90800015 	stw	r2,0(r18)
  8049fc:	003fc406 	br	804910 <__sfvwrite_r+0x2d0>
  804a00:	a00d883a 	mov	r6,r20
  804a04:	a021883a 	mov	r16,r20
  804a08:	003f8106 	br	804810 <__sfvwrite_r+0x1d0>
  804a0c:	b80b883a 	mov	r5,r23
  804a10:	a00d883a 	mov	r6,r20
  804a14:	08057780 	call	805778 <memmove>
  804a18:	90c00217 	ldw	r3,8(r18)
  804a1c:	90800017 	ldw	r2,0(r18)
  804a20:	a021883a 	mov	r16,r20
  804a24:	1d07c83a 	sub	r3,r3,r20
  804a28:	1505883a 	add	r2,r2,r20
  804a2c:	a023883a 	mov	r17,r20
  804a30:	a027883a 	mov	r19,r20
  804a34:	90c00215 	stw	r3,8(r18)
  804a38:	90800015 	stw	r2,0(r18)
  804a3c:	003f8006 	br	804840 <__sfvwrite_r+0x200>
  804a40:	b809883a 	mov	r4,r23
  804a44:	01400284 	movi	r5,10
  804a48:	980d883a 	mov	r6,r19
  804a4c:	08055f40 	call	8055f4 <memchr>
  804a50:	10001726 	beq	r2,zero,804ab0 <__sfvwrite_r+0x470>
  804a54:	15c5c83a 	sub	r2,r2,r23
  804a58:	15000044 	addi	r20,r2,1
  804a5c:	00800044 	movi	r2,1
  804a60:	d8800015 	stw	r2,0(sp)
  804a64:	003f9806 	br	8048c8 <__sfvwrite_r+0x288>
  804a68:	b80b883a 	mov	r5,r23
  804a6c:	800d883a 	mov	r6,r16
  804a70:	08057780 	call	805778 <memmove>
  804a74:	90c00017 	ldw	r3,0(r18)
  804a78:	e009883a 	mov	r4,fp
  804a7c:	900b883a 	mov	r5,r18
  804a80:	1c07883a 	add	r3,r3,r16
  804a84:	90c00015 	stw	r3,0(r18)
  804a88:	8027883a 	mov	r19,r16
  804a8c:	0803d100 	call	803d10 <_fflush_r>
  804a90:	103f6b26 	beq	r2,zero,804840 <__sfvwrite_r+0x200>
  804a94:	003f7f06 	br	804894 <__sfvwrite_r+0x254>
  804a98:	400b883a 	mov	r5,r8
  804a9c:	e009883a 	mov	r4,fp
  804aa0:	0806ad00 	call	806ad0 <_realloc_r>
  804aa4:	103f7626 	beq	r2,zero,804880 <__sfvwrite_r+0x240>
  804aa8:	1023883a 	mov	r17,r2
  804aac:	003f5006 	br	8047f0 <__sfvwrite_r+0x1b0>
  804ab0:	00c00044 	movi	r3,1
  804ab4:	9d000044 	addi	r20,r19,1
  804ab8:	d8c00015 	stw	r3,0(sp)
  804abc:	003f8206 	br	8048c8 <__sfvwrite_r+0x288>
  804ac0:	9080030b 	ldhu	r2,12(r18)
  804ac4:	00c00244 	movi	r3,9
  804ac8:	013fffc4 	movi	r4,-1
  804acc:	10801014 	ori	r2,r2,64
  804ad0:	9080030d 	sth	r2,12(r18)
  804ad4:	e0c00015 	stw	r3,0(fp)
  804ad8:	003f0606 	br	8046f4 <__sfvwrite_r+0xb4>

00804adc <_fwalk_reent>:
  804adc:	defff704 	addi	sp,sp,-36
  804ae0:	dcc00315 	stw	r19,12(sp)
  804ae4:	24c0b804 	addi	r19,r4,736
  804ae8:	dd800615 	stw	r22,24(sp)
  804aec:	dd400515 	stw	r21,20(sp)
  804af0:	dfc00815 	stw	ra,32(sp)
  804af4:	ddc00715 	stw	r23,28(sp)
  804af8:	dd000415 	stw	r20,16(sp)
  804afc:	dc800215 	stw	r18,8(sp)
  804b00:	dc400115 	stw	r17,4(sp)
  804b04:	dc000015 	stw	r16,0(sp)
  804b08:	202b883a 	mov	r21,r4
  804b0c:	282d883a 	mov	r22,r5
  804b10:	0803f980 	call	803f98 <__sfp_lock_acquire>
  804b14:	98002126 	beq	r19,zero,804b9c <_fwalk_reent+0xc0>
  804b18:	002f883a 	mov	r23,zero
  804b1c:	9c800117 	ldw	r18,4(r19)
  804b20:	9c000217 	ldw	r16,8(r19)
  804b24:	90bfffc4 	addi	r2,r18,-1
  804b28:	10000d16 	blt	r2,zero,804b60 <_fwalk_reent+0x84>
  804b2c:	0023883a 	mov	r17,zero
  804b30:	053fffc4 	movi	r20,-1
  804b34:	8080030f 	ldh	r2,12(r16)
  804b38:	8c400044 	addi	r17,r17,1
  804b3c:	10000626 	beq	r2,zero,804b58 <_fwalk_reent+0x7c>
  804b40:	8080038f 	ldh	r2,14(r16)
  804b44:	800b883a 	mov	r5,r16
  804b48:	a809883a 	mov	r4,r21
  804b4c:	15000226 	beq	r2,r20,804b58 <_fwalk_reent+0x7c>
  804b50:	b03ee83a 	callr	r22
  804b54:	b8aeb03a 	or	r23,r23,r2
  804b58:	84001704 	addi	r16,r16,92
  804b5c:	947ff51e 	bne	r18,r17,804b34 <_fwalk_reent+0x58>
  804b60:	9cc00017 	ldw	r19,0(r19)
  804b64:	983fed1e 	bne	r19,zero,804b1c <_fwalk_reent+0x40>
  804b68:	0803f9c0 	call	803f9c <__sfp_lock_release>
  804b6c:	b805883a 	mov	r2,r23
  804b70:	dfc00817 	ldw	ra,32(sp)
  804b74:	ddc00717 	ldw	r23,28(sp)
  804b78:	dd800617 	ldw	r22,24(sp)
  804b7c:	dd400517 	ldw	r21,20(sp)
  804b80:	dd000417 	ldw	r20,16(sp)
  804b84:	dcc00317 	ldw	r19,12(sp)
  804b88:	dc800217 	ldw	r18,8(sp)
  804b8c:	dc400117 	ldw	r17,4(sp)
  804b90:	dc000017 	ldw	r16,0(sp)
  804b94:	dec00904 	addi	sp,sp,36
  804b98:	f800283a 	ret
  804b9c:	002f883a 	mov	r23,zero
  804ba0:	003ff106 	br	804b68 <_fwalk_reent+0x8c>

00804ba4 <_fwalk>:
  804ba4:	defff804 	addi	sp,sp,-32
  804ba8:	dcc00315 	stw	r19,12(sp)
  804bac:	24c0b804 	addi	r19,r4,736
  804bb0:	dd400515 	stw	r21,20(sp)
  804bb4:	dfc00715 	stw	ra,28(sp)
  804bb8:	dd800615 	stw	r22,24(sp)
  804bbc:	dd000415 	stw	r20,16(sp)
  804bc0:	dc800215 	stw	r18,8(sp)
  804bc4:	dc400115 	stw	r17,4(sp)
  804bc8:	dc000015 	stw	r16,0(sp)
  804bcc:	282b883a 	mov	r21,r5
  804bd0:	0803f980 	call	803f98 <__sfp_lock_acquire>
  804bd4:	98001f26 	beq	r19,zero,804c54 <_fwalk+0xb0>
  804bd8:	002d883a 	mov	r22,zero
  804bdc:	9c800117 	ldw	r18,4(r19)
  804be0:	9c000217 	ldw	r16,8(r19)
  804be4:	90bfffc4 	addi	r2,r18,-1
  804be8:	10000c16 	blt	r2,zero,804c1c <_fwalk+0x78>
  804bec:	0023883a 	mov	r17,zero
  804bf0:	053fffc4 	movi	r20,-1
  804bf4:	8080030f 	ldh	r2,12(r16)
  804bf8:	8c400044 	addi	r17,r17,1
  804bfc:	10000526 	beq	r2,zero,804c14 <_fwalk+0x70>
  804c00:	8080038f 	ldh	r2,14(r16)
  804c04:	8009883a 	mov	r4,r16
  804c08:	15000226 	beq	r2,r20,804c14 <_fwalk+0x70>
  804c0c:	a83ee83a 	callr	r21
  804c10:	b0acb03a 	or	r22,r22,r2
  804c14:	84001704 	addi	r16,r16,92
  804c18:	947ff61e 	bne	r18,r17,804bf4 <_fwalk+0x50>
  804c1c:	9cc00017 	ldw	r19,0(r19)
  804c20:	983fee1e 	bne	r19,zero,804bdc <_fwalk+0x38>
  804c24:	0803f9c0 	call	803f9c <__sfp_lock_release>
  804c28:	b005883a 	mov	r2,r22
  804c2c:	dfc00717 	ldw	ra,28(sp)
  804c30:	dd800617 	ldw	r22,24(sp)
  804c34:	dd400517 	ldw	r21,20(sp)
  804c38:	dd000417 	ldw	r20,16(sp)
  804c3c:	dcc00317 	ldw	r19,12(sp)
  804c40:	dc800217 	ldw	r18,8(sp)
  804c44:	dc400117 	ldw	r17,4(sp)
  804c48:	dc000017 	ldw	r16,0(sp)
  804c4c:	dec00804 	addi	sp,sp,32
  804c50:	f800283a 	ret
  804c54:	002d883a 	mov	r22,zero
  804c58:	003ff206 	br	804c24 <_fwalk+0x80>

00804c5c <__locale_charset>:
  804c5c:	d0a00317 	ldw	r2,-32756(gp)
  804c60:	f800283a 	ret

00804c64 <_localeconv_r>:
  804c64:	00802074 	movhi	r2,129
  804c68:	10981e04 	addi	r2,r2,24696
  804c6c:	f800283a 	ret

00804c70 <localeconv>:
  804c70:	00802074 	movhi	r2,129
  804c74:	109fa904 	addi	r2,r2,32420
  804c78:	11000017 	ldw	r4,0(r2)
  804c7c:	0804c641 	jmpi	804c64 <_localeconv_r>

00804c80 <_setlocale_r>:
  804c80:	defffc04 	addi	sp,sp,-16
  804c84:	00c02074 	movhi	r3,129
  804c88:	18d81904 	addi	r3,r3,24676
  804c8c:	dc800215 	stw	r18,8(sp)
  804c90:	dc400115 	stw	r17,4(sp)
  804c94:	dc000015 	stw	r16,0(sp)
  804c98:	2023883a 	mov	r17,r4
  804c9c:	2825883a 	mov	r18,r5
  804ca0:	dfc00315 	stw	ra,12(sp)
  804ca4:	3021883a 	mov	r16,r6
  804ca8:	3009883a 	mov	r4,r6
  804cac:	180b883a 	mov	r5,r3
  804cb0:	30000926 	beq	r6,zero,804cd8 <_setlocale_r+0x58>
  804cb4:	08072f00 	call	8072f0 <strcmp>
  804cb8:	8009883a 	mov	r4,r16
  804cbc:	01402074 	movhi	r5,129
  804cc0:	29580404 	addi	r5,r5,24592
  804cc4:	10000b1e 	bne	r2,zero,804cf4 <_setlocale_r+0x74>
  804cc8:	8c000d15 	stw	r16,52(r17)
  804ccc:	8c800c15 	stw	r18,48(r17)
  804cd0:	00c02074 	movhi	r3,129
  804cd4:	18d81904 	addi	r3,r3,24676
  804cd8:	1805883a 	mov	r2,r3
  804cdc:	dfc00317 	ldw	ra,12(sp)
  804ce0:	dc800217 	ldw	r18,8(sp)
  804ce4:	dc400117 	ldw	r17,4(sp)
  804ce8:	dc000017 	ldw	r16,0(sp)
  804cec:	dec00404 	addi	sp,sp,16
  804cf0:	f800283a 	ret
  804cf4:	08072f00 	call	8072f0 <strcmp>
  804cf8:	0007883a 	mov	r3,zero
  804cfc:	103ff226 	beq	r2,zero,804cc8 <_setlocale_r+0x48>
  804d00:	003ff506 	br	804cd8 <_setlocale_r+0x58>

00804d04 <setlocale>:
  804d04:	01802074 	movhi	r6,129
  804d08:	319fa904 	addi	r6,r6,32420
  804d0c:	2007883a 	mov	r3,r4
  804d10:	31000017 	ldw	r4,0(r6)
  804d14:	280d883a 	mov	r6,r5
  804d18:	180b883a 	mov	r5,r3
  804d1c:	0804c801 	jmpi	804c80 <_setlocale_r>

00804d20 <__smakebuf_r>:
  804d20:	2880030b 	ldhu	r2,12(r5)
  804d24:	deffed04 	addi	sp,sp,-76
  804d28:	dc401015 	stw	r17,64(sp)
  804d2c:	1080008c 	andi	r2,r2,2
  804d30:	dc000f15 	stw	r16,60(sp)
  804d34:	dfc01215 	stw	ra,72(sp)
  804d38:	dc801115 	stw	r18,68(sp)
  804d3c:	2821883a 	mov	r16,r5
  804d40:	2023883a 	mov	r17,r4
  804d44:	10000b26 	beq	r2,zero,804d74 <__smakebuf_r+0x54>
  804d48:	28c010c4 	addi	r3,r5,67
  804d4c:	00800044 	movi	r2,1
  804d50:	28800515 	stw	r2,20(r5)
  804d54:	28c00415 	stw	r3,16(r5)
  804d58:	28c00015 	stw	r3,0(r5)
  804d5c:	dfc01217 	ldw	ra,72(sp)
  804d60:	dc801117 	ldw	r18,68(sp)
  804d64:	dc401017 	ldw	r17,64(sp)
  804d68:	dc000f17 	ldw	r16,60(sp)
  804d6c:	dec01304 	addi	sp,sp,76
  804d70:	f800283a 	ret
  804d74:	2940038f 	ldh	r5,14(r5)
  804d78:	28002116 	blt	r5,zero,804e00 <__smakebuf_r+0xe0>
  804d7c:	d80d883a 	mov	r6,sp
  804d80:	080782c0 	call	80782c <_fstat_r>
  804d84:	10001e16 	blt	r2,zero,804e00 <__smakebuf_r+0xe0>
  804d88:	d8800117 	ldw	r2,4(sp)
  804d8c:	00e00014 	movui	r3,32768
  804d90:	113c000c 	andi	r4,r2,61440
  804d94:	20c03126 	beq	r4,r3,804e5c <__smakebuf_r+0x13c>
  804d98:	8080030b 	ldhu	r2,12(r16)
  804d9c:	00c80004 	movi	r3,8192
  804da0:	10820014 	ori	r2,r2,2048
  804da4:	8080030d 	sth	r2,12(r16)
  804da8:	20c01e26 	beq	r4,r3,804e24 <__smakebuf_r+0x104>
  804dac:	04810004 	movi	r18,1024
  804db0:	8809883a 	mov	r4,r17
  804db4:	900b883a 	mov	r5,r18
  804db8:	0804eb40 	call	804eb4 <_malloc_r>
  804dbc:	1009883a 	mov	r4,r2
  804dc0:	10003126 	beq	r2,zero,804e88 <__smakebuf_r+0x168>
  804dc4:	80c0030b 	ldhu	r3,12(r16)
  804dc8:	00802034 	movhi	r2,128
  804dcc:	10902304 	addi	r2,r2,16524
  804dd0:	88800f15 	stw	r2,60(r17)
  804dd4:	18c02014 	ori	r3,r3,128
  804dd8:	84800515 	stw	r18,20(r16)
  804ddc:	80c0030d 	sth	r3,12(r16)
  804de0:	81000415 	stw	r4,16(r16)
  804de4:	81000015 	stw	r4,0(r16)
  804de8:	dfc01217 	ldw	ra,72(sp)
  804dec:	dc801117 	ldw	r18,68(sp)
  804df0:	dc401017 	ldw	r17,64(sp)
  804df4:	dc000f17 	ldw	r16,60(sp)
  804df8:	dec01304 	addi	sp,sp,76
  804dfc:	f800283a 	ret
  804e00:	80c0030b 	ldhu	r3,12(r16)
  804e04:	1880200c 	andi	r2,r3,128
  804e08:	10000426 	beq	r2,zero,804e1c <__smakebuf_r+0xfc>
  804e0c:	04801004 	movi	r18,64
  804e10:	18820014 	ori	r2,r3,2048
  804e14:	8080030d 	sth	r2,12(r16)
  804e18:	003fe506 	br	804db0 <__smakebuf_r+0x90>
  804e1c:	04810004 	movi	r18,1024
  804e20:	003ffb06 	br	804e10 <__smakebuf_r+0xf0>
  804e24:	8140038f 	ldh	r5,14(r16)
  804e28:	8809883a 	mov	r4,r17
  804e2c:	08078a00 	call	8078a0 <_isatty_r>
  804e30:	103fde26 	beq	r2,zero,804dac <__smakebuf_r+0x8c>
  804e34:	8080030b 	ldhu	r2,12(r16)
  804e38:	80c010c4 	addi	r3,r16,67
  804e3c:	04810004 	movi	r18,1024
  804e40:	10800054 	ori	r2,r2,1
  804e44:	8080030d 	sth	r2,12(r16)
  804e48:	00800044 	movi	r2,1
  804e4c:	80c00415 	stw	r3,16(r16)
  804e50:	80800515 	stw	r2,20(r16)
  804e54:	80c00015 	stw	r3,0(r16)
  804e58:	003fd506 	br	804db0 <__smakebuf_r+0x90>
  804e5c:	80c00a17 	ldw	r3,40(r16)
  804e60:	00802034 	movhi	r2,128
  804e64:	109c6b04 	addi	r2,r2,29100
  804e68:	18bfcb1e 	bne	r3,r2,804d98 <__smakebuf_r+0x78>
  804e6c:	8080030b 	ldhu	r2,12(r16)
  804e70:	00c10004 	movi	r3,1024
  804e74:	1825883a 	mov	r18,r3
  804e78:	10c4b03a 	or	r2,r2,r3
  804e7c:	8080030d 	sth	r2,12(r16)
  804e80:	80c01315 	stw	r3,76(r16)
  804e84:	003fca06 	br	804db0 <__smakebuf_r+0x90>
  804e88:	8100030b 	ldhu	r4,12(r16)
  804e8c:	2080800c 	andi	r2,r4,512
  804e90:	103fb21e 	bne	r2,zero,804d5c <__smakebuf_r+0x3c>
  804e94:	80c010c4 	addi	r3,r16,67
  804e98:	21000094 	ori	r4,r4,2
  804e9c:	00800044 	movi	r2,1
  804ea0:	80800515 	stw	r2,20(r16)
  804ea4:	8100030d 	sth	r4,12(r16)
  804ea8:	80c00415 	stw	r3,16(r16)
  804eac:	80c00015 	stw	r3,0(r16)
  804eb0:	003faa06 	br	804d5c <__smakebuf_r+0x3c>

00804eb4 <_malloc_r>:
  804eb4:	defff604 	addi	sp,sp,-40
  804eb8:	28c002c4 	addi	r3,r5,11
  804ebc:	00800584 	movi	r2,22
  804ec0:	dc800215 	stw	r18,8(sp)
  804ec4:	dfc00915 	stw	ra,36(sp)
  804ec8:	df000815 	stw	fp,32(sp)
  804ecc:	ddc00715 	stw	r23,28(sp)
  804ed0:	dd800615 	stw	r22,24(sp)
  804ed4:	dd400515 	stw	r21,20(sp)
  804ed8:	dd000415 	stw	r20,16(sp)
  804edc:	dcc00315 	stw	r19,12(sp)
  804ee0:	dc400115 	stw	r17,4(sp)
  804ee4:	dc000015 	stw	r16,0(sp)
  804ee8:	2025883a 	mov	r18,r4
  804eec:	10c01236 	bltu	r2,r3,804f38 <_malloc_r+0x84>
  804ef0:	04400404 	movi	r17,16
  804ef4:	8940142e 	bgeu	r17,r5,804f48 <_malloc_r+0x94>
  804ef8:	00800304 	movi	r2,12
  804efc:	0007883a 	mov	r3,zero
  804f00:	90800015 	stw	r2,0(r18)
  804f04:	1805883a 	mov	r2,r3
  804f08:	dfc00917 	ldw	ra,36(sp)
  804f0c:	df000817 	ldw	fp,32(sp)
  804f10:	ddc00717 	ldw	r23,28(sp)
  804f14:	dd800617 	ldw	r22,24(sp)
  804f18:	dd400517 	ldw	r21,20(sp)
  804f1c:	dd000417 	ldw	r20,16(sp)
  804f20:	dcc00317 	ldw	r19,12(sp)
  804f24:	dc800217 	ldw	r18,8(sp)
  804f28:	dc400117 	ldw	r17,4(sp)
  804f2c:	dc000017 	ldw	r16,0(sp)
  804f30:	dec00a04 	addi	sp,sp,40
  804f34:	f800283a 	ret
  804f38:	00bffe04 	movi	r2,-8
  804f3c:	18a2703a 	and	r17,r3,r2
  804f40:	883fed16 	blt	r17,zero,804ef8 <_malloc_r+0x44>
  804f44:	897fec36 	bltu	r17,r5,804ef8 <_malloc_r+0x44>
  804f48:	9009883a 	mov	r4,r18
  804f4c:	080a8e80 	call	80a8e8 <__malloc_lock>
  804f50:	00807dc4 	movi	r2,503
  804f54:	14402b2e 	bgeu	r2,r17,805004 <_malloc_r+0x150>
  804f58:	8806d27a 	srli	r3,r17,9
  804f5c:	18003f1e 	bne	r3,zero,80505c <_malloc_r+0x1a8>
  804f60:	880cd0fa 	srli	r6,r17,3
  804f64:	300490fa 	slli	r2,r6,3
  804f68:	02c02074 	movhi	r11,129
  804f6c:	5ada1704 	addi	r11,r11,26716
  804f70:	12cb883a 	add	r5,r2,r11
  804f74:	2c000317 	ldw	r16,12(r5)
  804f78:	580f883a 	mov	r7,r11
  804f7c:	2c00041e 	bne	r5,r16,804f90 <_malloc_r+0xdc>
  804f80:	00000a06 	br	804fac <_malloc_r+0xf8>
  804f84:	1800860e 	bge	r3,zero,8051a0 <_malloc_r+0x2ec>
  804f88:	84000317 	ldw	r16,12(r16)
  804f8c:	2c000726 	beq	r5,r16,804fac <_malloc_r+0xf8>
  804f90:	80800117 	ldw	r2,4(r16)
  804f94:	00ffff04 	movi	r3,-4
  804f98:	10c8703a 	and	r4,r2,r3
  804f9c:	2447c83a 	sub	r3,r4,r17
  804fa0:	008003c4 	movi	r2,15
  804fa4:	10fff70e 	bge	r2,r3,804f84 <_malloc_r+0xd0>
  804fa8:	31bfffc4 	addi	r6,r6,-1
  804fac:	32400044 	addi	r9,r6,1
  804fb0:	02802074 	movhi	r10,129
  804fb4:	529a1904 	addi	r10,r10,26724
  804fb8:	54000217 	ldw	r16,8(r10)
  804fbc:	8280a026 	beq	r16,r10,805240 <_malloc_r+0x38c>
  804fc0:	80800117 	ldw	r2,4(r16)
  804fc4:	00ffff04 	movi	r3,-4
  804fc8:	10ca703a 	and	r5,r2,r3
  804fcc:	2c4dc83a 	sub	r6,r5,r17
  804fd0:	008003c4 	movi	r2,15
  804fd4:	11808316 	blt	r2,r6,8051e4 <_malloc_r+0x330>
  804fd8:	52800315 	stw	r10,12(r10)
  804fdc:	52800215 	stw	r10,8(r10)
  804fe0:	30002916 	blt	r6,zero,805088 <_malloc_r+0x1d4>
  804fe4:	8147883a 	add	r3,r16,r5
  804fe8:	18800117 	ldw	r2,4(r3)
  804fec:	9009883a 	mov	r4,r18
  804ff0:	10800054 	ori	r2,r2,1
  804ff4:	18800115 	stw	r2,4(r3)
  804ff8:	080a9f00 	call	80a9f0 <__malloc_unlock>
  804ffc:	80c00204 	addi	r3,r16,8
  805000:	003fc006 	br	804f04 <_malloc_r+0x50>
  805004:	02c02074 	movhi	r11,129
  805008:	5ada1704 	addi	r11,r11,26716
  80500c:	8ac5883a 	add	r2,r17,r11
  805010:	14000317 	ldw	r16,12(r2)
  805014:	580f883a 	mov	r7,r11
  805018:	8806d0fa 	srli	r3,r17,3
  80501c:	14006c26 	beq	r2,r16,8051d0 <_malloc_r+0x31c>
  805020:	80c00117 	ldw	r3,4(r16)
  805024:	00bfff04 	movi	r2,-4
  805028:	81800317 	ldw	r6,12(r16)
  80502c:	1886703a 	and	r3,r3,r2
  805030:	80c7883a 	add	r3,r16,r3
  805034:	18800117 	ldw	r2,4(r3)
  805038:	81400217 	ldw	r5,8(r16)
  80503c:	9009883a 	mov	r4,r18
  805040:	10800054 	ori	r2,r2,1
  805044:	18800115 	stw	r2,4(r3)
  805048:	31400215 	stw	r5,8(r6)
  80504c:	29800315 	stw	r6,12(r5)
  805050:	080a9f00 	call	80a9f0 <__malloc_unlock>
  805054:	80c00204 	addi	r3,r16,8
  805058:	003faa06 	br	804f04 <_malloc_r+0x50>
  80505c:	00800104 	movi	r2,4
  805060:	10c0052e 	bgeu	r2,r3,805078 <_malloc_r+0x1c4>
  805064:	00800504 	movi	r2,20
  805068:	10c07836 	bltu	r2,r3,80524c <_malloc_r+0x398>
  80506c:	198016c4 	addi	r6,r3,91
  805070:	300490fa 	slli	r2,r6,3
  805074:	003fbc06 	br	804f68 <_malloc_r+0xb4>
  805078:	8804d1ba 	srli	r2,r17,6
  80507c:	11800e04 	addi	r6,r2,56
  805080:	300490fa 	slli	r2,r6,3
  805084:	003fb806 	br	804f68 <_malloc_r+0xb4>
  805088:	00807fc4 	movi	r2,511
  80508c:	1140bb36 	bltu	r2,r5,80537c <_malloc_r+0x4c8>
  805090:	2806d0fa 	srli	r3,r5,3
  805094:	573ffe04 	addi	fp,r10,-8
  805098:	00800044 	movi	r2,1
  80509c:	180890fa 	slli	r4,r3,3
  8050a0:	1807d0ba 	srai	r3,r3,2
  8050a4:	e1c00117 	ldw	r7,4(fp)
  8050a8:	5909883a 	add	r4,r11,r4
  8050ac:	21400217 	ldw	r5,8(r4)
  8050b0:	10c4983a 	sll	r2,r2,r3
  8050b4:	81000315 	stw	r4,12(r16)
  8050b8:	81400215 	stw	r5,8(r16)
  8050bc:	388eb03a 	or	r7,r7,r2
  8050c0:	2c000315 	stw	r16,12(r5)
  8050c4:	24000215 	stw	r16,8(r4)
  8050c8:	e1c00115 	stw	r7,4(fp)
  8050cc:	4807883a 	mov	r3,r9
  8050d0:	4800cd16 	blt	r9,zero,805408 <_malloc_r+0x554>
  8050d4:	1807d0ba 	srai	r3,r3,2
  8050d8:	00800044 	movi	r2,1
  8050dc:	10c8983a 	sll	r4,r2,r3
  8050e0:	39004436 	bltu	r7,r4,8051f4 <_malloc_r+0x340>
  8050e4:	21c4703a 	and	r2,r4,r7
  8050e8:	10000a1e 	bne	r2,zero,805114 <_malloc_r+0x260>
  8050ec:	2109883a 	add	r4,r4,r4
  8050f0:	00bfff04 	movi	r2,-4
  8050f4:	4884703a 	and	r2,r9,r2
  8050f8:	3906703a 	and	r3,r7,r4
  8050fc:	12400104 	addi	r9,r2,4
  805100:	1800041e 	bne	r3,zero,805114 <_malloc_r+0x260>
  805104:	2109883a 	add	r4,r4,r4
  805108:	3904703a 	and	r2,r7,r4
  80510c:	4a400104 	addi	r9,r9,4
  805110:	103ffc26 	beq	r2,zero,805104 <_malloc_r+0x250>
  805114:	480490fa 	slli	r2,r9,3
  805118:	4819883a 	mov	r12,r9
  80511c:	023fff04 	movi	r8,-4
  805120:	589b883a 	add	r13,r11,r2
  805124:	6807883a 	mov	r3,r13
  805128:	014003c4 	movi	r5,15
  80512c:	1c000317 	ldw	r16,12(r3)
  805130:	1c00041e 	bne	r3,r16,805144 <_malloc_r+0x290>
  805134:	0000a706 	br	8053d4 <_malloc_r+0x520>
  805138:	3000ab0e 	bge	r6,zero,8053e8 <_malloc_r+0x534>
  80513c:	84000317 	ldw	r16,12(r16)
  805140:	1c00a426 	beq	r3,r16,8053d4 <_malloc_r+0x520>
  805144:	80800117 	ldw	r2,4(r16)
  805148:	1204703a 	and	r2,r2,r8
  80514c:	144dc83a 	sub	r6,r2,r17
  805150:	29bff90e 	bge	r5,r6,805138 <_malloc_r+0x284>
  805154:	81000317 	ldw	r4,12(r16)
  805158:	80c00217 	ldw	r3,8(r16)
  80515c:	89400054 	ori	r5,r17,1
  805160:	8445883a 	add	r2,r16,r17
  805164:	20c00215 	stw	r3,8(r4)
  805168:	19000315 	stw	r4,12(r3)
  80516c:	81400115 	stw	r5,4(r16)
  805170:	1187883a 	add	r3,r2,r6
  805174:	31000054 	ori	r4,r6,1
  805178:	50800315 	stw	r2,12(r10)
  80517c:	50800215 	stw	r2,8(r10)
  805180:	19800015 	stw	r6,0(r3)
  805184:	11000115 	stw	r4,4(r2)
  805188:	12800215 	stw	r10,8(r2)
  80518c:	12800315 	stw	r10,12(r2)
  805190:	9009883a 	mov	r4,r18
  805194:	080a9f00 	call	80a9f0 <__malloc_unlock>
  805198:	80c00204 	addi	r3,r16,8
  80519c:	003f5906 	br	804f04 <_malloc_r+0x50>
  8051a0:	8109883a 	add	r4,r16,r4
  8051a4:	20800117 	ldw	r2,4(r4)
  8051a8:	80c00217 	ldw	r3,8(r16)
  8051ac:	81400317 	ldw	r5,12(r16)
  8051b0:	10800054 	ori	r2,r2,1
  8051b4:	20800115 	stw	r2,4(r4)
  8051b8:	28c00215 	stw	r3,8(r5)
  8051bc:	19400315 	stw	r5,12(r3)
  8051c0:	9009883a 	mov	r4,r18
  8051c4:	080a9f00 	call	80a9f0 <__malloc_unlock>
  8051c8:	80c00204 	addi	r3,r16,8
  8051cc:	003f4d06 	br	804f04 <_malloc_r+0x50>
  8051d0:	80800204 	addi	r2,r16,8
  8051d4:	14000317 	ldw	r16,12(r2)
  8051d8:	143f911e 	bne	r2,r16,805020 <_malloc_r+0x16c>
  8051dc:	1a400084 	addi	r9,r3,2
  8051e0:	003f7306 	br	804fb0 <_malloc_r+0xfc>
  8051e4:	88c00054 	ori	r3,r17,1
  8051e8:	8445883a 	add	r2,r16,r17
  8051ec:	80c00115 	stw	r3,4(r16)
  8051f0:	003fdf06 	br	805170 <_malloc_r+0x2bc>
  8051f4:	e4000217 	ldw	r16,8(fp)
  8051f8:	00bfff04 	movi	r2,-4
  8051fc:	80c00117 	ldw	r3,4(r16)
  805200:	802d883a 	mov	r22,r16
  805204:	18aa703a 	and	r21,r3,r2
  805208:	ac401636 	bltu	r21,r17,805264 <_malloc_r+0x3b0>
  80520c:	ac49c83a 	sub	r4,r21,r17
  805210:	008003c4 	movi	r2,15
  805214:	1100130e 	bge	r2,r4,805264 <_malloc_r+0x3b0>
  805218:	88800054 	ori	r2,r17,1
  80521c:	8447883a 	add	r3,r16,r17
  805220:	80800115 	stw	r2,4(r16)
  805224:	20800054 	ori	r2,r4,1
  805228:	18800115 	stw	r2,4(r3)
  80522c:	e0c00215 	stw	r3,8(fp)
  805230:	9009883a 	mov	r4,r18
  805234:	080a9f00 	call	80a9f0 <__malloc_unlock>
  805238:	80c00204 	addi	r3,r16,8
  80523c:	003f3106 	br	804f04 <_malloc_r+0x50>
  805240:	39c00117 	ldw	r7,4(r7)
  805244:	573ffe04 	addi	fp,r10,-8
  805248:	003fa006 	br	8050cc <_malloc_r+0x218>
  80524c:	00801504 	movi	r2,84
  805250:	10c06736 	bltu	r2,r3,8053f0 <_malloc_r+0x53c>
  805254:	8804d33a 	srli	r2,r17,12
  805258:	11801b84 	addi	r6,r2,110
  80525c:	300490fa 	slli	r2,r6,3
  805260:	003f4106 	br	804f68 <_malloc_r+0xb4>
  805264:	d0a6f617 	ldw	r2,-25640(gp)
  805268:	d0e00517 	ldw	r3,-32748(gp)
  80526c:	053fffc4 	movi	r20,-1
  805270:	10800404 	addi	r2,r2,16
  805274:	88a7883a 	add	r19,r17,r2
  805278:	1d000326 	beq	r3,r20,805288 <_malloc_r+0x3d4>
  80527c:	98c3ffc4 	addi	r3,r19,4095
  805280:	00bc0004 	movi	r2,-4096
  805284:	18a6703a 	and	r19,r3,r2
  805288:	9009883a 	mov	r4,r18
  80528c:	980b883a 	mov	r5,r19
  805290:	08071340 	call	807134 <_sbrk_r>
  805294:	1009883a 	mov	r4,r2
  805298:	15000426 	beq	r2,r20,8052ac <_malloc_r+0x3f8>
  80529c:	854b883a 	add	r5,r16,r21
  8052a0:	1029883a 	mov	r20,r2
  8052a4:	11405a2e 	bgeu	r2,r5,805410 <_malloc_r+0x55c>
  8052a8:	87000c26 	beq	r16,fp,8052dc <_malloc_r+0x428>
  8052ac:	e4000217 	ldw	r16,8(fp)
  8052b0:	80c00117 	ldw	r3,4(r16)
  8052b4:	00bfff04 	movi	r2,-4
  8052b8:	1884703a 	and	r2,r3,r2
  8052bc:	14400336 	bltu	r2,r17,8052cc <_malloc_r+0x418>
  8052c0:	1449c83a 	sub	r4,r2,r17
  8052c4:	008003c4 	movi	r2,15
  8052c8:	113fd316 	blt	r2,r4,805218 <_malloc_r+0x364>
  8052cc:	9009883a 	mov	r4,r18
  8052d0:	080a9f00 	call	80a9f0 <__malloc_unlock>
  8052d4:	0007883a 	mov	r3,zero
  8052d8:	003f0a06 	br	804f04 <_malloc_r+0x50>
  8052dc:	05c020b4 	movhi	r23,130
  8052e0:	bde6c204 	addi	r23,r23,-25848
  8052e4:	b8800017 	ldw	r2,0(r23)
  8052e8:	988d883a 	add	r6,r19,r2
  8052ec:	b9800015 	stw	r6,0(r23)
  8052f0:	d0e00517 	ldw	r3,-32748(gp)
  8052f4:	00bfffc4 	movi	r2,-1
  8052f8:	18808e26 	beq	r3,r2,805534 <_malloc_r+0x680>
  8052fc:	2145c83a 	sub	r2,r4,r5
  805300:	3085883a 	add	r2,r6,r2
  805304:	b8800015 	stw	r2,0(r23)
  805308:	20c001cc 	andi	r3,r4,7
  80530c:	18005f1e 	bne	r3,zero,80548c <_malloc_r+0x5d8>
  805310:	000b883a 	mov	r5,zero
  805314:	a4c5883a 	add	r2,r20,r19
  805318:	1083ffcc 	andi	r2,r2,4095
  80531c:	00c40004 	movi	r3,4096
  805320:	1887c83a 	sub	r3,r3,r2
  805324:	28e7883a 	add	r19,r5,r3
  805328:	9009883a 	mov	r4,r18
  80532c:	980b883a 	mov	r5,r19
  805330:	08071340 	call	807134 <_sbrk_r>
  805334:	1007883a 	mov	r3,r2
  805338:	00bfffc4 	movi	r2,-1
  80533c:	18807a26 	beq	r3,r2,805528 <_malloc_r+0x674>
  805340:	1d05c83a 	sub	r2,r3,r20
  805344:	9885883a 	add	r2,r19,r2
  805348:	10c00054 	ori	r3,r2,1
  80534c:	b8800017 	ldw	r2,0(r23)
  805350:	a021883a 	mov	r16,r20
  805354:	a0c00115 	stw	r3,4(r20)
  805358:	9885883a 	add	r2,r19,r2
  80535c:	b8800015 	stw	r2,0(r23)
  805360:	e5000215 	stw	r20,8(fp)
  805364:	b7003626 	beq	r22,fp,805440 <_malloc_r+0x58c>
  805368:	018003c4 	movi	r6,15
  80536c:	35404b36 	bltu	r6,r21,80549c <_malloc_r+0x5e8>
  805370:	00800044 	movi	r2,1
  805374:	a0800115 	stw	r2,4(r20)
  805378:	003fcd06 	br	8052b0 <_malloc_r+0x3fc>
  80537c:	2808d27a 	srli	r4,r5,9
  805380:	2000371e 	bne	r4,zero,805460 <_malloc_r+0x5ac>
  805384:	2808d0fa 	srli	r4,r5,3
  805388:	200690fa 	slli	r3,r4,3
  80538c:	1ad1883a 	add	r8,r3,r11
  805390:	41800217 	ldw	r6,8(r8)
  805394:	41805b26 	beq	r8,r6,805504 <_malloc_r+0x650>
  805398:	30800117 	ldw	r2,4(r6)
  80539c:	00ffff04 	movi	r3,-4
  8053a0:	10c4703a 	and	r2,r2,r3
  8053a4:	2880022e 	bgeu	r5,r2,8053b0 <_malloc_r+0x4fc>
  8053a8:	31800217 	ldw	r6,8(r6)
  8053ac:	41bffa1e 	bne	r8,r6,805398 <_malloc_r+0x4e4>
  8053b0:	32000317 	ldw	r8,12(r6)
  8053b4:	39c00117 	ldw	r7,4(r7)
  8053b8:	82000315 	stw	r8,12(r16)
  8053bc:	81800215 	stw	r6,8(r16)
  8053c0:	07002074 	movhi	fp,129
  8053c4:	e71a1704 	addi	fp,fp,26716
  8053c8:	34000315 	stw	r16,12(r6)
  8053cc:	44000215 	stw	r16,8(r8)
  8053d0:	003f3e06 	br	8050cc <_malloc_r+0x218>
  8053d4:	63000044 	addi	r12,r12,1
  8053d8:	608000cc 	andi	r2,r12,3
  8053dc:	10005d26 	beq	r2,zero,805554 <_malloc_r+0x6a0>
  8053e0:	18c00204 	addi	r3,r3,8
  8053e4:	003f5106 	br	80512c <_malloc_r+0x278>
  8053e8:	8089883a 	add	r4,r16,r2
  8053ec:	003f6d06 	br	8051a4 <_malloc_r+0x2f0>
  8053f0:	00805504 	movi	r2,340
  8053f4:	10c02036 	bltu	r2,r3,805478 <_malloc_r+0x5c4>
  8053f8:	8804d3fa 	srli	r2,r17,15
  8053fc:	11801dc4 	addi	r6,r2,119
  805400:	300490fa 	slli	r2,r6,3
  805404:	003ed806 	br	804f68 <_malloc_r+0xb4>
  805408:	48c000c4 	addi	r3,r9,3
  80540c:	003f3106 	br	8050d4 <_malloc_r+0x220>
  805410:	05c020b4 	movhi	r23,130
  805414:	bde6c204 	addi	r23,r23,-25848
  805418:	b8800017 	ldw	r2,0(r23)
  80541c:	988d883a 	add	r6,r19,r2
  805420:	b9800015 	stw	r6,0(r23)
  805424:	293fb21e 	bne	r5,r4,8052f0 <_malloc_r+0x43c>
  805428:	2083ffcc 	andi	r2,r4,4095
  80542c:	103fb01e 	bne	r2,zero,8052f0 <_malloc_r+0x43c>
  805430:	e4000217 	ldw	r16,8(fp)
  805434:	9d45883a 	add	r2,r19,r21
  805438:	10800054 	ori	r2,r2,1
  80543c:	80800115 	stw	r2,4(r16)
  805440:	b8c00017 	ldw	r3,0(r23)
  805444:	d0a6f717 	ldw	r2,-25636(gp)
  805448:	10c0012e 	bgeu	r2,r3,805450 <_malloc_r+0x59c>
  80544c:	d0e6f715 	stw	r3,-25636(gp)
  805450:	d0a6f817 	ldw	r2,-25632(gp)
  805454:	10ff962e 	bgeu	r2,r3,8052b0 <_malloc_r+0x3fc>
  805458:	d0e6f815 	stw	r3,-25632(gp)
  80545c:	003f9406 	br	8052b0 <_malloc_r+0x3fc>
  805460:	00800104 	movi	r2,4
  805464:	11001e36 	bltu	r2,r4,8054e0 <_malloc_r+0x62c>
  805468:	2804d1ba 	srli	r2,r5,6
  80546c:	11000e04 	addi	r4,r2,56
  805470:	200690fa 	slli	r3,r4,3
  805474:	003fc506 	br	80538c <_malloc_r+0x4d8>
  805478:	00815504 	movi	r2,1364
  80547c:	10c01d2e 	bgeu	r2,r3,8054f4 <_malloc_r+0x640>
  805480:	01801f84 	movi	r6,126
  805484:	0080fc04 	movi	r2,1008
  805488:	003eb706 	br	804f68 <_malloc_r+0xb4>
  80548c:	00800204 	movi	r2,8
  805490:	10cbc83a 	sub	r5,r2,r3
  805494:	2169883a 	add	r20,r4,r5
  805498:	003f9e06 	br	805314 <_malloc_r+0x460>
  80549c:	00bffe04 	movi	r2,-8
  8054a0:	a93ffd04 	addi	r4,r21,-12
  8054a4:	2088703a 	and	r4,r4,r2
  8054a8:	b10b883a 	add	r5,r22,r4
  8054ac:	00c00144 	movi	r3,5
  8054b0:	28c00215 	stw	r3,8(r5)
  8054b4:	28c00115 	stw	r3,4(r5)
  8054b8:	b0800117 	ldw	r2,4(r22)
  8054bc:	1080004c 	andi	r2,r2,1
  8054c0:	2084b03a 	or	r2,r4,r2
  8054c4:	b0800115 	stw	r2,4(r22)
  8054c8:	313fdd2e 	bgeu	r6,r4,805440 <_malloc_r+0x58c>
  8054cc:	b1400204 	addi	r5,r22,8
  8054d0:	9009883a 	mov	r4,r18
  8054d4:	080432c0 	call	80432c <_free_r>
  8054d8:	e4000217 	ldw	r16,8(fp)
  8054dc:	003fd806 	br	805440 <_malloc_r+0x58c>
  8054e0:	00800504 	movi	r2,20
  8054e4:	11001536 	bltu	r2,r4,80553c <_malloc_r+0x688>
  8054e8:	210016c4 	addi	r4,r4,91
  8054ec:	200690fa 	slli	r3,r4,3
  8054f0:	003fa606 	br	80538c <_malloc_r+0x4d8>
  8054f4:	8804d4ba 	srli	r2,r17,18
  8054f8:	11801f04 	addi	r6,r2,124
  8054fc:	300490fa 	slli	r2,r6,3
  805500:	003e9906 	br	804f68 <_malloc_r+0xb4>
  805504:	2009d0ba 	srai	r4,r4,2
  805508:	01402074 	movhi	r5,129
  80550c:	295a1704 	addi	r5,r5,26716
  805510:	00c00044 	movi	r3,1
  805514:	28800117 	ldw	r2,4(r5)
  805518:	1906983a 	sll	r3,r3,r4
  80551c:	10c4b03a 	or	r2,r2,r3
  805520:	28800115 	stw	r2,4(r5)
  805524:	003fa306 	br	8053b4 <_malloc_r+0x500>
  805528:	0027883a 	mov	r19,zero
  80552c:	00c00044 	movi	r3,1
  805530:	003f8606 	br	80534c <_malloc_r+0x498>
  805534:	d1200515 	stw	r4,-32748(gp)
  805538:	003f7306 	br	805308 <_malloc_r+0x454>
  80553c:	00801504 	movi	r2,84
  805540:	11001936 	bltu	r2,r4,8055a8 <_malloc_r+0x6f4>
  805544:	2804d33a 	srli	r2,r5,12
  805548:	11001b84 	addi	r4,r2,110
  80554c:	200690fa 	slli	r3,r4,3
  805550:	003f8e06 	br	80538c <_malloc_r+0x4d8>
  805554:	480b883a 	mov	r5,r9
  805558:	6807883a 	mov	r3,r13
  80555c:	288000cc 	andi	r2,r5,3
  805560:	18fffe04 	addi	r3,r3,-8
  805564:	297fffc4 	addi	r5,r5,-1
  805568:	10001526 	beq	r2,zero,8055c0 <_malloc_r+0x70c>
  80556c:	18800217 	ldw	r2,8(r3)
  805570:	10fffa26 	beq	r2,r3,80555c <_malloc_r+0x6a8>
  805574:	2109883a 	add	r4,r4,r4
  805578:	393f1e36 	bltu	r7,r4,8051f4 <_malloc_r+0x340>
  80557c:	203f1d26 	beq	r4,zero,8051f4 <_malloc_r+0x340>
  805580:	21c4703a 	and	r2,r4,r7
  805584:	10000226 	beq	r2,zero,805590 <_malloc_r+0x6dc>
  805588:	6013883a 	mov	r9,r12
  80558c:	003ee106 	br	805114 <_malloc_r+0x260>
  805590:	2109883a 	add	r4,r4,r4
  805594:	3904703a 	and	r2,r7,r4
  805598:	63000104 	addi	r12,r12,4
  80559c:	103ffc26 	beq	r2,zero,805590 <_malloc_r+0x6dc>
  8055a0:	6013883a 	mov	r9,r12
  8055a4:	003edb06 	br	805114 <_malloc_r+0x260>
  8055a8:	00805504 	movi	r2,340
  8055ac:	11000836 	bltu	r2,r4,8055d0 <_malloc_r+0x71c>
  8055b0:	2804d3fa 	srli	r2,r5,15
  8055b4:	11001dc4 	addi	r4,r2,119
  8055b8:	200690fa 	slli	r3,r4,3
  8055bc:	003f7306 	br	80538c <_malloc_r+0x4d8>
  8055c0:	0104303a 	nor	r2,zero,r4
  8055c4:	388e703a 	and	r7,r7,r2
  8055c8:	e1c00115 	stw	r7,4(fp)
  8055cc:	003fe906 	br	805574 <_malloc_r+0x6c0>
  8055d0:	00815504 	movi	r2,1364
  8055d4:	1100032e 	bgeu	r2,r4,8055e4 <_malloc_r+0x730>
  8055d8:	01001f84 	movi	r4,126
  8055dc:	00c0fc04 	movi	r3,1008
  8055e0:	003f6a06 	br	80538c <_malloc_r+0x4d8>
  8055e4:	2804d4ba 	srli	r2,r5,18
  8055e8:	11001f04 	addi	r4,r2,124
  8055ec:	200690fa 	slli	r3,r4,3
  8055f0:	003f6606 	br	80538c <_malloc_r+0x4d8>

008055f4 <memchr>:
  8055f4:	008000c4 	movi	r2,3
  8055f8:	29403fcc 	andi	r5,r5,255
  8055fc:	2007883a 	mov	r3,r4
  805600:	1180022e 	bgeu	r2,r6,80560c <memchr+0x18>
  805604:	2084703a 	and	r2,r4,r2
  805608:	10000b26 	beq	r2,zero,805638 <memchr+0x44>
  80560c:	313fffc4 	addi	r4,r6,-1
  805610:	3000051e 	bne	r6,zero,805628 <memchr+0x34>
  805614:	00002c06 	br	8056c8 <memchr+0xd4>
  805618:	213fffc4 	addi	r4,r4,-1
  80561c:	00bfffc4 	movi	r2,-1
  805620:	18c00044 	addi	r3,r3,1
  805624:	20802826 	beq	r4,r2,8056c8 <memchr+0xd4>
  805628:	18800003 	ldbu	r2,0(r3)
  80562c:	28bffa1e 	bne	r5,r2,805618 <memchr+0x24>
  805630:	1805883a 	mov	r2,r3
  805634:	f800283a 	ret
  805638:	0011883a 	mov	r8,zero
  80563c:	0007883a 	mov	r3,zero
  805640:	01c00104 	movi	r7,4
  805644:	4004923a 	slli	r2,r8,8
  805648:	18c00044 	addi	r3,r3,1
  80564c:	1151883a 	add	r8,r2,r5
  805650:	19fffc1e 	bne	r3,r7,805644 <memchr+0x50>
  805654:	02bfbff4 	movhi	r10,65279
  805658:	52bfbfc4 	addi	r10,r10,-257
  80565c:	02602074 	movhi	r9,32897
  805660:	4a602004 	addi	r9,r9,-32640
  805664:	02c000c4 	movi	r11,3
  805668:	20800017 	ldw	r2,0(r4)
  80566c:	31bfff04 	addi	r6,r6,-4
  805670:	200f883a 	mov	r7,r4
  805674:	1204f03a 	xor	r2,r2,r8
  805678:	1287883a 	add	r3,r2,r10
  80567c:	1a46703a 	and	r3,r3,r9
  805680:	0084303a 	nor	r2,zero,r2
  805684:	10c4703a 	and	r2,r2,r3
  805688:	10000b26 	beq	r2,zero,8056b8 <memchr+0xc4>
  80568c:	20800003 	ldbu	r2,0(r4)
  805690:	28800f26 	beq	r5,r2,8056d0 <memchr+0xdc>
  805694:	20800043 	ldbu	r2,1(r4)
  805698:	21c00044 	addi	r7,r4,1
  80569c:	28800c26 	beq	r5,r2,8056d0 <memchr+0xdc>
  8056a0:	20800083 	ldbu	r2,2(r4)
  8056a4:	21c00084 	addi	r7,r4,2
  8056a8:	28800926 	beq	r5,r2,8056d0 <memchr+0xdc>
  8056ac:	208000c3 	ldbu	r2,3(r4)
  8056b0:	21c000c4 	addi	r7,r4,3
  8056b4:	28800626 	beq	r5,r2,8056d0 <memchr+0xdc>
  8056b8:	21000104 	addi	r4,r4,4
  8056bc:	59bfea36 	bltu	r11,r6,805668 <memchr+0x74>
  8056c0:	2007883a 	mov	r3,r4
  8056c4:	003fd106 	br	80560c <memchr+0x18>
  8056c8:	0005883a 	mov	r2,zero
  8056cc:	f800283a 	ret
  8056d0:	3805883a 	mov	r2,r7
  8056d4:	f800283a 	ret

008056d8 <memcpy>:
  8056d8:	01c003c4 	movi	r7,15
  8056dc:	2007883a 	mov	r3,r4
  8056e0:	3980032e 	bgeu	r7,r6,8056f0 <memcpy+0x18>
  8056e4:	2904b03a 	or	r2,r5,r4
  8056e8:	108000cc 	andi	r2,r2,3
  8056ec:	10000926 	beq	r2,zero,805714 <memcpy+0x3c>
  8056f0:	30000626 	beq	r6,zero,80570c <memcpy+0x34>
  8056f4:	30cd883a 	add	r6,r6,r3
  8056f8:	28800003 	ldbu	r2,0(r5)
  8056fc:	29400044 	addi	r5,r5,1
  805700:	18800005 	stb	r2,0(r3)
  805704:	18c00044 	addi	r3,r3,1
  805708:	30fffb1e 	bne	r6,r3,8056f8 <memcpy+0x20>
  80570c:	2005883a 	mov	r2,r4
  805710:	f800283a 	ret
  805714:	3811883a 	mov	r8,r7
  805718:	200f883a 	mov	r7,r4
  80571c:	28c00017 	ldw	r3,0(r5)
  805720:	31bffc04 	addi	r6,r6,-16
  805724:	38c00015 	stw	r3,0(r7)
  805728:	28800117 	ldw	r2,4(r5)
  80572c:	38800115 	stw	r2,4(r7)
  805730:	28c00217 	ldw	r3,8(r5)
  805734:	38c00215 	stw	r3,8(r7)
  805738:	28800317 	ldw	r2,12(r5)
  80573c:	29400404 	addi	r5,r5,16
  805740:	38800315 	stw	r2,12(r7)
  805744:	39c00404 	addi	r7,r7,16
  805748:	41bff436 	bltu	r8,r6,80571c <memcpy+0x44>
  80574c:	008000c4 	movi	r2,3
  805750:	1180072e 	bgeu	r2,r6,805770 <memcpy+0x98>
  805754:	1007883a 	mov	r3,r2
  805758:	28800017 	ldw	r2,0(r5)
  80575c:	31bfff04 	addi	r6,r6,-4
  805760:	29400104 	addi	r5,r5,4
  805764:	38800015 	stw	r2,0(r7)
  805768:	39c00104 	addi	r7,r7,4
  80576c:	19bffa36 	bltu	r3,r6,805758 <memcpy+0x80>
  805770:	3807883a 	mov	r3,r7
  805774:	003fde06 	br	8056f0 <memcpy+0x18>

00805778 <memmove>:
  805778:	2807883a 	mov	r3,r5
  80577c:	2011883a 	mov	r8,r4
  805780:	29000c2e 	bgeu	r5,r4,8057b4 <memmove+0x3c>
  805784:	298f883a 	add	r7,r5,r6
  805788:	21c00a2e 	bgeu	r4,r7,8057b4 <memmove+0x3c>
  80578c:	30000726 	beq	r6,zero,8057ac <memmove+0x34>
  805790:	2187883a 	add	r3,r4,r6
  805794:	198dc83a 	sub	r6,r3,r6
  805798:	39ffffc4 	addi	r7,r7,-1
  80579c:	38800003 	ldbu	r2,0(r7)
  8057a0:	18ffffc4 	addi	r3,r3,-1
  8057a4:	18800005 	stb	r2,0(r3)
  8057a8:	19bffb1e 	bne	r3,r6,805798 <memmove+0x20>
  8057ac:	2005883a 	mov	r2,r4
  8057b0:	f800283a 	ret
  8057b4:	01c003c4 	movi	r7,15
  8057b8:	39800a36 	bltu	r7,r6,8057e4 <memmove+0x6c>
  8057bc:	303ffb26 	beq	r6,zero,8057ac <memmove+0x34>
  8057c0:	400f883a 	mov	r7,r8
  8057c4:	320d883a 	add	r6,r6,r8
  8057c8:	28800003 	ldbu	r2,0(r5)
  8057cc:	29400044 	addi	r5,r5,1
  8057d0:	38800005 	stb	r2,0(r7)
  8057d4:	39c00044 	addi	r7,r7,1
  8057d8:	39bffb1e 	bne	r7,r6,8057c8 <memmove+0x50>
  8057dc:	2005883a 	mov	r2,r4
  8057e0:	f800283a 	ret
  8057e4:	1904b03a 	or	r2,r3,r4
  8057e8:	108000cc 	andi	r2,r2,3
  8057ec:	103ff31e 	bne	r2,zero,8057bc <memmove+0x44>
  8057f0:	3811883a 	mov	r8,r7
  8057f4:	180b883a 	mov	r5,r3
  8057f8:	200f883a 	mov	r7,r4
  8057fc:	28c00017 	ldw	r3,0(r5)
  805800:	31bffc04 	addi	r6,r6,-16
  805804:	38c00015 	stw	r3,0(r7)
  805808:	28800117 	ldw	r2,4(r5)
  80580c:	38800115 	stw	r2,4(r7)
  805810:	28c00217 	ldw	r3,8(r5)
  805814:	38c00215 	stw	r3,8(r7)
  805818:	28800317 	ldw	r2,12(r5)
  80581c:	29400404 	addi	r5,r5,16
  805820:	38800315 	stw	r2,12(r7)
  805824:	39c00404 	addi	r7,r7,16
  805828:	41bff436 	bltu	r8,r6,8057fc <memmove+0x84>
  80582c:	008000c4 	movi	r2,3
  805830:	1180072e 	bgeu	r2,r6,805850 <memmove+0xd8>
  805834:	1007883a 	mov	r3,r2
  805838:	28800017 	ldw	r2,0(r5)
  80583c:	31bfff04 	addi	r6,r6,-4
  805840:	29400104 	addi	r5,r5,4
  805844:	38800015 	stw	r2,0(r7)
  805848:	39c00104 	addi	r7,r7,4
  80584c:	19bffa36 	bltu	r3,r6,805838 <memmove+0xc0>
  805850:	3811883a 	mov	r8,r7
  805854:	003fd906 	br	8057bc <memmove+0x44>

00805858 <memset>:
  805858:	008000c4 	movi	r2,3
  80585c:	29403fcc 	andi	r5,r5,255
  805860:	2007883a 	mov	r3,r4
  805864:	1180022e 	bgeu	r2,r6,805870 <memset+0x18>
  805868:	2084703a 	and	r2,r4,r2
  80586c:	10000826 	beq	r2,zero,805890 <memset+0x38>
  805870:	30000526 	beq	r6,zero,805888 <memset+0x30>
  805874:	2805883a 	mov	r2,r5
  805878:	30cd883a 	add	r6,r6,r3
  80587c:	18800005 	stb	r2,0(r3)
  805880:	18c00044 	addi	r3,r3,1
  805884:	19bffd1e 	bne	r3,r6,80587c <memset+0x24>
  805888:	2005883a 	mov	r2,r4
  80588c:	f800283a 	ret
  805890:	2804923a 	slli	r2,r5,8
  805894:	020003c4 	movi	r8,15
  805898:	200f883a 	mov	r7,r4
  80589c:	2884b03a 	or	r2,r5,r2
  8058a0:	1006943a 	slli	r3,r2,16
  8058a4:	10c6b03a 	or	r3,r2,r3
  8058a8:	41800a2e 	bgeu	r8,r6,8058d4 <memset+0x7c>
  8058ac:	4005883a 	mov	r2,r8
  8058b0:	31bffc04 	addi	r6,r6,-16
  8058b4:	38c00015 	stw	r3,0(r7)
  8058b8:	38c00115 	stw	r3,4(r7)
  8058bc:	38c00215 	stw	r3,8(r7)
  8058c0:	38c00315 	stw	r3,12(r7)
  8058c4:	39c00404 	addi	r7,r7,16
  8058c8:	11bff936 	bltu	r2,r6,8058b0 <memset+0x58>
  8058cc:	008000c4 	movi	r2,3
  8058d0:	1180052e 	bgeu	r2,r6,8058e8 <memset+0x90>
  8058d4:	31bfff04 	addi	r6,r6,-4
  8058d8:	008000c4 	movi	r2,3
  8058dc:	38c00015 	stw	r3,0(r7)
  8058e0:	39c00104 	addi	r7,r7,4
  8058e4:	11bffb36 	bltu	r2,r6,8058d4 <memset+0x7c>
  8058e8:	3807883a 	mov	r3,r7
  8058ec:	003fe006 	br	805870 <memset+0x18>

008058f0 <_Bfree>:
  8058f0:	28000826 	beq	r5,zero,805914 <_Bfree+0x24>
  8058f4:	28800117 	ldw	r2,4(r5)
  8058f8:	21001317 	ldw	r4,76(r4)
  8058fc:	1085883a 	add	r2,r2,r2
  805900:	1085883a 	add	r2,r2,r2
  805904:	1105883a 	add	r2,r2,r4
  805908:	10c00017 	ldw	r3,0(r2)
  80590c:	28c00015 	stw	r3,0(r5)
  805910:	11400015 	stw	r5,0(r2)
  805914:	f800283a 	ret

00805918 <__hi0bits>:
  805918:	20bfffec 	andhi	r2,r4,65535
  80591c:	10001426 	beq	r2,zero,805970 <__hi0bits+0x58>
  805920:	0007883a 	mov	r3,zero
  805924:	20bfc02c 	andhi	r2,r4,65280
  805928:	1000021e 	bne	r2,zero,805934 <__hi0bits+0x1c>
  80592c:	2008923a 	slli	r4,r4,8
  805930:	18c00204 	addi	r3,r3,8
  805934:	20bc002c 	andhi	r2,r4,61440
  805938:	1000021e 	bne	r2,zero,805944 <__hi0bits+0x2c>
  80593c:	2008913a 	slli	r4,r4,4
  805940:	18c00104 	addi	r3,r3,4
  805944:	20b0002c 	andhi	r2,r4,49152
  805948:	1000031e 	bne	r2,zero,805958 <__hi0bits+0x40>
  80594c:	2105883a 	add	r2,r4,r4
  805950:	18c00084 	addi	r3,r3,2
  805954:	1089883a 	add	r4,r2,r2
  805958:	20000316 	blt	r4,zero,805968 <__hi0bits+0x50>
  80595c:	2090002c 	andhi	r2,r4,16384
  805960:	10000626 	beq	r2,zero,80597c <__hi0bits+0x64>
  805964:	18c00044 	addi	r3,r3,1
  805968:	1805883a 	mov	r2,r3
  80596c:	f800283a 	ret
  805970:	2008943a 	slli	r4,r4,16
  805974:	00c00404 	movi	r3,16
  805978:	003fea06 	br	805924 <__hi0bits+0xc>
  80597c:	00c00804 	movi	r3,32
  805980:	1805883a 	mov	r2,r3
  805984:	f800283a 	ret

00805988 <__lo0bits>:
  805988:	20c00017 	ldw	r3,0(r4)
  80598c:	188001cc 	andi	r2,r3,7
  805990:	10000a26 	beq	r2,zero,8059bc <__lo0bits+0x34>
  805994:	1880004c 	andi	r2,r3,1
  805998:	1005003a 	cmpeq	r2,r2,zero
  80599c:	10002126 	beq	r2,zero,805a24 <__lo0bits+0x9c>
  8059a0:	1880008c 	andi	r2,r3,2
  8059a4:	1000251e 	bne	r2,zero,805a3c <__lo0bits+0xb4>
  8059a8:	1804d0ba 	srli	r2,r3,2
  8059ac:	01400084 	movi	r5,2
  8059b0:	20800015 	stw	r2,0(r4)
  8059b4:	2805883a 	mov	r2,r5
  8059b8:	f800283a 	ret
  8059bc:	18bfffcc 	andi	r2,r3,65535
  8059c0:	10001526 	beq	r2,zero,805a18 <__lo0bits+0x90>
  8059c4:	000b883a 	mov	r5,zero
  8059c8:	18803fcc 	andi	r2,r3,255
  8059cc:	1000021e 	bne	r2,zero,8059d8 <__lo0bits+0x50>
  8059d0:	1806d23a 	srli	r3,r3,8
  8059d4:	29400204 	addi	r5,r5,8
  8059d8:	188003cc 	andi	r2,r3,15
  8059dc:	1000021e 	bne	r2,zero,8059e8 <__lo0bits+0x60>
  8059e0:	1806d13a 	srli	r3,r3,4
  8059e4:	29400104 	addi	r5,r5,4
  8059e8:	188000cc 	andi	r2,r3,3
  8059ec:	1000021e 	bne	r2,zero,8059f8 <__lo0bits+0x70>
  8059f0:	1806d0ba 	srli	r3,r3,2
  8059f4:	29400084 	addi	r5,r5,2
  8059f8:	1880004c 	andi	r2,r3,1
  8059fc:	1000031e 	bne	r2,zero,805a0c <__lo0bits+0x84>
  805a00:	1806d07a 	srli	r3,r3,1
  805a04:	18000a26 	beq	r3,zero,805a30 <__lo0bits+0xa8>
  805a08:	29400044 	addi	r5,r5,1
  805a0c:	2805883a 	mov	r2,r5
  805a10:	20c00015 	stw	r3,0(r4)
  805a14:	f800283a 	ret
  805a18:	1806d43a 	srli	r3,r3,16
  805a1c:	01400404 	movi	r5,16
  805a20:	003fe906 	br	8059c8 <__lo0bits+0x40>
  805a24:	000b883a 	mov	r5,zero
  805a28:	2805883a 	mov	r2,r5
  805a2c:	f800283a 	ret
  805a30:	01400804 	movi	r5,32
  805a34:	2805883a 	mov	r2,r5
  805a38:	f800283a 	ret
  805a3c:	1804d07a 	srli	r2,r3,1
  805a40:	01400044 	movi	r5,1
  805a44:	20800015 	stw	r2,0(r4)
  805a48:	003fda06 	br	8059b4 <__lo0bits+0x2c>

00805a4c <__mcmp>:
  805a4c:	20800417 	ldw	r2,16(r4)
  805a50:	28c00417 	ldw	r3,16(r5)
  805a54:	10cfc83a 	sub	r7,r2,r3
  805a58:	38000c1e 	bne	r7,zero,805a8c <__mcmp+0x40>
  805a5c:	18c5883a 	add	r2,r3,r3
  805a60:	1085883a 	add	r2,r2,r2
  805a64:	10c00504 	addi	r3,r2,20
  805a68:	21000504 	addi	r4,r4,20
  805a6c:	28cb883a 	add	r5,r5,r3
  805a70:	2085883a 	add	r2,r4,r2
  805a74:	10bfff04 	addi	r2,r2,-4
  805a78:	297fff04 	addi	r5,r5,-4
  805a7c:	11800017 	ldw	r6,0(r2)
  805a80:	28c00017 	ldw	r3,0(r5)
  805a84:	30c0031e 	bne	r6,r3,805a94 <__mcmp+0x48>
  805a88:	20bffa36 	bltu	r4,r2,805a74 <__mcmp+0x28>
  805a8c:	3805883a 	mov	r2,r7
  805a90:	f800283a 	ret
  805a94:	30c00336 	bltu	r6,r3,805aa4 <__mcmp+0x58>
  805a98:	01c00044 	movi	r7,1
  805a9c:	3805883a 	mov	r2,r7
  805aa0:	f800283a 	ret
  805aa4:	01ffffc4 	movi	r7,-1
  805aa8:	003ff806 	br	805a8c <__mcmp+0x40>

00805aac <__ulp>:
  805aac:	295ffc2c 	andhi	r5,r5,32752
  805ab0:	013f3034 	movhi	r4,64704
  805ab4:	290b883a 	add	r5,r5,r4
  805ab8:	0145c83a 	sub	r2,zero,r5
  805abc:	1007d53a 	srai	r3,r2,20
  805ac0:	000d883a 	mov	r6,zero
  805ac4:	0140040e 	bge	zero,r5,805ad8 <__ulp+0x2c>
  805ac8:	280f883a 	mov	r7,r5
  805acc:	3807883a 	mov	r3,r7
  805ad0:	3005883a 	mov	r2,r6
  805ad4:	f800283a 	ret
  805ad8:	008004c4 	movi	r2,19
  805adc:	193ffb04 	addi	r4,r3,-20
  805ae0:	10c00c0e 	bge	r2,r3,805b14 <__ulp+0x68>
  805ae4:	008007c4 	movi	r2,31
  805ae8:	1107c83a 	sub	r3,r2,r4
  805aec:	00800784 	movi	r2,30
  805af0:	01400044 	movi	r5,1
  805af4:	11000216 	blt	r2,r4,805b00 <__ulp+0x54>
  805af8:	00800044 	movi	r2,1
  805afc:	10ca983a 	sll	r5,r2,r3
  805b00:	000f883a 	mov	r7,zero
  805b04:	280d883a 	mov	r6,r5
  805b08:	3807883a 	mov	r3,r7
  805b0c:	3005883a 	mov	r2,r6
  805b10:	f800283a 	ret
  805b14:	00800234 	movhi	r2,8
  805b18:	10cfd83a 	sra	r7,r2,r3
  805b1c:	000d883a 	mov	r6,zero
  805b20:	3005883a 	mov	r2,r6
  805b24:	3807883a 	mov	r3,r7
  805b28:	f800283a 	ret

00805b2c <__b2d>:
  805b2c:	20800417 	ldw	r2,16(r4)
  805b30:	defff904 	addi	sp,sp,-28
  805b34:	dd000415 	stw	r20,16(sp)
  805b38:	1085883a 	add	r2,r2,r2
  805b3c:	25000504 	addi	r20,r4,20
  805b40:	1085883a 	add	r2,r2,r2
  805b44:	dc000015 	stw	r16,0(sp)
  805b48:	a0a1883a 	add	r16,r20,r2
  805b4c:	dd400515 	stw	r21,20(sp)
  805b50:	857fff17 	ldw	r21,-4(r16)
  805b54:	dc400115 	stw	r17,4(sp)
  805b58:	dfc00615 	stw	ra,24(sp)
  805b5c:	a809883a 	mov	r4,r21
  805b60:	2823883a 	mov	r17,r5
  805b64:	dcc00315 	stw	r19,12(sp)
  805b68:	dc800215 	stw	r18,8(sp)
  805b6c:	08059180 	call	805918 <__hi0bits>
  805b70:	100b883a 	mov	r5,r2
  805b74:	00800804 	movi	r2,32
  805b78:	1145c83a 	sub	r2,r2,r5
  805b7c:	88800015 	stw	r2,0(r17)
  805b80:	00800284 	movi	r2,10
  805b84:	80ffff04 	addi	r3,r16,-4
  805b88:	11401416 	blt	r2,r5,805bdc <__b2d+0xb0>
  805b8c:	008002c4 	movi	r2,11
  805b90:	1149c83a 	sub	r4,r2,r5
  805b94:	a0c02736 	bltu	r20,r3,805c34 <__b2d+0x108>
  805b98:	000d883a 	mov	r6,zero
  805b9c:	28800544 	addi	r2,r5,21
  805ba0:	a906d83a 	srl	r3,r21,r4
  805ba4:	a884983a 	sll	r2,r21,r2
  805ba8:	1ccffc34 	orhi	r19,r3,16368
  805bac:	11a4b03a 	or	r18,r2,r6
  805bb0:	9005883a 	mov	r2,r18
  805bb4:	9807883a 	mov	r3,r19
  805bb8:	dfc00617 	ldw	ra,24(sp)
  805bbc:	dd400517 	ldw	r21,20(sp)
  805bc0:	dd000417 	ldw	r20,16(sp)
  805bc4:	dcc00317 	ldw	r19,12(sp)
  805bc8:	dc800217 	ldw	r18,8(sp)
  805bcc:	dc400117 	ldw	r17,4(sp)
  805bd0:	dc000017 	ldw	r16,0(sp)
  805bd4:	dec00704 	addi	sp,sp,28
  805bd8:	f800283a 	ret
  805bdc:	a0c00e36 	bltu	r20,r3,805c18 <__b2d+0xec>
  805be0:	293ffd44 	addi	r4,r5,-11
  805be4:	000d883a 	mov	r6,zero
  805be8:	20000f26 	beq	r4,zero,805c28 <__b2d+0xfc>
  805bec:	00800804 	movi	r2,32
  805bf0:	110bc83a 	sub	r5,r2,r4
  805bf4:	a0c01236 	bltu	r20,r3,805c40 <__b2d+0x114>
  805bf8:	000f883a 	mov	r7,zero
  805bfc:	a904983a 	sll	r2,r21,r4
  805c00:	3146d83a 	srl	r3,r6,r5
  805c04:	3108983a 	sll	r4,r6,r4
  805c08:	108ffc34 	orhi	r2,r2,16368
  805c0c:	18a6b03a 	or	r19,r3,r2
  805c10:	3924b03a 	or	r18,r7,r4
  805c14:	003fe606 	br	805bb0 <__b2d+0x84>
  805c18:	293ffd44 	addi	r4,r5,-11
  805c1c:	81bffe17 	ldw	r6,-8(r16)
  805c20:	80fffe04 	addi	r3,r16,-8
  805c24:	203ff11e 	bne	r4,zero,805bec <__b2d+0xc0>
  805c28:	accffc34 	orhi	r19,r21,16368
  805c2c:	3025883a 	mov	r18,r6
  805c30:	003fdf06 	br	805bb0 <__b2d+0x84>
  805c34:	18bfff17 	ldw	r2,-4(r3)
  805c38:	110cd83a 	srl	r6,r2,r4
  805c3c:	003fd706 	br	805b9c <__b2d+0x70>
  805c40:	18bfff17 	ldw	r2,-4(r3)
  805c44:	114ed83a 	srl	r7,r2,r5
  805c48:	003fec06 	br	805bfc <__b2d+0xd0>

00805c4c <__ratio>:
  805c4c:	defff904 	addi	sp,sp,-28
  805c50:	dc400215 	stw	r17,8(sp)
  805c54:	2823883a 	mov	r17,r5
  805c58:	d80b883a 	mov	r5,sp
  805c5c:	dfc00615 	stw	ra,24(sp)
  805c60:	dd000515 	stw	r20,20(sp)
  805c64:	dcc00415 	stw	r19,16(sp)
  805c68:	dc800315 	stw	r18,12(sp)
  805c6c:	2025883a 	mov	r18,r4
  805c70:	0805b2c0 	call	805b2c <__b2d>
  805c74:	8809883a 	mov	r4,r17
  805c78:	d9400104 	addi	r5,sp,4
  805c7c:	1027883a 	mov	r19,r2
  805c80:	1829883a 	mov	r20,r3
  805c84:	0805b2c0 	call	805b2c <__b2d>
  805c88:	89000417 	ldw	r4,16(r17)
  805c8c:	91c00417 	ldw	r7,16(r18)
  805c90:	d9800117 	ldw	r6,4(sp)
  805c94:	180b883a 	mov	r5,r3
  805c98:	390fc83a 	sub	r7,r7,r4
  805c9c:	1009883a 	mov	r4,r2
  805ca0:	d8800017 	ldw	r2,0(sp)
  805ca4:	380e917a 	slli	r7,r7,5
  805ca8:	2011883a 	mov	r8,r4
  805cac:	1185c83a 	sub	r2,r2,r6
  805cb0:	11c5883a 	add	r2,r2,r7
  805cb4:	1006953a 	slli	r3,r2,20
  805cb8:	2813883a 	mov	r9,r5
  805cbc:	00800d0e 	bge	zero,r2,805cf4 <__ratio+0xa8>
  805cc0:	1d29883a 	add	r20,r3,r20
  805cc4:	a00b883a 	mov	r5,r20
  805cc8:	480f883a 	mov	r7,r9
  805ccc:	9809883a 	mov	r4,r19
  805cd0:	400d883a 	mov	r6,r8
  805cd4:	0808e540 	call	808e54 <__divdf3>
  805cd8:	dfc00617 	ldw	ra,24(sp)
  805cdc:	dd000517 	ldw	r20,20(sp)
  805ce0:	dcc00417 	ldw	r19,16(sp)
  805ce4:	dc800317 	ldw	r18,12(sp)
  805ce8:	dc400217 	ldw	r17,8(sp)
  805cec:	dec00704 	addi	sp,sp,28
  805cf0:	f800283a 	ret
  805cf4:	28d3c83a 	sub	r9,r5,r3
  805cf8:	003ff206 	br	805cc4 <__ratio+0x78>

00805cfc <_mprec_log10>:
  805cfc:	defffe04 	addi	sp,sp,-8
  805d00:	008005c4 	movi	r2,23
  805d04:	dc000015 	stw	r16,0(sp)
  805d08:	dfc00115 	stw	ra,4(sp)
  805d0c:	2021883a 	mov	r16,r4
  805d10:	11000c16 	blt	r2,r4,805d44 <_mprec_log10+0x48>
  805d14:	200490fa 	slli	r2,r4,3
  805d18:	00c02074 	movhi	r3,129
  805d1c:	18d82a04 	addi	r3,r3,24744
  805d20:	10c5883a 	add	r2,r2,r3
  805d24:	12400117 	ldw	r9,4(r2)
  805d28:	12000017 	ldw	r8,0(r2)
  805d2c:	4807883a 	mov	r3,r9
  805d30:	4005883a 	mov	r2,r8
  805d34:	dfc00117 	ldw	ra,4(sp)
  805d38:	dc000017 	ldw	r16,0(sp)
  805d3c:	dec00204 	addi	sp,sp,8
  805d40:	f800283a 	ret
  805d44:	0011883a 	mov	r8,zero
  805d48:	024ffc34 	movhi	r9,16368
  805d4c:	0005883a 	mov	r2,zero
  805d50:	00d00934 	movhi	r3,16420
  805d54:	480b883a 	mov	r5,r9
  805d58:	4009883a 	mov	r4,r8
  805d5c:	180f883a 	mov	r7,r3
  805d60:	100d883a 	mov	r6,r2
  805d64:	0808a900 	call	808a90 <__muldf3>
  805d68:	843fffc4 	addi	r16,r16,-1
  805d6c:	1011883a 	mov	r8,r2
  805d70:	1813883a 	mov	r9,r3
  805d74:	803ff51e 	bne	r16,zero,805d4c <_mprec_log10+0x50>
  805d78:	4005883a 	mov	r2,r8
  805d7c:	4807883a 	mov	r3,r9
  805d80:	dfc00117 	ldw	ra,4(sp)
  805d84:	dc000017 	ldw	r16,0(sp)
  805d88:	dec00204 	addi	sp,sp,8
  805d8c:	f800283a 	ret

00805d90 <__copybits>:
  805d90:	297fffc4 	addi	r5,r5,-1
  805d94:	30800417 	ldw	r2,16(r6)
  805d98:	280bd17a 	srai	r5,r5,5
  805d9c:	31800504 	addi	r6,r6,20
  805da0:	1085883a 	add	r2,r2,r2
  805da4:	294b883a 	add	r5,r5,r5
  805da8:	294b883a 	add	r5,r5,r5
  805dac:	1085883a 	add	r2,r2,r2
  805db0:	290b883a 	add	r5,r5,r4
  805db4:	3087883a 	add	r3,r6,r2
  805db8:	29400104 	addi	r5,r5,4
  805dbc:	30c0052e 	bgeu	r6,r3,805dd4 <__copybits+0x44>
  805dc0:	30800017 	ldw	r2,0(r6)
  805dc4:	31800104 	addi	r6,r6,4
  805dc8:	20800015 	stw	r2,0(r4)
  805dcc:	21000104 	addi	r4,r4,4
  805dd0:	30fffb36 	bltu	r6,r3,805dc0 <__copybits+0x30>
  805dd4:	2140032e 	bgeu	r4,r5,805de4 <__copybits+0x54>
  805dd8:	20000015 	stw	zero,0(r4)
  805ddc:	21000104 	addi	r4,r4,4
  805de0:	217ffd36 	bltu	r4,r5,805dd8 <__copybits+0x48>
  805de4:	f800283a 	ret

00805de8 <__any_on>:
  805de8:	20800417 	ldw	r2,16(r4)
  805dec:	2807d17a 	srai	r3,r5,5
  805df0:	21000504 	addi	r4,r4,20
  805df4:	10c00d0e 	bge	r2,r3,805e2c <__any_on+0x44>
  805df8:	1085883a 	add	r2,r2,r2
  805dfc:	1085883a 	add	r2,r2,r2
  805e00:	208d883a 	add	r6,r4,r2
  805e04:	2180182e 	bgeu	r4,r6,805e68 <__any_on+0x80>
  805e08:	30bfff17 	ldw	r2,-4(r6)
  805e0c:	30ffff04 	addi	r3,r6,-4
  805e10:	1000041e 	bne	r2,zero,805e24 <__any_on+0x3c>
  805e14:	20c0142e 	bgeu	r4,r3,805e68 <__any_on+0x80>
  805e18:	18ffff04 	addi	r3,r3,-4
  805e1c:	18800017 	ldw	r2,0(r3)
  805e20:	103ffc26 	beq	r2,zero,805e14 <__any_on+0x2c>
  805e24:	00800044 	movi	r2,1
  805e28:	f800283a 	ret
  805e2c:	18800a0e 	bge	r3,r2,805e58 <__any_on+0x70>
  805e30:	294007cc 	andi	r5,r5,31
  805e34:	28000826 	beq	r5,zero,805e58 <__any_on+0x70>
  805e38:	18c5883a 	add	r2,r3,r3
  805e3c:	1085883a 	add	r2,r2,r2
  805e40:	208d883a 	add	r6,r4,r2
  805e44:	30c00017 	ldw	r3,0(r6)
  805e48:	1944d83a 	srl	r2,r3,r5
  805e4c:	1144983a 	sll	r2,r2,r5
  805e50:	18bff41e 	bne	r3,r2,805e24 <__any_on+0x3c>
  805e54:	003feb06 	br	805e04 <__any_on+0x1c>
  805e58:	18c5883a 	add	r2,r3,r3
  805e5c:	1085883a 	add	r2,r2,r2
  805e60:	208d883a 	add	r6,r4,r2
  805e64:	003fe706 	br	805e04 <__any_on+0x1c>
  805e68:	0005883a 	mov	r2,zero
  805e6c:	f800283a 	ret

00805e70 <_Balloc>:
  805e70:	20c01317 	ldw	r3,76(r4)
  805e74:	defffb04 	addi	sp,sp,-20
  805e78:	dcc00315 	stw	r19,12(sp)
  805e7c:	dc800215 	stw	r18,8(sp)
  805e80:	dfc00415 	stw	ra,16(sp)
  805e84:	2825883a 	mov	r18,r5
  805e88:	dc400115 	stw	r17,4(sp)
  805e8c:	dc000015 	stw	r16,0(sp)
  805e90:	2027883a 	mov	r19,r4
  805e94:	01800404 	movi	r6,16
  805e98:	01400104 	movi	r5,4
  805e9c:	18001726 	beq	r3,zero,805efc <_Balloc+0x8c>
  805ea0:	01400044 	movi	r5,1
  805ea4:	9485883a 	add	r2,r18,r18
  805ea8:	2ca2983a 	sll	r17,r5,r18
  805eac:	1085883a 	add	r2,r2,r2
  805eb0:	10c7883a 	add	r3,r2,r3
  805eb4:	1c000017 	ldw	r16,0(r3)
  805eb8:	8c4d883a 	add	r6,r17,r17
  805ebc:	318d883a 	add	r6,r6,r6
  805ec0:	9809883a 	mov	r4,r19
  805ec4:	31800504 	addi	r6,r6,20
  805ec8:	80001226 	beq	r16,zero,805f14 <_Balloc+0xa4>
  805ecc:	80800017 	ldw	r2,0(r16)
  805ed0:	18800015 	stw	r2,0(r3)
  805ed4:	80000415 	stw	zero,16(r16)
  805ed8:	80000315 	stw	zero,12(r16)
  805edc:	8005883a 	mov	r2,r16
  805ee0:	dfc00417 	ldw	ra,16(sp)
  805ee4:	dcc00317 	ldw	r19,12(sp)
  805ee8:	dc800217 	ldw	r18,8(sp)
  805eec:	dc400117 	ldw	r17,4(sp)
  805ef0:	dc000017 	ldw	r16,0(sp)
  805ef4:	dec00504 	addi	sp,sp,20
  805ef8:	f800283a 	ret
  805efc:	08075e40 	call	8075e4 <_calloc_r>
  805f00:	1007883a 	mov	r3,r2
  805f04:	0021883a 	mov	r16,zero
  805f08:	98801315 	stw	r2,76(r19)
  805f0c:	103fe41e 	bne	r2,zero,805ea0 <_Balloc+0x30>
  805f10:	003ff206 	br	805edc <_Balloc+0x6c>
  805f14:	08075e40 	call	8075e4 <_calloc_r>
  805f18:	103ff026 	beq	r2,zero,805edc <_Balloc+0x6c>
  805f1c:	1021883a 	mov	r16,r2
  805f20:	14800115 	stw	r18,4(r2)
  805f24:	14400215 	stw	r17,8(r2)
  805f28:	003fea06 	br	805ed4 <_Balloc+0x64>

00805f2c <__d2b>:
  805f2c:	defff504 	addi	sp,sp,-44
  805f30:	dcc00515 	stw	r19,20(sp)
  805f34:	04c00044 	movi	r19,1
  805f38:	dc000215 	stw	r16,8(sp)
  805f3c:	2821883a 	mov	r16,r5
  805f40:	980b883a 	mov	r5,r19
  805f44:	ddc00915 	stw	r23,36(sp)
  805f48:	dd800815 	stw	r22,32(sp)
  805f4c:	dd400715 	stw	r21,28(sp)
  805f50:	dd000615 	stw	r20,24(sp)
  805f54:	dc800415 	stw	r18,16(sp)
  805f58:	dc400315 	stw	r17,12(sp)
  805f5c:	dfc00a15 	stw	ra,40(sp)
  805f60:	3023883a 	mov	r17,r6
  805f64:	382d883a 	mov	r22,r7
  805f68:	ddc00b17 	ldw	r23,44(sp)
  805f6c:	0805e700 	call	805e70 <_Balloc>
  805f70:	1025883a 	mov	r18,r2
  805f74:	00a00034 	movhi	r2,32768
  805f78:	10bfffc4 	addi	r2,r2,-1
  805f7c:	8888703a 	and	r4,r17,r2
  805f80:	202ad53a 	srli	r21,r4,20
  805f84:	00800434 	movhi	r2,16
  805f88:	10bfffc4 	addi	r2,r2,-1
  805f8c:	8886703a 	and	r3,r17,r2
  805f90:	a829003a 	cmpeq	r20,r21,zero
  805f94:	800b883a 	mov	r5,r16
  805f98:	d8c00115 	stw	r3,4(sp)
  805f9c:	94000504 	addi	r16,r18,20
  805fa0:	a000021e 	bne	r20,zero,805fac <__d2b+0x80>
  805fa4:	18c00434 	orhi	r3,r3,16
  805fa8:	d8c00115 	stw	r3,4(sp)
  805fac:	28002726 	beq	r5,zero,80604c <__d2b+0x120>
  805fb0:	d809883a 	mov	r4,sp
  805fb4:	d9400015 	stw	r5,0(sp)
  805fb8:	08059880 	call	805988 <__lo0bits>
  805fbc:	100d883a 	mov	r6,r2
  805fc0:	10003526 	beq	r2,zero,806098 <__d2b+0x16c>
  805fc4:	d8c00117 	ldw	r3,4(sp)
  805fc8:	00800804 	movi	r2,32
  805fcc:	1185c83a 	sub	r2,r2,r6
  805fd0:	d9000017 	ldw	r4,0(sp)
  805fd4:	1886983a 	sll	r3,r3,r2
  805fd8:	1906b03a 	or	r3,r3,r4
  805fdc:	90c00515 	stw	r3,20(r18)
  805fe0:	d8c00117 	ldw	r3,4(sp)
  805fe4:	1986d83a 	srl	r3,r3,r6
  805fe8:	d8c00115 	stw	r3,4(sp)
  805fec:	180b003a 	cmpeq	r5,r3,zero
  805ff0:	00800084 	movi	r2,2
  805ff4:	114bc83a 	sub	r5,r2,r5
  805ff8:	80c00115 	stw	r3,4(r16)
  805ffc:	91400415 	stw	r5,16(r18)
  806000:	a0001a1e 	bne	r20,zero,80606c <__d2b+0x140>
  806004:	3545883a 	add	r2,r6,r21
  806008:	10bef344 	addi	r2,r2,-1075
  80600c:	00c00d44 	movi	r3,53
  806010:	b0800015 	stw	r2,0(r22)
  806014:	1987c83a 	sub	r3,r3,r6
  806018:	b8c00015 	stw	r3,0(r23)
  80601c:	9005883a 	mov	r2,r18
  806020:	dfc00a17 	ldw	ra,40(sp)
  806024:	ddc00917 	ldw	r23,36(sp)
  806028:	dd800817 	ldw	r22,32(sp)
  80602c:	dd400717 	ldw	r21,28(sp)
  806030:	dd000617 	ldw	r20,24(sp)
  806034:	dcc00517 	ldw	r19,20(sp)
  806038:	dc800417 	ldw	r18,16(sp)
  80603c:	dc400317 	ldw	r17,12(sp)
  806040:	dc000217 	ldw	r16,8(sp)
  806044:	dec00b04 	addi	sp,sp,44
  806048:	f800283a 	ret
  80604c:	d9000104 	addi	r4,sp,4
  806050:	08059880 	call	805988 <__lo0bits>
  806054:	11800804 	addi	r6,r2,32
  806058:	d8800117 	ldw	r2,4(sp)
  80605c:	94c00415 	stw	r19,16(r18)
  806060:	980b883a 	mov	r5,r19
  806064:	90800515 	stw	r2,20(r18)
  806068:	a03fe626 	beq	r20,zero,806004 <__d2b+0xd8>
  80606c:	2945883a 	add	r2,r5,r5
  806070:	1085883a 	add	r2,r2,r2
  806074:	1405883a 	add	r2,r2,r16
  806078:	113fff17 	ldw	r4,-4(r2)
  80607c:	30fef384 	addi	r3,r6,-1074
  806080:	2820917a 	slli	r16,r5,5
  806084:	b0c00015 	stw	r3,0(r22)
  806088:	08059180 	call	805918 <__hi0bits>
  80608c:	80a1c83a 	sub	r16,r16,r2
  806090:	bc000015 	stw	r16,0(r23)
  806094:	003fe106 	br	80601c <__d2b+0xf0>
  806098:	d8800017 	ldw	r2,0(sp)
  80609c:	90800515 	stw	r2,20(r18)
  8060a0:	d8c00117 	ldw	r3,4(sp)
  8060a4:	003fd106 	br	805fec <__d2b+0xc0>

008060a8 <__mdiff>:
  8060a8:	defffb04 	addi	sp,sp,-20
  8060ac:	dc000015 	stw	r16,0(sp)
  8060b0:	2821883a 	mov	r16,r5
  8060b4:	dc800215 	stw	r18,8(sp)
  8060b8:	300b883a 	mov	r5,r6
  8060bc:	2025883a 	mov	r18,r4
  8060c0:	8009883a 	mov	r4,r16
  8060c4:	dc400115 	stw	r17,4(sp)
  8060c8:	dfc00415 	stw	ra,16(sp)
  8060cc:	dcc00315 	stw	r19,12(sp)
  8060d0:	3023883a 	mov	r17,r6
  8060d4:	0805a4c0 	call	805a4c <__mcmp>
  8060d8:	10004226 	beq	r2,zero,8061e4 <__mdiff+0x13c>
  8060dc:	10005016 	blt	r2,zero,806220 <__mdiff+0x178>
  8060e0:	0027883a 	mov	r19,zero
  8060e4:	81400117 	ldw	r5,4(r16)
  8060e8:	9009883a 	mov	r4,r18
  8060ec:	0805e700 	call	805e70 <_Balloc>
  8060f0:	1019883a 	mov	r12,r2
  8060f4:	82800417 	ldw	r10,16(r16)
  8060f8:	88800417 	ldw	r2,16(r17)
  8060fc:	81800504 	addi	r6,r16,20
  806100:	5287883a 	add	r3,r10,r10
  806104:	1085883a 	add	r2,r2,r2
  806108:	18c7883a 	add	r3,r3,r3
  80610c:	1085883a 	add	r2,r2,r2
  806110:	8a000504 	addi	r8,r17,20
  806114:	64c00315 	stw	r19,12(r12)
  806118:	30db883a 	add	r13,r6,r3
  80611c:	4097883a 	add	r11,r8,r2
  806120:	61c00504 	addi	r7,r12,20
  806124:	0013883a 	mov	r9,zero
  806128:	31000017 	ldw	r4,0(r6)
  80612c:	41400017 	ldw	r5,0(r8)
  806130:	42000104 	addi	r8,r8,4
  806134:	20bfffcc 	andi	r2,r4,65535
  806138:	28ffffcc 	andi	r3,r5,65535
  80613c:	10c5c83a 	sub	r2,r2,r3
  806140:	1245883a 	add	r2,r2,r9
  806144:	2008d43a 	srli	r4,r4,16
  806148:	280ad43a 	srli	r5,r5,16
  80614c:	1007d43a 	srai	r3,r2,16
  806150:	3880000d 	sth	r2,0(r7)
  806154:	2149c83a 	sub	r4,r4,r5
  806158:	20c9883a 	add	r4,r4,r3
  80615c:	3900008d 	sth	r4,2(r7)
  806160:	31800104 	addi	r6,r6,4
  806164:	39c00104 	addi	r7,r7,4
  806168:	2013d43a 	srai	r9,r4,16
  80616c:	42ffee36 	bltu	r8,r11,806128 <__mdiff+0x80>
  806170:	33400c2e 	bgeu	r6,r13,8061a4 <__mdiff+0xfc>
  806174:	30800017 	ldw	r2,0(r6)
  806178:	31800104 	addi	r6,r6,4
  80617c:	10ffffcc 	andi	r3,r2,65535
  806180:	1a47883a 	add	r3,r3,r9
  806184:	1004d43a 	srli	r2,r2,16
  806188:	1809d43a 	srai	r4,r3,16
  80618c:	38c0000d 	sth	r3,0(r7)
  806190:	1105883a 	add	r2,r2,r4
  806194:	3880008d 	sth	r2,2(r7)
  806198:	1013d43a 	srai	r9,r2,16
  80619c:	39c00104 	addi	r7,r7,4
  8061a0:	337ff436 	bltu	r6,r13,806174 <__mdiff+0xcc>
  8061a4:	38bfff17 	ldw	r2,-4(r7)
  8061a8:	38ffff04 	addi	r3,r7,-4
  8061ac:	1000041e 	bne	r2,zero,8061c0 <__mdiff+0x118>
  8061b0:	18ffff04 	addi	r3,r3,-4
  8061b4:	18800017 	ldw	r2,0(r3)
  8061b8:	52bfffc4 	addi	r10,r10,-1
  8061bc:	103ffc26 	beq	r2,zero,8061b0 <__mdiff+0x108>
  8061c0:	6005883a 	mov	r2,r12
  8061c4:	62800415 	stw	r10,16(r12)
  8061c8:	dfc00417 	ldw	ra,16(sp)
  8061cc:	dcc00317 	ldw	r19,12(sp)
  8061d0:	dc800217 	ldw	r18,8(sp)
  8061d4:	dc400117 	ldw	r17,4(sp)
  8061d8:	dc000017 	ldw	r16,0(sp)
  8061dc:	dec00504 	addi	sp,sp,20
  8061e0:	f800283a 	ret
  8061e4:	9009883a 	mov	r4,r18
  8061e8:	000b883a 	mov	r5,zero
  8061ec:	0805e700 	call	805e70 <_Balloc>
  8061f0:	1019883a 	mov	r12,r2
  8061f4:	00800044 	movi	r2,1
  8061f8:	60800415 	stw	r2,16(r12)
  8061fc:	6005883a 	mov	r2,r12
  806200:	60000515 	stw	zero,20(r12)
  806204:	dfc00417 	ldw	ra,16(sp)
  806208:	dcc00317 	ldw	r19,12(sp)
  80620c:	dc800217 	ldw	r18,8(sp)
  806210:	dc400117 	ldw	r17,4(sp)
  806214:	dc000017 	ldw	r16,0(sp)
  806218:	dec00504 	addi	sp,sp,20
  80621c:	f800283a 	ret
  806220:	880d883a 	mov	r6,r17
  806224:	04c00044 	movi	r19,1
  806228:	8023883a 	mov	r17,r16
  80622c:	3021883a 	mov	r16,r6
  806230:	003fac06 	br	8060e4 <__mdiff+0x3c>

00806234 <__lshift>:
  806234:	defff904 	addi	sp,sp,-28
  806238:	28800417 	ldw	r2,16(r5)
  80623c:	dc000015 	stw	r16,0(sp)
  806240:	3021d17a 	srai	r16,r6,5
  806244:	28c00217 	ldw	r3,8(r5)
  806248:	10800044 	addi	r2,r2,1
  80624c:	dc400115 	stw	r17,4(sp)
  806250:	80a3883a 	add	r17,r16,r2
  806254:	dd400515 	stw	r21,20(sp)
  806258:	dd000415 	stw	r20,16(sp)
  80625c:	dc800215 	stw	r18,8(sp)
  806260:	dfc00615 	stw	ra,24(sp)
  806264:	2825883a 	mov	r18,r5
  806268:	dcc00315 	stw	r19,12(sp)
  80626c:	3029883a 	mov	r20,r6
  806270:	202b883a 	mov	r21,r4
  806274:	29400117 	ldw	r5,4(r5)
  806278:	1c40030e 	bge	r3,r17,806288 <__lshift+0x54>
  80627c:	18c7883a 	add	r3,r3,r3
  806280:	29400044 	addi	r5,r5,1
  806284:	1c7ffd16 	blt	r3,r17,80627c <__lshift+0x48>
  806288:	a809883a 	mov	r4,r21
  80628c:	0805e700 	call	805e70 <_Balloc>
  806290:	1027883a 	mov	r19,r2
  806294:	11400504 	addi	r5,r2,20
  806298:	0400090e 	bge	zero,r16,8062c0 <__lshift+0x8c>
  80629c:	2805883a 	mov	r2,r5
  8062a0:	0007883a 	mov	r3,zero
  8062a4:	18c00044 	addi	r3,r3,1
  8062a8:	10000015 	stw	zero,0(r2)
  8062ac:	10800104 	addi	r2,r2,4
  8062b0:	80fffc1e 	bne	r16,r3,8062a4 <__lshift+0x70>
  8062b4:	8405883a 	add	r2,r16,r16
  8062b8:	1085883a 	add	r2,r2,r2
  8062bc:	288b883a 	add	r5,r5,r2
  8062c0:	90800417 	ldw	r2,16(r18)
  8062c4:	91000504 	addi	r4,r18,20
  8062c8:	a18007cc 	andi	r6,r20,31
  8062cc:	1085883a 	add	r2,r2,r2
  8062d0:	1085883a 	add	r2,r2,r2
  8062d4:	208f883a 	add	r7,r4,r2
  8062d8:	30001e26 	beq	r6,zero,806354 <__lshift+0x120>
  8062dc:	00800804 	movi	r2,32
  8062e0:	1191c83a 	sub	r8,r2,r6
  8062e4:	0007883a 	mov	r3,zero
  8062e8:	20800017 	ldw	r2,0(r4)
  8062ec:	1184983a 	sll	r2,r2,r6
  8062f0:	1884b03a 	or	r2,r3,r2
  8062f4:	28800015 	stw	r2,0(r5)
  8062f8:	20c00017 	ldw	r3,0(r4)
  8062fc:	21000104 	addi	r4,r4,4
  806300:	29400104 	addi	r5,r5,4
  806304:	1a06d83a 	srl	r3,r3,r8
  806308:	21fff736 	bltu	r4,r7,8062e8 <__lshift+0xb4>
  80630c:	28c00015 	stw	r3,0(r5)
  806310:	18000126 	beq	r3,zero,806318 <__lshift+0xe4>
  806314:	8c400044 	addi	r17,r17,1
  806318:	88bfffc4 	addi	r2,r17,-1
  80631c:	98800415 	stw	r2,16(r19)
  806320:	a809883a 	mov	r4,r21
  806324:	900b883a 	mov	r5,r18
  806328:	08058f00 	call	8058f0 <_Bfree>
  80632c:	9805883a 	mov	r2,r19
  806330:	dfc00617 	ldw	ra,24(sp)
  806334:	dd400517 	ldw	r21,20(sp)
  806338:	dd000417 	ldw	r20,16(sp)
  80633c:	dcc00317 	ldw	r19,12(sp)
  806340:	dc800217 	ldw	r18,8(sp)
  806344:	dc400117 	ldw	r17,4(sp)
  806348:	dc000017 	ldw	r16,0(sp)
  80634c:	dec00704 	addi	sp,sp,28
  806350:	f800283a 	ret
  806354:	20800017 	ldw	r2,0(r4)
  806358:	21000104 	addi	r4,r4,4
  80635c:	28800015 	stw	r2,0(r5)
  806360:	29400104 	addi	r5,r5,4
  806364:	21ffec2e 	bgeu	r4,r7,806318 <__lshift+0xe4>
  806368:	20800017 	ldw	r2,0(r4)
  80636c:	21000104 	addi	r4,r4,4
  806370:	28800015 	stw	r2,0(r5)
  806374:	29400104 	addi	r5,r5,4
  806378:	21fff636 	bltu	r4,r7,806354 <__lshift+0x120>
  80637c:	003fe606 	br	806318 <__lshift+0xe4>

00806380 <__multiply>:
  806380:	defff904 	addi	sp,sp,-28
  806384:	dcc00315 	stw	r19,12(sp)
  806388:	dc800215 	stw	r18,8(sp)
  80638c:	2cc00417 	ldw	r19,16(r5)
  806390:	34800417 	ldw	r18,16(r6)
  806394:	dd000415 	stw	r20,16(sp)
  806398:	dc400115 	stw	r17,4(sp)
  80639c:	dfc00615 	stw	ra,24(sp)
  8063a0:	dd400515 	stw	r21,20(sp)
  8063a4:	dc000015 	stw	r16,0(sp)
  8063a8:	2823883a 	mov	r17,r5
  8063ac:	3029883a 	mov	r20,r6
  8063b0:	9c80040e 	bge	r19,r18,8063c4 <__multiply+0x44>
  8063b4:	9027883a 	mov	r19,r18
  8063b8:	2c800417 	ldw	r18,16(r5)
  8063bc:	2829883a 	mov	r20,r5
  8063c0:	3023883a 	mov	r17,r6
  8063c4:	88800217 	ldw	r2,8(r17)
  8063c8:	9ca1883a 	add	r16,r19,r18
  8063cc:	89400117 	ldw	r5,4(r17)
  8063d0:	1400010e 	bge	r2,r16,8063d8 <__multiply+0x58>
  8063d4:	29400044 	addi	r5,r5,1
  8063d8:	0805e700 	call	805e70 <_Balloc>
  8063dc:	102b883a 	mov	r21,r2
  8063e0:	8405883a 	add	r2,r16,r16
  8063e4:	1085883a 	add	r2,r2,r2
  8063e8:	a9000504 	addi	r4,r21,20
  8063ec:	209d883a 	add	r14,r4,r2
  8063f0:	2380042e 	bgeu	r4,r14,806404 <__multiply+0x84>
  8063f4:	2005883a 	mov	r2,r4
  8063f8:	10000015 	stw	zero,0(r2)
  8063fc:	10800104 	addi	r2,r2,4
  806400:	13bffd36 	bltu	r2,r14,8063f8 <__multiply+0x78>
  806404:	9485883a 	add	r2,r18,r18
  806408:	9cc7883a 	add	r3,r19,r19
  80640c:	a1800504 	addi	r6,r20,20
  806410:	1085883a 	add	r2,r2,r2
  806414:	8b400504 	addi	r13,r17,20
  806418:	18c7883a 	add	r3,r3,r3
  80641c:	309f883a 	add	r15,r6,r2
  806420:	68d7883a 	add	r11,r13,r3
  806424:	33c03b2e 	bgeu	r6,r15,806514 <__multiply+0x194>
  806428:	2019883a 	mov	r12,r4
  80642c:	30800017 	ldw	r2,0(r6)
  806430:	127fffcc 	andi	r9,r2,65535
  806434:	48001826 	beq	r9,zero,806498 <__multiply+0x118>
  806438:	6811883a 	mov	r8,r13
  80643c:	600f883a 	mov	r7,r12
  806440:	0015883a 	mov	r10,zero
  806444:	40c00017 	ldw	r3,0(r8)
  806448:	39400017 	ldw	r5,0(r7)
  80644c:	42000104 	addi	r8,r8,4
  806450:	193fffcc 	andi	r4,r3,65535
  806454:	4909383a 	mul	r4,r9,r4
  806458:	1806d43a 	srli	r3,r3,16
  80645c:	28bfffcc 	andi	r2,r5,65535
  806460:	5085883a 	add	r2,r10,r2
  806464:	2089883a 	add	r4,r4,r2
  806468:	48c7383a 	mul	r3,r9,r3
  80646c:	280ad43a 	srli	r5,r5,16
  806470:	2004d43a 	srli	r2,r4,16
  806474:	3900000d 	sth	r4,0(r7)
  806478:	1947883a 	add	r3,r3,r5
  80647c:	10c5883a 	add	r2,r2,r3
  806480:	3880008d 	sth	r2,2(r7)
  806484:	1014d43a 	srli	r10,r2,16
  806488:	39c00104 	addi	r7,r7,4
  80648c:	42ffed36 	bltu	r8,r11,806444 <__multiply+0xc4>
  806490:	3a800015 	stw	r10,0(r7)
  806494:	30800017 	ldw	r2,0(r6)
  806498:	1012d43a 	srli	r9,r2,16
  80649c:	48001926 	beq	r9,zero,806504 <__multiply+0x184>
  8064a0:	60800017 	ldw	r2,0(r12)
  8064a4:	6811883a 	mov	r8,r13
  8064a8:	600f883a 	mov	r7,r12
  8064ac:	0015883a 	mov	r10,zero
  8064b0:	100b883a 	mov	r5,r2
  8064b4:	41000017 	ldw	r4,0(r8)
  8064b8:	2806d43a 	srli	r3,r5,16
  8064bc:	3880000d 	sth	r2,0(r7)
  8064c0:	20bfffcc 	andi	r2,r4,65535
  8064c4:	4885383a 	mul	r2,r9,r2
  8064c8:	50c7883a 	add	r3,r10,r3
  8064cc:	2008d43a 	srli	r4,r4,16
  8064d0:	10c5883a 	add	r2,r2,r3
  8064d4:	3880008d 	sth	r2,2(r7)
  8064d8:	39c00104 	addi	r7,r7,4
  8064dc:	39400017 	ldw	r5,0(r7)
  8064e0:	4909383a 	mul	r4,r9,r4
  8064e4:	1004d43a 	srli	r2,r2,16
  8064e8:	28ffffcc 	andi	r3,r5,65535
  8064ec:	20c9883a 	add	r4,r4,r3
  8064f0:	1105883a 	add	r2,r2,r4
  8064f4:	42000104 	addi	r8,r8,4
  8064f8:	1014d43a 	srli	r10,r2,16
  8064fc:	42ffed36 	bltu	r8,r11,8064b4 <__multiply+0x134>
  806500:	38800015 	stw	r2,0(r7)
  806504:	31800104 	addi	r6,r6,4
  806508:	33c0022e 	bgeu	r6,r15,806514 <__multiply+0x194>
  80650c:	63000104 	addi	r12,r12,4
  806510:	003fc606 	br	80642c <__multiply+0xac>
  806514:	0400090e 	bge	zero,r16,80653c <__multiply+0x1bc>
  806518:	70bfff17 	ldw	r2,-4(r14)
  80651c:	70ffff04 	addi	r3,r14,-4
  806520:	10000326 	beq	r2,zero,806530 <__multiply+0x1b0>
  806524:	00000506 	br	80653c <__multiply+0x1bc>
  806528:	18800017 	ldw	r2,0(r3)
  80652c:	1000031e 	bne	r2,zero,80653c <__multiply+0x1bc>
  806530:	843fffc4 	addi	r16,r16,-1
  806534:	18ffff04 	addi	r3,r3,-4
  806538:	803ffb1e 	bne	r16,zero,806528 <__multiply+0x1a8>
  80653c:	a805883a 	mov	r2,r21
  806540:	ac000415 	stw	r16,16(r21)
  806544:	dfc00617 	ldw	ra,24(sp)
  806548:	dd400517 	ldw	r21,20(sp)
  80654c:	dd000417 	ldw	r20,16(sp)
  806550:	dcc00317 	ldw	r19,12(sp)
  806554:	dc800217 	ldw	r18,8(sp)
  806558:	dc400117 	ldw	r17,4(sp)
  80655c:	dc000017 	ldw	r16,0(sp)
  806560:	dec00704 	addi	sp,sp,28
  806564:	f800283a 	ret

00806568 <__i2b>:
  806568:	defffd04 	addi	sp,sp,-12
  80656c:	dc000015 	stw	r16,0(sp)
  806570:	04000044 	movi	r16,1
  806574:	dc800115 	stw	r18,4(sp)
  806578:	2825883a 	mov	r18,r5
  80657c:	800b883a 	mov	r5,r16
  806580:	dfc00215 	stw	ra,8(sp)
  806584:	0805e700 	call	805e70 <_Balloc>
  806588:	14000415 	stw	r16,16(r2)
  80658c:	14800515 	stw	r18,20(r2)
  806590:	dfc00217 	ldw	ra,8(sp)
  806594:	dc800117 	ldw	r18,4(sp)
  806598:	dc000017 	ldw	r16,0(sp)
  80659c:	dec00304 	addi	sp,sp,12
  8065a0:	f800283a 	ret

008065a4 <__multadd>:
  8065a4:	defffa04 	addi	sp,sp,-24
  8065a8:	dc800215 	stw	r18,8(sp)
  8065ac:	2c800417 	ldw	r18,16(r5)
  8065b0:	dd000415 	stw	r20,16(sp)
  8065b4:	dcc00315 	stw	r19,12(sp)
  8065b8:	dc000015 	stw	r16,0(sp)
  8065bc:	dfc00515 	stw	ra,20(sp)
  8065c0:	3821883a 	mov	r16,r7
  8065c4:	dc400115 	stw	r17,4(sp)
  8065c8:	2827883a 	mov	r19,r5
  8065cc:	2029883a 	mov	r20,r4
  8065d0:	2a000504 	addi	r8,r5,20
  8065d4:	000f883a 	mov	r7,zero
  8065d8:	40800017 	ldw	r2,0(r8)
  8065dc:	39c00044 	addi	r7,r7,1
  8065e0:	10ffffcc 	andi	r3,r2,65535
  8065e4:	1987383a 	mul	r3,r3,r6
  8065e8:	1004d43a 	srli	r2,r2,16
  8065ec:	1c07883a 	add	r3,r3,r16
  8065f0:	180ad43a 	srli	r5,r3,16
  8065f4:	1185383a 	mul	r2,r2,r6
  8065f8:	18ffffcc 	andi	r3,r3,65535
  8065fc:	1145883a 	add	r2,r2,r5
  806600:	1008943a 	slli	r4,r2,16
  806604:	1020d43a 	srli	r16,r2,16
  806608:	20c9883a 	add	r4,r4,r3
  80660c:	41000015 	stw	r4,0(r8)
  806610:	42000104 	addi	r8,r8,4
  806614:	3cbff016 	blt	r7,r18,8065d8 <__multadd+0x34>
  806618:	80000826 	beq	r16,zero,80663c <__multadd+0x98>
  80661c:	98800217 	ldw	r2,8(r19)
  806620:	90800f0e 	bge	r18,r2,806660 <__multadd+0xbc>
  806624:	9485883a 	add	r2,r18,r18
  806628:	1085883a 	add	r2,r2,r2
  80662c:	14c5883a 	add	r2,r2,r19
  806630:	90c00044 	addi	r3,r18,1
  806634:	14000515 	stw	r16,20(r2)
  806638:	98c00415 	stw	r3,16(r19)
  80663c:	9805883a 	mov	r2,r19
  806640:	dfc00517 	ldw	ra,20(sp)
  806644:	dd000417 	ldw	r20,16(sp)
  806648:	dcc00317 	ldw	r19,12(sp)
  80664c:	dc800217 	ldw	r18,8(sp)
  806650:	dc400117 	ldw	r17,4(sp)
  806654:	dc000017 	ldw	r16,0(sp)
  806658:	dec00604 	addi	sp,sp,24
  80665c:	f800283a 	ret
  806660:	99400117 	ldw	r5,4(r19)
  806664:	a009883a 	mov	r4,r20
  806668:	29400044 	addi	r5,r5,1
  80666c:	0805e700 	call	805e70 <_Balloc>
  806670:	99800417 	ldw	r6,16(r19)
  806674:	99400304 	addi	r5,r19,12
  806678:	11000304 	addi	r4,r2,12
  80667c:	318d883a 	add	r6,r6,r6
  806680:	318d883a 	add	r6,r6,r6
  806684:	31800204 	addi	r6,r6,8
  806688:	1023883a 	mov	r17,r2
  80668c:	08056d80 	call	8056d8 <memcpy>
  806690:	980b883a 	mov	r5,r19
  806694:	a009883a 	mov	r4,r20
  806698:	08058f00 	call	8058f0 <_Bfree>
  80669c:	8827883a 	mov	r19,r17
  8066a0:	003fe006 	br	806624 <__multadd+0x80>

008066a4 <__pow5mult>:
  8066a4:	defffa04 	addi	sp,sp,-24
  8066a8:	308000cc 	andi	r2,r6,3
  8066ac:	dd000415 	stw	r20,16(sp)
  8066b0:	dcc00315 	stw	r19,12(sp)
  8066b4:	dc000015 	stw	r16,0(sp)
  8066b8:	dfc00515 	stw	ra,20(sp)
  8066bc:	dc800215 	stw	r18,8(sp)
  8066c0:	dc400115 	stw	r17,4(sp)
  8066c4:	3021883a 	mov	r16,r6
  8066c8:	2027883a 	mov	r19,r4
  8066cc:	2829883a 	mov	r20,r5
  8066d0:	10002b1e 	bne	r2,zero,806780 <__pow5mult+0xdc>
  8066d4:	8025d0ba 	srai	r18,r16,2
  8066d8:	90001b26 	beq	r18,zero,806748 <__pow5mult+0xa4>
  8066dc:	9c001217 	ldw	r16,72(r19)
  8066e0:	8000081e 	bne	r16,zero,806704 <__pow5mult+0x60>
  8066e4:	00003006 	br	8067a8 <__pow5mult+0x104>
  8066e8:	800b883a 	mov	r5,r16
  8066ec:	800d883a 	mov	r6,r16
  8066f0:	9809883a 	mov	r4,r19
  8066f4:	90001426 	beq	r18,zero,806748 <__pow5mult+0xa4>
  8066f8:	80800017 	ldw	r2,0(r16)
  8066fc:	10001b26 	beq	r2,zero,80676c <__pow5mult+0xc8>
  806700:	1021883a 	mov	r16,r2
  806704:	9080004c 	andi	r2,r18,1
  806708:	1005003a 	cmpeq	r2,r2,zero
  80670c:	9025d07a 	srai	r18,r18,1
  806710:	800d883a 	mov	r6,r16
  806714:	9809883a 	mov	r4,r19
  806718:	a00b883a 	mov	r5,r20
  80671c:	103ff21e 	bne	r2,zero,8066e8 <__pow5mult+0x44>
  806720:	08063800 	call	806380 <__multiply>
  806724:	a00b883a 	mov	r5,r20
  806728:	9809883a 	mov	r4,r19
  80672c:	1023883a 	mov	r17,r2
  806730:	08058f00 	call	8058f0 <_Bfree>
  806734:	8829883a 	mov	r20,r17
  806738:	800b883a 	mov	r5,r16
  80673c:	800d883a 	mov	r6,r16
  806740:	9809883a 	mov	r4,r19
  806744:	903fec1e 	bne	r18,zero,8066f8 <__pow5mult+0x54>
  806748:	a005883a 	mov	r2,r20
  80674c:	dfc00517 	ldw	ra,20(sp)
  806750:	dd000417 	ldw	r20,16(sp)
  806754:	dcc00317 	ldw	r19,12(sp)
  806758:	dc800217 	ldw	r18,8(sp)
  80675c:	dc400117 	ldw	r17,4(sp)
  806760:	dc000017 	ldw	r16,0(sp)
  806764:	dec00604 	addi	sp,sp,24
  806768:	f800283a 	ret
  80676c:	08063800 	call	806380 <__multiply>
  806770:	80800015 	stw	r2,0(r16)
  806774:	1021883a 	mov	r16,r2
  806778:	10000015 	stw	zero,0(r2)
  80677c:	003fe106 	br	806704 <__pow5mult+0x60>
  806780:	1085883a 	add	r2,r2,r2
  806784:	00c02074 	movhi	r3,129
  806788:	18d87004 	addi	r3,r3,25024
  80678c:	1085883a 	add	r2,r2,r2
  806790:	10c5883a 	add	r2,r2,r3
  806794:	11bfff17 	ldw	r6,-4(r2)
  806798:	000f883a 	mov	r7,zero
  80679c:	08065a40 	call	8065a4 <__multadd>
  8067a0:	1029883a 	mov	r20,r2
  8067a4:	003fcb06 	br	8066d4 <__pow5mult+0x30>
  8067a8:	9809883a 	mov	r4,r19
  8067ac:	01409c44 	movi	r5,625
  8067b0:	08065680 	call	806568 <__i2b>
  8067b4:	98801215 	stw	r2,72(r19)
  8067b8:	1021883a 	mov	r16,r2
  8067bc:	10000015 	stw	zero,0(r2)
  8067c0:	003fd006 	br	806704 <__pow5mult+0x60>

008067c4 <__s2b>:
  8067c4:	defff904 	addi	sp,sp,-28
  8067c8:	dcc00315 	stw	r19,12(sp)
  8067cc:	dc800215 	stw	r18,8(sp)
  8067d0:	2827883a 	mov	r19,r5
  8067d4:	2025883a 	mov	r18,r4
  8067d8:	01400244 	movi	r5,9
  8067dc:	39000204 	addi	r4,r7,8
  8067e0:	dd000415 	stw	r20,16(sp)
  8067e4:	dc400115 	stw	r17,4(sp)
  8067e8:	dfc00615 	stw	ra,24(sp)
  8067ec:	dd400515 	stw	r21,20(sp)
  8067f0:	dc000015 	stw	r16,0(sp)
  8067f4:	3829883a 	mov	r20,r7
  8067f8:	3023883a 	mov	r17,r6
  8067fc:	08003740 	call	800374 <__divsi3>
  806800:	00c00044 	movi	r3,1
  806804:	1880350e 	bge	r3,r2,8068dc <__s2b+0x118>
  806808:	000b883a 	mov	r5,zero
  80680c:	18c7883a 	add	r3,r3,r3
  806810:	29400044 	addi	r5,r5,1
  806814:	18bffd16 	blt	r3,r2,80680c <__s2b+0x48>
  806818:	9009883a 	mov	r4,r18
  80681c:	0805e700 	call	805e70 <_Balloc>
  806820:	1011883a 	mov	r8,r2
  806824:	d8800717 	ldw	r2,28(sp)
  806828:	00c00044 	movi	r3,1
  80682c:	01800244 	movi	r6,9
  806830:	40800515 	stw	r2,20(r8)
  806834:	40c00415 	stw	r3,16(r8)
  806838:	3440260e 	bge	r6,r17,8068d4 <__s2b+0x110>
  80683c:	3021883a 	mov	r16,r6
  806840:	99ab883a 	add	r21,r19,r6
  806844:	9c05883a 	add	r2,r19,r16
  806848:	11c00007 	ldb	r7,0(r2)
  80684c:	400b883a 	mov	r5,r8
  806850:	9009883a 	mov	r4,r18
  806854:	39fff404 	addi	r7,r7,-48
  806858:	01800284 	movi	r6,10
  80685c:	08065a40 	call	8065a4 <__multadd>
  806860:	84000044 	addi	r16,r16,1
  806864:	1011883a 	mov	r8,r2
  806868:	8c3ff61e 	bne	r17,r16,806844 <__s2b+0x80>
  80686c:	ac45883a 	add	r2,r21,r17
  806870:	117ffe04 	addi	r5,r2,-8
  806874:	880d883a 	mov	r6,r17
  806878:	35000c0e 	bge	r6,r20,8068ac <__s2b+0xe8>
  80687c:	a185c83a 	sub	r2,r20,r6
  806880:	2821883a 	mov	r16,r5
  806884:	28a3883a 	add	r17,r5,r2
  806888:	81c00007 	ldb	r7,0(r16)
  80688c:	400b883a 	mov	r5,r8
  806890:	9009883a 	mov	r4,r18
  806894:	39fff404 	addi	r7,r7,-48
  806898:	01800284 	movi	r6,10
  80689c:	08065a40 	call	8065a4 <__multadd>
  8068a0:	84000044 	addi	r16,r16,1
  8068a4:	1011883a 	mov	r8,r2
  8068a8:	847ff71e 	bne	r16,r17,806888 <__s2b+0xc4>
  8068ac:	4005883a 	mov	r2,r8
  8068b0:	dfc00617 	ldw	ra,24(sp)
  8068b4:	dd400517 	ldw	r21,20(sp)
  8068b8:	dd000417 	ldw	r20,16(sp)
  8068bc:	dcc00317 	ldw	r19,12(sp)
  8068c0:	dc800217 	ldw	r18,8(sp)
  8068c4:	dc400117 	ldw	r17,4(sp)
  8068c8:	dc000017 	ldw	r16,0(sp)
  8068cc:	dec00704 	addi	sp,sp,28
  8068d0:	f800283a 	ret
  8068d4:	99400284 	addi	r5,r19,10
  8068d8:	003fe706 	br	806878 <__s2b+0xb4>
  8068dc:	000b883a 	mov	r5,zero
  8068e0:	003fcd06 	br	806818 <__s2b+0x54>

008068e4 <putc>:
  8068e4:	defffc04 	addi	sp,sp,-16
  8068e8:	dc800215 	stw	r18,8(sp)
  8068ec:	04802074 	movhi	r18,129
  8068f0:	949fa904 	addi	r18,r18,32420
  8068f4:	90c00017 	ldw	r3,0(r18)
  8068f8:	dc400115 	stw	r17,4(sp)
  8068fc:	dc000015 	stw	r16,0(sp)
  806900:	dfc00315 	stw	ra,12(sp)
  806904:	2023883a 	mov	r17,r4
  806908:	2821883a 	mov	r16,r5
  80690c:	18000226 	beq	r3,zero,806918 <putc+0x34>
  806910:	18800e17 	ldw	r2,56(r3)
  806914:	10001126 	beq	r2,zero,80695c <putc+0x78>
  806918:	80800217 	ldw	r2,8(r16)
  80691c:	10ffffc4 	addi	r3,r2,-1
  806920:	80c00215 	stw	r3,8(r16)
  806924:	18001316 	blt	r3,zero,806974 <putc+0x90>
  806928:	80800017 	ldw	r2,0(r16)
  80692c:	14400005 	stb	r17,0(r2)
  806930:	80c00017 	ldw	r3,0(r16)
  806934:	18800044 	addi	r2,r3,1
  806938:	18c00003 	ldbu	r3,0(r3)
  80693c:	80800015 	stw	r2,0(r16)
  806940:	1805883a 	mov	r2,r3
  806944:	dfc00317 	ldw	ra,12(sp)
  806948:	dc800217 	ldw	r18,8(sp)
  80694c:	dc400117 	ldw	r17,4(sp)
  806950:	dc000017 	ldw	r16,0(sp)
  806954:	dec00404 	addi	sp,sp,16
  806958:	f800283a 	ret
  80695c:	1809883a 	mov	r4,r3
  806960:	0803fa80 	call	803fa8 <__sinit>
  806964:	80800217 	ldw	r2,8(r16)
  806968:	10ffffc4 	addi	r3,r2,-1
  80696c:	80c00215 	stw	r3,8(r16)
  806970:	183fed0e 	bge	r3,zero,806928 <putc+0x44>
  806974:	80800617 	ldw	r2,24(r16)
  806978:	18800f16 	blt	r3,r2,8069b8 <putc+0xd4>
  80697c:	80800017 	ldw	r2,0(r16)
  806980:	14400005 	stb	r17,0(r2)
  806984:	81000017 	ldw	r4,0(r16)
  806988:	00800284 	movi	r2,10
  80698c:	20c00003 	ldbu	r3,0(r4)
  806990:	18801226 	beq	r3,r2,8069dc <putc+0xf8>
  806994:	20800044 	addi	r2,r4,1
  806998:	80800015 	stw	r2,0(r16)
  80699c:	1805883a 	mov	r2,r3
  8069a0:	dfc00317 	ldw	ra,12(sp)
  8069a4:	dc800217 	ldw	r18,8(sp)
  8069a8:	dc400117 	ldw	r17,4(sp)
  8069ac:	dc000017 	ldw	r16,0(sp)
  8069b0:	dec00404 	addi	sp,sp,16
  8069b4:	f800283a 	ret
  8069b8:	91000017 	ldw	r4,0(r18)
  8069bc:	880b883a 	mov	r5,r17
  8069c0:	800d883a 	mov	r6,r16
  8069c4:	dfc00317 	ldw	ra,12(sp)
  8069c8:	dc800217 	ldw	r18,8(sp)
  8069cc:	dc400117 	ldw	r17,4(sp)
  8069d0:	dc000017 	ldw	r16,0(sp)
  8069d4:	dec00404 	addi	sp,sp,16
  8069d8:	08074201 	jmpi	807420 <__swbuf_r>
  8069dc:	91000017 	ldw	r4,0(r18)
  8069e0:	180b883a 	mov	r5,r3
  8069e4:	003ff606 	br	8069c0 <putc+0xdc>

008069e8 <_putc_r>:
  8069e8:	defffc04 	addi	sp,sp,-16
  8069ec:	dc400215 	stw	r17,8(sp)
  8069f0:	dc000115 	stw	r16,4(sp)
  8069f4:	dfc00315 	stw	ra,12(sp)
  8069f8:	2021883a 	mov	r16,r4
  8069fc:	2823883a 	mov	r17,r5
  806a00:	20000226 	beq	r4,zero,806a0c <_putc_r+0x24>
  806a04:	20800e17 	ldw	r2,56(r4)
  806a08:	10001026 	beq	r2,zero,806a4c <_putc_r+0x64>
  806a0c:	30800217 	ldw	r2,8(r6)
  806a10:	10ffffc4 	addi	r3,r2,-1
  806a14:	30c00215 	stw	r3,8(r6)
  806a18:	18001316 	blt	r3,zero,806a68 <_putc_r+0x80>
  806a1c:	30800017 	ldw	r2,0(r6)
  806a20:	14400005 	stb	r17,0(r2)
  806a24:	30c00017 	ldw	r3,0(r6)
  806a28:	18800044 	addi	r2,r3,1
  806a2c:	18c00003 	ldbu	r3,0(r3)
  806a30:	30800015 	stw	r2,0(r6)
  806a34:	1805883a 	mov	r2,r3
  806a38:	dfc00317 	ldw	ra,12(sp)
  806a3c:	dc400217 	ldw	r17,8(sp)
  806a40:	dc000117 	ldw	r16,4(sp)
  806a44:	dec00404 	addi	sp,sp,16
  806a48:	f800283a 	ret
  806a4c:	d9800015 	stw	r6,0(sp)
  806a50:	0803fa80 	call	803fa8 <__sinit>
  806a54:	d9800017 	ldw	r6,0(sp)
  806a58:	30800217 	ldw	r2,8(r6)
  806a5c:	10ffffc4 	addi	r3,r2,-1
  806a60:	30c00215 	stw	r3,8(r6)
  806a64:	183fed0e 	bge	r3,zero,806a1c <_putc_r+0x34>
  806a68:	30800617 	ldw	r2,24(r6)
  806a6c:	18800e16 	blt	r3,r2,806aa8 <_putc_r+0xc0>
  806a70:	30800017 	ldw	r2,0(r6)
  806a74:	14400005 	stb	r17,0(r2)
  806a78:	31000017 	ldw	r4,0(r6)
  806a7c:	00800284 	movi	r2,10
  806a80:	20c00003 	ldbu	r3,0(r4)
  806a84:	18800f26 	beq	r3,r2,806ac4 <_putc_r+0xdc>
  806a88:	20800044 	addi	r2,r4,1
  806a8c:	30800015 	stw	r2,0(r6)
  806a90:	1805883a 	mov	r2,r3
  806a94:	dfc00317 	ldw	ra,12(sp)
  806a98:	dc400217 	ldw	r17,8(sp)
  806a9c:	dc000117 	ldw	r16,4(sp)
  806aa0:	dec00404 	addi	sp,sp,16
  806aa4:	f800283a 	ret
  806aa8:	8009883a 	mov	r4,r16
  806aac:	880b883a 	mov	r5,r17
  806ab0:	dfc00317 	ldw	ra,12(sp)
  806ab4:	dc400217 	ldw	r17,8(sp)
  806ab8:	dc000117 	ldw	r16,4(sp)
  806abc:	dec00404 	addi	sp,sp,16
  806ac0:	08074201 	jmpi	807420 <__swbuf_r>
  806ac4:	8009883a 	mov	r4,r16
  806ac8:	180b883a 	mov	r5,r3
  806acc:	003ff806 	br	806ab0 <_putc_r+0xc8>

00806ad0 <_realloc_r>:
  806ad0:	defff404 	addi	sp,sp,-48
  806ad4:	dd800815 	stw	r22,32(sp)
  806ad8:	dc800415 	stw	r18,16(sp)
  806adc:	dc400315 	stw	r17,12(sp)
  806ae0:	dfc00b15 	stw	ra,44(sp)
  806ae4:	df000a15 	stw	fp,40(sp)
  806ae8:	ddc00915 	stw	r23,36(sp)
  806aec:	dd400715 	stw	r21,28(sp)
  806af0:	dd000615 	stw	r20,24(sp)
  806af4:	dcc00515 	stw	r19,20(sp)
  806af8:	dc000215 	stw	r16,8(sp)
  806afc:	2825883a 	mov	r18,r5
  806b00:	3023883a 	mov	r17,r6
  806b04:	202d883a 	mov	r22,r4
  806b08:	2800c926 	beq	r5,zero,806e30 <_realloc_r+0x360>
  806b0c:	080a8e80 	call	80a8e8 <__malloc_lock>
  806b10:	943ffe04 	addi	r16,r18,-8
  806b14:	88c002c4 	addi	r3,r17,11
  806b18:	00800584 	movi	r2,22
  806b1c:	82000117 	ldw	r8,4(r16)
  806b20:	10c01b2e 	bgeu	r2,r3,806b90 <_realloc_r+0xc0>
  806b24:	00bffe04 	movi	r2,-8
  806b28:	188e703a 	and	r7,r3,r2
  806b2c:	3839883a 	mov	fp,r7
  806b30:	38001a16 	blt	r7,zero,806b9c <_realloc_r+0xcc>
  806b34:	e4401936 	bltu	fp,r17,806b9c <_realloc_r+0xcc>
  806b38:	013fff04 	movi	r4,-4
  806b3c:	4126703a 	and	r19,r8,r4
  806b40:	99c02616 	blt	r19,r7,806bdc <_realloc_r+0x10c>
  806b44:	802b883a 	mov	r21,r16
  806b48:	9829883a 	mov	r20,r19
  806b4c:	84000204 	addi	r16,r16,8
  806b50:	a80f883a 	mov	r7,r21
  806b54:	a70dc83a 	sub	r6,r20,fp
  806b58:	008003c4 	movi	r2,15
  806b5c:	1180c136 	bltu	r2,r6,806e64 <_realloc_r+0x394>
  806b60:	38800117 	ldw	r2,4(r7)
  806b64:	a549883a 	add	r4,r20,r21
  806b68:	1080004c 	andi	r2,r2,1
  806b6c:	a084b03a 	or	r2,r20,r2
  806b70:	38800115 	stw	r2,4(r7)
  806b74:	20c00117 	ldw	r3,4(r4)
  806b78:	18c00054 	ori	r3,r3,1
  806b7c:	20c00115 	stw	r3,4(r4)
  806b80:	b009883a 	mov	r4,r22
  806b84:	080a9f00 	call	80a9f0 <__malloc_unlock>
  806b88:	8023883a 	mov	r17,r16
  806b8c:	00000606 	br	806ba8 <_realloc_r+0xd8>
  806b90:	01c00404 	movi	r7,16
  806b94:	3839883a 	mov	fp,r7
  806b98:	e47fe72e 	bgeu	fp,r17,806b38 <_realloc_r+0x68>
  806b9c:	00800304 	movi	r2,12
  806ba0:	0023883a 	mov	r17,zero
  806ba4:	b0800015 	stw	r2,0(r22)
  806ba8:	8805883a 	mov	r2,r17
  806bac:	dfc00b17 	ldw	ra,44(sp)
  806bb0:	df000a17 	ldw	fp,40(sp)
  806bb4:	ddc00917 	ldw	r23,36(sp)
  806bb8:	dd800817 	ldw	r22,32(sp)
  806bbc:	dd400717 	ldw	r21,28(sp)
  806bc0:	dd000617 	ldw	r20,24(sp)
  806bc4:	dcc00517 	ldw	r19,20(sp)
  806bc8:	dc800417 	ldw	r18,16(sp)
  806bcc:	dc400317 	ldw	r17,12(sp)
  806bd0:	dc000217 	ldw	r16,8(sp)
  806bd4:	dec00c04 	addi	sp,sp,48
  806bd8:	f800283a 	ret
  806bdc:	00802074 	movhi	r2,129
  806be0:	109a1704 	addi	r2,r2,26716
  806be4:	12400217 	ldw	r9,8(r2)
  806be8:	84cd883a 	add	r6,r16,r19
  806bec:	802b883a 	mov	r21,r16
  806bf0:	3240b926 	beq	r6,r9,806ed8 <_realloc_r+0x408>
  806bf4:	31400117 	ldw	r5,4(r6)
  806bf8:	00bfff84 	movi	r2,-2
  806bfc:	2884703a 	and	r2,r5,r2
  806c00:	1185883a 	add	r2,r2,r6
  806c04:	10c00117 	ldw	r3,4(r2)
  806c08:	18c0004c 	andi	r3,r3,1
  806c0c:	1807003a 	cmpeq	r3,r3,zero
  806c10:	1800a326 	beq	r3,zero,806ea0 <_realloc_r+0x3d0>
  806c14:	2908703a 	and	r4,r5,r4
  806c18:	9929883a 	add	r20,r19,r4
  806c1c:	a1c0a30e 	bge	r20,r7,806eac <_realloc_r+0x3dc>
  806c20:	4080004c 	andi	r2,r8,1
  806c24:	1000551e 	bne	r2,zero,806d7c <_realloc_r+0x2ac>
  806c28:	80800017 	ldw	r2,0(r16)
  806c2c:	80afc83a 	sub	r23,r16,r2
  806c30:	b8c00117 	ldw	r3,4(r23)
  806c34:	00bfff04 	movi	r2,-4
  806c38:	1884703a 	and	r2,r3,r2
  806c3c:	30002e26 	beq	r6,zero,806cf8 <_realloc_r+0x228>
  806c40:	3240b926 	beq	r6,r9,806f28 <_realloc_r+0x458>
  806c44:	98a9883a 	add	r20,r19,r2
  806c48:	2509883a 	add	r4,r4,r20
  806c4c:	d9000015 	stw	r4,0(sp)
  806c50:	21c02a16 	blt	r4,r7,806cfc <_realloc_r+0x22c>
  806c54:	30800317 	ldw	r2,12(r6)
  806c58:	30c00217 	ldw	r3,8(r6)
  806c5c:	01400904 	movi	r5,36
  806c60:	99bfff04 	addi	r6,r19,-4
  806c64:	18800315 	stw	r2,12(r3)
  806c68:	10c00215 	stw	r3,8(r2)
  806c6c:	b9000317 	ldw	r4,12(r23)
  806c70:	b8800217 	ldw	r2,8(r23)
  806c74:	b82b883a 	mov	r21,r23
  806c78:	bc000204 	addi	r16,r23,8
  806c7c:	20800215 	stw	r2,8(r4)
  806c80:	11000315 	stw	r4,12(r2)
  806c84:	2980e436 	bltu	r5,r6,807018 <_realloc_r+0x548>
  806c88:	008004c4 	movi	r2,19
  806c8c:	9009883a 	mov	r4,r18
  806c90:	8011883a 	mov	r8,r16
  806c94:	11800f2e 	bgeu	r2,r6,806cd4 <_realloc_r+0x204>
  806c98:	90800017 	ldw	r2,0(r18)
  806c9c:	ba000404 	addi	r8,r23,16
  806ca0:	91000204 	addi	r4,r18,8
  806ca4:	b8800215 	stw	r2,8(r23)
  806ca8:	90c00117 	ldw	r3,4(r18)
  806cac:	008006c4 	movi	r2,27
  806cb0:	b8c00315 	stw	r3,12(r23)
  806cb4:	1180072e 	bgeu	r2,r6,806cd4 <_realloc_r+0x204>
  806cb8:	90c00217 	ldw	r3,8(r18)
  806cbc:	ba000604 	addi	r8,r23,24
  806cc0:	91000404 	addi	r4,r18,16
  806cc4:	b8c00415 	stw	r3,16(r23)
  806cc8:	90800317 	ldw	r2,12(r18)
  806ccc:	b8800515 	stw	r2,20(r23)
  806cd0:	3140e726 	beq	r6,r5,807070 <_realloc_r+0x5a0>
  806cd4:	20800017 	ldw	r2,0(r4)
  806cd8:	dd000017 	ldw	r20,0(sp)
  806cdc:	b80f883a 	mov	r7,r23
  806ce0:	40800015 	stw	r2,0(r8)
  806ce4:	20c00117 	ldw	r3,4(r4)
  806ce8:	40c00115 	stw	r3,4(r8)
  806cec:	20800217 	ldw	r2,8(r4)
  806cf0:	40800215 	stw	r2,8(r8)
  806cf4:	003f9706 	br	806b54 <_realloc_r+0x84>
  806cf8:	98a9883a 	add	r20,r19,r2
  806cfc:	a1c01f16 	blt	r20,r7,806d7c <_realloc_r+0x2ac>
  806d00:	b8c00317 	ldw	r3,12(r23)
  806d04:	b8800217 	ldw	r2,8(r23)
  806d08:	99bfff04 	addi	r6,r19,-4
  806d0c:	01400904 	movi	r5,36
  806d10:	b82b883a 	mov	r21,r23
  806d14:	18800215 	stw	r2,8(r3)
  806d18:	10c00315 	stw	r3,12(r2)
  806d1c:	bc000204 	addi	r16,r23,8
  806d20:	2980c336 	bltu	r5,r6,807030 <_realloc_r+0x560>
  806d24:	008004c4 	movi	r2,19
  806d28:	9009883a 	mov	r4,r18
  806d2c:	8011883a 	mov	r8,r16
  806d30:	11800f2e 	bgeu	r2,r6,806d70 <_realloc_r+0x2a0>
  806d34:	90800017 	ldw	r2,0(r18)
  806d38:	ba000404 	addi	r8,r23,16
  806d3c:	91000204 	addi	r4,r18,8
  806d40:	b8800215 	stw	r2,8(r23)
  806d44:	90c00117 	ldw	r3,4(r18)
  806d48:	008006c4 	movi	r2,27
  806d4c:	b8c00315 	stw	r3,12(r23)
  806d50:	1180072e 	bgeu	r2,r6,806d70 <_realloc_r+0x2a0>
  806d54:	90c00217 	ldw	r3,8(r18)
  806d58:	ba000604 	addi	r8,r23,24
  806d5c:	91000404 	addi	r4,r18,16
  806d60:	b8c00415 	stw	r3,16(r23)
  806d64:	90800317 	ldw	r2,12(r18)
  806d68:	b8800515 	stw	r2,20(r23)
  806d6c:	3140c726 	beq	r6,r5,80708c <_realloc_r+0x5bc>
  806d70:	20800017 	ldw	r2,0(r4)
  806d74:	b80f883a 	mov	r7,r23
  806d78:	003fd906 	br	806ce0 <_realloc_r+0x210>
  806d7c:	880b883a 	mov	r5,r17
  806d80:	b009883a 	mov	r4,r22
  806d84:	0804eb40 	call	804eb4 <_malloc_r>
  806d88:	1023883a 	mov	r17,r2
  806d8c:	10002526 	beq	r2,zero,806e24 <_realloc_r+0x354>
  806d90:	80800117 	ldw	r2,4(r16)
  806d94:	00ffff84 	movi	r3,-2
  806d98:	893ffe04 	addi	r4,r17,-8
  806d9c:	10c4703a 	and	r2,r2,r3
  806da0:	8085883a 	add	r2,r16,r2
  806da4:	20809526 	beq	r4,r2,806ffc <_realloc_r+0x52c>
  806da8:	99bfff04 	addi	r6,r19,-4
  806dac:	01c00904 	movi	r7,36
  806db0:	39804536 	bltu	r7,r6,806ec8 <_realloc_r+0x3f8>
  806db4:	008004c4 	movi	r2,19
  806db8:	9009883a 	mov	r4,r18
  806dbc:	880b883a 	mov	r5,r17
  806dc0:	11800f2e 	bgeu	r2,r6,806e00 <_realloc_r+0x330>
  806dc4:	90800017 	ldw	r2,0(r18)
  806dc8:	89400204 	addi	r5,r17,8
  806dcc:	91000204 	addi	r4,r18,8
  806dd0:	88800015 	stw	r2,0(r17)
  806dd4:	90c00117 	ldw	r3,4(r18)
  806dd8:	008006c4 	movi	r2,27
  806ddc:	88c00115 	stw	r3,4(r17)
  806de0:	1180072e 	bgeu	r2,r6,806e00 <_realloc_r+0x330>
  806de4:	90c00217 	ldw	r3,8(r18)
  806de8:	89400404 	addi	r5,r17,16
  806dec:	91000404 	addi	r4,r18,16
  806df0:	88c00215 	stw	r3,8(r17)
  806df4:	90800317 	ldw	r2,12(r18)
  806df8:	88800315 	stw	r2,12(r17)
  806dfc:	31c09126 	beq	r6,r7,807044 <_realloc_r+0x574>
  806e00:	20800017 	ldw	r2,0(r4)
  806e04:	28800015 	stw	r2,0(r5)
  806e08:	20c00117 	ldw	r3,4(r4)
  806e0c:	28c00115 	stw	r3,4(r5)
  806e10:	20800217 	ldw	r2,8(r4)
  806e14:	28800215 	stw	r2,8(r5)
  806e18:	900b883a 	mov	r5,r18
  806e1c:	b009883a 	mov	r4,r22
  806e20:	080432c0 	call	80432c <_free_r>
  806e24:	b009883a 	mov	r4,r22
  806e28:	080a9f00 	call	80a9f0 <__malloc_unlock>
  806e2c:	003f5e06 	br	806ba8 <_realloc_r+0xd8>
  806e30:	300b883a 	mov	r5,r6
  806e34:	dfc00b17 	ldw	ra,44(sp)
  806e38:	df000a17 	ldw	fp,40(sp)
  806e3c:	ddc00917 	ldw	r23,36(sp)
  806e40:	dd800817 	ldw	r22,32(sp)
  806e44:	dd400717 	ldw	r21,28(sp)
  806e48:	dd000617 	ldw	r20,24(sp)
  806e4c:	dcc00517 	ldw	r19,20(sp)
  806e50:	dc800417 	ldw	r18,16(sp)
  806e54:	dc400317 	ldw	r17,12(sp)
  806e58:	dc000217 	ldw	r16,8(sp)
  806e5c:	dec00c04 	addi	sp,sp,48
  806e60:	0804eb41 	jmpi	804eb4 <_malloc_r>
  806e64:	38800117 	ldw	r2,4(r7)
  806e68:	e54b883a 	add	r5,fp,r21
  806e6c:	31000054 	ori	r4,r6,1
  806e70:	1080004c 	andi	r2,r2,1
  806e74:	1704b03a 	or	r2,r2,fp
  806e78:	38800115 	stw	r2,4(r7)
  806e7c:	29000115 	stw	r4,4(r5)
  806e80:	2987883a 	add	r3,r5,r6
  806e84:	18800117 	ldw	r2,4(r3)
  806e88:	29400204 	addi	r5,r5,8
  806e8c:	b009883a 	mov	r4,r22
  806e90:	10800054 	ori	r2,r2,1
  806e94:	18800115 	stw	r2,4(r3)
  806e98:	080432c0 	call	80432c <_free_r>
  806e9c:	003f3806 	br	806b80 <_realloc_r+0xb0>
  806ea0:	000d883a 	mov	r6,zero
  806ea4:	0009883a 	mov	r4,zero
  806ea8:	003f5d06 	br	806c20 <_realloc_r+0x150>
  806eac:	30c00217 	ldw	r3,8(r6)
  806eb0:	30800317 	ldw	r2,12(r6)
  806eb4:	800f883a 	mov	r7,r16
  806eb8:	84000204 	addi	r16,r16,8
  806ebc:	10c00215 	stw	r3,8(r2)
  806ec0:	18800315 	stw	r2,12(r3)
  806ec4:	003f2306 	br	806b54 <_realloc_r+0x84>
  806ec8:	8809883a 	mov	r4,r17
  806ecc:	900b883a 	mov	r5,r18
  806ed0:	08057780 	call	805778 <memmove>
  806ed4:	003fd006 	br	806e18 <_realloc_r+0x348>
  806ed8:	30800117 	ldw	r2,4(r6)
  806edc:	e0c00404 	addi	r3,fp,16
  806ee0:	1108703a 	and	r4,r2,r4
  806ee4:	9905883a 	add	r2,r19,r4
  806ee8:	10ff4d16 	blt	r2,r3,806c20 <_realloc_r+0x150>
  806eec:	1705c83a 	sub	r2,r2,fp
  806ef0:	870b883a 	add	r5,r16,fp
  806ef4:	10800054 	ori	r2,r2,1
  806ef8:	28800115 	stw	r2,4(r5)
  806efc:	80c00117 	ldw	r3,4(r16)
  806f00:	00802074 	movhi	r2,129
  806f04:	109a1704 	addi	r2,r2,26716
  806f08:	b009883a 	mov	r4,r22
  806f0c:	18c0004c 	andi	r3,r3,1
  806f10:	e0c6b03a 	or	r3,fp,r3
  806f14:	11400215 	stw	r5,8(r2)
  806f18:	80c00115 	stw	r3,4(r16)
  806f1c:	080a9f00 	call	80a9f0 <__malloc_unlock>
  806f20:	84400204 	addi	r17,r16,8
  806f24:	003f2006 	br	806ba8 <_realloc_r+0xd8>
  806f28:	98a9883a 	add	r20,r19,r2
  806f2c:	2509883a 	add	r4,r4,r20
  806f30:	e0800404 	addi	r2,fp,16
  806f34:	d9000115 	stw	r4,4(sp)
  806f38:	20bf7016 	blt	r4,r2,806cfc <_realloc_r+0x22c>
  806f3c:	b8c00317 	ldw	r3,12(r23)
  806f40:	b8800217 	ldw	r2,8(r23)
  806f44:	99bfff04 	addi	r6,r19,-4
  806f48:	01400904 	movi	r5,36
  806f4c:	18800215 	stw	r2,8(r3)
  806f50:	10c00315 	stw	r3,12(r2)
  806f54:	bc400204 	addi	r17,r23,8
  806f58:	29804136 	bltu	r5,r6,807060 <_realloc_r+0x590>
  806f5c:	008004c4 	movi	r2,19
  806f60:	9009883a 	mov	r4,r18
  806f64:	880f883a 	mov	r7,r17
  806f68:	11800f2e 	bgeu	r2,r6,806fa8 <_realloc_r+0x4d8>
  806f6c:	90800017 	ldw	r2,0(r18)
  806f70:	b9c00404 	addi	r7,r23,16
  806f74:	91000204 	addi	r4,r18,8
  806f78:	b8800215 	stw	r2,8(r23)
  806f7c:	90c00117 	ldw	r3,4(r18)
  806f80:	008006c4 	movi	r2,27
  806f84:	b8c00315 	stw	r3,12(r23)
  806f88:	1180072e 	bgeu	r2,r6,806fa8 <_realloc_r+0x4d8>
  806f8c:	90c00217 	ldw	r3,8(r18)
  806f90:	b9c00604 	addi	r7,r23,24
  806f94:	91000404 	addi	r4,r18,16
  806f98:	b8c00415 	stw	r3,16(r23)
  806f9c:	90800317 	ldw	r2,12(r18)
  806fa0:	b8800515 	stw	r2,20(r23)
  806fa4:	31404026 	beq	r6,r5,8070a8 <_realloc_r+0x5d8>
  806fa8:	20800017 	ldw	r2,0(r4)
  806fac:	38800015 	stw	r2,0(r7)
  806fb0:	20c00117 	ldw	r3,4(r4)
  806fb4:	38c00115 	stw	r3,4(r7)
  806fb8:	20800217 	ldw	r2,8(r4)
  806fbc:	38800215 	stw	r2,8(r7)
  806fc0:	d8c00117 	ldw	r3,4(sp)
  806fc4:	bf0b883a 	add	r5,r23,fp
  806fc8:	b009883a 	mov	r4,r22
  806fcc:	1f05c83a 	sub	r2,r3,fp
  806fd0:	10800054 	ori	r2,r2,1
  806fd4:	28800115 	stw	r2,4(r5)
  806fd8:	b8c00117 	ldw	r3,4(r23)
  806fdc:	00802074 	movhi	r2,129
  806fe0:	109a1704 	addi	r2,r2,26716
  806fe4:	11400215 	stw	r5,8(r2)
  806fe8:	18c0004c 	andi	r3,r3,1
  806fec:	e0c6b03a 	or	r3,fp,r3
  806ff0:	b8c00115 	stw	r3,4(r23)
  806ff4:	080a9f00 	call	80a9f0 <__malloc_unlock>
  806ff8:	003eeb06 	br	806ba8 <_realloc_r+0xd8>
  806ffc:	20800117 	ldw	r2,4(r4)
  807000:	00ffff04 	movi	r3,-4
  807004:	800f883a 	mov	r7,r16
  807008:	10c4703a 	and	r2,r2,r3
  80700c:	98a9883a 	add	r20,r19,r2
  807010:	84000204 	addi	r16,r16,8
  807014:	003ecf06 	br	806b54 <_realloc_r+0x84>
  807018:	900b883a 	mov	r5,r18
  80701c:	8009883a 	mov	r4,r16
  807020:	08057780 	call	805778 <memmove>
  807024:	dd000017 	ldw	r20,0(sp)
  807028:	b80f883a 	mov	r7,r23
  80702c:	003ec906 	br	806b54 <_realloc_r+0x84>
  807030:	900b883a 	mov	r5,r18
  807034:	8009883a 	mov	r4,r16
  807038:	08057780 	call	805778 <memmove>
  80703c:	b80f883a 	mov	r7,r23
  807040:	003ec406 	br	806b54 <_realloc_r+0x84>
  807044:	90c00417 	ldw	r3,16(r18)
  807048:	89400604 	addi	r5,r17,24
  80704c:	91000604 	addi	r4,r18,24
  807050:	88c00415 	stw	r3,16(r17)
  807054:	90800517 	ldw	r2,20(r18)
  807058:	88800515 	stw	r2,20(r17)
  80705c:	003f6806 	br	806e00 <_realloc_r+0x330>
  807060:	900b883a 	mov	r5,r18
  807064:	8809883a 	mov	r4,r17
  807068:	08057780 	call	805778 <memmove>
  80706c:	003fd406 	br	806fc0 <_realloc_r+0x4f0>
  807070:	90c00417 	ldw	r3,16(r18)
  807074:	91000604 	addi	r4,r18,24
  807078:	ba000804 	addi	r8,r23,32
  80707c:	b8c00615 	stw	r3,24(r23)
  807080:	90800517 	ldw	r2,20(r18)
  807084:	b8800715 	stw	r2,28(r23)
  807088:	003f1206 	br	806cd4 <_realloc_r+0x204>
  80708c:	90c00417 	ldw	r3,16(r18)
  807090:	91000604 	addi	r4,r18,24
  807094:	ba000804 	addi	r8,r23,32
  807098:	b8c00615 	stw	r3,24(r23)
  80709c:	90800517 	ldw	r2,20(r18)
  8070a0:	b8800715 	stw	r2,28(r23)
  8070a4:	003f3206 	br	806d70 <_realloc_r+0x2a0>
  8070a8:	90c00417 	ldw	r3,16(r18)
  8070ac:	91000604 	addi	r4,r18,24
  8070b0:	b9c00804 	addi	r7,r23,32
  8070b4:	b8c00615 	stw	r3,24(r23)
  8070b8:	90800517 	ldw	r2,20(r18)
  8070bc:	b8800715 	stw	r2,28(r23)
  8070c0:	003fb906 	br	806fa8 <_realloc_r+0x4d8>

008070c4 <__isinfd>:
  8070c4:	200d883a 	mov	r6,r4
  8070c8:	0109c83a 	sub	r4,zero,r4
  8070cc:	2188b03a 	or	r4,r4,r6
  8070d0:	2008d7fa 	srli	r4,r4,31
  8070d4:	00a00034 	movhi	r2,32768
  8070d8:	10bfffc4 	addi	r2,r2,-1
  8070dc:	1144703a 	and	r2,r2,r5
  8070e0:	2088b03a 	or	r4,r4,r2
  8070e4:	009ffc34 	movhi	r2,32752
  8070e8:	1105c83a 	sub	r2,r2,r4
  8070ec:	0087c83a 	sub	r3,zero,r2
  8070f0:	10c4b03a 	or	r2,r2,r3
  8070f4:	1004d7fa 	srli	r2,r2,31
  8070f8:	00c00044 	movi	r3,1
  8070fc:	1885c83a 	sub	r2,r3,r2
  807100:	f800283a 	ret

00807104 <__isnand>:
  807104:	200d883a 	mov	r6,r4
  807108:	0109c83a 	sub	r4,zero,r4
  80710c:	2188b03a 	or	r4,r4,r6
  807110:	2008d7fa 	srli	r4,r4,31
  807114:	00a00034 	movhi	r2,32768
  807118:	10bfffc4 	addi	r2,r2,-1
  80711c:	1144703a 	and	r2,r2,r5
  807120:	2088b03a 	or	r4,r4,r2
  807124:	009ffc34 	movhi	r2,32752
  807128:	1105c83a 	sub	r2,r2,r4
  80712c:	1004d7fa 	srli	r2,r2,31
  807130:	f800283a 	ret

00807134 <_sbrk_r>:
  807134:	defffd04 	addi	sp,sp,-12
  807138:	dc000015 	stw	r16,0(sp)
  80713c:	040020b4 	movhi	r16,130
  807140:	8426a204 	addi	r16,r16,-25976
  807144:	dc400115 	stw	r17,4(sp)
  807148:	80000015 	stw	zero,0(r16)
  80714c:	2023883a 	mov	r17,r4
  807150:	2809883a 	mov	r4,r5
  807154:	dfc00215 	stw	ra,8(sp)
  807158:	080a5a40 	call	80a5a4 <sbrk>
  80715c:	1007883a 	mov	r3,r2
  807160:	00bfffc4 	movi	r2,-1
  807164:	18800626 	beq	r3,r2,807180 <_sbrk_r+0x4c>
  807168:	1805883a 	mov	r2,r3
  80716c:	dfc00217 	ldw	ra,8(sp)
  807170:	dc400117 	ldw	r17,4(sp)
  807174:	dc000017 	ldw	r16,0(sp)
  807178:	dec00304 	addi	sp,sp,12
  80717c:	f800283a 	ret
  807180:	80800017 	ldw	r2,0(r16)
  807184:	103ff826 	beq	r2,zero,807168 <_sbrk_r+0x34>
  807188:	88800015 	stw	r2,0(r17)
  80718c:	1805883a 	mov	r2,r3
  807190:	dfc00217 	ldw	ra,8(sp)
  807194:	dc400117 	ldw	r17,4(sp)
  807198:	dc000017 	ldw	r16,0(sp)
  80719c:	dec00304 	addi	sp,sp,12
  8071a0:	f800283a 	ret

008071a4 <__sclose>:
  8071a4:	2940038f 	ldh	r5,14(r5)
  8071a8:	08076981 	jmpi	807698 <_close_r>

008071ac <__sseek>:
  8071ac:	defffe04 	addi	sp,sp,-8
  8071b0:	dc000015 	stw	r16,0(sp)
  8071b4:	2821883a 	mov	r16,r5
  8071b8:	2940038f 	ldh	r5,14(r5)
  8071bc:	dfc00115 	stw	ra,4(sp)
  8071c0:	08079100 	call	807910 <_lseek_r>
  8071c4:	1007883a 	mov	r3,r2
  8071c8:	00bfffc4 	movi	r2,-1
  8071cc:	18800926 	beq	r3,r2,8071f4 <__sseek+0x48>
  8071d0:	8080030b 	ldhu	r2,12(r16)
  8071d4:	80c01415 	stw	r3,80(r16)
  8071d8:	10840014 	ori	r2,r2,4096
  8071dc:	8080030d 	sth	r2,12(r16)
  8071e0:	1805883a 	mov	r2,r3
  8071e4:	dfc00117 	ldw	ra,4(sp)
  8071e8:	dc000017 	ldw	r16,0(sp)
  8071ec:	dec00204 	addi	sp,sp,8
  8071f0:	f800283a 	ret
  8071f4:	8080030b 	ldhu	r2,12(r16)
  8071f8:	10bbffcc 	andi	r2,r2,61439
  8071fc:	8080030d 	sth	r2,12(r16)
  807200:	1805883a 	mov	r2,r3
  807204:	dfc00117 	ldw	ra,4(sp)
  807208:	dc000017 	ldw	r16,0(sp)
  80720c:	dec00204 	addi	sp,sp,8
  807210:	f800283a 	ret

00807214 <__swrite>:
  807214:	2880030b 	ldhu	r2,12(r5)
  807218:	defffb04 	addi	sp,sp,-20
  80721c:	dcc00315 	stw	r19,12(sp)
  807220:	1080400c 	andi	r2,r2,256
  807224:	dc800215 	stw	r18,8(sp)
  807228:	dc400115 	stw	r17,4(sp)
  80722c:	dc000015 	stw	r16,0(sp)
  807230:	3027883a 	mov	r19,r6
  807234:	3825883a 	mov	r18,r7
  807238:	dfc00415 	stw	ra,16(sp)
  80723c:	2821883a 	mov	r16,r5
  807240:	000d883a 	mov	r6,zero
  807244:	01c00084 	movi	r7,2
  807248:	2023883a 	mov	r17,r4
  80724c:	10000226 	beq	r2,zero,807258 <__swrite+0x44>
  807250:	2940038f 	ldh	r5,14(r5)
  807254:	08079100 	call	807910 <_lseek_r>
  807258:	8080030b 	ldhu	r2,12(r16)
  80725c:	8140038f 	ldh	r5,14(r16)
  807260:	8809883a 	mov	r4,r17
  807264:	10bbffcc 	andi	r2,r2,61439
  807268:	980d883a 	mov	r6,r19
  80726c:	900f883a 	mov	r7,r18
  807270:	8080030d 	sth	r2,12(r16)
  807274:	dfc00417 	ldw	ra,16(sp)
  807278:	dcc00317 	ldw	r19,12(sp)
  80727c:	dc800217 	ldw	r18,8(sp)
  807280:	dc400117 	ldw	r17,4(sp)
  807284:	dc000017 	ldw	r16,0(sp)
  807288:	dec00504 	addi	sp,sp,20
  80728c:	080756c1 	jmpi	80756c <_write_r>

00807290 <__sread>:
  807290:	defffe04 	addi	sp,sp,-8
  807294:	dc000015 	stw	r16,0(sp)
  807298:	2821883a 	mov	r16,r5
  80729c:	2940038f 	ldh	r5,14(r5)
  8072a0:	dfc00115 	stw	ra,4(sp)
  8072a4:	08079880 	call	807988 <_read_r>
  8072a8:	1007883a 	mov	r3,r2
  8072ac:	10000816 	blt	r2,zero,8072d0 <__sread+0x40>
  8072b0:	80801417 	ldw	r2,80(r16)
  8072b4:	10c5883a 	add	r2,r2,r3
  8072b8:	80801415 	stw	r2,80(r16)
  8072bc:	1805883a 	mov	r2,r3
  8072c0:	dfc00117 	ldw	ra,4(sp)
  8072c4:	dc000017 	ldw	r16,0(sp)
  8072c8:	dec00204 	addi	sp,sp,8
  8072cc:	f800283a 	ret
  8072d0:	8080030b 	ldhu	r2,12(r16)
  8072d4:	10bbffcc 	andi	r2,r2,61439
  8072d8:	8080030d 	sth	r2,12(r16)
  8072dc:	1805883a 	mov	r2,r3
  8072e0:	dfc00117 	ldw	ra,4(sp)
  8072e4:	dc000017 	ldw	r16,0(sp)
  8072e8:	dec00204 	addi	sp,sp,8
  8072ec:	f800283a 	ret

008072f0 <strcmp>:
  8072f0:	2144b03a 	or	r2,r4,r5
  8072f4:	108000cc 	andi	r2,r2,3
  8072f8:	10001d1e 	bne	r2,zero,807370 <strcmp+0x80>
  8072fc:	200f883a 	mov	r7,r4
  807300:	28800017 	ldw	r2,0(r5)
  807304:	21000017 	ldw	r4,0(r4)
  807308:	280d883a 	mov	r6,r5
  80730c:	2080161e 	bne	r4,r2,807368 <strcmp+0x78>
  807310:	023fbff4 	movhi	r8,65279
  807314:	423fbfc4 	addi	r8,r8,-257
  807318:	2207883a 	add	r3,r4,r8
  80731c:	01602074 	movhi	r5,32897
  807320:	29602004 	addi	r5,r5,-32640
  807324:	1946703a 	and	r3,r3,r5
  807328:	0104303a 	nor	r2,zero,r4
  80732c:	10c4703a 	and	r2,r2,r3
  807330:	10001c1e 	bne	r2,zero,8073a4 <strcmp+0xb4>
  807334:	4013883a 	mov	r9,r8
  807338:	2811883a 	mov	r8,r5
  80733c:	00000106 	br	807344 <strcmp+0x54>
  807340:	1800181e 	bne	r3,zero,8073a4 <strcmp+0xb4>
  807344:	39c00104 	addi	r7,r7,4
  807348:	39000017 	ldw	r4,0(r7)
  80734c:	31800104 	addi	r6,r6,4
  807350:	31400017 	ldw	r5,0(r6)
  807354:	2245883a 	add	r2,r4,r9
  807358:	1204703a 	and	r2,r2,r8
  80735c:	0106303a 	nor	r3,zero,r4
  807360:	1886703a 	and	r3,r3,r2
  807364:	217ff626 	beq	r4,r5,807340 <strcmp+0x50>
  807368:	3809883a 	mov	r4,r7
  80736c:	300b883a 	mov	r5,r6
  807370:	20c00007 	ldb	r3,0(r4)
  807374:	1800051e 	bne	r3,zero,80738c <strcmp+0x9c>
  807378:	00000606 	br	807394 <strcmp+0xa4>
  80737c:	21000044 	addi	r4,r4,1
  807380:	20c00007 	ldb	r3,0(r4)
  807384:	29400044 	addi	r5,r5,1
  807388:	18000226 	beq	r3,zero,807394 <strcmp+0xa4>
  80738c:	28800007 	ldb	r2,0(r5)
  807390:	18bffa26 	beq	r3,r2,80737c <strcmp+0x8c>
  807394:	20c00003 	ldbu	r3,0(r4)
  807398:	28800003 	ldbu	r2,0(r5)
  80739c:	1885c83a 	sub	r2,r3,r2
  8073a0:	f800283a 	ret
  8073a4:	0005883a 	mov	r2,zero
  8073a8:	f800283a 	ret

008073ac <strlen>:
  8073ac:	208000cc 	andi	r2,r4,3
  8073b0:	2011883a 	mov	r8,r4
  8073b4:	1000161e 	bne	r2,zero,807410 <strlen+0x64>
  8073b8:	20c00017 	ldw	r3,0(r4)
  8073bc:	017fbff4 	movhi	r5,65279
  8073c0:	297fbfc4 	addi	r5,r5,-257
  8073c4:	01e02074 	movhi	r7,32897
  8073c8:	39e02004 	addi	r7,r7,-32640
  8073cc:	1945883a 	add	r2,r3,r5
  8073d0:	11c4703a 	and	r2,r2,r7
  8073d4:	00c6303a 	nor	r3,zero,r3
  8073d8:	1886703a 	and	r3,r3,r2
  8073dc:	18000c1e 	bne	r3,zero,807410 <strlen+0x64>
  8073e0:	280d883a 	mov	r6,r5
  8073e4:	380b883a 	mov	r5,r7
  8073e8:	21000104 	addi	r4,r4,4
  8073ec:	20800017 	ldw	r2,0(r4)
  8073f0:	1187883a 	add	r3,r2,r6
  8073f4:	1946703a 	and	r3,r3,r5
  8073f8:	0084303a 	nor	r2,zero,r2
  8073fc:	10c4703a 	and	r2,r2,r3
  807400:	103ff926 	beq	r2,zero,8073e8 <strlen+0x3c>
  807404:	20800007 	ldb	r2,0(r4)
  807408:	10000326 	beq	r2,zero,807418 <strlen+0x6c>
  80740c:	21000044 	addi	r4,r4,1
  807410:	20800007 	ldb	r2,0(r4)
  807414:	103ffd1e 	bne	r2,zero,80740c <strlen+0x60>
  807418:	2205c83a 	sub	r2,r4,r8
  80741c:	f800283a 	ret

00807420 <__swbuf_r>:
  807420:	defffc04 	addi	sp,sp,-16
  807424:	dc400215 	stw	r17,8(sp)
  807428:	dc000115 	stw	r16,4(sp)
  80742c:	dfc00315 	stw	ra,12(sp)
  807430:	2023883a 	mov	r17,r4
  807434:	2821883a 	mov	r16,r5
  807438:	20000226 	beq	r4,zero,807444 <__swbuf_r+0x24>
  80743c:	20800e17 	ldw	r2,56(r4)
  807440:	10002f26 	beq	r2,zero,807500 <__swbuf_r+0xe0>
  807444:	3080030b 	ldhu	r2,12(r6)
  807448:	30c00617 	ldw	r3,24(r6)
  80744c:	1080020c 	andi	r2,r2,8
  807450:	30c00215 	stw	r3,8(r6)
  807454:	10002226 	beq	r2,zero,8074e0 <__swbuf_r+0xc0>
  807458:	30c00417 	ldw	r3,16(r6)
  80745c:	18002026 	beq	r3,zero,8074e0 <__swbuf_r+0xc0>
  807460:	31000017 	ldw	r4,0(r6)
  807464:	30800517 	ldw	r2,20(r6)
  807468:	20c7c83a 	sub	r3,r4,r3
  80746c:	18802f0e 	bge	r3,r2,80752c <__swbuf_r+0x10c>
  807470:	19400044 	addi	r5,r3,1
  807474:	30800217 	ldw	r2,8(r6)
  807478:	84003fcc 	andi	r16,r16,255
  80747c:	20c00044 	addi	r3,r4,1
  807480:	10bfffc4 	addi	r2,r2,-1
  807484:	30800215 	stw	r2,8(r6)
  807488:	24000005 	stb	r16,0(r4)
  80748c:	30800517 	ldw	r2,20(r6)
  807490:	30c00015 	stw	r3,0(r6)
  807494:	11400c26 	beq	r2,r5,8074c8 <__swbuf_r+0xa8>
  807498:	3080030b 	ldhu	r2,12(r6)
  80749c:	1080004c 	andi	r2,r2,1
  8074a0:	1005003a 	cmpeq	r2,r2,zero
  8074a4:	10000626 	beq	r2,zero,8074c0 <__swbuf_r+0xa0>
  8074a8:	8005883a 	mov	r2,r16
  8074ac:	dfc00317 	ldw	ra,12(sp)
  8074b0:	dc400217 	ldw	r17,8(sp)
  8074b4:	dc000117 	ldw	r16,4(sp)
  8074b8:	dec00404 	addi	sp,sp,16
  8074bc:	f800283a 	ret
  8074c0:	00800284 	movi	r2,10
  8074c4:	80bff81e 	bne	r16,r2,8074a8 <__swbuf_r+0x88>
  8074c8:	8809883a 	mov	r4,r17
  8074cc:	300b883a 	mov	r5,r6
  8074d0:	0803d100 	call	803d10 <_fflush_r>
  8074d4:	103ff426 	beq	r2,zero,8074a8 <__swbuf_r+0x88>
  8074d8:	043fffc4 	movi	r16,-1
  8074dc:	003ff206 	br	8074a8 <__swbuf_r+0x88>
  8074e0:	300b883a 	mov	r5,r6
  8074e4:	8809883a 	mov	r4,r17
  8074e8:	d9800015 	stw	r6,0(sp)
  8074ec:	08024080 	call	802408 <__swsetup_r>
  8074f0:	d9800017 	ldw	r6,0(sp)
  8074f4:	1000061e 	bne	r2,zero,807510 <__swbuf_r+0xf0>
  8074f8:	30c00417 	ldw	r3,16(r6)
  8074fc:	003fd806 	br	807460 <__swbuf_r+0x40>
  807500:	d9800015 	stw	r6,0(sp)
  807504:	0803fa80 	call	803fa8 <__sinit>
  807508:	d9800017 	ldw	r6,0(sp)
  80750c:	003fcd06 	br	807444 <__swbuf_r+0x24>
  807510:	3080030b 	ldhu	r2,12(r6)
  807514:	00c00244 	movi	r3,9
  807518:	043fffc4 	movi	r16,-1
  80751c:	10801014 	ori	r2,r2,64
  807520:	3080030d 	sth	r2,12(r6)
  807524:	88c00015 	stw	r3,0(r17)
  807528:	003fdf06 	br	8074a8 <__swbuf_r+0x88>
  80752c:	300b883a 	mov	r5,r6
  807530:	8809883a 	mov	r4,r17
  807534:	d9800015 	stw	r6,0(sp)
  807538:	0803d100 	call	803d10 <_fflush_r>
  80753c:	d9800017 	ldw	r6,0(sp)
  807540:	103fe51e 	bne	r2,zero,8074d8 <__swbuf_r+0xb8>
  807544:	31000017 	ldw	r4,0(r6)
  807548:	01400044 	movi	r5,1
  80754c:	003fc906 	br	807474 <__swbuf_r+0x54>

00807550 <__swbuf>:
  807550:	01802074 	movhi	r6,129
  807554:	319fa904 	addi	r6,r6,32420
  807558:	2007883a 	mov	r3,r4
  80755c:	31000017 	ldw	r4,0(r6)
  807560:	280d883a 	mov	r6,r5
  807564:	180b883a 	mov	r5,r3
  807568:	08074201 	jmpi	807420 <__swbuf_r>

0080756c <_write_r>:
  80756c:	defffd04 	addi	sp,sp,-12
  807570:	dc000015 	stw	r16,0(sp)
  807574:	040020b4 	movhi	r16,130
  807578:	8426a204 	addi	r16,r16,-25976
  80757c:	dc400115 	stw	r17,4(sp)
  807580:	80000015 	stw	zero,0(r16)
  807584:	2023883a 	mov	r17,r4
  807588:	2809883a 	mov	r4,r5
  80758c:	300b883a 	mov	r5,r6
  807590:	380d883a 	mov	r6,r7
  807594:	dfc00215 	stw	ra,8(sp)
  807598:	080a6600 	call	80a660 <write>
  80759c:	1007883a 	mov	r3,r2
  8075a0:	00bfffc4 	movi	r2,-1
  8075a4:	18800626 	beq	r3,r2,8075c0 <_write_r+0x54>
  8075a8:	1805883a 	mov	r2,r3
  8075ac:	dfc00217 	ldw	ra,8(sp)
  8075b0:	dc400117 	ldw	r17,4(sp)
  8075b4:	dc000017 	ldw	r16,0(sp)
  8075b8:	dec00304 	addi	sp,sp,12
  8075bc:	f800283a 	ret
  8075c0:	80800017 	ldw	r2,0(r16)
  8075c4:	103ff826 	beq	r2,zero,8075a8 <_write_r+0x3c>
  8075c8:	88800015 	stw	r2,0(r17)
  8075cc:	1805883a 	mov	r2,r3
  8075d0:	dfc00217 	ldw	ra,8(sp)
  8075d4:	dc400117 	ldw	r17,4(sp)
  8075d8:	dc000017 	ldw	r16,0(sp)
  8075dc:	dec00304 	addi	sp,sp,12
  8075e0:	f800283a 	ret

008075e4 <_calloc_r>:
  8075e4:	298b383a 	mul	r5,r5,r6
  8075e8:	defffe04 	addi	sp,sp,-8
  8075ec:	dc000015 	stw	r16,0(sp)
  8075f0:	dfc00115 	stw	ra,4(sp)
  8075f4:	0804eb40 	call	804eb4 <_malloc_r>
  8075f8:	1021883a 	mov	r16,r2
  8075fc:	01c00904 	movi	r7,36
  807600:	10000d26 	beq	r2,zero,807638 <_calloc_r+0x54>
  807604:	10ffff17 	ldw	r3,-4(r2)
  807608:	1009883a 	mov	r4,r2
  80760c:	00bfff04 	movi	r2,-4
  807610:	1886703a 	and	r3,r3,r2
  807614:	1887883a 	add	r3,r3,r2
  807618:	180d883a 	mov	r6,r3
  80761c:	000b883a 	mov	r5,zero
  807620:	38c01736 	bltu	r7,r3,807680 <_calloc_r+0x9c>
  807624:	008004c4 	movi	r2,19
  807628:	10c00836 	bltu	r2,r3,80764c <_calloc_r+0x68>
  80762c:	20000215 	stw	zero,8(r4)
  807630:	20000015 	stw	zero,0(r4)
  807634:	20000115 	stw	zero,4(r4)
  807638:	8005883a 	mov	r2,r16
  80763c:	dfc00117 	ldw	ra,4(sp)
  807640:	dc000017 	ldw	r16,0(sp)
  807644:	dec00204 	addi	sp,sp,8
  807648:	f800283a 	ret
  80764c:	008006c4 	movi	r2,27
  807650:	80000015 	stw	zero,0(r16)
  807654:	80000115 	stw	zero,4(r16)
  807658:	81000204 	addi	r4,r16,8
  80765c:	10fff32e 	bgeu	r2,r3,80762c <_calloc_r+0x48>
  807660:	80000215 	stw	zero,8(r16)
  807664:	80000315 	stw	zero,12(r16)
  807668:	81000404 	addi	r4,r16,16
  80766c:	19ffef1e 	bne	r3,r7,80762c <_calloc_r+0x48>
  807670:	81000604 	addi	r4,r16,24
  807674:	80000415 	stw	zero,16(r16)
  807678:	80000515 	stw	zero,20(r16)
  80767c:	003feb06 	br	80762c <_calloc_r+0x48>
  807680:	08058580 	call	805858 <memset>
  807684:	8005883a 	mov	r2,r16
  807688:	dfc00117 	ldw	ra,4(sp)
  80768c:	dc000017 	ldw	r16,0(sp)
  807690:	dec00204 	addi	sp,sp,8
  807694:	f800283a 	ret

00807698 <_close_r>:
  807698:	defffd04 	addi	sp,sp,-12
  80769c:	dc000015 	stw	r16,0(sp)
  8076a0:	040020b4 	movhi	r16,130
  8076a4:	8426a204 	addi	r16,r16,-25976
  8076a8:	dc400115 	stw	r17,4(sp)
  8076ac:	80000015 	stw	zero,0(r16)
  8076b0:	2023883a 	mov	r17,r4
  8076b4:	2809883a 	mov	r4,r5
  8076b8:	dfc00215 	stw	ra,8(sp)
  8076bc:	0809ce40 	call	809ce4 <close>
  8076c0:	1007883a 	mov	r3,r2
  8076c4:	00bfffc4 	movi	r2,-1
  8076c8:	18800626 	beq	r3,r2,8076e4 <_close_r+0x4c>
  8076cc:	1805883a 	mov	r2,r3
  8076d0:	dfc00217 	ldw	ra,8(sp)
  8076d4:	dc400117 	ldw	r17,4(sp)
  8076d8:	dc000017 	ldw	r16,0(sp)
  8076dc:	dec00304 	addi	sp,sp,12
  8076e0:	f800283a 	ret
  8076e4:	80800017 	ldw	r2,0(r16)
  8076e8:	103ff826 	beq	r2,zero,8076cc <_close_r+0x34>
  8076ec:	88800015 	stw	r2,0(r17)
  8076f0:	1805883a 	mov	r2,r3
  8076f4:	dfc00217 	ldw	ra,8(sp)
  8076f8:	dc400117 	ldw	r17,4(sp)
  8076fc:	dc000017 	ldw	r16,0(sp)
  807700:	dec00304 	addi	sp,sp,12
  807704:	f800283a 	ret

00807708 <_fclose_r>:
  807708:	defffc04 	addi	sp,sp,-16
  80770c:	dc400115 	stw	r17,4(sp)
  807710:	dc000015 	stw	r16,0(sp)
  807714:	dfc00315 	stw	ra,12(sp)
  807718:	dc800215 	stw	r18,8(sp)
  80771c:	2821883a 	mov	r16,r5
  807720:	2023883a 	mov	r17,r4
  807724:	28002926 	beq	r5,zero,8077cc <_fclose_r+0xc4>
  807728:	0803f980 	call	803f98 <__sfp_lock_acquire>
  80772c:	88000226 	beq	r17,zero,807738 <_fclose_r+0x30>
  807730:	88800e17 	ldw	r2,56(r17)
  807734:	10002d26 	beq	r2,zero,8077ec <_fclose_r+0xe4>
  807738:	8080030f 	ldh	r2,12(r16)
  80773c:	10002226 	beq	r2,zero,8077c8 <_fclose_r+0xc0>
  807740:	8809883a 	mov	r4,r17
  807744:	800b883a 	mov	r5,r16
  807748:	0803d100 	call	803d10 <_fflush_r>
  80774c:	1025883a 	mov	r18,r2
  807750:	80800b17 	ldw	r2,44(r16)
  807754:	10000426 	beq	r2,zero,807768 <_fclose_r+0x60>
  807758:	81400717 	ldw	r5,28(r16)
  80775c:	8809883a 	mov	r4,r17
  807760:	103ee83a 	callr	r2
  807764:	10002a16 	blt	r2,zero,807810 <_fclose_r+0x108>
  807768:	8080030b 	ldhu	r2,12(r16)
  80776c:	1080200c 	andi	r2,r2,128
  807770:	1000231e 	bne	r2,zero,807800 <_fclose_r+0xf8>
  807774:	81400c17 	ldw	r5,48(r16)
  807778:	28000526 	beq	r5,zero,807790 <_fclose_r+0x88>
  80777c:	80801004 	addi	r2,r16,64
  807780:	28800226 	beq	r5,r2,80778c <_fclose_r+0x84>
  807784:	8809883a 	mov	r4,r17
  807788:	080432c0 	call	80432c <_free_r>
  80778c:	80000c15 	stw	zero,48(r16)
  807790:	81401117 	ldw	r5,68(r16)
  807794:	28000326 	beq	r5,zero,8077a4 <_fclose_r+0x9c>
  807798:	8809883a 	mov	r4,r17
  80779c:	080432c0 	call	80432c <_free_r>
  8077a0:	80001115 	stw	zero,68(r16)
  8077a4:	8000030d 	sth	zero,12(r16)
  8077a8:	0803f9c0 	call	803f9c <__sfp_lock_release>
  8077ac:	9005883a 	mov	r2,r18
  8077b0:	dfc00317 	ldw	ra,12(sp)
  8077b4:	dc800217 	ldw	r18,8(sp)
  8077b8:	dc400117 	ldw	r17,4(sp)
  8077bc:	dc000017 	ldw	r16,0(sp)
  8077c0:	dec00404 	addi	sp,sp,16
  8077c4:	f800283a 	ret
  8077c8:	0803f9c0 	call	803f9c <__sfp_lock_release>
  8077cc:	0025883a 	mov	r18,zero
  8077d0:	9005883a 	mov	r2,r18
  8077d4:	dfc00317 	ldw	ra,12(sp)
  8077d8:	dc800217 	ldw	r18,8(sp)
  8077dc:	dc400117 	ldw	r17,4(sp)
  8077e0:	dc000017 	ldw	r16,0(sp)
  8077e4:	dec00404 	addi	sp,sp,16
  8077e8:	f800283a 	ret
  8077ec:	8809883a 	mov	r4,r17
  8077f0:	0803fa80 	call	803fa8 <__sinit>
  8077f4:	8080030f 	ldh	r2,12(r16)
  8077f8:	103fd11e 	bne	r2,zero,807740 <_fclose_r+0x38>
  8077fc:	003ff206 	br	8077c8 <_fclose_r+0xc0>
  807800:	81400417 	ldw	r5,16(r16)
  807804:	8809883a 	mov	r4,r17
  807808:	080432c0 	call	80432c <_free_r>
  80780c:	003fd906 	br	807774 <_fclose_r+0x6c>
  807810:	04bfffc4 	movi	r18,-1
  807814:	003fd406 	br	807768 <_fclose_r+0x60>

00807818 <fclose>:
  807818:	00802074 	movhi	r2,129
  80781c:	109fa904 	addi	r2,r2,32420
  807820:	200b883a 	mov	r5,r4
  807824:	11000017 	ldw	r4,0(r2)
  807828:	08077081 	jmpi	807708 <_fclose_r>

0080782c <_fstat_r>:
  80782c:	defffd04 	addi	sp,sp,-12
  807830:	dc000015 	stw	r16,0(sp)
  807834:	040020b4 	movhi	r16,130
  807838:	8426a204 	addi	r16,r16,-25976
  80783c:	dc400115 	stw	r17,4(sp)
  807840:	80000015 	stw	zero,0(r16)
  807844:	2023883a 	mov	r17,r4
  807848:	2809883a 	mov	r4,r5
  80784c:	300b883a 	mov	r5,r6
  807850:	dfc00215 	stw	ra,8(sp)
  807854:	0809e6c0 	call	809e6c <fstat>
  807858:	1007883a 	mov	r3,r2
  80785c:	00bfffc4 	movi	r2,-1
  807860:	18800626 	beq	r3,r2,80787c <_fstat_r+0x50>
  807864:	1805883a 	mov	r2,r3
  807868:	dfc00217 	ldw	ra,8(sp)
  80786c:	dc400117 	ldw	r17,4(sp)
  807870:	dc000017 	ldw	r16,0(sp)
  807874:	dec00304 	addi	sp,sp,12
  807878:	f800283a 	ret
  80787c:	80800017 	ldw	r2,0(r16)
  807880:	103ff826 	beq	r2,zero,807864 <_fstat_r+0x38>
  807884:	88800015 	stw	r2,0(r17)
  807888:	1805883a 	mov	r2,r3
  80788c:	dfc00217 	ldw	ra,8(sp)
  807890:	dc400117 	ldw	r17,4(sp)
  807894:	dc000017 	ldw	r16,0(sp)
  807898:	dec00304 	addi	sp,sp,12
  80789c:	f800283a 	ret

008078a0 <_isatty_r>:
  8078a0:	defffd04 	addi	sp,sp,-12
  8078a4:	dc000015 	stw	r16,0(sp)
  8078a8:	040020b4 	movhi	r16,130
  8078ac:	8426a204 	addi	r16,r16,-25976
  8078b0:	dc400115 	stw	r17,4(sp)
  8078b4:	80000015 	stw	zero,0(r16)
  8078b8:	2023883a 	mov	r17,r4
  8078bc:	2809883a 	mov	r4,r5
  8078c0:	dfc00215 	stw	ra,8(sp)
  8078c4:	0809fa00 	call	809fa0 <isatty>
  8078c8:	1007883a 	mov	r3,r2
  8078cc:	00bfffc4 	movi	r2,-1
  8078d0:	18800626 	beq	r3,r2,8078ec <_isatty_r+0x4c>
  8078d4:	1805883a 	mov	r2,r3
  8078d8:	dfc00217 	ldw	ra,8(sp)
  8078dc:	dc400117 	ldw	r17,4(sp)
  8078e0:	dc000017 	ldw	r16,0(sp)
  8078e4:	dec00304 	addi	sp,sp,12
  8078e8:	f800283a 	ret
  8078ec:	80800017 	ldw	r2,0(r16)
  8078f0:	103ff826 	beq	r2,zero,8078d4 <_isatty_r+0x34>
  8078f4:	88800015 	stw	r2,0(r17)
  8078f8:	1805883a 	mov	r2,r3
  8078fc:	dfc00217 	ldw	ra,8(sp)
  807900:	dc400117 	ldw	r17,4(sp)
  807904:	dc000017 	ldw	r16,0(sp)
  807908:	dec00304 	addi	sp,sp,12
  80790c:	f800283a 	ret

00807910 <_lseek_r>:
  807910:	defffd04 	addi	sp,sp,-12
  807914:	dc000015 	stw	r16,0(sp)
  807918:	040020b4 	movhi	r16,130
  80791c:	8426a204 	addi	r16,r16,-25976
  807920:	dc400115 	stw	r17,4(sp)
  807924:	80000015 	stw	zero,0(r16)
  807928:	2023883a 	mov	r17,r4
  80792c:	2809883a 	mov	r4,r5
  807930:	300b883a 	mov	r5,r6
  807934:	380d883a 	mov	r6,r7
  807938:	dfc00215 	stw	ra,8(sp)
  80793c:	080a1ac0 	call	80a1ac <lseek>
  807940:	1007883a 	mov	r3,r2
  807944:	00bfffc4 	movi	r2,-1
  807948:	18800626 	beq	r3,r2,807964 <_lseek_r+0x54>
  80794c:	1805883a 	mov	r2,r3
  807950:	dfc00217 	ldw	ra,8(sp)
  807954:	dc400117 	ldw	r17,4(sp)
  807958:	dc000017 	ldw	r16,0(sp)
  80795c:	dec00304 	addi	sp,sp,12
  807960:	f800283a 	ret
  807964:	80800017 	ldw	r2,0(r16)
  807968:	103ff826 	beq	r2,zero,80794c <_lseek_r+0x3c>
  80796c:	88800015 	stw	r2,0(r17)
  807970:	1805883a 	mov	r2,r3
  807974:	dfc00217 	ldw	ra,8(sp)
  807978:	dc400117 	ldw	r17,4(sp)
  80797c:	dc000017 	ldw	r16,0(sp)
  807980:	dec00304 	addi	sp,sp,12
  807984:	f800283a 	ret

00807988 <_read_r>:
  807988:	defffd04 	addi	sp,sp,-12
  80798c:	dc000015 	stw	r16,0(sp)
  807990:	040020b4 	movhi	r16,130
  807994:	8426a204 	addi	r16,r16,-25976
  807998:	dc400115 	stw	r17,4(sp)
  80799c:	80000015 	stw	zero,0(r16)
  8079a0:	2023883a 	mov	r17,r4
  8079a4:	2809883a 	mov	r4,r5
  8079a8:	300b883a 	mov	r5,r6
  8079ac:	380d883a 	mov	r6,r7
  8079b0:	dfc00215 	stw	ra,8(sp)
  8079b4:	080a3c40 	call	80a3c4 <read>
  8079b8:	1007883a 	mov	r3,r2
  8079bc:	00bfffc4 	movi	r2,-1
  8079c0:	18800626 	beq	r3,r2,8079dc <_read_r+0x54>
  8079c4:	1805883a 	mov	r2,r3
  8079c8:	dfc00217 	ldw	ra,8(sp)
  8079cc:	dc400117 	ldw	r17,4(sp)
  8079d0:	dc000017 	ldw	r16,0(sp)
  8079d4:	dec00304 	addi	sp,sp,12
  8079d8:	f800283a 	ret
  8079dc:	80800017 	ldw	r2,0(r16)
  8079e0:	103ff826 	beq	r2,zero,8079c4 <_read_r+0x3c>
  8079e4:	88800015 	stw	r2,0(r17)
  8079e8:	1805883a 	mov	r2,r3
  8079ec:	dfc00217 	ldw	ra,8(sp)
  8079f0:	dc400117 	ldw	r17,4(sp)
  8079f4:	dc000017 	ldw	r16,0(sp)
  8079f8:	dec00304 	addi	sp,sp,12
  8079fc:	f800283a 	ret

00807a00 <__udivdi3>:
  807a00:	defff004 	addi	sp,sp,-64
  807a04:	2005883a 	mov	r2,r4
  807a08:	3011883a 	mov	r8,r6
  807a0c:	df000e15 	stw	fp,56(sp)
  807a10:	dd000a15 	stw	r20,40(sp)
  807a14:	dc000615 	stw	r16,24(sp)
  807a18:	dfc00f15 	stw	ra,60(sp)
  807a1c:	ddc00d15 	stw	r23,52(sp)
  807a20:	dd800c15 	stw	r22,48(sp)
  807a24:	dd400b15 	stw	r21,44(sp)
  807a28:	dcc00915 	stw	r19,36(sp)
  807a2c:	dc800815 	stw	r18,32(sp)
  807a30:	dc400715 	stw	r17,28(sp)
  807a34:	4021883a 	mov	r16,r8
  807a38:	1039883a 	mov	fp,r2
  807a3c:	2829883a 	mov	r20,r5
  807a40:	38003b1e 	bne	r7,zero,807b30 <__udivdi3+0x130>
  807a44:	2a005c36 	bltu	r5,r8,807bb8 <__udivdi3+0x1b8>
  807a48:	4000a626 	beq	r8,zero,807ce4 <__udivdi3+0x2e4>
  807a4c:	00bfffd4 	movui	r2,65535
  807a50:	14009e36 	bltu	r2,r16,807ccc <__udivdi3+0x2cc>
  807a54:	00803fc4 	movi	r2,255
  807a58:	14013d36 	bltu	r2,r16,807f50 <__udivdi3+0x550>
  807a5c:	000b883a 	mov	r5,zero
  807a60:	0005883a 	mov	r2,zero
  807a64:	8084d83a 	srl	r2,r16,r2
  807a68:	01002074 	movhi	r4,129
  807a6c:	21187804 	addi	r4,r4,25056
  807a70:	01800804 	movi	r6,32
  807a74:	1105883a 	add	r2,r2,r4
  807a78:	10c00003 	ldbu	r3,0(r2)
  807a7c:	28c7883a 	add	r3,r5,r3
  807a80:	30edc83a 	sub	r22,r6,r3
  807a84:	b000ee1e 	bne	r22,zero,807e40 <__udivdi3+0x440>
  807a88:	802ad43a 	srli	r21,r16,16
  807a8c:	00800044 	movi	r2,1
  807a90:	a423c83a 	sub	r17,r20,r16
  807a94:	85ffffcc 	andi	r23,r16,65535
  807a98:	d8800315 	stw	r2,12(sp)
  807a9c:	8809883a 	mov	r4,r17
  807aa0:	a80b883a 	mov	r5,r21
  807aa4:	08004340 	call	800434 <__udivsi3>
  807aa8:	8809883a 	mov	r4,r17
  807aac:	a80b883a 	mov	r5,r21
  807ab0:	102d883a 	mov	r22,r2
  807ab4:	080043c0 	call	80043c <__umodsi3>
  807ab8:	1004943a 	slli	r2,r2,16
  807abc:	e006d43a 	srli	r3,fp,16
  807ac0:	bda3383a 	mul	r17,r23,r22
  807ac4:	10c4b03a 	or	r2,r2,r3
  807ac8:	1440042e 	bgeu	r2,r17,807adc <__udivdi3+0xdc>
  807acc:	1405883a 	add	r2,r2,r16
  807ad0:	b5bfffc4 	addi	r22,r22,-1
  807ad4:	14000136 	bltu	r2,r16,807adc <__udivdi3+0xdc>
  807ad8:	14413d36 	bltu	r2,r17,807fd0 <__udivdi3+0x5d0>
  807adc:	1463c83a 	sub	r17,r2,r17
  807ae0:	8809883a 	mov	r4,r17
  807ae4:	a80b883a 	mov	r5,r21
  807ae8:	08004340 	call	800434 <__udivsi3>
  807aec:	8809883a 	mov	r4,r17
  807af0:	a80b883a 	mov	r5,r21
  807af4:	1029883a 	mov	r20,r2
  807af8:	080043c0 	call	80043c <__umodsi3>
  807afc:	1004943a 	slli	r2,r2,16
  807b00:	bd09383a 	mul	r4,r23,r20
  807b04:	e0ffffcc 	andi	r3,fp,65535
  807b08:	10c4b03a 	or	r2,r2,r3
  807b0c:	1100042e 	bgeu	r2,r4,807b20 <__udivdi3+0x120>
  807b10:	8085883a 	add	r2,r16,r2
  807b14:	a53fffc4 	addi	r20,r20,-1
  807b18:	14000136 	bltu	r2,r16,807b20 <__udivdi3+0x120>
  807b1c:	11012036 	bltu	r2,r4,807fa0 <__udivdi3+0x5a0>
  807b20:	b004943a 	slli	r2,r22,16
  807b24:	d9000317 	ldw	r4,12(sp)
  807b28:	a084b03a 	or	r2,r20,r2
  807b2c:	00001506 	br	807b84 <__udivdi3+0x184>
  807b30:	380d883a 	mov	r6,r7
  807b34:	29c06236 	bltu	r5,r7,807cc0 <__udivdi3+0x2c0>
  807b38:	00bfffd4 	movui	r2,65535
  807b3c:	11c05a36 	bltu	r2,r7,807ca8 <__udivdi3+0x2a8>
  807b40:	00803fc4 	movi	r2,255
  807b44:	11c0fc36 	bltu	r2,r7,807f38 <__udivdi3+0x538>
  807b48:	000b883a 	mov	r5,zero
  807b4c:	0005883a 	mov	r2,zero
  807b50:	3084d83a 	srl	r2,r6,r2
  807b54:	01002074 	movhi	r4,129
  807b58:	21187804 	addi	r4,r4,25056
  807b5c:	01c00804 	movi	r7,32
  807b60:	1105883a 	add	r2,r2,r4
  807b64:	10c00003 	ldbu	r3,0(r2)
  807b68:	28c7883a 	add	r3,r5,r3
  807b6c:	38efc83a 	sub	r23,r7,r3
  807b70:	b800691e 	bne	r23,zero,807d18 <__udivdi3+0x318>
  807b74:	35000136 	bltu	r6,r20,807b7c <__udivdi3+0x17c>
  807b78:	e4005136 	bltu	fp,r16,807cc0 <__udivdi3+0x2c0>
  807b7c:	00800044 	movi	r2,1
  807b80:	0009883a 	mov	r4,zero
  807b84:	2007883a 	mov	r3,r4
  807b88:	dfc00f17 	ldw	ra,60(sp)
  807b8c:	df000e17 	ldw	fp,56(sp)
  807b90:	ddc00d17 	ldw	r23,52(sp)
  807b94:	dd800c17 	ldw	r22,48(sp)
  807b98:	dd400b17 	ldw	r21,44(sp)
  807b9c:	dd000a17 	ldw	r20,40(sp)
  807ba0:	dcc00917 	ldw	r19,36(sp)
  807ba4:	dc800817 	ldw	r18,32(sp)
  807ba8:	dc400717 	ldw	r17,28(sp)
  807bac:	dc000617 	ldw	r16,24(sp)
  807bb0:	dec01004 	addi	sp,sp,64
  807bb4:	f800283a 	ret
  807bb8:	00bfffd4 	movui	r2,65535
  807bbc:	12005036 	bltu	r2,r8,807d00 <__udivdi3+0x300>
  807bc0:	00803fc4 	movi	r2,255
  807bc4:	1200e836 	bltu	r2,r8,807f68 <__udivdi3+0x568>
  807bc8:	000b883a 	mov	r5,zero
  807bcc:	0005883a 	mov	r2,zero
  807bd0:	8084d83a 	srl	r2,r16,r2
  807bd4:	01002074 	movhi	r4,129
  807bd8:	21187804 	addi	r4,r4,25056
  807bdc:	01800804 	movi	r6,32
  807be0:	1105883a 	add	r2,r2,r4
  807be4:	10c00003 	ldbu	r3,0(r2)
  807be8:	28c7883a 	add	r3,r5,r3
  807bec:	30cbc83a 	sub	r5,r6,r3
  807bf0:	28000626 	beq	r5,zero,807c0c <__udivdi3+0x20c>
  807bf4:	3145c83a 	sub	r2,r6,r5
  807bf8:	e084d83a 	srl	r2,fp,r2
  807bfc:	a146983a 	sll	r3,r20,r5
  807c00:	e178983a 	sll	fp,fp,r5
  807c04:	8160983a 	sll	r16,r16,r5
  807c08:	18a8b03a 	or	r20,r3,r2
  807c0c:	802ad43a 	srli	r21,r16,16
  807c10:	a009883a 	mov	r4,r20
  807c14:	85ffffcc 	andi	r23,r16,65535
  807c18:	a80b883a 	mov	r5,r21
  807c1c:	08004340 	call	800434 <__udivsi3>
  807c20:	a009883a 	mov	r4,r20
  807c24:	a80b883a 	mov	r5,r21
  807c28:	102d883a 	mov	r22,r2
  807c2c:	080043c0 	call	80043c <__umodsi3>
  807c30:	1004943a 	slli	r2,r2,16
  807c34:	e006d43a 	srli	r3,fp,16
  807c38:	bda3383a 	mul	r17,r23,r22
  807c3c:	10c4b03a 	or	r2,r2,r3
  807c40:	1440042e 	bgeu	r2,r17,807c54 <__udivdi3+0x254>
  807c44:	1405883a 	add	r2,r2,r16
  807c48:	b5bfffc4 	addi	r22,r22,-1
  807c4c:	14000136 	bltu	r2,r16,807c54 <__udivdi3+0x254>
  807c50:	1440d536 	bltu	r2,r17,807fa8 <__udivdi3+0x5a8>
  807c54:	1463c83a 	sub	r17,r2,r17
  807c58:	8809883a 	mov	r4,r17
  807c5c:	a80b883a 	mov	r5,r21
  807c60:	08004340 	call	800434 <__udivsi3>
  807c64:	8809883a 	mov	r4,r17
  807c68:	a80b883a 	mov	r5,r21
  807c6c:	1029883a 	mov	r20,r2
  807c70:	080043c0 	call	80043c <__umodsi3>
  807c74:	1004943a 	slli	r2,r2,16
  807c78:	bd09383a 	mul	r4,r23,r20
  807c7c:	e0ffffcc 	andi	r3,fp,65535
  807c80:	10c4b03a 	or	r2,r2,r3
  807c84:	1100042e 	bgeu	r2,r4,807c98 <__udivdi3+0x298>
  807c88:	8085883a 	add	r2,r16,r2
  807c8c:	a53fffc4 	addi	r20,r20,-1
  807c90:	14000136 	bltu	r2,r16,807c98 <__udivdi3+0x298>
  807c94:	1100c736 	bltu	r2,r4,807fb4 <__udivdi3+0x5b4>
  807c98:	b004943a 	slli	r2,r22,16
  807c9c:	0009883a 	mov	r4,zero
  807ca0:	a084b03a 	or	r2,r20,r2
  807ca4:	003fb706 	br	807b84 <__udivdi3+0x184>
  807ca8:	00804034 	movhi	r2,256
  807cac:	10bfffc4 	addi	r2,r2,-1
  807cb0:	11c0a436 	bltu	r2,r7,807f44 <__udivdi3+0x544>
  807cb4:	01400404 	movi	r5,16
  807cb8:	2805883a 	mov	r2,r5
  807cbc:	003fa406 	br	807b50 <__udivdi3+0x150>
  807cc0:	0005883a 	mov	r2,zero
  807cc4:	0009883a 	mov	r4,zero
  807cc8:	003fae06 	br	807b84 <__udivdi3+0x184>
  807ccc:	00804034 	movhi	r2,256
  807cd0:	10bfffc4 	addi	r2,r2,-1
  807cd4:	1400a136 	bltu	r2,r16,807f5c <__udivdi3+0x55c>
  807cd8:	01400404 	movi	r5,16
  807cdc:	2805883a 	mov	r2,r5
  807ce0:	003f6006 	br	807a64 <__udivdi3+0x64>
  807ce4:	01000044 	movi	r4,1
  807ce8:	000b883a 	mov	r5,zero
  807cec:	08004340 	call	800434 <__udivsi3>
  807cf0:	1021883a 	mov	r16,r2
  807cf4:	00bfffd4 	movui	r2,65535
  807cf8:	143ff436 	bltu	r2,r16,807ccc <__udivdi3+0x2cc>
  807cfc:	003f5506 	br	807a54 <__udivdi3+0x54>
  807d00:	00804034 	movhi	r2,256
  807d04:	10bfffc4 	addi	r2,r2,-1
  807d08:	12009a36 	bltu	r2,r8,807f74 <__udivdi3+0x574>
  807d0c:	01400404 	movi	r5,16
  807d10:	2805883a 	mov	r2,r5
  807d14:	003fae06 	br	807bd0 <__udivdi3+0x1d0>
  807d18:	3dc5c83a 	sub	r2,r7,r23
  807d1c:	35c8983a 	sll	r4,r6,r23
  807d20:	8086d83a 	srl	r3,r16,r2
  807d24:	a0a2d83a 	srl	r17,r20,r2
  807d28:	e084d83a 	srl	r2,fp,r2
  807d2c:	20eab03a 	or	r21,r4,r3
  807d30:	a82cd43a 	srli	r22,r21,16
  807d34:	a5c6983a 	sll	r3,r20,r23
  807d38:	8809883a 	mov	r4,r17
  807d3c:	b00b883a 	mov	r5,r22
  807d40:	1886b03a 	or	r3,r3,r2
  807d44:	d8c00215 	stw	r3,8(sp)
  807d48:	08004340 	call	800434 <__udivsi3>
  807d4c:	8809883a 	mov	r4,r17
  807d50:	b00b883a 	mov	r5,r22
  807d54:	1029883a 	mov	r20,r2
  807d58:	080043c0 	call	80043c <__umodsi3>
  807d5c:	a8ffffcc 	andi	r3,r21,65535
  807d60:	d8c00515 	stw	r3,20(sp)
  807d64:	d9000217 	ldw	r4,8(sp)
  807d68:	d9400517 	ldw	r5,20(sp)
  807d6c:	1004943a 	slli	r2,r2,16
  807d70:	2006d43a 	srli	r3,r4,16
  807d74:	85e0983a 	sll	r16,r16,r23
  807d78:	2d23383a 	mul	r17,r5,r20
  807d7c:	10c4b03a 	or	r2,r2,r3
  807d80:	dc000015 	stw	r16,0(sp)
  807d84:	1440032e 	bgeu	r2,r17,807d94 <__udivdi3+0x394>
  807d88:	1545883a 	add	r2,r2,r21
  807d8c:	a53fffc4 	addi	r20,r20,-1
  807d90:	15407f2e 	bgeu	r2,r21,807f90 <__udivdi3+0x590>
  807d94:	1463c83a 	sub	r17,r2,r17
  807d98:	8809883a 	mov	r4,r17
  807d9c:	b00b883a 	mov	r5,r22
  807da0:	08004340 	call	800434 <__udivsi3>
  807da4:	8809883a 	mov	r4,r17
  807da8:	b00b883a 	mov	r5,r22
  807dac:	1021883a 	mov	r16,r2
  807db0:	080043c0 	call	80043c <__umodsi3>
  807db4:	d8c00517 	ldw	r3,20(sp)
  807db8:	d9000217 	ldw	r4,8(sp)
  807dbc:	1004943a 	slli	r2,r2,16
  807dc0:	1c0f383a 	mul	r7,r3,r16
  807dc4:	20ffffcc 	andi	r3,r4,65535
  807dc8:	10e2b03a 	or	r17,r2,r3
  807dcc:	89c0032e 	bgeu	r17,r7,807ddc <__udivdi3+0x3dc>
  807dd0:	8d63883a 	add	r17,r17,r21
  807dd4:	843fffc4 	addi	r16,r16,-1
  807dd8:	8d40692e 	bgeu	r17,r21,807f80 <__udivdi3+0x580>
  807ddc:	a008943a 	slli	r4,r20,16
  807de0:	d9400017 	ldw	r5,0(sp)
  807de4:	89e3c83a 	sub	r17,r17,r7
  807de8:	8110b03a 	or	r8,r16,r4
  807dec:	280cd43a 	srli	r6,r5,16
  807df0:	28ffffcc 	andi	r3,r5,65535
  807df4:	40bfffcc 	andi	r2,r8,65535
  807df8:	400ad43a 	srli	r5,r8,16
  807dfc:	10d3383a 	mul	r9,r2,r3
  807e00:	1185383a 	mul	r2,r2,r6
  807e04:	28c7383a 	mul	r3,r5,r3
  807e08:	4808d43a 	srli	r4,r9,16
  807e0c:	298b383a 	mul	r5,r5,r6
  807e10:	10c5883a 	add	r2,r2,r3
  807e14:	2089883a 	add	r4,r4,r2
  807e18:	20c0022e 	bgeu	r4,r3,807e24 <__udivdi3+0x424>
  807e1c:	00800074 	movhi	r2,1
  807e20:	288b883a 	add	r5,r5,r2
  807e24:	2004d43a 	srli	r2,r4,16
  807e28:	288b883a 	add	r5,r5,r2
  807e2c:	89403f36 	bltu	r17,r5,807f2c <__udivdi3+0x52c>
  807e30:	89403926 	beq	r17,r5,807f18 <__udivdi3+0x518>
  807e34:	4005883a 	mov	r2,r8
  807e38:	0009883a 	mov	r4,zero
  807e3c:	003f5106 	br	807b84 <__udivdi3+0x184>
  807e40:	85a0983a 	sll	r16,r16,r22
  807e44:	3585c83a 	sub	r2,r6,r22
  807e48:	a0a2d83a 	srl	r17,r20,r2
  807e4c:	802ad43a 	srli	r21,r16,16
  807e50:	e084d83a 	srl	r2,fp,r2
  807e54:	a586983a 	sll	r3,r20,r22
  807e58:	8809883a 	mov	r4,r17
  807e5c:	a80b883a 	mov	r5,r21
  807e60:	1886b03a 	or	r3,r3,r2
  807e64:	d8c00115 	stw	r3,4(sp)
  807e68:	08004340 	call	800434 <__udivsi3>
  807e6c:	8809883a 	mov	r4,r17
  807e70:	a80b883a 	mov	r5,r21
  807e74:	d8800415 	stw	r2,16(sp)
  807e78:	080043c0 	call	80043c <__umodsi3>
  807e7c:	d9000117 	ldw	r4,4(sp)
  807e80:	d9400417 	ldw	r5,16(sp)
  807e84:	1004943a 	slli	r2,r2,16
  807e88:	85ffffcc 	andi	r23,r16,65535
  807e8c:	2006d43a 	srli	r3,r4,16
  807e90:	b963383a 	mul	r17,r23,r5
  807e94:	10c4b03a 	or	r2,r2,r3
  807e98:	1440042e 	bgeu	r2,r17,807eac <__udivdi3+0x4ac>
  807e9c:	297fffc4 	addi	r5,r5,-1
  807ea0:	1405883a 	add	r2,r2,r16
  807ea4:	d9400415 	stw	r5,16(sp)
  807ea8:	1400442e 	bgeu	r2,r16,807fbc <__udivdi3+0x5bc>
  807eac:	1463c83a 	sub	r17,r2,r17
  807eb0:	8809883a 	mov	r4,r17
  807eb4:	a80b883a 	mov	r5,r21
  807eb8:	08004340 	call	800434 <__udivsi3>
  807ebc:	8809883a 	mov	r4,r17
  807ec0:	a80b883a 	mov	r5,r21
  807ec4:	1029883a 	mov	r20,r2
  807ec8:	080043c0 	call	80043c <__umodsi3>
  807ecc:	d9400117 	ldw	r5,4(sp)
  807ed0:	1004943a 	slli	r2,r2,16
  807ed4:	bd09383a 	mul	r4,r23,r20
  807ed8:	28ffffcc 	andi	r3,r5,65535
  807edc:	10c6b03a 	or	r3,r2,r3
  807ee0:	1900062e 	bgeu	r3,r4,807efc <__udivdi3+0x4fc>
  807ee4:	1c07883a 	add	r3,r3,r16
  807ee8:	a53fffc4 	addi	r20,r20,-1
  807eec:	1c000336 	bltu	r3,r16,807efc <__udivdi3+0x4fc>
  807ef0:	1900022e 	bgeu	r3,r4,807efc <__udivdi3+0x4fc>
  807ef4:	a53fffc4 	addi	r20,r20,-1
  807ef8:	1c07883a 	add	r3,r3,r16
  807efc:	d9400417 	ldw	r5,16(sp)
  807f00:	e5b8983a 	sll	fp,fp,r22
  807f04:	1923c83a 	sub	r17,r3,r4
  807f08:	2804943a 	slli	r2,r5,16
  807f0c:	a0a8b03a 	or	r20,r20,r2
  807f10:	dd000315 	stw	r20,12(sp)
  807f14:	003ee106 	br	807a9c <__udivdi3+0x9c>
  807f18:	2004943a 	slli	r2,r4,16
  807f1c:	e5c8983a 	sll	r4,fp,r23
  807f20:	48ffffcc 	andi	r3,r9,65535
  807f24:	10c5883a 	add	r2,r2,r3
  807f28:	20bfc22e 	bgeu	r4,r2,807e34 <__udivdi3+0x434>
  807f2c:	40bfffc4 	addi	r2,r8,-1
  807f30:	0009883a 	mov	r4,zero
  807f34:	003f1306 	br	807b84 <__udivdi3+0x184>
  807f38:	01400204 	movi	r5,8
  807f3c:	2805883a 	mov	r2,r5
  807f40:	003f0306 	br	807b50 <__udivdi3+0x150>
  807f44:	01400604 	movi	r5,24
  807f48:	2805883a 	mov	r2,r5
  807f4c:	003f0006 	br	807b50 <__udivdi3+0x150>
  807f50:	01400204 	movi	r5,8
  807f54:	2805883a 	mov	r2,r5
  807f58:	003ec206 	br	807a64 <__udivdi3+0x64>
  807f5c:	01400604 	movi	r5,24
  807f60:	2805883a 	mov	r2,r5
  807f64:	003ebf06 	br	807a64 <__udivdi3+0x64>
  807f68:	01400204 	movi	r5,8
  807f6c:	2805883a 	mov	r2,r5
  807f70:	003f1706 	br	807bd0 <__udivdi3+0x1d0>
  807f74:	01400604 	movi	r5,24
  807f78:	2805883a 	mov	r2,r5
  807f7c:	003f1406 	br	807bd0 <__udivdi3+0x1d0>
  807f80:	89ff962e 	bgeu	r17,r7,807ddc <__udivdi3+0x3dc>
  807f84:	8d63883a 	add	r17,r17,r21
  807f88:	843fffc4 	addi	r16,r16,-1
  807f8c:	003f9306 	br	807ddc <__udivdi3+0x3dc>
  807f90:	147f802e 	bgeu	r2,r17,807d94 <__udivdi3+0x394>
  807f94:	a53fffc4 	addi	r20,r20,-1
  807f98:	1545883a 	add	r2,r2,r21
  807f9c:	003f7d06 	br	807d94 <__udivdi3+0x394>
  807fa0:	a53fffc4 	addi	r20,r20,-1
  807fa4:	003ede06 	br	807b20 <__udivdi3+0x120>
  807fa8:	b5bfffc4 	addi	r22,r22,-1
  807fac:	1405883a 	add	r2,r2,r16
  807fb0:	003f2806 	br	807c54 <__udivdi3+0x254>
  807fb4:	a53fffc4 	addi	r20,r20,-1
  807fb8:	003f3706 	br	807c98 <__udivdi3+0x298>
  807fbc:	147fbb2e 	bgeu	r2,r17,807eac <__udivdi3+0x4ac>
  807fc0:	297fffc4 	addi	r5,r5,-1
  807fc4:	1405883a 	add	r2,r2,r16
  807fc8:	d9400415 	stw	r5,16(sp)
  807fcc:	003fb706 	br	807eac <__udivdi3+0x4ac>
  807fd0:	b5bfffc4 	addi	r22,r22,-1
  807fd4:	1405883a 	add	r2,r2,r16
  807fd8:	003ec006 	br	807adc <__udivdi3+0xdc>

00807fdc <__umoddi3>:
  807fdc:	defff104 	addi	sp,sp,-60
  807fe0:	dd800b15 	stw	r22,44(sp)
  807fe4:	dd000915 	stw	r20,36(sp)
  807fe8:	dc000515 	stw	r16,20(sp)
  807fec:	dfc00e15 	stw	ra,56(sp)
  807ff0:	df000d15 	stw	fp,52(sp)
  807ff4:	ddc00c15 	stw	r23,48(sp)
  807ff8:	dd400a15 	stw	r21,40(sp)
  807ffc:	dcc00815 	stw	r19,32(sp)
  808000:	dc800715 	stw	r18,28(sp)
  808004:	dc400615 	stw	r17,24(sp)
  808008:	3021883a 	mov	r16,r6
  80800c:	202d883a 	mov	r22,r4
  808010:	2829883a 	mov	r20,r5
  808014:	38002b1e 	bne	r7,zero,8080c4 <__umoddi3+0xe8>
  808018:	29805036 	bltu	r5,r6,80815c <__umoddi3+0x180>
  80801c:	30008a26 	beq	r6,zero,808248 <__umoddi3+0x26c>
  808020:	00bfffd4 	movui	r2,65535
  808024:	14008236 	bltu	r2,r16,808230 <__umoddi3+0x254>
  808028:	00803fc4 	movi	r2,255
  80802c:	14013636 	bltu	r2,r16,808508 <__umoddi3+0x52c>
  808030:	000b883a 	mov	r5,zero
  808034:	0005883a 	mov	r2,zero
  808038:	8084d83a 	srl	r2,r16,r2
  80803c:	01002074 	movhi	r4,129
  808040:	21187804 	addi	r4,r4,25056
  808044:	01800804 	movi	r6,32
  808048:	1105883a 	add	r2,r2,r4
  80804c:	10c00003 	ldbu	r3,0(r2)
  808050:	28c7883a 	add	r3,r5,r3
  808054:	30efc83a 	sub	r23,r6,r3
  808058:	b800941e 	bne	r23,zero,8082ac <__umoddi3+0x2d0>
  80805c:	802ad43a 	srli	r21,r16,16
  808060:	a423c83a 	sub	r17,r20,r16
  808064:	0039883a 	mov	fp,zero
  808068:	853fffcc 	andi	r20,r16,65535
  80806c:	8809883a 	mov	r4,r17
  808070:	a80b883a 	mov	r5,r21
  808074:	08004340 	call	800434 <__udivsi3>
  808078:	8809883a 	mov	r4,r17
  80807c:	a80b883a 	mov	r5,r21
  808080:	a0a3383a 	mul	r17,r20,r2
  808084:	080043c0 	call	80043c <__umodsi3>
  808088:	1004943a 	slli	r2,r2,16
  80808c:	b006d43a 	srli	r3,r22,16
  808090:	10c4b03a 	or	r2,r2,r3
  808094:	1440032e 	bgeu	r2,r17,8080a4 <__umoddi3+0xc8>
  808098:	1405883a 	add	r2,r2,r16
  80809c:	14000136 	bltu	r2,r16,8080a4 <__umoddi3+0xc8>
  8080a0:	14413536 	bltu	r2,r17,808578 <__umoddi3+0x59c>
  8080a4:	1463c83a 	sub	r17,r2,r17
  8080a8:	8809883a 	mov	r4,r17
  8080ac:	a80b883a 	mov	r5,r21
  8080b0:	08004340 	call	800434 <__udivsi3>
  8080b4:	8809883a 	mov	r4,r17
  8080b8:	a0a3383a 	mul	r17,r20,r2
  8080bc:	a80b883a 	mov	r5,r21
  8080c0:	00004d06 	br	8081f8 <__umoddi3+0x21c>
  8080c4:	380d883a 	mov	r6,r7
  8080c8:	29c0102e 	bgeu	r5,r7,80810c <__umoddi3+0x130>
  8080cc:	2011883a 	mov	r8,r4
  8080d0:	2813883a 	mov	r9,r5
  8080d4:	4005883a 	mov	r2,r8
  8080d8:	4807883a 	mov	r3,r9
  8080dc:	dfc00e17 	ldw	ra,56(sp)
  8080e0:	df000d17 	ldw	fp,52(sp)
  8080e4:	ddc00c17 	ldw	r23,48(sp)
  8080e8:	dd800b17 	ldw	r22,44(sp)
  8080ec:	dd400a17 	ldw	r21,40(sp)
  8080f0:	dd000917 	ldw	r20,36(sp)
  8080f4:	dcc00817 	ldw	r19,32(sp)
  8080f8:	dc800717 	ldw	r18,28(sp)
  8080fc:	dc400617 	ldw	r17,24(sp)
  808100:	dc000517 	ldw	r16,20(sp)
  808104:	dec00f04 	addi	sp,sp,60
  808108:	f800283a 	ret
  80810c:	00bfffd4 	movui	r2,65535
  808110:	11c05a36 	bltu	r2,r7,80827c <__umoddi3+0x2a0>
  808114:	00803fc4 	movi	r2,255
  808118:	11c0fe36 	bltu	r2,r7,808514 <__umoddi3+0x538>
  80811c:	000b883a 	mov	r5,zero
  808120:	0005883a 	mov	r2,zero
  808124:	3084d83a 	srl	r2,r6,r2
  808128:	01002074 	movhi	r4,129
  80812c:	21187804 	addi	r4,r4,25056
  808130:	01c00804 	movi	r7,32
  808134:	1105883a 	add	r2,r2,r4
  808138:	10c00003 	ldbu	r3,0(r2)
  80813c:	28c7883a 	add	r3,r5,r3
  808140:	38ebc83a 	sub	r21,r7,r3
  808144:	a800851e 	bne	r21,zero,80835c <__umoddi3+0x380>
  808148:	35005236 	bltu	r6,r20,808294 <__umoddi3+0x2b8>
  80814c:	b400512e 	bgeu	r22,r16,808294 <__umoddi3+0x2b8>
  808150:	b011883a 	mov	r8,r22
  808154:	a013883a 	mov	r9,r20
  808158:	003fde06 	br	8080d4 <__umoddi3+0xf8>
  80815c:	00bfffd4 	movui	r2,65535
  808160:	11804036 	bltu	r2,r6,808264 <__umoddi3+0x288>
  808164:	00803fc4 	movi	r2,255
  808168:	1180ed36 	bltu	r2,r6,808520 <__umoddi3+0x544>
  80816c:	000b883a 	mov	r5,zero
  808170:	0005883a 	mov	r2,zero
  808174:	8084d83a 	srl	r2,r16,r2
  808178:	01002074 	movhi	r4,129
  80817c:	21187804 	addi	r4,r4,25056
  808180:	01800804 	movi	r6,32
  808184:	1105883a 	add	r2,r2,r4
  808188:	10c00003 	ldbu	r3,0(r2)
  80818c:	28c7883a 	add	r3,r5,r3
  808190:	30c7c83a 	sub	r3,r6,r3
  808194:	1800bf1e 	bne	r3,zero,808494 <__umoddi3+0x4b8>
  808198:	0039883a 	mov	fp,zero
  80819c:	802ad43a 	srli	r21,r16,16
  8081a0:	a009883a 	mov	r4,r20
  8081a4:	85ffffcc 	andi	r23,r16,65535
  8081a8:	a80b883a 	mov	r5,r21
  8081ac:	08004340 	call	800434 <__udivsi3>
  8081b0:	a009883a 	mov	r4,r20
  8081b4:	a80b883a 	mov	r5,r21
  8081b8:	b8a3383a 	mul	r17,r23,r2
  8081bc:	080043c0 	call	80043c <__umodsi3>
  8081c0:	1004943a 	slli	r2,r2,16
  8081c4:	b006d43a 	srli	r3,r22,16
  8081c8:	10c4b03a 	or	r2,r2,r3
  8081cc:	1440032e 	bgeu	r2,r17,8081dc <__umoddi3+0x200>
  8081d0:	1405883a 	add	r2,r2,r16
  8081d4:	14000136 	bltu	r2,r16,8081dc <__umoddi3+0x200>
  8081d8:	1440e536 	bltu	r2,r17,808570 <__umoddi3+0x594>
  8081dc:	1463c83a 	sub	r17,r2,r17
  8081e0:	8809883a 	mov	r4,r17
  8081e4:	a80b883a 	mov	r5,r21
  8081e8:	08004340 	call	800434 <__udivsi3>
  8081ec:	8809883a 	mov	r4,r17
  8081f0:	b8a3383a 	mul	r17,r23,r2
  8081f4:	a80b883a 	mov	r5,r21
  8081f8:	080043c0 	call	80043c <__umodsi3>
  8081fc:	1004943a 	slli	r2,r2,16
  808200:	b0ffffcc 	andi	r3,r22,65535
  808204:	10c4b03a 	or	r2,r2,r3
  808208:	1440042e 	bgeu	r2,r17,80821c <__umoddi3+0x240>
  80820c:	1405883a 	add	r2,r2,r16
  808210:	14000236 	bltu	r2,r16,80821c <__umoddi3+0x240>
  808214:	1440012e 	bgeu	r2,r17,80821c <__umoddi3+0x240>
  808218:	1405883a 	add	r2,r2,r16
  80821c:	1445c83a 	sub	r2,r2,r17
  808220:	1724d83a 	srl	r18,r2,fp
  808224:	0013883a 	mov	r9,zero
  808228:	9011883a 	mov	r8,r18
  80822c:	003fa906 	br	8080d4 <__umoddi3+0xf8>
  808230:	00804034 	movhi	r2,256
  808234:	10bfffc4 	addi	r2,r2,-1
  808238:	1400b036 	bltu	r2,r16,8084fc <__umoddi3+0x520>
  80823c:	01400404 	movi	r5,16
  808240:	2805883a 	mov	r2,r5
  808244:	003f7c06 	br	808038 <__umoddi3+0x5c>
  808248:	01000044 	movi	r4,1
  80824c:	000b883a 	mov	r5,zero
  808250:	08004340 	call	800434 <__udivsi3>
  808254:	1021883a 	mov	r16,r2
  808258:	00bfffd4 	movui	r2,65535
  80825c:	143ff436 	bltu	r2,r16,808230 <__umoddi3+0x254>
  808260:	003f7106 	br	808028 <__umoddi3+0x4c>
  808264:	00804034 	movhi	r2,256
  808268:	10bfffc4 	addi	r2,r2,-1
  80826c:	1180af36 	bltu	r2,r6,80852c <__umoddi3+0x550>
  808270:	01400404 	movi	r5,16
  808274:	2805883a 	mov	r2,r5
  808278:	003fbe06 	br	808174 <__umoddi3+0x198>
  80827c:	00804034 	movhi	r2,256
  808280:	10bfffc4 	addi	r2,r2,-1
  808284:	11c0ac36 	bltu	r2,r7,808538 <__umoddi3+0x55c>
  808288:	01400404 	movi	r5,16
  80828c:	2805883a 	mov	r2,r5
  808290:	003fa406 	br	808124 <__umoddi3+0x148>
  808294:	b409c83a 	sub	r4,r22,r16
  808298:	b105803a 	cmpltu	r2,r22,r4
  80829c:	a187c83a 	sub	r3,r20,r6
  8082a0:	18a9c83a 	sub	r20,r3,r2
  8082a4:	202d883a 	mov	r22,r4
  8082a8:	003fa906 	br	808150 <__umoddi3+0x174>
  8082ac:	85e0983a 	sll	r16,r16,r23
  8082b0:	35c5c83a 	sub	r2,r6,r23
  8082b4:	a0a2d83a 	srl	r17,r20,r2
  8082b8:	802ad43a 	srli	r21,r16,16
  8082bc:	b084d83a 	srl	r2,r22,r2
  8082c0:	a5c6983a 	sll	r3,r20,r23
  8082c4:	8809883a 	mov	r4,r17
  8082c8:	a80b883a 	mov	r5,r21
  8082cc:	1886b03a 	or	r3,r3,r2
  8082d0:	d8c00115 	stw	r3,4(sp)
  8082d4:	853fffcc 	andi	r20,r16,65535
  8082d8:	08004340 	call	800434 <__udivsi3>
  8082dc:	8809883a 	mov	r4,r17
  8082e0:	a80b883a 	mov	r5,r21
  8082e4:	a0a3383a 	mul	r17,r20,r2
  8082e8:	080043c0 	call	80043c <__umodsi3>
  8082ec:	d9000117 	ldw	r4,4(sp)
  8082f0:	1004943a 	slli	r2,r2,16
  8082f4:	b839883a 	mov	fp,r23
  8082f8:	2006d43a 	srli	r3,r4,16
  8082fc:	10c4b03a 	or	r2,r2,r3
  808300:	1440022e 	bgeu	r2,r17,80830c <__umoddi3+0x330>
  808304:	1405883a 	add	r2,r2,r16
  808308:	1400962e 	bgeu	r2,r16,808564 <__umoddi3+0x588>
  80830c:	1463c83a 	sub	r17,r2,r17
  808310:	8809883a 	mov	r4,r17
  808314:	a80b883a 	mov	r5,r21
  808318:	08004340 	call	800434 <__udivsi3>
  80831c:	8809883a 	mov	r4,r17
  808320:	a80b883a 	mov	r5,r21
  808324:	a0a3383a 	mul	r17,r20,r2
  808328:	080043c0 	call	80043c <__umodsi3>
  80832c:	d9400117 	ldw	r5,4(sp)
  808330:	1004943a 	slli	r2,r2,16
  808334:	28ffffcc 	andi	r3,r5,65535
  808338:	10c4b03a 	or	r2,r2,r3
  80833c:	1440042e 	bgeu	r2,r17,808350 <__umoddi3+0x374>
  808340:	1405883a 	add	r2,r2,r16
  808344:	14000236 	bltu	r2,r16,808350 <__umoddi3+0x374>
  808348:	1440012e 	bgeu	r2,r17,808350 <__umoddi3+0x374>
  80834c:	1405883a 	add	r2,r2,r16
  808350:	b5ec983a 	sll	r22,r22,r23
  808354:	1463c83a 	sub	r17,r2,r17
  808358:	003f4406 	br	80806c <__umoddi3+0x90>
  80835c:	3d4fc83a 	sub	r7,r7,r21
  808360:	3546983a 	sll	r3,r6,r21
  808364:	81c4d83a 	srl	r2,r16,r7
  808368:	a1e2d83a 	srl	r17,r20,r7
  80836c:	a54c983a 	sll	r6,r20,r21
  808370:	18aeb03a 	or	r23,r3,r2
  808374:	b828d43a 	srli	r20,r23,16
  808378:	b1c4d83a 	srl	r2,r22,r7
  80837c:	8809883a 	mov	r4,r17
  808380:	a00b883a 	mov	r5,r20
  808384:	308cb03a 	or	r6,r6,r2
  808388:	d9c00315 	stw	r7,12(sp)
  80838c:	d9800215 	stw	r6,8(sp)
  808390:	08004340 	call	800434 <__udivsi3>
  808394:	8809883a 	mov	r4,r17
  808398:	a00b883a 	mov	r5,r20
  80839c:	1039883a 	mov	fp,r2
  8083a0:	080043c0 	call	80043c <__umodsi3>
  8083a4:	b8ffffcc 	andi	r3,r23,65535
  8083a8:	d8c00415 	stw	r3,16(sp)
  8083ac:	d9000217 	ldw	r4,8(sp)
  8083b0:	d9400417 	ldw	r5,16(sp)
  8083b4:	1004943a 	slli	r2,r2,16
  8083b8:	2006d43a 	srli	r3,r4,16
  8083bc:	8560983a 	sll	r16,r16,r21
  8083c0:	2f23383a 	mul	r17,r5,fp
  8083c4:	10c4b03a 	or	r2,r2,r3
  8083c8:	dc000015 	stw	r16,0(sp)
  8083cc:	b56c983a 	sll	r22,r22,r21
  8083d0:	1440032e 	bgeu	r2,r17,8083e0 <__umoddi3+0x404>
  8083d4:	15c5883a 	add	r2,r2,r23
  8083d8:	e73fffc4 	addi	fp,fp,-1
  8083dc:	15c05d2e 	bgeu	r2,r23,808554 <__umoddi3+0x578>
  8083e0:	1463c83a 	sub	r17,r2,r17
  8083e4:	8809883a 	mov	r4,r17
  8083e8:	a00b883a 	mov	r5,r20
  8083ec:	08004340 	call	800434 <__udivsi3>
  8083f0:	8809883a 	mov	r4,r17
  8083f4:	a00b883a 	mov	r5,r20
  8083f8:	1021883a 	mov	r16,r2
  8083fc:	080043c0 	call	80043c <__umodsi3>
  808400:	d8c00417 	ldw	r3,16(sp)
  808404:	d9000217 	ldw	r4,8(sp)
  808408:	1004943a 	slli	r2,r2,16
  80840c:	1c23383a 	mul	r17,r3,r16
  808410:	20ffffcc 	andi	r3,r4,65535
  808414:	10ceb03a 	or	r7,r2,r3
  808418:	3c40032e 	bgeu	r7,r17,808428 <__umoddi3+0x44c>
  80841c:	3dcf883a 	add	r7,r7,r23
  808420:	843fffc4 	addi	r16,r16,-1
  808424:	3dc0472e 	bgeu	r7,r23,808544 <__umoddi3+0x568>
  808428:	e004943a 	slli	r2,fp,16
  80842c:	d9400017 	ldw	r5,0(sp)
  808430:	3c4fc83a 	sub	r7,r7,r17
  808434:	8084b03a 	or	r2,r16,r2
  808438:	28ffffcc 	andi	r3,r5,65535
  80843c:	280cd43a 	srli	r6,r5,16
  808440:	100ad43a 	srli	r5,r2,16
  808444:	10bfffcc 	andi	r2,r2,65535
  808448:	10d1383a 	mul	r8,r2,r3
  80844c:	28c7383a 	mul	r3,r5,r3
  808450:	1185383a 	mul	r2,r2,r6
  808454:	4008d43a 	srli	r4,r8,16
  808458:	298b383a 	mul	r5,r5,r6
  80845c:	10c5883a 	add	r2,r2,r3
  808460:	2089883a 	add	r4,r4,r2
  808464:	20c0022e 	bgeu	r4,r3,808470 <__umoddi3+0x494>
  808468:	00800074 	movhi	r2,1
  80846c:	288b883a 	add	r5,r5,r2
  808470:	2004d43a 	srli	r2,r4,16
  808474:	2008943a 	slli	r4,r4,16
  808478:	40ffffcc 	andi	r3,r8,65535
  80847c:	288b883a 	add	r5,r5,r2
  808480:	20c9883a 	add	r4,r4,r3
  808484:	39400b36 	bltu	r7,r5,8084b4 <__umoddi3+0x4d8>
  808488:	39403d26 	beq	r7,r5,808580 <__umoddi3+0x5a4>
  80848c:	394bc83a 	sub	r5,r7,r5
  808490:	00000f06 	br	8084d0 <__umoddi3+0x4f4>
  808494:	30c5c83a 	sub	r2,r6,r3
  808498:	1839883a 	mov	fp,r3
  80849c:	b084d83a 	srl	r2,r22,r2
  8084a0:	a0c6983a 	sll	r3,r20,r3
  8084a4:	8720983a 	sll	r16,r16,fp
  8084a8:	b72c983a 	sll	r22,r22,fp
  8084ac:	18a8b03a 	or	r20,r3,r2
  8084b0:	003f3a06 	br	80819c <__umoddi3+0x1c0>
  8084b4:	d8c00017 	ldw	r3,0(sp)
  8084b8:	20c5c83a 	sub	r2,r4,r3
  8084bc:	2089803a 	cmpltu	r4,r4,r2
  8084c0:	2dc7c83a 	sub	r3,r5,r23
  8084c4:	1907c83a 	sub	r3,r3,r4
  8084c8:	38cbc83a 	sub	r5,r7,r3
  8084cc:	1009883a 	mov	r4,r2
  8084d0:	b105c83a 	sub	r2,r22,r4
  8084d4:	b087803a 	cmpltu	r3,r22,r2
  8084d8:	28c7c83a 	sub	r3,r5,r3
  8084dc:	d9400317 	ldw	r5,12(sp)
  8084e0:	1544d83a 	srl	r2,r2,r21
  8084e4:	1948983a 	sll	r4,r3,r5
  8084e8:	1d46d83a 	srl	r3,r3,r21
  8084ec:	20a4b03a 	or	r18,r4,r2
  8084f0:	9011883a 	mov	r8,r18
  8084f4:	1813883a 	mov	r9,r3
  8084f8:	003ef606 	br	8080d4 <__umoddi3+0xf8>
  8084fc:	01400604 	movi	r5,24
  808500:	2805883a 	mov	r2,r5
  808504:	003ecc06 	br	808038 <__umoddi3+0x5c>
  808508:	01400204 	movi	r5,8
  80850c:	2805883a 	mov	r2,r5
  808510:	003ec906 	br	808038 <__umoddi3+0x5c>
  808514:	01400204 	movi	r5,8
  808518:	2805883a 	mov	r2,r5
  80851c:	003f0106 	br	808124 <__umoddi3+0x148>
  808520:	01400204 	movi	r5,8
  808524:	2805883a 	mov	r2,r5
  808528:	003f1206 	br	808174 <__umoddi3+0x198>
  80852c:	01400604 	movi	r5,24
  808530:	2805883a 	mov	r2,r5
  808534:	003f0f06 	br	808174 <__umoddi3+0x198>
  808538:	01400604 	movi	r5,24
  80853c:	2805883a 	mov	r2,r5
  808540:	003ef806 	br	808124 <__umoddi3+0x148>
  808544:	3c7fb82e 	bgeu	r7,r17,808428 <__umoddi3+0x44c>
  808548:	843fffc4 	addi	r16,r16,-1
  80854c:	3dcf883a 	add	r7,r7,r23
  808550:	003fb506 	br	808428 <__umoddi3+0x44c>
  808554:	147fa22e 	bgeu	r2,r17,8083e0 <__umoddi3+0x404>
  808558:	e73fffc4 	addi	fp,fp,-1
  80855c:	15c5883a 	add	r2,r2,r23
  808560:	003f9f06 	br	8083e0 <__umoddi3+0x404>
  808564:	147f692e 	bgeu	r2,r17,80830c <__umoddi3+0x330>
  808568:	1405883a 	add	r2,r2,r16
  80856c:	003f6706 	br	80830c <__umoddi3+0x330>
  808570:	1405883a 	add	r2,r2,r16
  808574:	003f1906 	br	8081dc <__umoddi3+0x200>
  808578:	1405883a 	add	r2,r2,r16
  80857c:	003ec906 	br	8080a4 <__umoddi3+0xc8>
  808580:	b13fcc36 	bltu	r22,r4,8084b4 <__umoddi3+0x4d8>
  808584:	000b883a 	mov	r5,zero
  808588:	003fd106 	br	8084d0 <__umoddi3+0x4f4>

0080858c <_fpadd_parts>:
  80858c:	defff804 	addi	sp,sp,-32
  808590:	dcc00315 	stw	r19,12(sp)
  808594:	2027883a 	mov	r19,r4
  808598:	21000017 	ldw	r4,0(r4)
  80859c:	00c00044 	movi	r3,1
  8085a0:	dd400515 	stw	r21,20(sp)
  8085a4:	dd000415 	stw	r20,16(sp)
  8085a8:	ddc00715 	stw	r23,28(sp)
  8085ac:	dd800615 	stw	r22,24(sp)
  8085b0:	dc800215 	stw	r18,8(sp)
  8085b4:	dc400115 	stw	r17,4(sp)
  8085b8:	dc000015 	stw	r16,0(sp)
  8085bc:	282b883a 	mov	r21,r5
  8085c0:	3029883a 	mov	r20,r6
  8085c4:	1900632e 	bgeu	r3,r4,808754 <_fpadd_parts+0x1c8>
  8085c8:	28800017 	ldw	r2,0(r5)
  8085cc:	1880812e 	bgeu	r3,r2,8087d4 <_fpadd_parts+0x248>
  8085d0:	00c00104 	movi	r3,4
  8085d4:	20c0dc26 	beq	r4,r3,808948 <_fpadd_parts+0x3bc>
  8085d8:	10c07e26 	beq	r2,r3,8087d4 <_fpadd_parts+0x248>
  8085dc:	00c00084 	movi	r3,2
  8085e0:	10c06726 	beq	r2,r3,808780 <_fpadd_parts+0x1f4>
  8085e4:	20c07b26 	beq	r4,r3,8087d4 <_fpadd_parts+0x248>
  8085e8:	9dc00217 	ldw	r23,8(r19)
  8085ec:	28c00217 	ldw	r3,8(r5)
  8085f0:	9c400317 	ldw	r17,12(r19)
  8085f4:	2bc00317 	ldw	r15,12(r5)
  8085f8:	b8cdc83a 	sub	r6,r23,r3
  8085fc:	9c800417 	ldw	r18,16(r19)
  808600:	2c000417 	ldw	r16,16(r5)
  808604:	3009883a 	mov	r4,r6
  808608:	30009716 	blt	r6,zero,808868 <_fpadd_parts+0x2dc>
  80860c:	00800fc4 	movi	r2,63
  808610:	11806b16 	blt	r2,r6,8087c0 <_fpadd_parts+0x234>
  808614:	0100a40e 	bge	zero,r4,8088a8 <_fpadd_parts+0x31c>
  808618:	35bff804 	addi	r22,r6,-32
  80861c:	b000bc16 	blt	r22,zero,808910 <_fpadd_parts+0x384>
  808620:	8596d83a 	srl	r11,r16,r22
  808624:	0019883a 	mov	r12,zero
  808628:	0013883a 	mov	r9,zero
  80862c:	01000044 	movi	r4,1
  808630:	0015883a 	mov	r10,zero
  808634:	b000be16 	blt	r22,zero,808930 <_fpadd_parts+0x3a4>
  808638:	2590983a 	sll	r8,r4,r22
  80863c:	000f883a 	mov	r7,zero
  808640:	00bfffc4 	movi	r2,-1
  808644:	3889883a 	add	r4,r7,r2
  808648:	408b883a 	add	r5,r8,r2
  80864c:	21cd803a 	cmpltu	r6,r4,r7
  808650:	314b883a 	add	r5,r6,r5
  808654:	7904703a 	and	r2,r15,r4
  808658:	8146703a 	and	r3,r16,r5
  80865c:	10c4b03a 	or	r2,r2,r3
  808660:	10000226 	beq	r2,zero,80866c <_fpadd_parts+0xe0>
  808664:	02400044 	movi	r9,1
  808668:	0015883a 	mov	r10,zero
  80866c:	5a5eb03a 	or	r15,r11,r9
  808670:	62a0b03a 	or	r16,r12,r10
  808674:	99400117 	ldw	r5,4(r19)
  808678:	a8800117 	ldw	r2,4(r21)
  80867c:	28806e26 	beq	r5,r2,808838 <_fpadd_parts+0x2ac>
  808680:	28006626 	beq	r5,zero,80881c <_fpadd_parts+0x290>
  808684:	7c45c83a 	sub	r2,r15,r17
  808688:	7889803a 	cmpltu	r4,r15,r2
  80868c:	8487c83a 	sub	r3,r16,r18
  808690:	1909c83a 	sub	r4,r3,r4
  808694:	100d883a 	mov	r6,r2
  808698:	200f883a 	mov	r7,r4
  80869c:	38007716 	blt	r7,zero,80887c <_fpadd_parts+0x2f0>
  8086a0:	a5c00215 	stw	r23,8(r20)
  8086a4:	a1c00415 	stw	r7,16(r20)
  8086a8:	a0000115 	stw	zero,4(r20)
  8086ac:	a1800315 	stw	r6,12(r20)
  8086b0:	a2000317 	ldw	r8,12(r20)
  8086b4:	a2400417 	ldw	r9,16(r20)
  8086b8:	00bfffc4 	movi	r2,-1
  8086bc:	408b883a 	add	r5,r8,r2
  8086c0:	2a09803a 	cmpltu	r4,r5,r8
  8086c4:	488d883a 	add	r6,r9,r2
  8086c8:	01c40034 	movhi	r7,4096
  8086cc:	39ffffc4 	addi	r7,r7,-1
  8086d0:	218d883a 	add	r6,r4,r6
  8086d4:	39801736 	bltu	r7,r6,808734 <_fpadd_parts+0x1a8>
  8086d8:	31c06526 	beq	r6,r7,808870 <_fpadd_parts+0x2e4>
  8086dc:	a3000217 	ldw	r12,8(r20)
  8086e0:	4209883a 	add	r4,r8,r8
  8086e4:	00bfffc4 	movi	r2,-1
  8086e8:	220f803a 	cmpltu	r7,r4,r8
  8086ec:	4a4b883a 	add	r5,r9,r9
  8086f0:	394f883a 	add	r7,r7,r5
  8086f4:	2095883a 	add	r10,r4,r2
  8086f8:	3897883a 	add	r11,r7,r2
  8086fc:	510d803a 	cmpltu	r6,r10,r4
  808700:	6099883a 	add	r12,r12,r2
  808704:	32d7883a 	add	r11,r6,r11
  808708:	00840034 	movhi	r2,4096
  80870c:	10bfffc4 	addi	r2,r2,-1
  808710:	2011883a 	mov	r8,r4
  808714:	3813883a 	mov	r9,r7
  808718:	a1000315 	stw	r4,12(r20)
  80871c:	a1c00415 	stw	r7,16(r20)
  808720:	a3000215 	stw	r12,8(r20)
  808724:	12c00336 	bltu	r2,r11,808734 <_fpadd_parts+0x1a8>
  808728:	58bfed1e 	bne	r11,r2,8086e0 <_fpadd_parts+0x154>
  80872c:	00bfff84 	movi	r2,-2
  808730:	12bfeb2e 	bgeu	r2,r10,8086e0 <_fpadd_parts+0x154>
  808734:	a2800417 	ldw	r10,16(r20)
  808738:	008000c4 	movi	r2,3
  80873c:	00c80034 	movhi	r3,8192
  808740:	18ffffc4 	addi	r3,r3,-1
  808744:	a2400317 	ldw	r9,12(r20)
  808748:	a0800015 	stw	r2,0(r20)
  80874c:	1a802336 	bltu	r3,r10,8087dc <_fpadd_parts+0x250>
  808750:	a027883a 	mov	r19,r20
  808754:	9805883a 	mov	r2,r19
  808758:	ddc00717 	ldw	r23,28(sp)
  80875c:	dd800617 	ldw	r22,24(sp)
  808760:	dd400517 	ldw	r21,20(sp)
  808764:	dd000417 	ldw	r20,16(sp)
  808768:	dcc00317 	ldw	r19,12(sp)
  80876c:	dc800217 	ldw	r18,8(sp)
  808770:	dc400117 	ldw	r17,4(sp)
  808774:	dc000017 	ldw	r16,0(sp)
  808778:	dec00804 	addi	sp,sp,32
  80877c:	f800283a 	ret
  808780:	20fff41e 	bne	r4,r3,808754 <_fpadd_parts+0x1c8>
  808784:	31000015 	stw	r4,0(r6)
  808788:	98800117 	ldw	r2,4(r19)
  80878c:	30800115 	stw	r2,4(r6)
  808790:	98c00217 	ldw	r3,8(r19)
  808794:	30c00215 	stw	r3,8(r6)
  808798:	98800317 	ldw	r2,12(r19)
  80879c:	30800315 	stw	r2,12(r6)
  8087a0:	98c00417 	ldw	r3,16(r19)
  8087a4:	30c00415 	stw	r3,16(r6)
  8087a8:	98800117 	ldw	r2,4(r19)
  8087ac:	28c00117 	ldw	r3,4(r5)
  8087b0:	3027883a 	mov	r19,r6
  8087b4:	10c4703a 	and	r2,r2,r3
  8087b8:	30800115 	stw	r2,4(r6)
  8087bc:	003fe506 	br	808754 <_fpadd_parts+0x1c8>
  8087c0:	1dc02616 	blt	r3,r23,80885c <_fpadd_parts+0x2d0>
  8087c4:	0023883a 	mov	r17,zero
  8087c8:	182f883a 	mov	r23,r3
  8087cc:	0025883a 	mov	r18,zero
  8087d0:	003fa806 	br	808674 <_fpadd_parts+0xe8>
  8087d4:	a827883a 	mov	r19,r21
  8087d8:	003fde06 	br	808754 <_fpadd_parts+0x1c8>
  8087dc:	01800044 	movi	r6,1
  8087e0:	500497fa 	slli	r2,r10,31
  8087e4:	4808d07a 	srli	r4,r9,1
  8087e8:	518ad83a 	srl	r5,r10,r6
  8087ec:	a2000217 	ldw	r8,8(r20)
  8087f0:	1108b03a 	or	r4,r2,r4
  8087f4:	0007883a 	mov	r3,zero
  8087f8:	4984703a 	and	r2,r9,r6
  8087fc:	208cb03a 	or	r6,r4,r2
  808800:	28ceb03a 	or	r7,r5,r3
  808804:	42000044 	addi	r8,r8,1
  808808:	a027883a 	mov	r19,r20
  80880c:	a1c00415 	stw	r7,16(r20)
  808810:	a2000215 	stw	r8,8(r20)
  808814:	a1800315 	stw	r6,12(r20)
  808818:	003fce06 	br	808754 <_fpadd_parts+0x1c8>
  80881c:	8bc5c83a 	sub	r2,r17,r15
  808820:	8889803a 	cmpltu	r4,r17,r2
  808824:	9407c83a 	sub	r3,r18,r16
  808828:	1909c83a 	sub	r4,r3,r4
  80882c:	100d883a 	mov	r6,r2
  808830:	200f883a 	mov	r7,r4
  808834:	003f9906 	br	80869c <_fpadd_parts+0x110>
  808838:	7c45883a 	add	r2,r15,r17
  80883c:	13c9803a 	cmpltu	r4,r2,r15
  808840:	8487883a 	add	r3,r16,r18
  808844:	20c9883a 	add	r4,r4,r3
  808848:	a1400115 	stw	r5,4(r20)
  80884c:	a5c00215 	stw	r23,8(r20)
  808850:	a0800315 	stw	r2,12(r20)
  808854:	a1000415 	stw	r4,16(r20)
  808858:	003fb606 	br	808734 <_fpadd_parts+0x1a8>
  80885c:	001f883a 	mov	r15,zero
  808860:	0021883a 	mov	r16,zero
  808864:	003f8306 	br	808674 <_fpadd_parts+0xe8>
  808868:	018dc83a 	sub	r6,zero,r6
  80886c:	003f6706 	br	80860c <_fpadd_parts+0x80>
  808870:	00bfff84 	movi	r2,-2
  808874:	117faf36 	bltu	r2,r5,808734 <_fpadd_parts+0x1a8>
  808878:	003f9806 	br	8086dc <_fpadd_parts+0x150>
  80887c:	0005883a 	mov	r2,zero
  808880:	1189c83a 	sub	r4,r2,r6
  808884:	1105803a 	cmpltu	r2,r2,r4
  808888:	01cbc83a 	sub	r5,zero,r7
  80888c:	2885c83a 	sub	r2,r5,r2
  808890:	01800044 	movi	r6,1
  808894:	a1800115 	stw	r6,4(r20)
  808898:	a5c00215 	stw	r23,8(r20)
  80889c:	a1000315 	stw	r4,12(r20)
  8088a0:	a0800415 	stw	r2,16(r20)
  8088a4:	003f8206 	br	8086b0 <_fpadd_parts+0x124>
  8088a8:	203f7226 	beq	r4,zero,808674 <_fpadd_parts+0xe8>
  8088ac:	35bff804 	addi	r22,r6,-32
  8088b0:	b9af883a 	add	r23,r23,r6
  8088b4:	b0003116 	blt	r22,zero,80897c <_fpadd_parts+0x3f0>
  8088b8:	959ad83a 	srl	r13,r18,r22
  8088bc:	001d883a 	mov	r14,zero
  8088c0:	000f883a 	mov	r7,zero
  8088c4:	01000044 	movi	r4,1
  8088c8:	0011883a 	mov	r8,zero
  8088cc:	b0002516 	blt	r22,zero,808964 <_fpadd_parts+0x3d8>
  8088d0:	2594983a 	sll	r10,r4,r22
  8088d4:	0013883a 	mov	r9,zero
  8088d8:	00bfffc4 	movi	r2,-1
  8088dc:	4889883a 	add	r4,r9,r2
  8088e0:	508b883a 	add	r5,r10,r2
  8088e4:	224d803a 	cmpltu	r6,r4,r9
  8088e8:	314b883a 	add	r5,r6,r5
  8088ec:	8904703a 	and	r2,r17,r4
  8088f0:	9146703a 	and	r3,r18,r5
  8088f4:	10c4b03a 	or	r2,r2,r3
  8088f8:	10000226 	beq	r2,zero,808904 <_fpadd_parts+0x378>
  8088fc:	01c00044 	movi	r7,1
  808900:	0011883a 	mov	r8,zero
  808904:	69e2b03a 	or	r17,r13,r7
  808908:	7224b03a 	or	r18,r14,r8
  80890c:	003f5906 	br	808674 <_fpadd_parts+0xe8>
  808910:	8407883a 	add	r3,r16,r16
  808914:	008007c4 	movi	r2,31
  808918:	1185c83a 	sub	r2,r2,r6
  80891c:	1886983a 	sll	r3,r3,r2
  808920:	7996d83a 	srl	r11,r15,r6
  808924:	8198d83a 	srl	r12,r16,r6
  808928:	1ad6b03a 	or	r11,r3,r11
  80892c:	003f3e06 	br	808628 <_fpadd_parts+0x9c>
  808930:	2006d07a 	srli	r3,r4,1
  808934:	008007c4 	movi	r2,31
  808938:	1185c83a 	sub	r2,r2,r6
  80893c:	1890d83a 	srl	r8,r3,r2
  808940:	218e983a 	sll	r7,r4,r6
  808944:	003f3e06 	br	808640 <_fpadd_parts+0xb4>
  808948:	113f821e 	bne	r2,r4,808754 <_fpadd_parts+0x1c8>
  80894c:	28c00117 	ldw	r3,4(r5)
  808950:	98800117 	ldw	r2,4(r19)
  808954:	10ff7f26 	beq	r2,r3,808754 <_fpadd_parts+0x1c8>
  808958:	04c02074 	movhi	r19,129
  80895c:	9cd87304 	addi	r19,r19,25036
  808960:	003f7c06 	br	808754 <_fpadd_parts+0x1c8>
  808964:	2006d07a 	srli	r3,r4,1
  808968:	008007c4 	movi	r2,31
  80896c:	1185c83a 	sub	r2,r2,r6
  808970:	1894d83a 	srl	r10,r3,r2
  808974:	2192983a 	sll	r9,r4,r6
  808978:	003fd706 	br	8088d8 <_fpadd_parts+0x34c>
  80897c:	9487883a 	add	r3,r18,r18
  808980:	008007c4 	movi	r2,31
  808984:	1185c83a 	sub	r2,r2,r6
  808988:	1886983a 	sll	r3,r3,r2
  80898c:	899ad83a 	srl	r13,r17,r6
  808990:	919cd83a 	srl	r14,r18,r6
  808994:	1b5ab03a 	or	r13,r3,r13
  808998:	003fc906 	br	8088c0 <_fpadd_parts+0x334>

0080899c <__subdf3>:
  80899c:	deffea04 	addi	sp,sp,-88
  8089a0:	dcc01415 	stw	r19,80(sp)
  8089a4:	dcc00404 	addi	r19,sp,16
  8089a8:	2011883a 	mov	r8,r4
  8089ac:	2813883a 	mov	r9,r5
  8089b0:	dc401315 	stw	r17,76(sp)
  8089b4:	d809883a 	mov	r4,sp
  8089b8:	980b883a 	mov	r5,r19
  8089bc:	dc400904 	addi	r17,sp,36
  8089c0:	dfc01515 	stw	ra,84(sp)
  8089c4:	da400115 	stw	r9,4(sp)
  8089c8:	d9c00315 	stw	r7,12(sp)
  8089cc:	da000015 	stw	r8,0(sp)
  8089d0:	d9800215 	stw	r6,8(sp)
  8089d4:	0809ae40 	call	809ae4 <__unpack_d>
  8089d8:	d9000204 	addi	r4,sp,8
  8089dc:	880b883a 	mov	r5,r17
  8089e0:	0809ae40 	call	809ae4 <__unpack_d>
  8089e4:	d8800a17 	ldw	r2,40(sp)
  8089e8:	880b883a 	mov	r5,r17
  8089ec:	9809883a 	mov	r4,r19
  8089f0:	d9800e04 	addi	r6,sp,56
  8089f4:	1080005c 	xori	r2,r2,1
  8089f8:	d8800a15 	stw	r2,40(sp)
  8089fc:	080858c0 	call	80858c <_fpadd_parts>
  808a00:	1009883a 	mov	r4,r2
  808a04:	08097d00 	call	8097d0 <__pack_d>
  808a08:	dfc01517 	ldw	ra,84(sp)
  808a0c:	dcc01417 	ldw	r19,80(sp)
  808a10:	dc401317 	ldw	r17,76(sp)
  808a14:	dec01604 	addi	sp,sp,88
  808a18:	f800283a 	ret

00808a1c <__adddf3>:
  808a1c:	deffea04 	addi	sp,sp,-88
  808a20:	dcc01415 	stw	r19,80(sp)
  808a24:	dcc00404 	addi	r19,sp,16
  808a28:	2011883a 	mov	r8,r4
  808a2c:	2813883a 	mov	r9,r5
  808a30:	dc401315 	stw	r17,76(sp)
  808a34:	d809883a 	mov	r4,sp
  808a38:	980b883a 	mov	r5,r19
  808a3c:	dc400904 	addi	r17,sp,36
  808a40:	dfc01515 	stw	ra,84(sp)
  808a44:	da400115 	stw	r9,4(sp)
  808a48:	d9c00315 	stw	r7,12(sp)
  808a4c:	da000015 	stw	r8,0(sp)
  808a50:	d9800215 	stw	r6,8(sp)
  808a54:	0809ae40 	call	809ae4 <__unpack_d>
  808a58:	d9000204 	addi	r4,sp,8
  808a5c:	880b883a 	mov	r5,r17
  808a60:	0809ae40 	call	809ae4 <__unpack_d>
  808a64:	d9800e04 	addi	r6,sp,56
  808a68:	9809883a 	mov	r4,r19
  808a6c:	880b883a 	mov	r5,r17
  808a70:	080858c0 	call	80858c <_fpadd_parts>
  808a74:	1009883a 	mov	r4,r2
  808a78:	08097d00 	call	8097d0 <__pack_d>
  808a7c:	dfc01517 	ldw	ra,84(sp)
  808a80:	dcc01417 	ldw	r19,80(sp)
  808a84:	dc401317 	ldw	r17,76(sp)
  808a88:	dec01604 	addi	sp,sp,88
  808a8c:	f800283a 	ret

00808a90 <__muldf3>:
  808a90:	deffe004 	addi	sp,sp,-128
  808a94:	dc401815 	stw	r17,96(sp)
  808a98:	dc400404 	addi	r17,sp,16
  808a9c:	2011883a 	mov	r8,r4
  808aa0:	2813883a 	mov	r9,r5
  808aa4:	dc001715 	stw	r16,92(sp)
  808aa8:	d809883a 	mov	r4,sp
  808aac:	880b883a 	mov	r5,r17
  808ab0:	dc000904 	addi	r16,sp,36
  808ab4:	dfc01f15 	stw	ra,124(sp)
  808ab8:	da400115 	stw	r9,4(sp)
  808abc:	d9c00315 	stw	r7,12(sp)
  808ac0:	da000015 	stw	r8,0(sp)
  808ac4:	d9800215 	stw	r6,8(sp)
  808ac8:	ddc01e15 	stw	r23,120(sp)
  808acc:	dd801d15 	stw	r22,116(sp)
  808ad0:	dd401c15 	stw	r21,112(sp)
  808ad4:	dd001b15 	stw	r20,108(sp)
  808ad8:	dcc01a15 	stw	r19,104(sp)
  808adc:	dc801915 	stw	r18,100(sp)
  808ae0:	0809ae40 	call	809ae4 <__unpack_d>
  808ae4:	d9000204 	addi	r4,sp,8
  808ae8:	800b883a 	mov	r5,r16
  808aec:	0809ae40 	call	809ae4 <__unpack_d>
  808af0:	d9000417 	ldw	r4,16(sp)
  808af4:	00800044 	movi	r2,1
  808af8:	1100102e 	bgeu	r2,r4,808b3c <__muldf3+0xac>
  808afc:	d8c00917 	ldw	r3,36(sp)
  808b00:	10c0062e 	bgeu	r2,r3,808b1c <__muldf3+0x8c>
  808b04:	00800104 	movi	r2,4
  808b08:	20800a26 	beq	r4,r2,808b34 <__muldf3+0xa4>
  808b0c:	1880cc26 	beq	r3,r2,808e40 <__muldf3+0x3b0>
  808b10:	00800084 	movi	r2,2
  808b14:	20800926 	beq	r4,r2,808b3c <__muldf3+0xac>
  808b18:	1880191e 	bne	r3,r2,808b80 <__muldf3+0xf0>
  808b1c:	d8c00a17 	ldw	r3,40(sp)
  808b20:	d8800517 	ldw	r2,20(sp)
  808b24:	8009883a 	mov	r4,r16
  808b28:	10c4c03a 	cmpne	r2,r2,r3
  808b2c:	d8800a15 	stw	r2,40(sp)
  808b30:	00000706 	br	808b50 <__muldf3+0xc0>
  808b34:	00800084 	movi	r2,2
  808b38:	1880c326 	beq	r3,r2,808e48 <__muldf3+0x3b8>
  808b3c:	d8800517 	ldw	r2,20(sp)
  808b40:	d8c00a17 	ldw	r3,40(sp)
  808b44:	8809883a 	mov	r4,r17
  808b48:	10c4c03a 	cmpne	r2,r2,r3
  808b4c:	d8800515 	stw	r2,20(sp)
  808b50:	08097d00 	call	8097d0 <__pack_d>
  808b54:	dfc01f17 	ldw	ra,124(sp)
  808b58:	ddc01e17 	ldw	r23,120(sp)
  808b5c:	dd801d17 	ldw	r22,116(sp)
  808b60:	dd401c17 	ldw	r21,112(sp)
  808b64:	dd001b17 	ldw	r20,108(sp)
  808b68:	dcc01a17 	ldw	r19,104(sp)
  808b6c:	dc801917 	ldw	r18,100(sp)
  808b70:	dc401817 	ldw	r17,96(sp)
  808b74:	dc001717 	ldw	r16,92(sp)
  808b78:	dec02004 	addi	sp,sp,128
  808b7c:	f800283a 	ret
  808b80:	dd800717 	ldw	r22,28(sp)
  808b84:	dc800c17 	ldw	r18,48(sp)
  808b88:	002b883a 	mov	r21,zero
  808b8c:	0023883a 	mov	r17,zero
  808b90:	a80b883a 	mov	r5,r21
  808b94:	b00d883a 	mov	r6,r22
  808b98:	880f883a 	mov	r7,r17
  808b9c:	ddc00817 	ldw	r23,32(sp)
  808ba0:	dcc00d17 	ldw	r19,52(sp)
  808ba4:	9009883a 	mov	r4,r18
  808ba8:	08096b80 	call	8096b8 <__muldi3>
  808bac:	001b883a 	mov	r13,zero
  808bb0:	680f883a 	mov	r7,r13
  808bb4:	b009883a 	mov	r4,r22
  808bb8:	000b883a 	mov	r5,zero
  808bbc:	980d883a 	mov	r6,r19
  808bc0:	b82d883a 	mov	r22,r23
  808bc4:	002f883a 	mov	r23,zero
  808bc8:	db401615 	stw	r13,88(sp)
  808bcc:	d8801315 	stw	r2,76(sp)
  808bd0:	d8c01415 	stw	r3,80(sp)
  808bd4:	dcc01515 	stw	r19,84(sp)
  808bd8:	08096b80 	call	8096b8 <__muldi3>
  808bdc:	b00d883a 	mov	r6,r22
  808be0:	000b883a 	mov	r5,zero
  808be4:	9009883a 	mov	r4,r18
  808be8:	b80f883a 	mov	r7,r23
  808bec:	1021883a 	mov	r16,r2
  808bf0:	1823883a 	mov	r17,r3
  808bf4:	08096b80 	call	8096b8 <__muldi3>
  808bf8:	8085883a 	add	r2,r16,r2
  808bfc:	140d803a 	cmpltu	r6,r2,r16
  808c00:	88c7883a 	add	r3,r17,r3
  808c04:	30cd883a 	add	r6,r6,r3
  808c08:	1029883a 	mov	r20,r2
  808c0c:	302b883a 	mov	r21,r6
  808c10:	da801317 	ldw	r10,76(sp)
  808c14:	dac01417 	ldw	r11,80(sp)
  808c18:	db001517 	ldw	r12,84(sp)
  808c1c:	db401617 	ldw	r13,88(sp)
  808c20:	3440612e 	bgeu	r6,r17,808da8 <__muldf3+0x318>
  808c24:	0009883a 	mov	r4,zero
  808c28:	5105883a 	add	r2,r10,r4
  808c2c:	128d803a 	cmpltu	r6,r2,r10
  808c30:	5d07883a 	add	r3,r11,r20
  808c34:	30cd883a 	add	r6,r6,r3
  808c38:	0021883a 	mov	r16,zero
  808c3c:	04400044 	movi	r17,1
  808c40:	1025883a 	mov	r18,r2
  808c44:	3027883a 	mov	r19,r6
  808c48:	32c06236 	bltu	r6,r11,808dd4 <__muldf3+0x344>
  808c4c:	59807a26 	beq	r11,r6,808e38 <__muldf3+0x3a8>
  808c50:	680b883a 	mov	r5,r13
  808c54:	b80f883a 	mov	r7,r23
  808c58:	6009883a 	mov	r4,r12
  808c5c:	b00d883a 	mov	r6,r22
  808c60:	08096b80 	call	8096b8 <__muldi3>
  808c64:	1009883a 	mov	r4,r2
  808c68:	000f883a 	mov	r7,zero
  808c6c:	1545883a 	add	r2,r2,r21
  808c70:	1111803a 	cmpltu	r8,r2,r4
  808c74:	19c7883a 	add	r3,r3,r7
  808c78:	40c7883a 	add	r3,r8,r3
  808c7c:	88cb883a 	add	r5,r17,r3
  808c80:	d8c00617 	ldw	r3,24(sp)
  808c84:	8089883a 	add	r4,r16,r2
  808c88:	d8800b17 	ldw	r2,44(sp)
  808c8c:	18c00104 	addi	r3,r3,4
  808c90:	240d803a 	cmpltu	r6,r4,r16
  808c94:	10c7883a 	add	r3,r2,r3
  808c98:	2013883a 	mov	r9,r4
  808c9c:	d8800a17 	ldw	r2,40(sp)
  808ca0:	d9000517 	ldw	r4,20(sp)
  808ca4:	314d883a 	add	r6,r6,r5
  808ca8:	3015883a 	mov	r10,r6
  808cac:	2088c03a 	cmpne	r4,r4,r2
  808cb0:	00880034 	movhi	r2,8192
  808cb4:	10bfffc4 	addi	r2,r2,-1
  808cb8:	d9000f15 	stw	r4,60(sp)
  808cbc:	d8c01015 	stw	r3,64(sp)
  808cc0:	1180162e 	bgeu	r2,r6,808d1c <__muldf3+0x28c>
  808cc4:	1811883a 	mov	r8,r3
  808cc8:	101f883a 	mov	r15,r2
  808ccc:	980497fa 	slli	r2,r19,31
  808cd0:	9016d07a 	srli	r11,r18,1
  808cd4:	500697fa 	slli	r3,r10,31
  808cd8:	480cd07a 	srli	r6,r9,1
  808cdc:	500ed07a 	srli	r7,r10,1
  808ce0:	12d6b03a 	or	r11,r2,r11
  808ce4:	00800044 	movi	r2,1
  808ce8:	198cb03a 	or	r6,r3,r6
  808cec:	4888703a 	and	r4,r9,r2
  808cf0:	9818d07a 	srli	r12,r19,1
  808cf4:	001b883a 	mov	r13,zero
  808cf8:	03a00034 	movhi	r14,32768
  808cfc:	3013883a 	mov	r9,r6
  808d00:	3815883a 	mov	r10,r7
  808d04:	4091883a 	add	r8,r8,r2
  808d08:	20000226 	beq	r4,zero,808d14 <__muldf3+0x284>
  808d0c:	5b64b03a 	or	r18,r11,r13
  808d10:	63a6b03a 	or	r19,r12,r14
  808d14:	7abfed36 	bltu	r15,r10,808ccc <__muldf3+0x23c>
  808d18:	da001015 	stw	r8,64(sp)
  808d1c:	00840034 	movhi	r2,4096
  808d20:	10bfffc4 	addi	r2,r2,-1
  808d24:	12801436 	bltu	r2,r10,808d78 <__muldf3+0x2e8>
  808d28:	da001017 	ldw	r8,64(sp)
  808d2c:	101f883a 	mov	r15,r2
  808d30:	4a45883a 	add	r2,r9,r9
  808d34:	124d803a 	cmpltu	r6,r2,r9
  808d38:	5287883a 	add	r3,r10,r10
  808d3c:	9497883a 	add	r11,r18,r18
  808d40:	5c8f803a 	cmpltu	r7,r11,r18
  808d44:	9cd9883a 	add	r12,r19,r19
  808d48:	01000044 	movi	r4,1
  808d4c:	30cd883a 	add	r6,r6,r3
  808d50:	3b0f883a 	add	r7,r7,r12
  808d54:	423fffc4 	addi	r8,r8,-1
  808d58:	1013883a 	mov	r9,r2
  808d5c:	3015883a 	mov	r10,r6
  808d60:	111ab03a 	or	r13,r2,r4
  808d64:	98003016 	blt	r19,zero,808e28 <__muldf3+0x398>
  808d68:	5825883a 	mov	r18,r11
  808d6c:	3827883a 	mov	r19,r7
  808d70:	7abfef2e 	bgeu	r15,r10,808d30 <__muldf3+0x2a0>
  808d74:	da001015 	stw	r8,64(sp)
  808d78:	00803fc4 	movi	r2,255
  808d7c:	488e703a 	and	r7,r9,r2
  808d80:	00802004 	movi	r2,128
  808d84:	0007883a 	mov	r3,zero
  808d88:	0011883a 	mov	r8,zero
  808d8c:	38801826 	beq	r7,r2,808df0 <__muldf3+0x360>
  808d90:	008000c4 	movi	r2,3
  808d94:	d9000e04 	addi	r4,sp,56
  808d98:	da801215 	stw	r10,72(sp)
  808d9c:	d8800e15 	stw	r2,56(sp)
  808da0:	da401115 	stw	r9,68(sp)
  808da4:	003f6a06 	br	808b50 <__muldf3+0xc0>
  808da8:	89802126 	beq	r17,r6,808e30 <__muldf3+0x3a0>
  808dac:	0009883a 	mov	r4,zero
  808db0:	5105883a 	add	r2,r10,r4
  808db4:	128d803a 	cmpltu	r6,r2,r10
  808db8:	5d07883a 	add	r3,r11,r20
  808dbc:	30cd883a 	add	r6,r6,r3
  808dc0:	0021883a 	mov	r16,zero
  808dc4:	0023883a 	mov	r17,zero
  808dc8:	1025883a 	mov	r18,r2
  808dcc:	3027883a 	mov	r19,r6
  808dd0:	32ff9e2e 	bgeu	r6,r11,808c4c <__muldf3+0x1bc>
  808dd4:	00800044 	movi	r2,1
  808dd8:	8089883a 	add	r4,r16,r2
  808ddc:	240d803a 	cmpltu	r6,r4,r16
  808de0:	344d883a 	add	r6,r6,r17
  808de4:	2021883a 	mov	r16,r4
  808de8:	3023883a 	mov	r17,r6
  808dec:	003f9806 	br	808c50 <__muldf3+0x1c0>
  808df0:	403fe71e 	bne	r8,zero,808d90 <__muldf3+0x300>
  808df4:	01004004 	movi	r4,256
  808df8:	4904703a 	and	r2,r9,r4
  808dfc:	10c4b03a 	or	r2,r2,r3
  808e00:	103fe31e 	bne	r2,zero,808d90 <__muldf3+0x300>
  808e04:	94c4b03a 	or	r2,r18,r19
  808e08:	103fe126 	beq	r2,zero,808d90 <__muldf3+0x300>
  808e0c:	49c5883a 	add	r2,r9,r7
  808e10:	1251803a 	cmpltu	r8,r2,r9
  808e14:	4291883a 	add	r8,r8,r10
  808e18:	013fc004 	movi	r4,-256
  808e1c:	1112703a 	and	r9,r2,r4
  808e20:	4015883a 	mov	r10,r8
  808e24:	003fda06 	br	808d90 <__muldf3+0x300>
  808e28:	6813883a 	mov	r9,r13
  808e2c:	003fce06 	br	808d68 <__muldf3+0x2d8>
  808e30:	143f7c36 	bltu	r2,r16,808c24 <__muldf3+0x194>
  808e34:	003fdd06 	br	808dac <__muldf3+0x31c>
  808e38:	12bf852e 	bgeu	r2,r10,808c50 <__muldf3+0x1c0>
  808e3c:	003fe506 	br	808dd4 <__muldf3+0x344>
  808e40:	00800084 	movi	r2,2
  808e44:	20bf351e 	bne	r4,r2,808b1c <__muldf3+0x8c>
  808e48:	01002074 	movhi	r4,129
  808e4c:	21187304 	addi	r4,r4,25036
  808e50:	003f3f06 	br	808b50 <__muldf3+0xc0>

00808e54 <__divdf3>:
  808e54:	deffed04 	addi	sp,sp,-76
  808e58:	dcc01115 	stw	r19,68(sp)
  808e5c:	dcc00404 	addi	r19,sp,16
  808e60:	2011883a 	mov	r8,r4
  808e64:	2813883a 	mov	r9,r5
  808e68:	dc000e15 	stw	r16,56(sp)
  808e6c:	d809883a 	mov	r4,sp
  808e70:	980b883a 	mov	r5,r19
  808e74:	dc000904 	addi	r16,sp,36
  808e78:	dfc01215 	stw	ra,72(sp)
  808e7c:	da400115 	stw	r9,4(sp)
  808e80:	d9c00315 	stw	r7,12(sp)
  808e84:	da000015 	stw	r8,0(sp)
  808e88:	d9800215 	stw	r6,8(sp)
  808e8c:	dc801015 	stw	r18,64(sp)
  808e90:	dc400f15 	stw	r17,60(sp)
  808e94:	0809ae40 	call	809ae4 <__unpack_d>
  808e98:	d9000204 	addi	r4,sp,8
  808e9c:	800b883a 	mov	r5,r16
  808ea0:	0809ae40 	call	809ae4 <__unpack_d>
  808ea4:	d9000417 	ldw	r4,16(sp)
  808ea8:	00800044 	movi	r2,1
  808eac:	11000b2e 	bgeu	r2,r4,808edc <__divdf3+0x88>
  808eb0:	d9400917 	ldw	r5,36(sp)
  808eb4:	1140762e 	bgeu	r2,r5,809090 <__divdf3+0x23c>
  808eb8:	d8800517 	ldw	r2,20(sp)
  808ebc:	d8c00a17 	ldw	r3,40(sp)
  808ec0:	01800104 	movi	r6,4
  808ec4:	10c4f03a 	xor	r2,r2,r3
  808ec8:	d8800515 	stw	r2,20(sp)
  808ecc:	21800226 	beq	r4,r6,808ed8 <__divdf3+0x84>
  808ed0:	00800084 	movi	r2,2
  808ed4:	2080141e 	bne	r4,r2,808f28 <__divdf3+0xd4>
  808ed8:	29000926 	beq	r5,r4,808f00 <__divdf3+0xac>
  808edc:	9809883a 	mov	r4,r19
  808ee0:	08097d00 	call	8097d0 <__pack_d>
  808ee4:	dfc01217 	ldw	ra,72(sp)
  808ee8:	dcc01117 	ldw	r19,68(sp)
  808eec:	dc801017 	ldw	r18,64(sp)
  808ef0:	dc400f17 	ldw	r17,60(sp)
  808ef4:	dc000e17 	ldw	r16,56(sp)
  808ef8:	dec01304 	addi	sp,sp,76
  808efc:	f800283a 	ret
  808f00:	01002074 	movhi	r4,129
  808f04:	21187304 	addi	r4,r4,25036
  808f08:	08097d00 	call	8097d0 <__pack_d>
  808f0c:	dfc01217 	ldw	ra,72(sp)
  808f10:	dcc01117 	ldw	r19,68(sp)
  808f14:	dc801017 	ldw	r18,64(sp)
  808f18:	dc400f17 	ldw	r17,60(sp)
  808f1c:	dc000e17 	ldw	r16,56(sp)
  808f20:	dec01304 	addi	sp,sp,76
  808f24:	f800283a 	ret
  808f28:	29805b26 	beq	r5,r6,809098 <__divdf3+0x244>
  808f2c:	28802d26 	beq	r5,r2,808fe4 <__divdf3+0x190>
  808f30:	d8c00617 	ldw	r3,24(sp)
  808f34:	d8800b17 	ldw	r2,44(sp)
  808f38:	d9c00817 	ldw	r7,32(sp)
  808f3c:	dc400d17 	ldw	r17,52(sp)
  808f40:	188bc83a 	sub	r5,r3,r2
  808f44:	d9800717 	ldw	r6,28(sp)
  808f48:	dc000c17 	ldw	r16,48(sp)
  808f4c:	d9400615 	stw	r5,24(sp)
  808f50:	3c403836 	bltu	r7,r17,809034 <__divdf3+0x1e0>
  808f54:	89c03626 	beq	r17,r7,809030 <__divdf3+0x1dc>
  808f58:	0015883a 	mov	r10,zero
  808f5c:	001d883a 	mov	r14,zero
  808f60:	02c40034 	movhi	r11,4096
  808f64:	001f883a 	mov	r15,zero
  808f68:	003f883a 	mov	ra,zero
  808f6c:	04800f44 	movi	r18,61
  808f70:	00000f06 	br	808fb0 <__divdf3+0x15c>
  808f74:	601d883a 	mov	r14,r12
  808f78:	681f883a 	mov	r15,r13
  808f7c:	400d883a 	mov	r6,r8
  808f80:	100f883a 	mov	r7,r2
  808f84:	3191883a 	add	r8,r6,r6
  808f88:	5808d07a 	srli	r4,r11,1
  808f8c:	4185803a 	cmpltu	r2,r8,r6
  808f90:	39d3883a 	add	r9,r7,r7
  808f94:	28c6b03a 	or	r3,r5,r3
  808f98:	1245883a 	add	r2,r2,r9
  808f9c:	1815883a 	mov	r10,r3
  808fa0:	2017883a 	mov	r11,r4
  808fa4:	400d883a 	mov	r6,r8
  808fa8:	100f883a 	mov	r7,r2
  808fac:	fc801726 	beq	ra,r18,80900c <__divdf3+0x1b8>
  808fb0:	580a97fa 	slli	r5,r11,31
  808fb4:	5006d07a 	srli	r3,r10,1
  808fb8:	ffc00044 	addi	ra,ra,1
  808fbc:	3c7ff136 	bltu	r7,r17,808f84 <__divdf3+0x130>
  808fc0:	3411c83a 	sub	r8,r6,r16
  808fc4:	3205803a 	cmpltu	r2,r6,r8
  808fc8:	3c53c83a 	sub	r9,r7,r17
  808fcc:	7298b03a 	or	r12,r14,r10
  808fd0:	7adab03a 	or	r13,r15,r11
  808fd4:	4885c83a 	sub	r2,r9,r2
  808fd8:	89ffe61e 	bne	r17,r7,808f74 <__divdf3+0x120>
  808fdc:	343fe936 	bltu	r6,r16,808f84 <__divdf3+0x130>
  808fe0:	003fe406 	br	808f74 <__divdf3+0x120>
  808fe4:	9809883a 	mov	r4,r19
  808fe8:	d9800415 	stw	r6,16(sp)
  808fec:	08097d00 	call	8097d0 <__pack_d>
  808ff0:	dfc01217 	ldw	ra,72(sp)
  808ff4:	dcc01117 	ldw	r19,68(sp)
  808ff8:	dc801017 	ldw	r18,64(sp)
  808ffc:	dc400f17 	ldw	r17,60(sp)
  809000:	dc000e17 	ldw	r16,56(sp)
  809004:	dec01304 	addi	sp,sp,76
  809008:	f800283a 	ret
  80900c:	00803fc4 	movi	r2,255
  809010:	7090703a 	and	r8,r14,r2
  809014:	00802004 	movi	r2,128
  809018:	0007883a 	mov	r3,zero
  80901c:	0013883a 	mov	r9,zero
  809020:	40800d26 	beq	r8,r2,809058 <__divdf3+0x204>
  809024:	dbc00815 	stw	r15,32(sp)
  809028:	db800715 	stw	r14,28(sp)
  80902c:	003fab06 	br	808edc <__divdf3+0x88>
  809030:	343fc92e 	bgeu	r6,r16,808f58 <__divdf3+0x104>
  809034:	3185883a 	add	r2,r6,r6
  809038:	1189803a 	cmpltu	r4,r2,r6
  80903c:	39c7883a 	add	r3,r7,r7
  809040:	20c9883a 	add	r4,r4,r3
  809044:	297fffc4 	addi	r5,r5,-1
  809048:	100d883a 	mov	r6,r2
  80904c:	200f883a 	mov	r7,r4
  809050:	d9400615 	stw	r5,24(sp)
  809054:	003fc006 	br	808f58 <__divdf3+0x104>
  809058:	483ff21e 	bne	r9,zero,809024 <__divdf3+0x1d0>
  80905c:	01004004 	movi	r4,256
  809060:	7104703a 	and	r2,r14,r4
  809064:	10c4b03a 	or	r2,r2,r3
  809068:	103fee1e 	bne	r2,zero,809024 <__divdf3+0x1d0>
  80906c:	31c4b03a 	or	r2,r6,r7
  809070:	103fec26 	beq	r2,zero,809024 <__divdf3+0x1d0>
  809074:	7205883a 	add	r2,r14,r8
  809078:	1391803a 	cmpltu	r8,r2,r14
  80907c:	43d1883a 	add	r8,r8,r15
  809080:	013fc004 	movi	r4,-256
  809084:	111c703a 	and	r14,r2,r4
  809088:	401f883a 	mov	r15,r8
  80908c:	003fe506 	br	809024 <__divdf3+0x1d0>
  809090:	8009883a 	mov	r4,r16
  809094:	003f9206 	br	808ee0 <__divdf3+0x8c>
  809098:	9809883a 	mov	r4,r19
  80909c:	d8000715 	stw	zero,28(sp)
  8090a0:	d8000815 	stw	zero,32(sp)
  8090a4:	d8000615 	stw	zero,24(sp)
  8090a8:	003f8d06 	br	808ee0 <__divdf3+0x8c>

008090ac <__eqdf2>:
  8090ac:	deffef04 	addi	sp,sp,-68
  8090b0:	dc400f15 	stw	r17,60(sp)
  8090b4:	dc400404 	addi	r17,sp,16
  8090b8:	2005883a 	mov	r2,r4
  8090bc:	2807883a 	mov	r3,r5
  8090c0:	dc000e15 	stw	r16,56(sp)
  8090c4:	d809883a 	mov	r4,sp
  8090c8:	880b883a 	mov	r5,r17
  8090cc:	dc000904 	addi	r16,sp,36
  8090d0:	d8c00115 	stw	r3,4(sp)
  8090d4:	d8800015 	stw	r2,0(sp)
  8090d8:	d9800215 	stw	r6,8(sp)
  8090dc:	dfc01015 	stw	ra,64(sp)
  8090e0:	d9c00315 	stw	r7,12(sp)
  8090e4:	0809ae40 	call	809ae4 <__unpack_d>
  8090e8:	d9000204 	addi	r4,sp,8
  8090ec:	800b883a 	mov	r5,r16
  8090f0:	0809ae40 	call	809ae4 <__unpack_d>
  8090f4:	d8800417 	ldw	r2,16(sp)
  8090f8:	00c00044 	movi	r3,1
  8090fc:	180d883a 	mov	r6,r3
  809100:	1880062e 	bgeu	r3,r2,80911c <__eqdf2+0x70>
  809104:	d8800917 	ldw	r2,36(sp)
  809108:	8809883a 	mov	r4,r17
  80910c:	800b883a 	mov	r5,r16
  809110:	1880022e 	bgeu	r3,r2,80911c <__eqdf2+0x70>
  809114:	0809c1c0 	call	809c1c <__fpcmp_parts_d>
  809118:	100d883a 	mov	r6,r2
  80911c:	3005883a 	mov	r2,r6
  809120:	dfc01017 	ldw	ra,64(sp)
  809124:	dc400f17 	ldw	r17,60(sp)
  809128:	dc000e17 	ldw	r16,56(sp)
  80912c:	dec01104 	addi	sp,sp,68
  809130:	f800283a 	ret

00809134 <__nedf2>:
  809134:	deffef04 	addi	sp,sp,-68
  809138:	dc400f15 	stw	r17,60(sp)
  80913c:	dc400404 	addi	r17,sp,16
  809140:	2005883a 	mov	r2,r4
  809144:	2807883a 	mov	r3,r5
  809148:	dc000e15 	stw	r16,56(sp)
  80914c:	d809883a 	mov	r4,sp
  809150:	880b883a 	mov	r5,r17
  809154:	dc000904 	addi	r16,sp,36
  809158:	d8c00115 	stw	r3,4(sp)
  80915c:	d8800015 	stw	r2,0(sp)
  809160:	d9800215 	stw	r6,8(sp)
  809164:	dfc01015 	stw	ra,64(sp)
  809168:	d9c00315 	stw	r7,12(sp)
  80916c:	0809ae40 	call	809ae4 <__unpack_d>
  809170:	d9000204 	addi	r4,sp,8
  809174:	800b883a 	mov	r5,r16
  809178:	0809ae40 	call	809ae4 <__unpack_d>
  80917c:	d8800417 	ldw	r2,16(sp)
  809180:	00c00044 	movi	r3,1
  809184:	180d883a 	mov	r6,r3
  809188:	1880062e 	bgeu	r3,r2,8091a4 <__nedf2+0x70>
  80918c:	d8800917 	ldw	r2,36(sp)
  809190:	8809883a 	mov	r4,r17
  809194:	800b883a 	mov	r5,r16
  809198:	1880022e 	bgeu	r3,r2,8091a4 <__nedf2+0x70>
  80919c:	0809c1c0 	call	809c1c <__fpcmp_parts_d>
  8091a0:	100d883a 	mov	r6,r2
  8091a4:	3005883a 	mov	r2,r6
  8091a8:	dfc01017 	ldw	ra,64(sp)
  8091ac:	dc400f17 	ldw	r17,60(sp)
  8091b0:	dc000e17 	ldw	r16,56(sp)
  8091b4:	dec01104 	addi	sp,sp,68
  8091b8:	f800283a 	ret

008091bc <__gtdf2>:
  8091bc:	deffef04 	addi	sp,sp,-68
  8091c0:	dc400f15 	stw	r17,60(sp)
  8091c4:	dc400404 	addi	r17,sp,16
  8091c8:	2005883a 	mov	r2,r4
  8091cc:	2807883a 	mov	r3,r5
  8091d0:	dc000e15 	stw	r16,56(sp)
  8091d4:	d809883a 	mov	r4,sp
  8091d8:	880b883a 	mov	r5,r17
  8091dc:	dc000904 	addi	r16,sp,36
  8091e0:	d8c00115 	stw	r3,4(sp)
  8091e4:	d8800015 	stw	r2,0(sp)
  8091e8:	d9800215 	stw	r6,8(sp)
  8091ec:	dfc01015 	stw	ra,64(sp)
  8091f0:	d9c00315 	stw	r7,12(sp)
  8091f4:	0809ae40 	call	809ae4 <__unpack_d>
  8091f8:	d9000204 	addi	r4,sp,8
  8091fc:	800b883a 	mov	r5,r16
  809200:	0809ae40 	call	809ae4 <__unpack_d>
  809204:	d8800417 	ldw	r2,16(sp)
  809208:	00c00044 	movi	r3,1
  80920c:	01bfffc4 	movi	r6,-1
  809210:	1880062e 	bgeu	r3,r2,80922c <__gtdf2+0x70>
  809214:	d8800917 	ldw	r2,36(sp)
  809218:	8809883a 	mov	r4,r17
  80921c:	800b883a 	mov	r5,r16
  809220:	1880022e 	bgeu	r3,r2,80922c <__gtdf2+0x70>
  809224:	0809c1c0 	call	809c1c <__fpcmp_parts_d>
  809228:	100d883a 	mov	r6,r2
  80922c:	3005883a 	mov	r2,r6
  809230:	dfc01017 	ldw	ra,64(sp)
  809234:	dc400f17 	ldw	r17,60(sp)
  809238:	dc000e17 	ldw	r16,56(sp)
  80923c:	dec01104 	addi	sp,sp,68
  809240:	f800283a 	ret

00809244 <__gedf2>:
  809244:	deffef04 	addi	sp,sp,-68
  809248:	dc400f15 	stw	r17,60(sp)
  80924c:	dc400404 	addi	r17,sp,16
  809250:	2005883a 	mov	r2,r4
  809254:	2807883a 	mov	r3,r5
  809258:	dc000e15 	stw	r16,56(sp)
  80925c:	d809883a 	mov	r4,sp
  809260:	880b883a 	mov	r5,r17
  809264:	dc000904 	addi	r16,sp,36
  809268:	d8c00115 	stw	r3,4(sp)
  80926c:	d8800015 	stw	r2,0(sp)
  809270:	d9800215 	stw	r6,8(sp)
  809274:	dfc01015 	stw	ra,64(sp)
  809278:	d9c00315 	stw	r7,12(sp)
  80927c:	0809ae40 	call	809ae4 <__unpack_d>
  809280:	d9000204 	addi	r4,sp,8
  809284:	800b883a 	mov	r5,r16
  809288:	0809ae40 	call	809ae4 <__unpack_d>
  80928c:	d8800417 	ldw	r2,16(sp)
  809290:	00c00044 	movi	r3,1
  809294:	01bfffc4 	movi	r6,-1
  809298:	1880062e 	bgeu	r3,r2,8092b4 <__gedf2+0x70>
  80929c:	d8800917 	ldw	r2,36(sp)
  8092a0:	8809883a 	mov	r4,r17
  8092a4:	800b883a 	mov	r5,r16
  8092a8:	1880022e 	bgeu	r3,r2,8092b4 <__gedf2+0x70>
  8092ac:	0809c1c0 	call	809c1c <__fpcmp_parts_d>
  8092b0:	100d883a 	mov	r6,r2
  8092b4:	3005883a 	mov	r2,r6
  8092b8:	dfc01017 	ldw	ra,64(sp)
  8092bc:	dc400f17 	ldw	r17,60(sp)
  8092c0:	dc000e17 	ldw	r16,56(sp)
  8092c4:	dec01104 	addi	sp,sp,68
  8092c8:	f800283a 	ret

008092cc <__ltdf2>:
  8092cc:	deffef04 	addi	sp,sp,-68
  8092d0:	dc400f15 	stw	r17,60(sp)
  8092d4:	dc400404 	addi	r17,sp,16
  8092d8:	2005883a 	mov	r2,r4
  8092dc:	2807883a 	mov	r3,r5
  8092e0:	dc000e15 	stw	r16,56(sp)
  8092e4:	d809883a 	mov	r4,sp
  8092e8:	880b883a 	mov	r5,r17
  8092ec:	dc000904 	addi	r16,sp,36
  8092f0:	d8c00115 	stw	r3,4(sp)
  8092f4:	d8800015 	stw	r2,0(sp)
  8092f8:	d9800215 	stw	r6,8(sp)
  8092fc:	dfc01015 	stw	ra,64(sp)
  809300:	d9c00315 	stw	r7,12(sp)
  809304:	0809ae40 	call	809ae4 <__unpack_d>
  809308:	d9000204 	addi	r4,sp,8
  80930c:	800b883a 	mov	r5,r16
  809310:	0809ae40 	call	809ae4 <__unpack_d>
  809314:	d8800417 	ldw	r2,16(sp)
  809318:	00c00044 	movi	r3,1
  80931c:	180d883a 	mov	r6,r3
  809320:	1880062e 	bgeu	r3,r2,80933c <__ltdf2+0x70>
  809324:	d8800917 	ldw	r2,36(sp)
  809328:	8809883a 	mov	r4,r17
  80932c:	800b883a 	mov	r5,r16
  809330:	1880022e 	bgeu	r3,r2,80933c <__ltdf2+0x70>
  809334:	0809c1c0 	call	809c1c <__fpcmp_parts_d>
  809338:	100d883a 	mov	r6,r2
  80933c:	3005883a 	mov	r2,r6
  809340:	dfc01017 	ldw	ra,64(sp)
  809344:	dc400f17 	ldw	r17,60(sp)
  809348:	dc000e17 	ldw	r16,56(sp)
  80934c:	dec01104 	addi	sp,sp,68
  809350:	f800283a 	ret

00809354 <__floatsidf>:
  809354:	2006d7fa 	srli	r3,r4,31
  809358:	defff604 	addi	sp,sp,-40
  80935c:	008000c4 	movi	r2,3
  809360:	dfc00915 	stw	ra,36(sp)
  809364:	dcc00815 	stw	r19,32(sp)
  809368:	dc800715 	stw	r18,28(sp)
  80936c:	dc400615 	stw	r17,24(sp)
  809370:	dc000515 	stw	r16,20(sp)
  809374:	d8800015 	stw	r2,0(sp)
  809378:	d8c00115 	stw	r3,4(sp)
  80937c:	20000f1e 	bne	r4,zero,8093bc <__floatsidf+0x68>
  809380:	00800084 	movi	r2,2
  809384:	d8800015 	stw	r2,0(sp)
  809388:	d809883a 	mov	r4,sp
  80938c:	08097d00 	call	8097d0 <__pack_d>
  809390:	1009883a 	mov	r4,r2
  809394:	180b883a 	mov	r5,r3
  809398:	2005883a 	mov	r2,r4
  80939c:	2807883a 	mov	r3,r5
  8093a0:	dfc00917 	ldw	ra,36(sp)
  8093a4:	dcc00817 	ldw	r19,32(sp)
  8093a8:	dc800717 	ldw	r18,28(sp)
  8093ac:	dc400617 	ldw	r17,24(sp)
  8093b0:	dc000517 	ldw	r16,20(sp)
  8093b4:	dec00a04 	addi	sp,sp,40
  8093b8:	f800283a 	ret
  8093bc:	00800f04 	movi	r2,60
  8093c0:	1807003a 	cmpeq	r3,r3,zero
  8093c4:	d8800215 	stw	r2,8(sp)
  8093c8:	18001126 	beq	r3,zero,809410 <__floatsidf+0xbc>
  8093cc:	0027883a 	mov	r19,zero
  8093d0:	2025883a 	mov	r18,r4
  8093d4:	d9000315 	stw	r4,12(sp)
  8093d8:	dcc00415 	stw	r19,16(sp)
  8093dc:	08097500 	call	809750 <__clzsi2>
  8093e0:	11000744 	addi	r4,r2,29
  8093e4:	013fe80e 	bge	zero,r4,809388 <__floatsidf+0x34>
  8093e8:	10bfff44 	addi	r2,r2,-3
  8093ec:	10000c16 	blt	r2,zero,809420 <__floatsidf+0xcc>
  8093f0:	90a2983a 	sll	r17,r18,r2
  8093f4:	0021883a 	mov	r16,zero
  8093f8:	d8800217 	ldw	r2,8(sp)
  8093fc:	dc400415 	stw	r17,16(sp)
  809400:	dc000315 	stw	r16,12(sp)
  809404:	1105c83a 	sub	r2,r2,r4
  809408:	d8800215 	stw	r2,8(sp)
  80940c:	003fde06 	br	809388 <__floatsidf+0x34>
  809410:	00a00034 	movhi	r2,32768
  809414:	20800a26 	beq	r4,r2,809440 <__floatsidf+0xec>
  809418:	0109c83a 	sub	r4,zero,r4
  80941c:	003feb06 	br	8093cc <__floatsidf+0x78>
  809420:	9006d07a 	srli	r3,r18,1
  809424:	008007c4 	movi	r2,31
  809428:	1105c83a 	sub	r2,r2,r4
  80942c:	1886d83a 	srl	r3,r3,r2
  809430:	9922983a 	sll	r17,r19,r4
  809434:	9120983a 	sll	r16,r18,r4
  809438:	1c62b03a 	or	r17,r3,r17
  80943c:	003fee06 	br	8093f8 <__floatsidf+0xa4>
  809440:	0009883a 	mov	r4,zero
  809444:	01707834 	movhi	r5,49632
  809448:	003fd306 	br	809398 <__floatsidf+0x44>

0080944c <__fixdfsi>:
  80944c:	defff804 	addi	sp,sp,-32
  809450:	2005883a 	mov	r2,r4
  809454:	2807883a 	mov	r3,r5
  809458:	d809883a 	mov	r4,sp
  80945c:	d9400204 	addi	r5,sp,8
  809460:	d8c00115 	stw	r3,4(sp)
  809464:	d8800015 	stw	r2,0(sp)
  809468:	dfc00715 	stw	ra,28(sp)
  80946c:	0809ae40 	call	809ae4 <__unpack_d>
  809470:	d8c00217 	ldw	r3,8(sp)
  809474:	00800084 	movi	r2,2
  809478:	1880051e 	bne	r3,r2,809490 <__fixdfsi+0x44>
  80947c:	0007883a 	mov	r3,zero
  809480:	1805883a 	mov	r2,r3
  809484:	dfc00717 	ldw	ra,28(sp)
  809488:	dec00804 	addi	sp,sp,32
  80948c:	f800283a 	ret
  809490:	00800044 	movi	r2,1
  809494:	10fff92e 	bgeu	r2,r3,80947c <__fixdfsi+0x30>
  809498:	00800104 	movi	r2,4
  80949c:	18800426 	beq	r3,r2,8094b0 <__fixdfsi+0x64>
  8094a0:	d8c00417 	ldw	r3,16(sp)
  8094a4:	183ff516 	blt	r3,zero,80947c <__fixdfsi+0x30>
  8094a8:	00800784 	movi	r2,30
  8094ac:	10c0080e 	bge	r2,r3,8094d0 <__fixdfsi+0x84>
  8094b0:	d8800317 	ldw	r2,12(sp)
  8094b4:	1000121e 	bne	r2,zero,809500 <__fixdfsi+0xb4>
  8094b8:	00e00034 	movhi	r3,32768
  8094bc:	18ffffc4 	addi	r3,r3,-1
  8094c0:	1805883a 	mov	r2,r3
  8094c4:	dfc00717 	ldw	ra,28(sp)
  8094c8:	dec00804 	addi	sp,sp,32
  8094cc:	f800283a 	ret
  8094d0:	00800f04 	movi	r2,60
  8094d4:	10d1c83a 	sub	r8,r2,r3
  8094d8:	40bff804 	addi	r2,r8,-32
  8094dc:	d9800517 	ldw	r6,20(sp)
  8094e0:	d9c00617 	ldw	r7,24(sp)
  8094e4:	10000816 	blt	r2,zero,809508 <__fixdfsi+0xbc>
  8094e8:	3888d83a 	srl	r4,r7,r2
  8094ec:	d8800317 	ldw	r2,12(sp)
  8094f0:	2007883a 	mov	r3,r4
  8094f4:	103fe226 	beq	r2,zero,809480 <__fixdfsi+0x34>
  8094f8:	0107c83a 	sub	r3,zero,r4
  8094fc:	003fe006 	br	809480 <__fixdfsi+0x34>
  809500:	00e00034 	movhi	r3,32768
  809504:	003fde06 	br	809480 <__fixdfsi+0x34>
  809508:	39c7883a 	add	r3,r7,r7
  80950c:	008007c4 	movi	r2,31
  809510:	1205c83a 	sub	r2,r2,r8
  809514:	1886983a 	sll	r3,r3,r2
  809518:	3208d83a 	srl	r4,r6,r8
  80951c:	1908b03a 	or	r4,r3,r4
  809520:	003ff206 	br	8094ec <__fixdfsi+0xa0>

00809524 <__floatunsidf>:
  809524:	defff204 	addi	sp,sp,-56
  809528:	dfc00d15 	stw	ra,52(sp)
  80952c:	ddc00c15 	stw	r23,48(sp)
  809530:	dd800b15 	stw	r22,44(sp)
  809534:	dd400a15 	stw	r21,40(sp)
  809538:	dd000915 	stw	r20,36(sp)
  80953c:	dcc00815 	stw	r19,32(sp)
  809540:	dc800715 	stw	r18,28(sp)
  809544:	dc400615 	stw	r17,24(sp)
  809548:	dc000515 	stw	r16,20(sp)
  80954c:	d8000115 	stw	zero,4(sp)
  809550:	20000f1e 	bne	r4,zero,809590 <__floatunsidf+0x6c>
  809554:	00800084 	movi	r2,2
  809558:	d8800015 	stw	r2,0(sp)
  80955c:	d809883a 	mov	r4,sp
  809560:	08097d00 	call	8097d0 <__pack_d>
  809564:	dfc00d17 	ldw	ra,52(sp)
  809568:	ddc00c17 	ldw	r23,48(sp)
  80956c:	dd800b17 	ldw	r22,44(sp)
  809570:	dd400a17 	ldw	r21,40(sp)
  809574:	dd000917 	ldw	r20,36(sp)
  809578:	dcc00817 	ldw	r19,32(sp)
  80957c:	dc800717 	ldw	r18,28(sp)
  809580:	dc400617 	ldw	r17,24(sp)
  809584:	dc000517 	ldw	r16,20(sp)
  809588:	dec00e04 	addi	sp,sp,56
  80958c:	f800283a 	ret
  809590:	008000c4 	movi	r2,3
  809594:	00c00f04 	movi	r3,60
  809598:	002f883a 	mov	r23,zero
  80959c:	202d883a 	mov	r22,r4
  8095a0:	d8800015 	stw	r2,0(sp)
  8095a4:	d8c00215 	stw	r3,8(sp)
  8095a8:	d9000315 	stw	r4,12(sp)
  8095ac:	ddc00415 	stw	r23,16(sp)
  8095b0:	08097500 	call	809750 <__clzsi2>
  8095b4:	12400744 	addi	r9,r2,29
  8095b8:	48000b16 	blt	r9,zero,8095e8 <__floatunsidf+0xc4>
  8095bc:	483fe726 	beq	r9,zero,80955c <__floatunsidf+0x38>
  8095c0:	10bfff44 	addi	r2,r2,-3
  8095c4:	10002e16 	blt	r2,zero,809680 <__floatunsidf+0x15c>
  8095c8:	b0a2983a 	sll	r17,r22,r2
  8095cc:	0021883a 	mov	r16,zero
  8095d0:	d8800217 	ldw	r2,8(sp)
  8095d4:	dc400415 	stw	r17,16(sp)
  8095d8:	dc000315 	stw	r16,12(sp)
  8095dc:	1245c83a 	sub	r2,r2,r9
  8095e0:	d8800215 	stw	r2,8(sp)
  8095e4:	003fdd06 	br	80955c <__floatunsidf+0x38>
  8095e8:	0255c83a 	sub	r10,zero,r9
  8095ec:	51bff804 	addi	r6,r10,-32
  8095f0:	30001b16 	blt	r6,zero,809660 <__floatunsidf+0x13c>
  8095f4:	b9a8d83a 	srl	r20,r23,r6
  8095f8:	002b883a 	mov	r21,zero
  8095fc:	000f883a 	mov	r7,zero
  809600:	01000044 	movi	r4,1
  809604:	0011883a 	mov	r8,zero
  809608:	30002516 	blt	r6,zero,8096a0 <__floatunsidf+0x17c>
  80960c:	21a6983a 	sll	r19,r4,r6
  809610:	0025883a 	mov	r18,zero
  809614:	00bfffc4 	movi	r2,-1
  809618:	9089883a 	add	r4,r18,r2
  80961c:	988b883a 	add	r5,r19,r2
  809620:	248d803a 	cmpltu	r6,r4,r18
  809624:	314b883a 	add	r5,r6,r5
  809628:	b104703a 	and	r2,r22,r4
  80962c:	b946703a 	and	r3,r23,r5
  809630:	10c4b03a 	or	r2,r2,r3
  809634:	10000226 	beq	r2,zero,809640 <__floatunsidf+0x11c>
  809638:	01c00044 	movi	r7,1
  80963c:	0011883a 	mov	r8,zero
  809640:	d9000217 	ldw	r4,8(sp)
  809644:	a1c4b03a 	or	r2,r20,r7
  809648:	aa06b03a 	or	r3,r21,r8
  80964c:	2249c83a 	sub	r4,r4,r9
  809650:	d8c00415 	stw	r3,16(sp)
  809654:	d9000215 	stw	r4,8(sp)
  809658:	d8800315 	stw	r2,12(sp)
  80965c:	003fbf06 	br	80955c <__floatunsidf+0x38>
  809660:	bdc7883a 	add	r3,r23,r23
  809664:	008007c4 	movi	r2,31
  809668:	1285c83a 	sub	r2,r2,r10
  80966c:	1886983a 	sll	r3,r3,r2
  809670:	b2a8d83a 	srl	r20,r22,r10
  809674:	baaad83a 	srl	r21,r23,r10
  809678:	1d28b03a 	or	r20,r3,r20
  80967c:	003fdf06 	br	8095fc <__floatunsidf+0xd8>
  809680:	b006d07a 	srli	r3,r22,1
  809684:	008007c4 	movi	r2,31
  809688:	1245c83a 	sub	r2,r2,r9
  80968c:	1886d83a 	srl	r3,r3,r2
  809690:	ba62983a 	sll	r17,r23,r9
  809694:	b260983a 	sll	r16,r22,r9
  809698:	1c62b03a 	or	r17,r3,r17
  80969c:	003fcc06 	br	8095d0 <__floatunsidf+0xac>
  8096a0:	2006d07a 	srli	r3,r4,1
  8096a4:	008007c4 	movi	r2,31
  8096a8:	1285c83a 	sub	r2,r2,r10
  8096ac:	18a6d83a 	srl	r19,r3,r2
  8096b0:	22a4983a 	sll	r18,r4,r10
  8096b4:	003fd706 	br	809614 <__floatunsidf+0xf0>

008096b8 <__muldi3>:
  8096b8:	2011883a 	mov	r8,r4
  8096bc:	427fffcc 	andi	r9,r8,65535
  8096c0:	4018d43a 	srli	r12,r8,16
  8096c4:	32bfffcc 	andi	r10,r6,65535
  8096c8:	3016d43a 	srli	r11,r6,16
  8096cc:	4a85383a 	mul	r2,r9,r10
  8096d0:	6295383a 	mul	r10,r12,r10
  8096d4:	4ad3383a 	mul	r9,r9,r11
  8096d8:	113fffcc 	andi	r4,r2,65535
  8096dc:	1004d43a 	srli	r2,r2,16
  8096e0:	4a93883a 	add	r9,r9,r10
  8096e4:	3807883a 	mov	r3,r7
  8096e8:	1245883a 	add	r2,r2,r9
  8096ec:	280f883a 	mov	r7,r5
  8096f0:	180b883a 	mov	r5,r3
  8096f4:	1006943a 	slli	r3,r2,16
  8096f8:	defffd04 	addi	sp,sp,-12
  8096fc:	dc800215 	stw	r18,8(sp)
  809700:	1907883a 	add	r3,r3,r4
  809704:	dc400115 	stw	r17,4(sp)
  809708:	dc000015 	stw	r16,0(sp)
  80970c:	4165383a 	mul	r18,r8,r5
  809710:	31e3383a 	mul	r17,r6,r7
  809714:	1012d43a 	srli	r9,r2,16
  809718:	62d9383a 	mul	r12,r12,r11
  80971c:	181f883a 	mov	r15,r3
  809720:	1280022e 	bgeu	r2,r10,80972c <__muldi3+0x74>
  809724:	00800074 	movhi	r2,1
  809728:	6099883a 	add	r12,r12,r2
  80972c:	624d883a 	add	r6,r12,r9
  809730:	9187883a 	add	r3,r18,r6
  809734:	88c7883a 	add	r3,r17,r3
  809738:	7805883a 	mov	r2,r15
  80973c:	dc800217 	ldw	r18,8(sp)
  809740:	dc400117 	ldw	r17,4(sp)
  809744:	dc000017 	ldw	r16,0(sp)
  809748:	dec00304 	addi	sp,sp,12
  80974c:	f800283a 	ret

00809750 <__clzsi2>:
  809750:	00bfffd4 	movui	r2,65535
  809754:	11000e36 	bltu	r2,r4,809790 <__clzsi2+0x40>
  809758:	00803fc4 	movi	r2,255
  80975c:	01400204 	movi	r5,8
  809760:	0007883a 	mov	r3,zero
  809764:	11001036 	bltu	r2,r4,8097a8 <__clzsi2+0x58>
  809768:	000b883a 	mov	r5,zero
  80976c:	20c6d83a 	srl	r3,r4,r3
  809770:	00802074 	movhi	r2,129
  809774:	10987804 	addi	r2,r2,25056
  809778:	1887883a 	add	r3,r3,r2
  80977c:	18800003 	ldbu	r2,0(r3)
  809780:	00c00804 	movi	r3,32
  809784:	2885883a 	add	r2,r5,r2
  809788:	1885c83a 	sub	r2,r3,r2
  80978c:	f800283a 	ret
  809790:	01400404 	movi	r5,16
  809794:	00804034 	movhi	r2,256
  809798:	10bfffc4 	addi	r2,r2,-1
  80979c:	2807883a 	mov	r3,r5
  8097a0:	113ff22e 	bgeu	r2,r4,80976c <__clzsi2+0x1c>
  8097a4:	01400604 	movi	r5,24
  8097a8:	2807883a 	mov	r3,r5
  8097ac:	20c6d83a 	srl	r3,r4,r3
  8097b0:	00802074 	movhi	r2,129
  8097b4:	10987804 	addi	r2,r2,25056
  8097b8:	1887883a 	add	r3,r3,r2
  8097bc:	18800003 	ldbu	r2,0(r3)
  8097c0:	00c00804 	movi	r3,32
  8097c4:	2885883a 	add	r2,r5,r2
  8097c8:	1885c83a 	sub	r2,r3,r2
  8097cc:	f800283a 	ret

008097d0 <__pack_d>:
  8097d0:	20c00017 	ldw	r3,0(r4)
  8097d4:	defffd04 	addi	sp,sp,-12
  8097d8:	dc000015 	stw	r16,0(sp)
  8097dc:	dc800215 	stw	r18,8(sp)
  8097e0:	dc400115 	stw	r17,4(sp)
  8097e4:	00800044 	movi	r2,1
  8097e8:	22000317 	ldw	r8,12(r4)
  8097ec:	001f883a 	mov	r15,zero
  8097f0:	22400417 	ldw	r9,16(r4)
  8097f4:	24000117 	ldw	r16,4(r4)
  8097f8:	10c0552e 	bgeu	r2,r3,809950 <__pack_d+0x180>
  8097fc:	00800104 	movi	r2,4
  809800:	18804f26 	beq	r3,r2,809940 <__pack_d+0x170>
  809804:	00800084 	movi	r2,2
  809808:	18800226 	beq	r3,r2,809814 <__pack_d+0x44>
  80980c:	4244b03a 	or	r2,r8,r9
  809810:	10001a1e 	bne	r2,zero,80987c <__pack_d+0xac>
  809814:	000d883a 	mov	r6,zero
  809818:	000f883a 	mov	r7,zero
  80981c:	0011883a 	mov	r8,zero
  809820:	00800434 	movhi	r2,16
  809824:	10bfffc4 	addi	r2,r2,-1
  809828:	301d883a 	mov	r14,r6
  80982c:	3884703a 	and	r2,r7,r2
  809830:	400a953a 	slli	r5,r8,20
  809834:	79bffc2c 	andhi	r6,r15,65520
  809838:	308cb03a 	or	r6,r6,r2
  80983c:	00e00434 	movhi	r3,32784
  809840:	18ffffc4 	addi	r3,r3,-1
  809844:	800497fa 	slli	r2,r16,31
  809848:	30c6703a 	and	r3,r6,r3
  80984c:	1946b03a 	or	r3,r3,r5
  809850:	01600034 	movhi	r5,32768
  809854:	297fffc4 	addi	r5,r5,-1
  809858:	194a703a 	and	r5,r3,r5
  80985c:	288ab03a 	or	r5,r5,r2
  809860:	2807883a 	mov	r3,r5
  809864:	7005883a 	mov	r2,r14
  809868:	dc800217 	ldw	r18,8(sp)
  80986c:	dc400117 	ldw	r17,4(sp)
  809870:	dc000017 	ldw	r16,0(sp)
  809874:	dec00304 	addi	sp,sp,12
  809878:	f800283a 	ret
  80987c:	21000217 	ldw	r4,8(r4)
  809880:	00bf0084 	movi	r2,-1022
  809884:	20803f16 	blt	r4,r2,809984 <__pack_d+0x1b4>
  809888:	0080ffc4 	movi	r2,1023
  80988c:	11002c16 	blt	r2,r4,809940 <__pack_d+0x170>
  809890:	00803fc4 	movi	r2,255
  809894:	408c703a 	and	r6,r8,r2
  809898:	00802004 	movi	r2,128
  80989c:	0007883a 	mov	r3,zero
  8098a0:	000f883a 	mov	r7,zero
  8098a4:	2280ffc4 	addi	r10,r4,1023
  8098a8:	30801e26 	beq	r6,r2,809924 <__pack_d+0x154>
  8098ac:	00801fc4 	movi	r2,127
  8098b0:	4089883a 	add	r4,r8,r2
  8098b4:	220d803a 	cmpltu	r6,r4,r8
  8098b8:	324d883a 	add	r6,r6,r9
  8098bc:	2011883a 	mov	r8,r4
  8098c0:	3013883a 	mov	r9,r6
  8098c4:	00880034 	movhi	r2,8192
  8098c8:	10bfffc4 	addi	r2,r2,-1
  8098cc:	12400d36 	bltu	r2,r9,809904 <__pack_d+0x134>
  8098d0:	4804963a 	slli	r2,r9,24
  8098d4:	400cd23a 	srli	r6,r8,8
  8098d8:	480ed23a 	srli	r7,r9,8
  8098dc:	013fffc4 	movi	r4,-1
  8098e0:	118cb03a 	or	r6,r2,r6
  8098e4:	01400434 	movhi	r5,16
  8098e8:	297fffc4 	addi	r5,r5,-1
  8098ec:	3104703a 	and	r2,r6,r4
  8098f0:	3946703a 	and	r3,r7,r5
  8098f4:	5201ffcc 	andi	r8,r10,2047
  8098f8:	100d883a 	mov	r6,r2
  8098fc:	180f883a 	mov	r7,r3
  809900:	003fc706 	br	809820 <__pack_d+0x50>
  809904:	480897fa 	slli	r4,r9,31
  809908:	4004d07a 	srli	r2,r8,1
  80990c:	4806d07a 	srli	r3,r9,1
  809910:	52800044 	addi	r10,r10,1
  809914:	2084b03a 	or	r2,r4,r2
  809918:	1011883a 	mov	r8,r2
  80991c:	1813883a 	mov	r9,r3
  809920:	003feb06 	br	8098d0 <__pack_d+0x100>
  809924:	383fe11e 	bne	r7,zero,8098ac <__pack_d+0xdc>
  809928:	01004004 	movi	r4,256
  80992c:	4104703a 	and	r2,r8,r4
  809930:	10c4b03a 	or	r2,r2,r3
  809934:	103fe326 	beq	r2,zero,8098c4 <__pack_d+0xf4>
  809938:	3005883a 	mov	r2,r6
  80993c:	003fdc06 	br	8098b0 <__pack_d+0xe0>
  809940:	000d883a 	mov	r6,zero
  809944:	000f883a 	mov	r7,zero
  809948:	0201ffc4 	movi	r8,2047
  80994c:	003fb406 	br	809820 <__pack_d+0x50>
  809950:	0005883a 	mov	r2,zero
  809954:	00c00234 	movhi	r3,8
  809958:	408cb03a 	or	r6,r8,r2
  80995c:	48ceb03a 	or	r7,r9,r3
  809960:	013fffc4 	movi	r4,-1
  809964:	01400434 	movhi	r5,16
  809968:	297fffc4 	addi	r5,r5,-1
  80996c:	3104703a 	and	r2,r6,r4
  809970:	3946703a 	and	r3,r7,r5
  809974:	100d883a 	mov	r6,r2
  809978:	180f883a 	mov	r7,r3
  80997c:	0201ffc4 	movi	r8,2047
  809980:	003fa706 	br	809820 <__pack_d+0x50>
  809984:	1109c83a 	sub	r4,r2,r4
  809988:	00800e04 	movi	r2,56
  80998c:	11004316 	blt	r2,r4,809a9c <__pack_d+0x2cc>
  809990:	21fff804 	addi	r7,r4,-32
  809994:	38004516 	blt	r7,zero,809aac <__pack_d+0x2dc>
  809998:	49d8d83a 	srl	r12,r9,r7
  80999c:	001b883a 	mov	r13,zero
  8099a0:	0023883a 	mov	r17,zero
  8099a4:	01400044 	movi	r5,1
  8099a8:	0025883a 	mov	r18,zero
  8099ac:	38004716 	blt	r7,zero,809acc <__pack_d+0x2fc>
  8099b0:	29d6983a 	sll	r11,r5,r7
  8099b4:	0015883a 	mov	r10,zero
  8099b8:	00bfffc4 	movi	r2,-1
  8099bc:	5089883a 	add	r4,r10,r2
  8099c0:	588b883a 	add	r5,r11,r2
  8099c4:	228d803a 	cmpltu	r6,r4,r10
  8099c8:	314b883a 	add	r5,r6,r5
  8099cc:	4104703a 	and	r2,r8,r4
  8099d0:	4946703a 	and	r3,r9,r5
  8099d4:	10c4b03a 	or	r2,r2,r3
  8099d8:	10000226 	beq	r2,zero,8099e4 <__pack_d+0x214>
  8099dc:	04400044 	movi	r17,1
  8099e0:	0025883a 	mov	r18,zero
  8099e4:	00803fc4 	movi	r2,255
  8099e8:	644eb03a 	or	r7,r12,r17
  8099ec:	3892703a 	and	r9,r7,r2
  8099f0:	00802004 	movi	r2,128
  8099f4:	6c90b03a 	or	r8,r13,r18
  8099f8:	0015883a 	mov	r10,zero
  8099fc:	48801626 	beq	r9,r2,809a58 <__pack_d+0x288>
  809a00:	01001fc4 	movi	r4,127
  809a04:	3905883a 	add	r2,r7,r4
  809a08:	11cd803a 	cmpltu	r6,r2,r7
  809a0c:	320d883a 	add	r6,r6,r8
  809a10:	100f883a 	mov	r7,r2
  809a14:	00840034 	movhi	r2,4096
  809a18:	10bfffc4 	addi	r2,r2,-1
  809a1c:	3011883a 	mov	r8,r6
  809a20:	0007883a 	mov	r3,zero
  809a24:	11801b36 	bltu	r2,r6,809a94 <__pack_d+0x2c4>
  809a28:	4004963a 	slli	r2,r8,24
  809a2c:	3808d23a 	srli	r4,r7,8
  809a30:	400ad23a 	srli	r5,r8,8
  809a34:	1813883a 	mov	r9,r3
  809a38:	1108b03a 	or	r4,r2,r4
  809a3c:	00bfffc4 	movi	r2,-1
  809a40:	00c00434 	movhi	r3,16
  809a44:	18ffffc4 	addi	r3,r3,-1
  809a48:	208c703a 	and	r6,r4,r2
  809a4c:	28ce703a 	and	r7,r5,r3
  809a50:	4a01ffcc 	andi	r8,r9,2047
  809a54:	003f7206 	br	809820 <__pack_d+0x50>
  809a58:	503fe91e 	bne	r10,zero,809a00 <__pack_d+0x230>
  809a5c:	01004004 	movi	r4,256
  809a60:	3904703a 	and	r2,r7,r4
  809a64:	0007883a 	mov	r3,zero
  809a68:	10c4b03a 	or	r2,r2,r3
  809a6c:	10000626 	beq	r2,zero,809a88 <__pack_d+0x2b8>
  809a70:	3a45883a 	add	r2,r7,r9
  809a74:	11cd803a 	cmpltu	r6,r2,r7
  809a78:	320d883a 	add	r6,r6,r8
  809a7c:	100f883a 	mov	r7,r2
  809a80:	3011883a 	mov	r8,r6
  809a84:	0007883a 	mov	r3,zero
  809a88:	00840034 	movhi	r2,4096
  809a8c:	10bfffc4 	addi	r2,r2,-1
  809a90:	123fe52e 	bgeu	r2,r8,809a28 <__pack_d+0x258>
  809a94:	00c00044 	movi	r3,1
  809a98:	003fe306 	br	809a28 <__pack_d+0x258>
  809a9c:	0009883a 	mov	r4,zero
  809aa0:	0013883a 	mov	r9,zero
  809aa4:	000b883a 	mov	r5,zero
  809aa8:	003fe406 	br	809a3c <__pack_d+0x26c>
  809aac:	4a47883a 	add	r3,r9,r9
  809ab0:	008007c4 	movi	r2,31
  809ab4:	1105c83a 	sub	r2,r2,r4
  809ab8:	1886983a 	sll	r3,r3,r2
  809abc:	4118d83a 	srl	r12,r8,r4
  809ac0:	491ad83a 	srl	r13,r9,r4
  809ac4:	1b18b03a 	or	r12,r3,r12
  809ac8:	003fb506 	br	8099a0 <__pack_d+0x1d0>
  809acc:	2806d07a 	srli	r3,r5,1
  809ad0:	008007c4 	movi	r2,31
  809ad4:	1105c83a 	sub	r2,r2,r4
  809ad8:	1896d83a 	srl	r11,r3,r2
  809adc:	2914983a 	sll	r10,r5,r4
  809ae0:	003fb506 	br	8099b8 <__pack_d+0x1e8>

00809ae4 <__unpack_d>:
  809ae4:	20c00117 	ldw	r3,4(r4)
  809ae8:	22400017 	ldw	r9,0(r4)
  809aec:	00800434 	movhi	r2,16
  809af0:	10bfffc4 	addi	r2,r2,-1
  809af4:	1808d53a 	srli	r4,r3,20
  809af8:	180cd7fa 	srli	r6,r3,31
  809afc:	1894703a 	and	r10,r3,r2
  809b00:	2201ffcc 	andi	r8,r4,2047
  809b04:	281b883a 	mov	r13,r5
  809b08:	4817883a 	mov	r11,r9
  809b0c:	29800115 	stw	r6,4(r5)
  809b10:	5019883a 	mov	r12,r10
  809b14:	40001e1e 	bne	r8,zero,809b90 <__unpack_d+0xac>
  809b18:	4a84b03a 	or	r2,r9,r10
  809b1c:	10001926 	beq	r2,zero,809b84 <__unpack_d+0xa0>
  809b20:	4804d63a 	srli	r2,r9,24
  809b24:	500c923a 	slli	r6,r10,8
  809b28:	013f0084 	movi	r4,-1022
  809b2c:	00c40034 	movhi	r3,4096
  809b30:	18ffffc4 	addi	r3,r3,-1
  809b34:	118cb03a 	or	r6,r2,r6
  809b38:	008000c4 	movi	r2,3
  809b3c:	480a923a 	slli	r5,r9,8
  809b40:	68800015 	stw	r2,0(r13)
  809b44:	69000215 	stw	r4,8(r13)
  809b48:	19800b36 	bltu	r3,r6,809b78 <__unpack_d+0x94>
  809b4c:	200f883a 	mov	r7,r4
  809b50:	1811883a 	mov	r8,r3
  809b54:	2945883a 	add	r2,r5,r5
  809b58:	1149803a 	cmpltu	r4,r2,r5
  809b5c:	3187883a 	add	r3,r6,r6
  809b60:	20c9883a 	add	r4,r4,r3
  809b64:	100b883a 	mov	r5,r2
  809b68:	200d883a 	mov	r6,r4
  809b6c:	39ffffc4 	addi	r7,r7,-1
  809b70:	413ff82e 	bgeu	r8,r4,809b54 <__unpack_d+0x70>
  809b74:	69c00215 	stw	r7,8(r13)
  809b78:	69800415 	stw	r6,16(r13)
  809b7c:	69400315 	stw	r5,12(r13)
  809b80:	f800283a 	ret
  809b84:	00800084 	movi	r2,2
  809b88:	28800015 	stw	r2,0(r5)
  809b8c:	f800283a 	ret
  809b90:	0081ffc4 	movi	r2,2047
  809b94:	40800f26 	beq	r8,r2,809bd4 <__unpack_d+0xf0>
  809b98:	480cd63a 	srli	r6,r9,24
  809b9c:	5006923a 	slli	r3,r10,8
  809ba0:	4804923a 	slli	r2,r9,8
  809ba4:	0009883a 	mov	r4,zero
  809ba8:	30c6b03a 	or	r3,r6,r3
  809bac:	01440034 	movhi	r5,4096
  809bb0:	110cb03a 	or	r6,r2,r4
  809bb4:	423f0044 	addi	r8,r8,-1023
  809bb8:	194eb03a 	or	r7,r3,r5
  809bbc:	008000c4 	movi	r2,3
  809bc0:	69c00415 	stw	r7,16(r13)
  809bc4:	6a000215 	stw	r8,8(r13)
  809bc8:	68800015 	stw	r2,0(r13)
  809bcc:	69800315 	stw	r6,12(r13)
  809bd0:	f800283a 	ret
  809bd4:	4a84b03a 	or	r2,r9,r10
  809bd8:	1000031e 	bne	r2,zero,809be8 <__unpack_d+0x104>
  809bdc:	00800104 	movi	r2,4
  809be0:	28800015 	stw	r2,0(r5)
  809be4:	f800283a 	ret
  809be8:	0009883a 	mov	r4,zero
  809bec:	01400234 	movhi	r5,8
  809bf0:	4904703a 	and	r2,r9,r4
  809bf4:	5146703a 	and	r3,r10,r5
  809bf8:	10c4b03a 	or	r2,r2,r3
  809bfc:	10000526 	beq	r2,zero,809c14 <__unpack_d+0x130>
  809c00:	00800044 	movi	r2,1
  809c04:	68800015 	stw	r2,0(r13)
  809c08:	6b000415 	stw	r12,16(r13)
  809c0c:	6ac00315 	stw	r11,12(r13)
  809c10:	f800283a 	ret
  809c14:	68000015 	stw	zero,0(r13)
  809c18:	003ffb06 	br	809c08 <__unpack_d+0x124>

00809c1c <__fpcmp_parts_d>:
  809c1c:	21800017 	ldw	r6,0(r4)
  809c20:	00c00044 	movi	r3,1
  809c24:	19800a2e 	bgeu	r3,r6,809c50 <__fpcmp_parts_d+0x34>
  809c28:	28800017 	ldw	r2,0(r5)
  809c2c:	1880082e 	bgeu	r3,r2,809c50 <__fpcmp_parts_d+0x34>
  809c30:	00c00104 	movi	r3,4
  809c34:	30c02626 	beq	r6,r3,809cd0 <__fpcmp_parts_d+0xb4>
  809c38:	10c02226 	beq	r2,r3,809cc4 <__fpcmp_parts_d+0xa8>
  809c3c:	00c00084 	movi	r3,2
  809c40:	30c00526 	beq	r6,r3,809c58 <__fpcmp_parts_d+0x3c>
  809c44:	10c0071e 	bne	r2,r3,809c64 <__fpcmp_parts_d+0x48>
  809c48:	20800117 	ldw	r2,4(r4)
  809c4c:	1000091e 	bne	r2,zero,809c74 <__fpcmp_parts_d+0x58>
  809c50:	00800044 	movi	r2,1
  809c54:	f800283a 	ret
  809c58:	10c01a1e 	bne	r2,r3,809cc4 <__fpcmp_parts_d+0xa8>
  809c5c:	0005883a 	mov	r2,zero
  809c60:	f800283a 	ret
  809c64:	22000117 	ldw	r8,4(r4)
  809c68:	28800117 	ldw	r2,4(r5)
  809c6c:	40800326 	beq	r8,r2,809c7c <__fpcmp_parts_d+0x60>
  809c70:	403ff726 	beq	r8,zero,809c50 <__fpcmp_parts_d+0x34>
  809c74:	00bfffc4 	movi	r2,-1
  809c78:	f800283a 	ret
  809c7c:	20c00217 	ldw	r3,8(r4)
  809c80:	28800217 	ldw	r2,8(r5)
  809c84:	10fffa16 	blt	r2,r3,809c70 <__fpcmp_parts_d+0x54>
  809c88:	18800916 	blt	r3,r2,809cb0 <__fpcmp_parts_d+0x94>
  809c8c:	21c00417 	ldw	r7,16(r4)
  809c90:	28c00417 	ldw	r3,16(r5)
  809c94:	21800317 	ldw	r6,12(r4)
  809c98:	28800317 	ldw	r2,12(r5)
  809c9c:	19fff436 	bltu	r3,r7,809c70 <__fpcmp_parts_d+0x54>
  809ca0:	38c00526 	beq	r7,r3,809cb8 <__fpcmp_parts_d+0x9c>
  809ca4:	38c00236 	bltu	r7,r3,809cb0 <__fpcmp_parts_d+0x94>
  809ca8:	19ffec1e 	bne	r3,r7,809c5c <__fpcmp_parts_d+0x40>
  809cac:	30bfeb2e 	bgeu	r6,r2,809c5c <__fpcmp_parts_d+0x40>
  809cb0:	403fe71e 	bne	r8,zero,809c50 <__fpcmp_parts_d+0x34>
  809cb4:	003fef06 	br	809c74 <__fpcmp_parts_d+0x58>
  809cb8:	11bffa2e 	bgeu	r2,r6,809ca4 <__fpcmp_parts_d+0x88>
  809cbc:	403fe426 	beq	r8,zero,809c50 <__fpcmp_parts_d+0x34>
  809cc0:	003fec06 	br	809c74 <__fpcmp_parts_d+0x58>
  809cc4:	28800117 	ldw	r2,4(r5)
  809cc8:	103fe11e 	bne	r2,zero,809c50 <__fpcmp_parts_d+0x34>
  809ccc:	003fe906 	br	809c74 <__fpcmp_parts_d+0x58>
  809cd0:	11bfdd1e 	bne	r2,r6,809c48 <__fpcmp_parts_d+0x2c>
  809cd4:	28c00117 	ldw	r3,4(r5)
  809cd8:	20800117 	ldw	r2,4(r4)
  809cdc:	1885c83a 	sub	r2,r3,r2
  809ce0:	f800283a 	ret

00809ce4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809ce4:	defff804 	addi	sp,sp,-32
  809ce8:	dfc00715 	stw	ra,28(sp)
  809cec:	df000615 	stw	fp,24(sp)
  809cf0:	df000604 	addi	fp,sp,24
  809cf4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809cf8:	e0bffc17 	ldw	r2,-16(fp)
  809cfc:	1004803a 	cmplt	r2,r2,zero
  809d00:	1000081e 	bne	r2,zero,809d24 <close+0x40>
  809d04:	e0bffc17 	ldw	r2,-16(fp)
  809d08:	10800324 	muli	r2,r2,12
  809d0c:	1007883a 	mov	r3,r2
  809d10:	00802074 	movhi	r2,129
  809d14:	109b2304 	addi	r2,r2,27788
  809d18:	1887883a 	add	r3,r3,r2
  809d1c:	e0ffff15 	stw	r3,-4(fp)
  809d20:	00000106 	br	809d28 <close+0x44>
  809d24:	e03fff15 	stw	zero,-4(fp)
  809d28:	e0bfff17 	ldw	r2,-4(fp)
  809d2c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  809d30:	e0bffb17 	ldw	r2,-20(fp)
  809d34:	1005003a 	cmpeq	r2,r2,zero
  809d38:	10001d1e 	bne	r2,zero,809db0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  809d3c:	e0bffb17 	ldw	r2,-20(fp)
  809d40:	10800017 	ldw	r2,0(r2)
  809d44:	10800417 	ldw	r2,16(r2)
  809d48:	1005003a 	cmpeq	r2,r2,zero
  809d4c:	1000071e 	bne	r2,zero,809d6c <close+0x88>
  809d50:	e0bffb17 	ldw	r2,-20(fp)
  809d54:	10800017 	ldw	r2,0(r2)
  809d58:	10800417 	ldw	r2,16(r2)
  809d5c:	e13ffb17 	ldw	r4,-20(fp)
  809d60:	103ee83a 	callr	r2
  809d64:	e0bffe15 	stw	r2,-8(fp)
  809d68:	00000106 	br	809d70 <close+0x8c>
  809d6c:	e03ffe15 	stw	zero,-8(fp)
  809d70:	e0bffe17 	ldw	r2,-8(fp)
  809d74:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  809d78:	e13ffc17 	ldw	r4,-16(fp)
  809d7c:	080a5440 	call	80a544 <alt_release_fd>
    if (rval < 0)
  809d80:	e0bffa17 	ldw	r2,-24(fp)
  809d84:	1004403a 	cmpge	r2,r2,zero
  809d88:	1000071e 	bne	r2,zero,809da8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  809d8c:	0809de00 	call	809de0 <alt_get_errno>
  809d90:	e0fffa17 	ldw	r3,-24(fp)
  809d94:	00c7c83a 	sub	r3,zero,r3
  809d98:	10c00015 	stw	r3,0(r2)
      return -1;
  809d9c:	00bfffc4 	movi	r2,-1
  809da0:	e0bffd15 	stw	r2,-12(fp)
  809da4:	00000806 	br	809dc8 <close+0xe4>
    }
    return 0;
  809da8:	e03ffd15 	stw	zero,-12(fp)
  809dac:	00000606 	br	809dc8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809db0:	0809de00 	call	809de0 <alt_get_errno>
  809db4:	1007883a 	mov	r3,r2
  809db8:	00801444 	movi	r2,81
  809dbc:	18800015 	stw	r2,0(r3)
    return -1;
  809dc0:	00bfffc4 	movi	r2,-1
  809dc4:	e0bffd15 	stw	r2,-12(fp)
  809dc8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  809dcc:	e037883a 	mov	sp,fp
  809dd0:	dfc00117 	ldw	ra,4(sp)
  809dd4:	df000017 	ldw	fp,0(sp)
  809dd8:	dec00204 	addi	sp,sp,8
  809ddc:	f800283a 	ret

00809de0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809de0:	defffd04 	addi	sp,sp,-12
  809de4:	dfc00215 	stw	ra,8(sp)
  809de8:	df000115 	stw	fp,4(sp)
  809dec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  809df0:	00802074 	movhi	r2,129
  809df4:	109fb404 	addi	r2,r2,32464
  809df8:	10800017 	ldw	r2,0(r2)
  809dfc:	1005003a 	cmpeq	r2,r2,zero
  809e00:	1000061e 	bne	r2,zero,809e1c <alt_get_errno+0x3c>
  809e04:	00802074 	movhi	r2,129
  809e08:	109fb404 	addi	r2,r2,32464
  809e0c:	10800017 	ldw	r2,0(r2)
  809e10:	103ee83a 	callr	r2
  809e14:	e0bfff15 	stw	r2,-4(fp)
  809e18:	00000306 	br	809e28 <alt_get_errno+0x48>
  809e1c:	008020b4 	movhi	r2,130
  809e20:	10a6a204 	addi	r2,r2,-25976
  809e24:	e0bfff15 	stw	r2,-4(fp)
  809e28:	e0bfff17 	ldw	r2,-4(fp)
}
  809e2c:	e037883a 	mov	sp,fp
  809e30:	dfc00117 	ldw	ra,4(sp)
  809e34:	df000017 	ldw	fp,0(sp)
  809e38:	dec00204 	addi	sp,sp,8
  809e3c:	f800283a 	ret

00809e40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  809e40:	defffc04 	addi	sp,sp,-16
  809e44:	df000315 	stw	fp,12(sp)
  809e48:	df000304 	addi	fp,sp,12
  809e4c:	e13ffd15 	stw	r4,-12(fp)
  809e50:	e17ffe15 	stw	r5,-8(fp)
  809e54:	e1bfff15 	stw	r6,-4(fp)
  return len;
  809e58:	e0bfff17 	ldw	r2,-4(fp)
}
  809e5c:	e037883a 	mov	sp,fp
  809e60:	df000017 	ldw	fp,0(sp)
  809e64:	dec00104 	addi	sp,sp,4
  809e68:	f800283a 	ret

00809e6c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809e6c:	defff904 	addi	sp,sp,-28
  809e70:	dfc00615 	stw	ra,24(sp)
  809e74:	df000515 	stw	fp,20(sp)
  809e78:	df000504 	addi	fp,sp,20
  809e7c:	e13ffc15 	stw	r4,-16(fp)
  809e80:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809e84:	e0bffc17 	ldw	r2,-16(fp)
  809e88:	1004803a 	cmplt	r2,r2,zero
  809e8c:	1000081e 	bne	r2,zero,809eb0 <fstat+0x44>
  809e90:	e0bffc17 	ldw	r2,-16(fp)
  809e94:	10800324 	muli	r2,r2,12
  809e98:	1007883a 	mov	r3,r2
  809e9c:	00802074 	movhi	r2,129
  809ea0:	109b2304 	addi	r2,r2,27788
  809ea4:	1887883a 	add	r3,r3,r2
  809ea8:	e0ffff15 	stw	r3,-4(fp)
  809eac:	00000106 	br	809eb4 <fstat+0x48>
  809eb0:	e03fff15 	stw	zero,-4(fp)
  809eb4:	e0bfff17 	ldw	r2,-4(fp)
  809eb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  809ebc:	e0bffb17 	ldw	r2,-20(fp)
  809ec0:	1005003a 	cmpeq	r2,r2,zero
  809ec4:	1000121e 	bne	r2,zero,809f10 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809ec8:	e0bffb17 	ldw	r2,-20(fp)
  809ecc:	10800017 	ldw	r2,0(r2)
  809ed0:	10800817 	ldw	r2,32(r2)
  809ed4:	1005003a 	cmpeq	r2,r2,zero
  809ed8:	1000081e 	bne	r2,zero,809efc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  809edc:	e0bffb17 	ldw	r2,-20(fp)
  809ee0:	10800017 	ldw	r2,0(r2)
  809ee4:	10800817 	ldw	r2,32(r2)
  809ee8:	e13ffb17 	ldw	r4,-20(fp)
  809eec:	e17ffd17 	ldw	r5,-12(fp)
  809ef0:	103ee83a 	callr	r2
  809ef4:	e0bffe15 	stw	r2,-8(fp)
  809ef8:	00000b06 	br	809f28 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809efc:	e0fffd17 	ldw	r3,-12(fp)
  809f00:	00880004 	movi	r2,8192
  809f04:	18800115 	stw	r2,4(r3)
      return 0;
  809f08:	e03ffe15 	stw	zero,-8(fp)
  809f0c:	00000606 	br	809f28 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809f10:	0809f400 	call	809f40 <alt_get_errno>
  809f14:	1007883a 	mov	r3,r2
  809f18:	00801444 	movi	r2,81
  809f1c:	18800015 	stw	r2,0(r3)
    return -1;
  809f20:	00bfffc4 	movi	r2,-1
  809f24:	e0bffe15 	stw	r2,-8(fp)
  809f28:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  809f2c:	e037883a 	mov	sp,fp
  809f30:	dfc00117 	ldw	ra,4(sp)
  809f34:	df000017 	ldw	fp,0(sp)
  809f38:	dec00204 	addi	sp,sp,8
  809f3c:	f800283a 	ret

00809f40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809f40:	defffd04 	addi	sp,sp,-12
  809f44:	dfc00215 	stw	ra,8(sp)
  809f48:	df000115 	stw	fp,4(sp)
  809f4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  809f50:	00802074 	movhi	r2,129
  809f54:	109fb404 	addi	r2,r2,32464
  809f58:	10800017 	ldw	r2,0(r2)
  809f5c:	1005003a 	cmpeq	r2,r2,zero
  809f60:	1000061e 	bne	r2,zero,809f7c <alt_get_errno+0x3c>
  809f64:	00802074 	movhi	r2,129
  809f68:	109fb404 	addi	r2,r2,32464
  809f6c:	10800017 	ldw	r2,0(r2)
  809f70:	103ee83a 	callr	r2
  809f74:	e0bfff15 	stw	r2,-4(fp)
  809f78:	00000306 	br	809f88 <alt_get_errno+0x48>
  809f7c:	008020b4 	movhi	r2,130
  809f80:	10a6a204 	addi	r2,r2,-25976
  809f84:	e0bfff15 	stw	r2,-4(fp)
  809f88:	e0bfff17 	ldw	r2,-4(fp)
}
  809f8c:	e037883a 	mov	sp,fp
  809f90:	dfc00117 	ldw	ra,4(sp)
  809f94:	df000017 	ldw	fp,0(sp)
  809f98:	dec00204 	addi	sp,sp,8
  809f9c:	f800283a 	ret

00809fa0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  809fa0:	deffeb04 	addi	sp,sp,-84
  809fa4:	dfc01415 	stw	ra,80(sp)
  809fa8:	df001315 	stw	fp,76(sp)
  809fac:	df001304 	addi	fp,sp,76
  809fb0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809fb4:	e0bffd17 	ldw	r2,-12(fp)
  809fb8:	1004803a 	cmplt	r2,r2,zero
  809fbc:	1000081e 	bne	r2,zero,809fe0 <isatty+0x40>
  809fc0:	e0bffd17 	ldw	r2,-12(fp)
  809fc4:	10800324 	muli	r2,r2,12
  809fc8:	1007883a 	mov	r3,r2
  809fcc:	00802074 	movhi	r2,129
  809fd0:	109b2304 	addi	r2,r2,27788
  809fd4:	1887883a 	add	r3,r3,r2
  809fd8:	e0ffff15 	stw	r3,-4(fp)
  809fdc:	00000106 	br	809fe4 <isatty+0x44>
  809fe0:	e03fff15 	stw	zero,-4(fp)
  809fe4:	e0bfff17 	ldw	r2,-4(fp)
  809fe8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  809fec:	e0bfed17 	ldw	r2,-76(fp)
  809ff0:	1005003a 	cmpeq	r2,r2,zero
  809ff4:	10000f1e 	bne	r2,zero,80a034 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809ff8:	e0bfed17 	ldw	r2,-76(fp)
  809ffc:	10800017 	ldw	r2,0(r2)
  80a000:	10800817 	ldw	r2,32(r2)
  80a004:	1004c03a 	cmpne	r2,r2,zero
  80a008:	1000031e 	bne	r2,zero,80a018 <isatty+0x78>
    {
      return 1;
  80a00c:	00800044 	movi	r2,1
  80a010:	e0bffe15 	stw	r2,-8(fp)
  80a014:	00000c06 	br	80a048 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a018:	e17fee04 	addi	r5,fp,-72
  80a01c:	e13ffd17 	ldw	r4,-12(fp)
  80a020:	0809e6c0 	call	809e6c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a024:	e0bfef17 	ldw	r2,-68(fp)
  80a028:	10880020 	cmpeqi	r2,r2,8192
  80a02c:	e0bffe15 	stw	r2,-8(fp)
  80a030:	00000506 	br	80a048 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a034:	080a0600 	call	80a060 <alt_get_errno>
  80a038:	1007883a 	mov	r3,r2
  80a03c:	00801444 	movi	r2,81
  80a040:	18800015 	stw	r2,0(r3)
    return 0;
  80a044:	e03ffe15 	stw	zero,-8(fp)
  80a048:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a04c:	e037883a 	mov	sp,fp
  80a050:	dfc00117 	ldw	ra,4(sp)
  80a054:	df000017 	ldw	fp,0(sp)
  80a058:	dec00204 	addi	sp,sp,8
  80a05c:	f800283a 	ret

0080a060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a060:	defffd04 	addi	sp,sp,-12
  80a064:	dfc00215 	stw	ra,8(sp)
  80a068:	df000115 	stw	fp,4(sp)
  80a06c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a070:	00802074 	movhi	r2,129
  80a074:	109fb404 	addi	r2,r2,32464
  80a078:	10800017 	ldw	r2,0(r2)
  80a07c:	1005003a 	cmpeq	r2,r2,zero
  80a080:	1000061e 	bne	r2,zero,80a09c <alt_get_errno+0x3c>
  80a084:	00802074 	movhi	r2,129
  80a088:	109fb404 	addi	r2,r2,32464
  80a08c:	10800017 	ldw	r2,0(r2)
  80a090:	103ee83a 	callr	r2
  80a094:	e0bfff15 	stw	r2,-4(fp)
  80a098:	00000306 	br	80a0a8 <alt_get_errno+0x48>
  80a09c:	008020b4 	movhi	r2,130
  80a0a0:	10a6a204 	addi	r2,r2,-25976
  80a0a4:	e0bfff15 	stw	r2,-4(fp)
  80a0a8:	e0bfff17 	ldw	r2,-4(fp)
}
  80a0ac:	e037883a 	mov	sp,fp
  80a0b0:	dfc00117 	ldw	ra,4(sp)
  80a0b4:	df000017 	ldw	fp,0(sp)
  80a0b8:	dec00204 	addi	sp,sp,8
  80a0bc:	f800283a 	ret

0080a0c0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80a0c0:	defffe04 	addi	sp,sp,-8
  80a0c4:	dfc00115 	stw	ra,4(sp)
  80a0c8:	df000015 	stw	fp,0(sp)
  80a0cc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80a0d0:	01002074 	movhi	r4,129
  80a0d4:	211fd804 	addi	r4,r4,32608
  80a0d8:	01402074 	movhi	r5,129
  80a0dc:	29591404 	addi	r5,r5,25680
  80a0e0:	01802074 	movhi	r6,129
  80a0e4:	319fd804 	addi	r6,r6,32608
  80a0e8:	080a1400 	call	80a140 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80a0ec:	01002034 	movhi	r4,128
  80a0f0:	21000004 	addi	r4,r4,0
  80a0f4:	01404434 	movhi	r5,272
  80a0f8:	29500804 	addi	r5,r5,16416
  80a0fc:	01804434 	movhi	r6,272
  80a100:	31906f04 	addi	r6,r6,16828
  80a104:	080a1400 	call	80a140 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a108:	01002074 	movhi	r4,129
  80a10c:	2117f204 	addi	r4,r4,24520
  80a110:	01402074 	movhi	r5,129
  80a114:	2957f204 	addi	r5,r5,24520
  80a118:	01802074 	movhi	r6,129
  80a11c:	31991404 	addi	r6,r6,25680
  80a120:	080a1400 	call	80a140 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a124:	08148ac0 	call	8148ac <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a128:	0814b600 	call	814b60 <alt_icache_flush_all>
}
  80a12c:	e037883a 	mov	sp,fp
  80a130:	dfc00117 	ldw	ra,4(sp)
  80a134:	df000017 	ldw	fp,0(sp)
  80a138:	dec00204 	addi	sp,sp,8
  80a13c:	f800283a 	ret

0080a140 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a140:	defffc04 	addi	sp,sp,-16
  80a144:	df000315 	stw	fp,12(sp)
  80a148:	df000304 	addi	fp,sp,12
  80a14c:	e13ffd15 	stw	r4,-12(fp)
  80a150:	e17ffe15 	stw	r5,-8(fp)
  80a154:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a158:	e0fffe17 	ldw	r3,-8(fp)
  80a15c:	e0bffd17 	ldw	r2,-12(fp)
  80a160:	18800e26 	beq	r3,r2,80a19c <alt_load_section+0x5c>
  {
    while( to != end )
  80a164:	00000a06 	br	80a190 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a168:	e0bffd17 	ldw	r2,-12(fp)
  80a16c:	10c00017 	ldw	r3,0(r2)
  80a170:	e0bffe17 	ldw	r2,-8(fp)
  80a174:	10c00015 	stw	r3,0(r2)
  80a178:	e0bffe17 	ldw	r2,-8(fp)
  80a17c:	10800104 	addi	r2,r2,4
  80a180:	e0bffe15 	stw	r2,-8(fp)
  80a184:	e0bffd17 	ldw	r2,-12(fp)
  80a188:	10800104 	addi	r2,r2,4
  80a18c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a190:	e0fffe17 	ldw	r3,-8(fp)
  80a194:	e0bfff17 	ldw	r2,-4(fp)
  80a198:	18bff31e 	bne	r3,r2,80a168 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a19c:	e037883a 	mov	sp,fp
  80a1a0:	df000017 	ldw	fp,0(sp)
  80a1a4:	dec00104 	addi	sp,sp,4
  80a1a8:	f800283a 	ret

0080a1ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a1ac:	defff804 	addi	sp,sp,-32
  80a1b0:	dfc00715 	stw	ra,28(sp)
  80a1b4:	df000615 	stw	fp,24(sp)
  80a1b8:	df000604 	addi	fp,sp,24
  80a1bc:	e13ffc15 	stw	r4,-16(fp)
  80a1c0:	e17ffd15 	stw	r5,-12(fp)
  80a1c4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a1c8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a1cc:	e0bffc17 	ldw	r2,-16(fp)
  80a1d0:	1004803a 	cmplt	r2,r2,zero
  80a1d4:	1000081e 	bne	r2,zero,80a1f8 <lseek+0x4c>
  80a1d8:	e0bffc17 	ldw	r2,-16(fp)
  80a1dc:	10800324 	muli	r2,r2,12
  80a1e0:	1007883a 	mov	r3,r2
  80a1e4:	00802074 	movhi	r2,129
  80a1e8:	109b2304 	addi	r2,r2,27788
  80a1ec:	1887883a 	add	r3,r3,r2
  80a1f0:	e0ffff15 	stw	r3,-4(fp)
  80a1f4:	00000106 	br	80a1fc <lseek+0x50>
  80a1f8:	e03fff15 	stw	zero,-4(fp)
  80a1fc:	e0bfff17 	ldw	r2,-4(fp)
  80a200:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a204:	e0bffb17 	ldw	r2,-20(fp)
  80a208:	1005003a 	cmpeq	r2,r2,zero
  80a20c:	1000111e 	bne	r2,zero,80a254 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a210:	e0bffb17 	ldw	r2,-20(fp)
  80a214:	10800017 	ldw	r2,0(r2)
  80a218:	10800717 	ldw	r2,28(r2)
  80a21c:	1005003a 	cmpeq	r2,r2,zero
  80a220:	1000091e 	bne	r2,zero,80a248 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a224:	e0bffb17 	ldw	r2,-20(fp)
  80a228:	10800017 	ldw	r2,0(r2)
  80a22c:	10800717 	ldw	r2,28(r2)
  80a230:	e13ffb17 	ldw	r4,-20(fp)
  80a234:	e17ffd17 	ldw	r5,-12(fp)
  80a238:	e1bffe17 	ldw	r6,-8(fp)
  80a23c:	103ee83a 	callr	r2
  80a240:	e0bffa15 	stw	r2,-24(fp)
  80a244:	00000506 	br	80a25c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a248:	00bfde84 	movi	r2,-134
  80a24c:	e0bffa15 	stw	r2,-24(fp)
  80a250:	00000206 	br	80a25c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a254:	00bfebc4 	movi	r2,-81
  80a258:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a25c:	e0bffa17 	ldw	r2,-24(fp)
  80a260:	1004403a 	cmpge	r2,r2,zero
  80a264:	1000071e 	bne	r2,zero,80a284 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80a268:	080a29c0 	call	80a29c <alt_get_errno>
  80a26c:	1007883a 	mov	r3,r2
  80a270:	e0bffa17 	ldw	r2,-24(fp)
  80a274:	0085c83a 	sub	r2,zero,r2
  80a278:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a27c:	00bfffc4 	movi	r2,-1
  80a280:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a284:	e0bffa17 	ldw	r2,-24(fp)
}
  80a288:	e037883a 	mov	sp,fp
  80a28c:	dfc00117 	ldw	ra,4(sp)
  80a290:	df000017 	ldw	fp,0(sp)
  80a294:	dec00204 	addi	sp,sp,8
  80a298:	f800283a 	ret

0080a29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a29c:	defffd04 	addi	sp,sp,-12
  80a2a0:	dfc00215 	stw	ra,8(sp)
  80a2a4:	df000115 	stw	fp,4(sp)
  80a2a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a2ac:	00802074 	movhi	r2,129
  80a2b0:	109fb404 	addi	r2,r2,32464
  80a2b4:	10800017 	ldw	r2,0(r2)
  80a2b8:	1005003a 	cmpeq	r2,r2,zero
  80a2bc:	1000061e 	bne	r2,zero,80a2d8 <alt_get_errno+0x3c>
  80a2c0:	00802074 	movhi	r2,129
  80a2c4:	109fb404 	addi	r2,r2,32464
  80a2c8:	10800017 	ldw	r2,0(r2)
  80a2cc:	103ee83a 	callr	r2
  80a2d0:	e0bfff15 	stw	r2,-4(fp)
  80a2d4:	00000306 	br	80a2e4 <alt_get_errno+0x48>
  80a2d8:	008020b4 	movhi	r2,130
  80a2dc:	10a6a204 	addi	r2,r2,-25976
  80a2e0:	e0bfff15 	stw	r2,-4(fp)
  80a2e4:	e0bfff17 	ldw	r2,-4(fp)
}
  80a2e8:	e037883a 	mov	sp,fp
  80a2ec:	dfc00117 	ldw	ra,4(sp)
  80a2f0:	df000017 	ldw	fp,0(sp)
  80a2f4:	dec00204 	addi	sp,sp,8
  80a2f8:	f800283a 	ret

0080a2fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a2fc:	defffb04 	addi	sp,sp,-20
  80a300:	dfc00415 	stw	ra,16(sp)
  80a304:	df000315 	stw	fp,12(sp)
  80a308:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a30c:	0009883a 	mov	r4,zero
  80a310:	0812d8c0 	call	812d8c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80a314:	080b3e80 	call	80b3e8 <OSInit>
  80a318:	01000044 	movi	r4,1
  80a31c:	08102ac0 	call	8102ac <OSSemCreate>
  80a320:	1007883a 	mov	r3,r2
  80a324:	008020b4 	movhi	r2,130
  80a328:	10a6a804 	addi	r2,r2,-25952
  80a32c:	10c00015 	stw	r3,0(r2)
  80a330:	01000044 	movi	r4,1
  80a334:	08102ac0 	call	8102ac <OSSemCreate>
  80a338:	1007883a 	mov	r3,r2
  80a33c:	008020b4 	movhi	r2,130
  80a340:	10a6aa04 	addi	r2,r2,-25944
  80a344:	10c00015 	stw	r3,0(r2)
  80a348:	008020b4 	movhi	r2,130
  80a34c:	10a6a304 	addi	r2,r2,-25972
  80a350:	e0bffd15 	stw	r2,-12(fp)
  80a354:	00800044 	movi	r2,1
  80a358:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80a35c:	e13ffe0b 	ldhu	r4,-8(fp)
  80a360:	08102ac0 	call	8102ac <OSSemCreate>
  80a364:	1007883a 	mov	r3,r2
  80a368:	e0bffd17 	ldw	r2,-12(fp)
  80a36c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a370:	0812dc00 	call	812dc0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a374:	01002074 	movhi	r4,129
  80a378:	2118bb04 	addi	r4,r4,25324
  80a37c:	01402074 	movhi	r5,129
  80a380:	2958bb04 	addi	r5,r5,25324
  80a384:	01802074 	movhi	r6,129
  80a388:	3198bb04 	addi	r6,r6,25324
  80a38c:	0814f200 	call	814f20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a390:	0814a040 	call	814a04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a394:	01002074 	movhi	r4,129
  80a398:	21129a04 	addi	r4,r4,19048
  80a39c:	0815bb00 	call	815bb0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a3a0:	d126fb17 	ldw	r4,-25620(gp)
  80a3a4:	d166fc17 	ldw	r5,-25616(gp)
  80a3a8:	d1a6fd17 	ldw	r6,-25612(gp)
  80a3ac:	080028c0 	call	80028c <main>
  80a3b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a3b4:	01000044 	movi	r4,1
  80a3b8:	0809ce40 	call	809ce4 <close>
  exit (result);
  80a3bc:	e13fff17 	ldw	r4,-4(fp)
  80a3c0:	0815bc40 	call	815bc4 <exit>

0080a3c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a3c4:	defff704 	addi	sp,sp,-36
  80a3c8:	dfc00815 	stw	ra,32(sp)
  80a3cc:	df000715 	stw	fp,28(sp)
  80a3d0:	df000704 	addi	fp,sp,28
  80a3d4:	e13ffb15 	stw	r4,-20(fp)
  80a3d8:	e17ffc15 	stw	r5,-16(fp)
  80a3dc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a3e0:	e0bffb17 	ldw	r2,-20(fp)
  80a3e4:	1004803a 	cmplt	r2,r2,zero
  80a3e8:	1000081e 	bne	r2,zero,80a40c <read+0x48>
  80a3ec:	e0bffb17 	ldw	r2,-20(fp)
  80a3f0:	10800324 	muli	r2,r2,12
  80a3f4:	1007883a 	mov	r3,r2
  80a3f8:	00802074 	movhi	r2,129
  80a3fc:	109b2304 	addi	r2,r2,27788
  80a400:	1887883a 	add	r3,r3,r2
  80a404:	e0ffff15 	stw	r3,-4(fp)
  80a408:	00000106 	br	80a410 <read+0x4c>
  80a40c:	e03fff15 	stw	zero,-4(fp)
  80a410:	e0bfff17 	ldw	r2,-4(fp)
  80a414:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a418:	e0bffa17 	ldw	r2,-24(fp)
  80a41c:	1005003a 	cmpeq	r2,r2,zero
  80a420:	1000241e 	bne	r2,zero,80a4b4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a424:	e0bffa17 	ldw	r2,-24(fp)
  80a428:	10800217 	ldw	r2,8(r2)
  80a42c:	108000cc 	andi	r2,r2,3
  80a430:	10800060 	cmpeqi	r2,r2,1
  80a434:	10001a1e 	bne	r2,zero,80a4a0 <read+0xdc>
  80a438:	e0bffa17 	ldw	r2,-24(fp)
  80a43c:	10800017 	ldw	r2,0(r2)
  80a440:	10800517 	ldw	r2,20(r2)
  80a444:	1005003a 	cmpeq	r2,r2,zero
  80a448:	1000151e 	bne	r2,zero,80a4a0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a44c:	e0bffa17 	ldw	r2,-24(fp)
  80a450:	10800017 	ldw	r2,0(r2)
  80a454:	10800517 	ldw	r2,20(r2)
  80a458:	e17ffc17 	ldw	r5,-16(fp)
  80a45c:	e1bffd17 	ldw	r6,-12(fp)
  80a460:	e13ffa17 	ldw	r4,-24(fp)
  80a464:	103ee83a 	callr	r2
  80a468:	e0bff915 	stw	r2,-28(fp)
  80a46c:	e0bff917 	ldw	r2,-28(fp)
  80a470:	1004403a 	cmpge	r2,r2,zero
  80a474:	1000071e 	bne	r2,zero,80a494 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80a478:	080a4e40 	call	80a4e4 <alt_get_errno>
  80a47c:	e0fff917 	ldw	r3,-28(fp)
  80a480:	00c7c83a 	sub	r3,zero,r3
  80a484:	10c00015 	stw	r3,0(r2)
          return -1;
  80a488:	00bfffc4 	movi	r2,-1
  80a48c:	e0bffe15 	stw	r2,-8(fp)
  80a490:	00000e06 	br	80a4cc <read+0x108>
        }
        return rval;
  80a494:	e0bff917 	ldw	r2,-28(fp)
  80a498:	e0bffe15 	stw	r2,-8(fp)
  80a49c:	00000b06 	br	80a4cc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a4a0:	080a4e40 	call	80a4e4 <alt_get_errno>
  80a4a4:	1007883a 	mov	r3,r2
  80a4a8:	00800344 	movi	r2,13
  80a4ac:	18800015 	stw	r2,0(r3)
  80a4b0:	00000406 	br	80a4c4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a4b4:	080a4e40 	call	80a4e4 <alt_get_errno>
  80a4b8:	1007883a 	mov	r3,r2
  80a4bc:	00801444 	movi	r2,81
  80a4c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a4c4:	00bfffc4 	movi	r2,-1
  80a4c8:	e0bffe15 	stw	r2,-8(fp)
  80a4cc:	e0bffe17 	ldw	r2,-8(fp)
}
  80a4d0:	e037883a 	mov	sp,fp
  80a4d4:	dfc00117 	ldw	ra,4(sp)
  80a4d8:	df000017 	ldw	fp,0(sp)
  80a4dc:	dec00204 	addi	sp,sp,8
  80a4e0:	f800283a 	ret

0080a4e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a4e4:	defffd04 	addi	sp,sp,-12
  80a4e8:	dfc00215 	stw	ra,8(sp)
  80a4ec:	df000115 	stw	fp,4(sp)
  80a4f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a4f4:	00802074 	movhi	r2,129
  80a4f8:	109fb404 	addi	r2,r2,32464
  80a4fc:	10800017 	ldw	r2,0(r2)
  80a500:	1005003a 	cmpeq	r2,r2,zero
  80a504:	1000061e 	bne	r2,zero,80a520 <alt_get_errno+0x3c>
  80a508:	00802074 	movhi	r2,129
  80a50c:	109fb404 	addi	r2,r2,32464
  80a510:	10800017 	ldw	r2,0(r2)
  80a514:	103ee83a 	callr	r2
  80a518:	e0bfff15 	stw	r2,-4(fp)
  80a51c:	00000306 	br	80a52c <alt_get_errno+0x48>
  80a520:	008020b4 	movhi	r2,130
  80a524:	10a6a204 	addi	r2,r2,-25976
  80a528:	e0bfff15 	stw	r2,-4(fp)
  80a52c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a530:	e037883a 	mov	sp,fp
  80a534:	dfc00117 	ldw	ra,4(sp)
  80a538:	df000017 	ldw	fp,0(sp)
  80a53c:	dec00204 	addi	sp,sp,8
  80a540:	f800283a 	ret

0080a544 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a544:	defffe04 	addi	sp,sp,-8
  80a548:	df000115 	stw	fp,4(sp)
  80a54c:	df000104 	addi	fp,sp,4
  80a550:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a554:	e0bfff17 	ldw	r2,-4(fp)
  80a558:	108000d0 	cmplti	r2,r2,3
  80a55c:	10000d1e 	bne	r2,zero,80a594 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a560:	e0bfff17 	ldw	r2,-4(fp)
  80a564:	00c02074 	movhi	r3,129
  80a568:	18db2304 	addi	r3,r3,27788
  80a56c:	10800324 	muli	r2,r2,12
  80a570:	10c5883a 	add	r2,r2,r3
  80a574:	10800204 	addi	r2,r2,8
  80a578:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a57c:	e0bfff17 	ldw	r2,-4(fp)
  80a580:	00c02074 	movhi	r3,129
  80a584:	18db2304 	addi	r3,r3,27788
  80a588:	10800324 	muli	r2,r2,12
  80a58c:	10c5883a 	add	r2,r2,r3
  80a590:	10000015 	stw	zero,0(r2)
  }
}
  80a594:	e037883a 	mov	sp,fp
  80a598:	df000017 	ldw	fp,0(sp)
  80a59c:	dec00104 	addi	sp,sp,4
  80a5a0:	f800283a 	ret

0080a5a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80a5a4:	defff804 	addi	sp,sp,-32
  80a5a8:	df000715 	stw	fp,28(sp)
  80a5ac:	df000704 	addi	fp,sp,28
  80a5b0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a5b4:	0005303a 	rdctl	r2,status
  80a5b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a5bc:	e0fffb17 	ldw	r3,-20(fp)
  80a5c0:	00bfff84 	movi	r2,-2
  80a5c4:	1884703a 	and	r2,r3,r2
  80a5c8:	1001703a 	wrctl	status,r2
  
  return context;
  80a5cc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80a5d0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80a5d4:	d0a00c17 	ldw	r2,-32720(gp)
  80a5d8:	10c000c4 	addi	r3,r2,3
  80a5dc:	00bfff04 	movi	r2,-4
  80a5e0:	1884703a 	and	r2,r3,r2
  80a5e4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80a5e8:	d0e00c17 	ldw	r3,-32720(gp)
  80a5ec:	e0bffe17 	ldw	r2,-8(fp)
  80a5f0:	1887883a 	add	r3,r3,r2
  80a5f4:	00804034 	movhi	r2,256
  80a5f8:	10800004 	addi	r2,r2,0
  80a5fc:	10c0072e 	bgeu	r2,r3,80a61c <sbrk+0x78>
  80a600:	e0bffd17 	ldw	r2,-12(fp)
  80a604:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a608:	e0bffa17 	ldw	r2,-24(fp)
  80a60c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80a610:	00bfffc4 	movi	r2,-1
  80a614:	e0bfff15 	stw	r2,-4(fp)
  80a618:	00000c06 	br	80a64c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80a61c:	d0a00c17 	ldw	r2,-32720(gp)
  80a620:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80a624:	d0e00c17 	ldw	r3,-32720(gp)
  80a628:	e0bffe17 	ldw	r2,-8(fp)
  80a62c:	1885883a 	add	r2,r3,r2
  80a630:	d0a00c15 	stw	r2,-32720(gp)
  80a634:	e0bffd17 	ldw	r2,-12(fp)
  80a638:	e0bff915 	stw	r2,-28(fp)
  80a63c:	e0bff917 	ldw	r2,-28(fp)
  80a640:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80a644:	e0bffc17 	ldw	r2,-16(fp)
  80a648:	e0bfff15 	stw	r2,-4(fp)
  80a64c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80a650:	e037883a 	mov	sp,fp
  80a654:	df000017 	ldw	fp,0(sp)
  80a658:	dec00104 	addi	sp,sp,4
  80a65c:	f800283a 	ret

0080a660 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80a660:	defff704 	addi	sp,sp,-36
  80a664:	dfc00815 	stw	ra,32(sp)
  80a668:	df000715 	stw	fp,28(sp)
  80a66c:	df000704 	addi	fp,sp,28
  80a670:	e13ffb15 	stw	r4,-20(fp)
  80a674:	e17ffc15 	stw	r5,-16(fp)
  80a678:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a67c:	e0bffb17 	ldw	r2,-20(fp)
  80a680:	1004803a 	cmplt	r2,r2,zero
  80a684:	1000081e 	bne	r2,zero,80a6a8 <write+0x48>
  80a688:	e0bffb17 	ldw	r2,-20(fp)
  80a68c:	10800324 	muli	r2,r2,12
  80a690:	1007883a 	mov	r3,r2
  80a694:	00802074 	movhi	r2,129
  80a698:	109b2304 	addi	r2,r2,27788
  80a69c:	1887883a 	add	r3,r3,r2
  80a6a0:	e0ffff15 	stw	r3,-4(fp)
  80a6a4:	00000106 	br	80a6ac <write+0x4c>
  80a6a8:	e03fff15 	stw	zero,-4(fp)
  80a6ac:	e0bfff17 	ldw	r2,-4(fp)
  80a6b0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a6b4:	e0bffa17 	ldw	r2,-24(fp)
  80a6b8:	1005003a 	cmpeq	r2,r2,zero
  80a6bc:	1000241e 	bne	r2,zero,80a750 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80a6c0:	e0bffa17 	ldw	r2,-24(fp)
  80a6c4:	10800217 	ldw	r2,8(r2)
  80a6c8:	108000cc 	andi	r2,r2,3
  80a6cc:	1005003a 	cmpeq	r2,r2,zero
  80a6d0:	10001a1e 	bne	r2,zero,80a73c <write+0xdc>
  80a6d4:	e0bffa17 	ldw	r2,-24(fp)
  80a6d8:	10800017 	ldw	r2,0(r2)
  80a6dc:	10800617 	ldw	r2,24(r2)
  80a6e0:	1005003a 	cmpeq	r2,r2,zero
  80a6e4:	1000151e 	bne	r2,zero,80a73c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80a6e8:	e0bffa17 	ldw	r2,-24(fp)
  80a6ec:	10800017 	ldw	r2,0(r2)
  80a6f0:	10800617 	ldw	r2,24(r2)
  80a6f4:	e17ffc17 	ldw	r5,-16(fp)
  80a6f8:	e1bffd17 	ldw	r6,-12(fp)
  80a6fc:	e13ffa17 	ldw	r4,-24(fp)
  80a700:	103ee83a 	callr	r2
  80a704:	e0bff915 	stw	r2,-28(fp)
  80a708:	e0bff917 	ldw	r2,-28(fp)
  80a70c:	1004403a 	cmpge	r2,r2,zero
  80a710:	1000071e 	bne	r2,zero,80a730 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80a714:	080a7800 	call	80a780 <alt_get_errno>
  80a718:	e0fff917 	ldw	r3,-28(fp)
  80a71c:	00c7c83a 	sub	r3,zero,r3
  80a720:	10c00015 	stw	r3,0(r2)
        return -1;
  80a724:	00bfffc4 	movi	r2,-1
  80a728:	e0bffe15 	stw	r2,-8(fp)
  80a72c:	00000e06 	br	80a768 <write+0x108>
      }
      return rval;
  80a730:	e0bff917 	ldw	r2,-28(fp)
  80a734:	e0bffe15 	stw	r2,-8(fp)
  80a738:	00000b06 	br	80a768 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80a73c:	080a7800 	call	80a780 <alt_get_errno>
  80a740:	1007883a 	mov	r3,r2
  80a744:	00800344 	movi	r2,13
  80a748:	18800015 	stw	r2,0(r3)
  80a74c:	00000406 	br	80a760 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80a750:	080a7800 	call	80a780 <alt_get_errno>
  80a754:	1007883a 	mov	r3,r2
  80a758:	00801444 	movi	r2,81
  80a75c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a760:	00bfffc4 	movi	r2,-1
  80a764:	e0bffe15 	stw	r2,-8(fp)
  80a768:	e0bffe17 	ldw	r2,-8(fp)
}
  80a76c:	e037883a 	mov	sp,fp
  80a770:	dfc00117 	ldw	ra,4(sp)
  80a774:	df000017 	ldw	fp,0(sp)
  80a778:	dec00204 	addi	sp,sp,8
  80a77c:	f800283a 	ret

0080a780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a780:	defffd04 	addi	sp,sp,-12
  80a784:	dfc00215 	stw	ra,8(sp)
  80a788:	df000115 	stw	fp,4(sp)
  80a78c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a790:	00802074 	movhi	r2,129
  80a794:	109fb404 	addi	r2,r2,32464
  80a798:	10800017 	ldw	r2,0(r2)
  80a79c:	1005003a 	cmpeq	r2,r2,zero
  80a7a0:	1000061e 	bne	r2,zero,80a7bc <alt_get_errno+0x3c>
  80a7a4:	00802074 	movhi	r2,129
  80a7a8:	109fb404 	addi	r2,r2,32464
  80a7ac:	10800017 	ldw	r2,0(r2)
  80a7b0:	103ee83a 	callr	r2
  80a7b4:	e0bfff15 	stw	r2,-4(fp)
  80a7b8:	00000306 	br	80a7c8 <alt_get_errno+0x48>
  80a7bc:	008020b4 	movhi	r2,130
  80a7c0:	10a6a204 	addi	r2,r2,-25976
  80a7c4:	e0bfff15 	stw	r2,-4(fp)
  80a7c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80a7cc:	e037883a 	mov	sp,fp
  80a7d0:	dfc00117 	ldw	ra,4(sp)
  80a7d4:	df000017 	ldw	fp,0(sp)
  80a7d8:	dec00204 	addi	sp,sp,8
  80a7dc:	f800283a 	ret

0080a7e0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80a7e0:	deffdf04 	addi	sp,sp,-132
  80a7e4:	dfc02015 	stw	ra,128(sp)
  80a7e8:	df001f15 	stw	fp,124(sp)
  80a7ec:	df001f04 	addi	fp,sp,124
  80a7f0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80a7f4:	e17fe204 	addi	r5,fp,-120
  80a7f8:	01003fc4 	movi	r4,255
  80a7fc:	08126340 	call	812634 <OSTaskQuery>
  80a800:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80a804:	e0bffe83 	ldbu	r2,-6(fp)
  80a808:	10803fcc 	andi	r2,r2,255
  80a80c:	1004c03a 	cmpne	r2,r2,zero
  80a810:	1000191e 	bne	r2,zero,80a878 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80a814:	e0bfee83 	ldbu	r2,-70(fp)
  80a818:	10803fcc 	andi	r2,r2,255
  80a81c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80a820:	d126ff17 	ldw	r4,-25604(gp)
  80a824:	e17ffd04 	addi	r5,fp,-12
  80a828:	0810b800 	call	810b80 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80a82c:	e0bffe43 	ldbu	r2,-7(fp)
  80a830:	10803fcc 	andi	r2,r2,255
  80a834:	1005003a 	cmpeq	r2,r2,zero
  80a838:	1000071e 	bne	r2,zero,80a858 <__env_lock+0x78>
  80a83c:	d0e00d17 	ldw	r3,-32716(gp)
  80a840:	e0bfe117 	ldw	r2,-124(fp)
  80a844:	10c0041e 	bne	r2,r3,80a858 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80a848:	d0a6fe17 	ldw	r2,-25608(gp)
  80a84c:	10800044 	addi	r2,r2,1
  80a850:	d0a6fe15 	stw	r2,-25608(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80a854:	00000806 	br	80a878 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80a858:	d126ff17 	ldw	r4,-25604(gp)
  80a85c:	e1bffe84 	addi	r6,fp,-6
  80a860:	000b883a 	mov	r5,zero
  80a864:	08106600 	call	810660 <OSSemPend>
    locks  = 1;
  80a868:	00800044 	movi	r2,1
  80a86c:	d0a6fe15 	stw	r2,-25608(gp)
    lockid = id;
  80a870:	e0bfe117 	ldw	r2,-124(fp)
  80a874:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80a878:	e037883a 	mov	sp,fp
  80a87c:	dfc00117 	ldw	ra,4(sp)
  80a880:	df000017 	ldw	fp,0(sp)
  80a884:	dec00204 	addi	sp,sp,8
  80a888:	f800283a 	ret

0080a88c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80a88c:	defffd04 	addi	sp,sp,-12
  80a890:	dfc00215 	stw	ra,8(sp)
  80a894:	df000115 	stw	fp,4(sp)
  80a898:	df000104 	addi	fp,sp,4
  80a89c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80a8a0:	d0a6fe17 	ldw	r2,-25608(gp)
  80a8a4:	1005003a 	cmpeq	r2,r2,zero
  80a8a8:	10000a1e 	bne	r2,zero,80a8d4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80a8ac:	d0a6fe17 	ldw	r2,-25608(gp)
  80a8b0:	10bfffc4 	addi	r2,r2,-1
  80a8b4:	d0a6fe15 	stw	r2,-25608(gp)
  80a8b8:	d0a6fe17 	ldw	r2,-25608(gp)
  80a8bc:	1004c03a 	cmpne	r2,r2,zero
  80a8c0:	1000041e 	bne	r2,zero,80a8d4 <__env_unlock+0x48>
  {
    lockid = -1;
  80a8c4:	00bfffc4 	movi	r2,-1
  80a8c8:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  80a8cc:	d126ff17 	ldw	r4,-25604(gp)
  80a8d0:	0810a580 	call	810a58 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80a8d4:	e037883a 	mov	sp,fp
  80a8d8:	dfc00117 	ldw	ra,4(sp)
  80a8dc:	df000017 	ldw	fp,0(sp)
  80a8e0:	dec00204 	addi	sp,sp,8
  80a8e4:	f800283a 	ret

0080a8e8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80a8e8:	deffdb04 	addi	sp,sp,-148
  80a8ec:	dfc02415 	stw	ra,144(sp)
  80a8f0:	df002315 	stw	fp,140(sp)
  80a8f4:	df002304 	addi	fp,sp,140
  80a8f8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a8fc:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80a900:	008020b4 	movhi	r2,130
  80a904:	10a6ab44 	addi	r2,r2,-25939
  80a908:	10800003 	ldbu	r2,0(r2)
  80a90c:	10803fcc 	andi	r2,r2,255
  80a910:	10800058 	cmpnei	r2,r2,1
  80a914:	1000311e 	bne	r2,zero,80a9dc <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80a918:	e17fe204 	addi	r5,fp,-120
  80a91c:	01003fc4 	movi	r4,255
  80a920:	08126340 	call	812634 <OSTaskQuery>
  80a924:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80a928:	e0bffe83 	ldbu	r2,-6(fp)
  80a92c:	10803fcc 	andi	r2,r2,255
  80a930:	1004c03a 	cmpne	r2,r2,zero
  80a934:	1000291e 	bne	r2,zero,80a9dc <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80a938:	e0bfee83 	ldbu	r2,-70(fp)
  80a93c:	10803fcc 	andi	r2,r2,255
  80a940:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80a944:	d1270117 	ldw	r4,-25596(gp)
  80a948:	e17ffd04 	addi	r5,fp,-12
  80a94c:	0810b800 	call	810b80 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a950:	0005303a 	rdctl	r2,status
  80a954:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a958:	e0ffdf17 	ldw	r3,-132(fp)
  80a95c:	00bfff84 	movi	r2,-2
  80a960:	1884703a 	and	r2,r3,r2
  80a964:	1001703a 	wrctl	status,r2
  
  return context;
  80a968:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80a96c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80a970:	e0bffd0b 	ldhu	r2,-12(fp)
  80a974:	10bfffcc 	andi	r2,r2,65535
  80a978:	1004c03a 	cmpne	r2,r2,zero
  80a97c:	10000b1e 	bne	r2,zero,80a9ac <__malloc_lock+0xc4>
  80a980:	d0e00e17 	ldw	r3,-32712(gp)
  80a984:	e0bfe117 	ldw	r2,-124(fp)
  80a988:	10c0081e 	bne	r2,r3,80a9ac <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80a98c:	d0a70017 	ldw	r2,-25600(gp)
  80a990:	10800044 	addi	r2,r2,1
  80a994:	d0a70015 	stw	r2,-25600(gp)
  80a998:	e0bfe017 	ldw	r2,-128(fp)
  80a99c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a9a0:	e0bfde17 	ldw	r2,-136(fp)
  80a9a4:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80a9a8:	00000c06 	br	80a9dc <__malloc_lock+0xf4>
  80a9ac:	e0bfe017 	ldw	r2,-128(fp)
  80a9b0:	e0bfdd15 	stw	r2,-140(fp)
  80a9b4:	e0bfdd17 	ldw	r2,-140(fp)
  80a9b8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80a9bc:	d1270117 	ldw	r4,-25596(gp)
  80a9c0:	e1bffe84 	addi	r6,fp,-6
  80a9c4:	000b883a 	mov	r5,zero
  80a9c8:	08106600 	call	810660 <OSSemPend>
    locks  = 1;
  80a9cc:	00800044 	movi	r2,1
  80a9d0:	d0a70015 	stw	r2,-25600(gp)
    lockid = id;
  80a9d4:	e0bfe117 	ldw	r2,-124(fp)
  80a9d8:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80a9dc:	e037883a 	mov	sp,fp
  80a9e0:	dfc00117 	ldw	ra,4(sp)
  80a9e4:	df000017 	ldw	fp,0(sp)
  80a9e8:	dec00204 	addi	sp,sp,8
  80a9ec:	f800283a 	ret

0080a9f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80a9f0:	defff804 	addi	sp,sp,-32
  80a9f4:	dfc00715 	stw	ra,28(sp)
  80a9f8:	df000615 	stw	fp,24(sp)
  80a9fc:	df000604 	addi	fp,sp,24
  80aa00:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80aa04:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80aa08:	008020b4 	movhi	r2,130
  80aa0c:	10a6ab44 	addi	r2,r2,-25939
  80aa10:	10800003 	ldbu	r2,0(r2)
  80aa14:	10803fcc 	andi	r2,r2,255
  80aa18:	10800058 	cmpnei	r2,r2,1
  80aa1c:	1000231e 	bne	r2,zero,80aaac <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aa20:	0005303a 	rdctl	r2,status
  80aa24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aa28:	e0fffd17 	ldw	r3,-12(fp)
  80aa2c:	00bfff84 	movi	r2,-2
  80aa30:	1884703a 	and	r2,r3,r2
  80aa34:	1001703a 	wrctl	status,r2
  
  return context;
  80aa38:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80aa3c:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80aa40:	d0a70017 	ldw	r2,-25600(gp)
  80aa44:	1004c03a 	cmpne	r2,r2,zero
  80aa48:	1000051e 	bne	r2,zero,80aa60 <__malloc_unlock+0x70>
  80aa4c:	e0bffe17 	ldw	r2,-8(fp)
  80aa50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aa54:	e0bffc17 	ldw	r2,-16(fp)
  80aa58:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80aa5c:	00001306 	br	80aaac <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80aa60:	d0a70017 	ldw	r2,-25600(gp)
  80aa64:	10bfffc4 	addi	r2,r2,-1
  80aa68:	d0a70015 	stw	r2,-25600(gp)
  80aa6c:	d0a70017 	ldw	r2,-25600(gp)
  80aa70:	1004c03a 	cmpne	r2,r2,zero
  80aa74:	1000091e 	bne	r2,zero,80aa9c <__malloc_unlock+0xac>
  {
    lockid = -1;
  80aa78:	00bfffc4 	movi	r2,-1
  80aa7c:	d0a00e15 	stw	r2,-32712(gp)
  80aa80:	e0bffe17 	ldw	r2,-8(fp)
  80aa84:	e0bffb15 	stw	r2,-20(fp)
  80aa88:	e0bffb17 	ldw	r2,-20(fp)
  80aa8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80aa90:	d1270117 	ldw	r4,-25596(gp)
  80aa94:	0810a580 	call	810a58 <OSSemPost>
  80aa98:	00000406 	br	80aaac <__malloc_unlock+0xbc>
  80aa9c:	e0bffe17 	ldw	r2,-8(fp)
  80aaa0:	e0bffa15 	stw	r2,-24(fp)
  80aaa4:	e0bffa17 	ldw	r2,-24(fp)
  80aaa8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80aaac:	e037883a 	mov	sp,fp
  80aab0:	dfc00117 	ldw	ra,4(sp)
  80aab4:	df000017 	ldw	fp,0(sp)
  80aab8:	dec00204 	addi	sp,sp,8
  80aabc:	f800283a 	ret

0080aac0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80aac0:	defff604 	addi	sp,sp,-40
  80aac4:	dfc00915 	stw	ra,36(sp)
  80aac8:	df000815 	stw	fp,32(sp)
  80aacc:	df000804 	addi	fp,sp,32
  80aad0:	e13ffc15 	stw	r4,-16(fp)
  80aad4:	e17ffd15 	stw	r5,-12(fp)
  80aad8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80aadc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80aae0:	e0bffe17 	ldw	r2,-8(fp)
  80aae4:	1004c03a 	cmpne	r2,r2,zero
  80aae8:	1000021e 	bne	r2,zero,80aaf4 <OSEventNameGet+0x34>
        return (0);
  80aaec:	e03fff15 	stw	zero,-4(fp)
  80aaf0:	00003906 	br	80abd8 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80aaf4:	e0bffc17 	ldw	r2,-16(fp)
  80aaf8:	1004c03a 	cmpne	r2,r2,zero
  80aafc:	1000051e 	bne	r2,zero,80ab14 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80ab00:	e0fffe17 	ldw	r3,-8(fp)
  80ab04:	00800104 	movi	r2,4
  80ab08:	18800005 	stb	r2,0(r3)
        return (0);
  80ab0c:	e03fff15 	stw	zero,-4(fp)
  80ab10:	00003106 	br	80abd8 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ab14:	e0bffd17 	ldw	r2,-12(fp)
  80ab18:	1004c03a 	cmpne	r2,r2,zero
  80ab1c:	1000051e 	bne	r2,zero,80ab34 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80ab20:	e0fffe17 	ldw	r3,-8(fp)
  80ab24:	00800304 	movi	r2,12
  80ab28:	18800005 	stb	r2,0(r3)
        return (0);
  80ab2c:	e03fff15 	stw	zero,-4(fp)
  80ab30:	00002906 	br	80abd8 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ab34:	d0a71003 	ldbu	r2,-25536(gp)
  80ab38:	10803fcc 	andi	r2,r2,255
  80ab3c:	1005003a 	cmpeq	r2,r2,zero
  80ab40:	1000051e 	bne	r2,zero,80ab58 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80ab44:	e0fffe17 	ldw	r3,-8(fp)
  80ab48:	00800444 	movi	r2,17
  80ab4c:	18800005 	stb	r2,0(r3)
        return (0);
  80ab50:	e03fff15 	stw	zero,-4(fp)
  80ab54:	00002006 	br	80abd8 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80ab58:	e0bffc17 	ldw	r2,-16(fp)
  80ab5c:	10800003 	ldbu	r2,0(r2)
  80ab60:	10803fcc 	andi	r2,r2,255
  80ab64:	10bfffc4 	addi	r2,r2,-1
  80ab68:	10800128 	cmpgeui	r2,r2,4
  80ab6c:	1000161e 	bne	r2,zero,80abc8 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ab70:	0005303a 	rdctl	r2,status
  80ab74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ab78:	e0fff917 	ldw	r3,-28(fp)
  80ab7c:	00bfff84 	movi	r2,-2
  80ab80:	1884703a 	and	r2,r3,r2
  80ab84:	1001703a 	wrctl	status,r2
  
  return context;
  80ab88:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80ab8c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80ab90:	e0bffc17 	ldw	r2,-16(fp)
  80ab94:	11400384 	addi	r5,r2,14
  80ab98:	e13ffd17 	ldw	r4,-12(fp)
  80ab9c:	080c6440 	call	80c644 <OS_StrCopy>
  80aba0:	e0bffb05 	stb	r2,-20(fp)
  80aba4:	e0bffa17 	ldw	r2,-24(fp)
  80aba8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80abac:	e0bff817 	ldw	r2,-32(fp)
  80abb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80abb4:	e0bffe17 	ldw	r2,-8(fp)
  80abb8:	10000005 	stb	zero,0(r2)
    return (len);
  80abbc:	e0bffb03 	ldbu	r2,-20(fp)
  80abc0:	e0bfff15 	stw	r2,-4(fp)
  80abc4:	00000406 	br	80abd8 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80abc8:	e0fffe17 	ldw	r3,-8(fp)
  80abcc:	00800044 	movi	r2,1
  80abd0:	18800005 	stb	r2,0(r3)
             return (0);
  80abd4:	e03fff15 	stw	zero,-4(fp)
  80abd8:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80abdc:	e037883a 	mov	sp,fp
  80abe0:	dfc00117 	ldw	ra,4(sp)
  80abe4:	df000017 	ldw	fp,0(sp)
  80abe8:	dec00204 	addi	sp,sp,8
  80abec:	f800283a 	ret

0080abf0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80abf0:	defff604 	addi	sp,sp,-40
  80abf4:	dfc00915 	stw	ra,36(sp)
  80abf8:	df000815 	stw	fp,32(sp)
  80abfc:	df000804 	addi	fp,sp,32
  80ac00:	e13ffd15 	stw	r4,-12(fp)
  80ac04:	e17ffe15 	stw	r5,-8(fp)
  80ac08:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ac0c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ac10:	e0bfff17 	ldw	r2,-4(fp)
  80ac14:	1005003a 	cmpeq	r2,r2,zero
  80ac18:	1000411e 	bne	r2,zero,80ad20 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80ac1c:	e0bffd17 	ldw	r2,-12(fp)
  80ac20:	1004c03a 	cmpne	r2,r2,zero
  80ac24:	1000041e 	bne	r2,zero,80ac38 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80ac28:	e0ffff17 	ldw	r3,-4(fp)
  80ac2c:	00800104 	movi	r2,4
  80ac30:	18800005 	stb	r2,0(r3)
        return;
  80ac34:	00003a06 	br	80ad20 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ac38:	e0bffe17 	ldw	r2,-8(fp)
  80ac3c:	1004c03a 	cmpne	r2,r2,zero
  80ac40:	1000041e 	bne	r2,zero,80ac54 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80ac44:	e0ffff17 	ldw	r3,-4(fp)
  80ac48:	00800304 	movi	r2,12
  80ac4c:	18800005 	stb	r2,0(r3)
        return;
  80ac50:	00003306 	br	80ad20 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ac54:	d0a71003 	ldbu	r2,-25536(gp)
  80ac58:	10803fcc 	andi	r2,r2,255
  80ac5c:	1005003a 	cmpeq	r2,r2,zero
  80ac60:	1000041e 	bne	r2,zero,80ac74 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80ac64:	e0ffff17 	ldw	r3,-4(fp)
  80ac68:	00800484 	movi	r2,18
  80ac6c:	18800005 	stb	r2,0(r3)
        return;
  80ac70:	00002b06 	br	80ad20 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80ac74:	e0bffd17 	ldw	r2,-12(fp)
  80ac78:	10800003 	ldbu	r2,0(r2)
  80ac7c:	10803fcc 	andi	r2,r2,255
  80ac80:	10bfffc4 	addi	r2,r2,-1
  80ac84:	10800128 	cmpgeui	r2,r2,4
  80ac88:	10000f1e 	bne	r2,zero,80acc8 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ac8c:	0005303a 	rdctl	r2,status
  80ac90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ac94:	e0fffa17 	ldw	r3,-24(fp)
  80ac98:	00bfff84 	movi	r2,-2
  80ac9c:	1884703a 	and	r2,r3,r2
  80aca0:	1001703a 	wrctl	status,r2
  
  return context;
  80aca4:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80aca8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80acac:	e13ffe17 	ldw	r4,-8(fp)
  80acb0:	080c6c40 	call	80c6c4 <OS_StrLen>
  80acb4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80acb8:	e0bffc03 	ldbu	r2,-16(fp)
  80acbc:	10800828 	cmpgeui	r2,r2,32
  80acc0:	1000051e 	bne	r2,zero,80acd8 <OSEventNameSet+0xe8>
  80acc4:	00000c06 	br	80acf8 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80acc8:	e0ffff17 	ldw	r3,-4(fp)
  80accc:	00800044 	movi	r2,1
  80acd0:	18800005 	stb	r2,0(r3)
             return;
  80acd4:	00001206 	br	80ad20 <OSEventNameSet+0x130>
  80acd8:	e0bffb17 	ldw	r2,-20(fp)
  80acdc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ace0:	e0bff917 	ldw	r2,-28(fp)
  80ace4:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80ace8:	e0ffff17 	ldw	r3,-4(fp)
  80acec:	008002c4 	movi	r2,11
  80acf0:	18800005 	stb	r2,0(r3)
        return;
  80acf4:	00000a06 	br	80ad20 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80acf8:	e0bffd17 	ldw	r2,-12(fp)
  80acfc:	11000384 	addi	r4,r2,14
  80ad00:	e17ffe17 	ldw	r5,-8(fp)
  80ad04:	080c6440 	call	80c644 <OS_StrCopy>
  80ad08:	e0bffb17 	ldw	r2,-20(fp)
  80ad0c:	e0bff815 	stw	r2,-32(fp)
  80ad10:	e0bff817 	ldw	r2,-32(fp)
  80ad14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ad18:	e0bfff17 	ldw	r2,-4(fp)
  80ad1c:	10000005 	stb	zero,0(r2)
}
  80ad20:	e037883a 	mov	sp,fp
  80ad24:	dfc00117 	ldw	ra,4(sp)
  80ad28:	df000017 	ldw	fp,0(sp)
  80ad2c:	dec00204 	addi	sp,sp,8
  80ad30:	f800283a 	ret

0080ad34 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80ad34:	deffe704 	addi	sp,sp,-100
  80ad38:	dfc01815 	stw	ra,96(sp)
  80ad3c:	df001715 	stw	fp,92(sp)
  80ad40:	df001704 	addi	fp,sp,92
  80ad44:	e13ff615 	stw	r4,-40(fp)
  80ad48:	e17ff715 	stw	r5,-36(fp)
  80ad4c:	e1bff815 	stw	r6,-32(fp)
  80ad50:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80ad54:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80ad58:	e0800217 	ldw	r2,8(fp)
  80ad5c:	1004c03a 	cmpne	r2,r2,zero
  80ad60:	1000021e 	bne	r2,zero,80ad6c <OSEventPendMulti+0x38>
        return (0);
  80ad64:	e03fff15 	stw	zero,-4(fp)
  80ad68:	00019906 	br	80b3d0 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80ad6c:	e0bff617 	ldw	r2,-40(fp)
  80ad70:	1004c03a 	cmpne	r2,r2,zero
  80ad74:	1000051e 	bne	r2,zero,80ad8c <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80ad78:	e0c00217 	ldw	r3,8(fp)
  80ad7c:	00800104 	movi	r2,4
  80ad80:	18800005 	stb	r2,0(r3)
        return (0);
  80ad84:	e03fff15 	stw	zero,-4(fp)
  80ad88:	00019106 	br	80b3d0 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80ad8c:	e0bff717 	ldw	r2,-36(fp)
  80ad90:	1004c03a 	cmpne	r2,r2,zero
  80ad94:	1000051e 	bne	r2,zero,80adac <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80ad98:	e0c00217 	ldw	r3,8(fp)
  80ad9c:	00800104 	movi	r2,4
  80ada0:	18800005 	stb	r2,0(r3)
        return (0);
  80ada4:	e03fff15 	stw	zero,-4(fp)
  80ada8:	00018906 	br	80b3d0 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80adac:	e0bff817 	ldw	r2,-32(fp)
  80adb0:	1004c03a 	cmpne	r2,r2,zero
  80adb4:	1000051e 	bne	r2,zero,80adcc <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80adb8:	e0c00217 	ldw	r3,8(fp)
  80adbc:	00800104 	movi	r2,4
  80adc0:	18800005 	stb	r2,0(r3)
        return (0);
  80adc4:	e03fff15 	stw	zero,-4(fp)
  80adc8:	00018106 	br	80b3d0 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80adcc:	e0bff717 	ldw	r2,-36(fp)
  80add0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80add4:	e0bff617 	ldw	r2,-40(fp)
  80add8:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80addc:	e0bff517 	ldw	r2,-44(fp)
  80ade0:	10800017 	ldw	r2,0(r2)
  80ade4:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80ade8:	00001806 	br	80ae4c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80adec:	e0bff417 	ldw	r2,-48(fp)
  80adf0:	10800003 	ldbu	r2,0(r2)
  80adf4:	10803fcc 	andi	r2,r2,255
  80adf8:	e0bffe15 	stw	r2,-8(fp)
  80adfc:	e0fffe17 	ldw	r3,-8(fp)
  80ae00:	188000a0 	cmpeqi	r2,r3,2
  80ae04:	10000b1e 	bne	r2,zero,80ae34 <OSEventPendMulti+0x100>
  80ae08:	e0fffe17 	ldw	r3,-8(fp)
  80ae0c:	188000e0 	cmpeqi	r2,r3,3
  80ae10:	1000081e 	bne	r2,zero,80ae34 <OSEventPendMulti+0x100>
  80ae14:	e0fffe17 	ldw	r3,-8(fp)
  80ae18:	18800060 	cmpeqi	r2,r3,1
  80ae1c:	1000051e 	bne	r2,zero,80ae34 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80ae20:	e0c00217 	ldw	r3,8(fp)
  80ae24:	00800044 	movi	r2,1
  80ae28:	18800005 	stb	r2,0(r3)
                 return (0);
  80ae2c:	e03fff15 	stw	zero,-4(fp)
  80ae30:	00016706 	br	80b3d0 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80ae34:	e0bff517 	ldw	r2,-44(fp)
  80ae38:	10800104 	addi	r2,r2,4
  80ae3c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80ae40:	e0bff517 	ldw	r2,-44(fp)
  80ae44:	10800017 	ldw	r2,0(r2)
  80ae48:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80ae4c:	e0bff417 	ldw	r2,-48(fp)
  80ae50:	1004c03a 	cmpne	r2,r2,zero
  80ae54:	103fe51e 	bne	r2,zero,80adec <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80ae58:	d0a71003 	ldbu	r2,-25536(gp)
  80ae5c:	10803fcc 	andi	r2,r2,255
  80ae60:	1005003a 	cmpeq	r2,r2,zero
  80ae64:	1000051e 	bne	r2,zero,80ae7c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80ae68:	e0c00217 	ldw	r3,8(fp)
  80ae6c:	00800084 	movi	r2,2
  80ae70:	18800005 	stb	r2,0(r3)
        return (0);
  80ae74:	e03fff15 	stw	zero,-4(fp)
  80ae78:	00015506 	br	80b3d0 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80ae7c:	d0a70203 	ldbu	r2,-25592(gp)
  80ae80:	10803fcc 	andi	r2,r2,255
  80ae84:	1005003a 	cmpeq	r2,r2,zero
  80ae88:	1000051e 	bne	r2,zero,80aea0 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80ae8c:	e0c00217 	ldw	r3,8(fp)
  80ae90:	00800344 	movi	r2,13
  80ae94:	18800005 	stb	r2,0(r3)
        return (0);
  80ae98:	e03fff15 	stw	zero,-4(fp)
  80ae9c:	00014c06 	br	80b3d0 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aea0:	0005303a 	rdctl	r2,status
  80aea4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aea8:	e0ffef17 	ldw	r3,-68(fp)
  80aeac:	00bfff84 	movi	r2,-2
  80aeb0:	1884703a 	and	r2,r3,r2
  80aeb4:	1001703a 	wrctl	status,r2
  
  return context;
  80aeb8:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80aebc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80aec0:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80aec4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80aec8:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80aecc:	e0bff617 	ldw	r2,-40(fp)
  80aed0:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80aed4:	e0bff517 	ldw	r2,-44(fp)
  80aed8:	10800017 	ldw	r2,0(r2)
  80aedc:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80aee0:	00008f06 	br	80b120 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80aee4:	e0bff417 	ldw	r2,-48(fp)
  80aee8:	10800003 	ldbu	r2,0(r2)
  80aeec:	10803fcc 	andi	r2,r2,255
  80aef0:	e0bffd15 	stw	r2,-12(fp)
  80aef4:	e0fffd17 	ldw	r3,-12(fp)
  80aef8:	188000a0 	cmpeqi	r2,r3,2
  80aefc:	1000441e 	bne	r2,zero,80b010 <OSEventPendMulti+0x2dc>
  80af00:	e0fffd17 	ldw	r3,-12(fp)
  80af04:	188000e0 	cmpeqi	r2,r3,3
  80af08:	1000041e 	bne	r2,zero,80af1c <OSEventPendMulti+0x1e8>
  80af0c:	e0fffd17 	ldw	r3,-12(fp)
  80af10:	18800060 	cmpeqi	r2,r3,1
  80af14:	1000211e 	bne	r2,zero,80af9c <OSEventPendMulti+0x268>
  80af18:	00006f06 	br	80b0d8 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80af1c:	e0bff417 	ldw	r2,-48(fp)
  80af20:	1080020b 	ldhu	r2,8(r2)
  80af24:	10bfffcc 	andi	r2,r2,65535
  80af28:	1005003a 	cmpeq	r2,r2,zero
  80af2c:	1000171e 	bne	r2,zero,80af8c <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80af30:	e0bff417 	ldw	r2,-48(fp)
  80af34:	1080020b 	ldhu	r2,8(r2)
  80af38:	10bfffc4 	addi	r2,r2,-1
  80af3c:	1007883a 	mov	r3,r2
  80af40:	e0bff417 	ldw	r2,-48(fp)
  80af44:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80af48:	e0fff717 	ldw	r3,-36(fp)
  80af4c:	e0bff417 	ldw	r2,-48(fp)
  80af50:	18800015 	stw	r2,0(r3)
  80af54:	e0bff717 	ldw	r2,-36(fp)
  80af58:	10800104 	addi	r2,r2,4
  80af5c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80af60:	00800044 	movi	r2,1
  80af64:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80af68:	e0bff817 	ldw	r2,-32(fp)
  80af6c:	10000015 	stw	zero,0(r2)
  80af70:	e0bff817 	ldw	r2,-32(fp)
  80af74:	10800104 	addi	r2,r2,4
  80af78:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80af7c:	e0bff18b 	ldhu	r2,-58(fp)
  80af80:	10800044 	addi	r2,r2,1
  80af84:	e0bff18d 	sth	r2,-58(fp)
  80af88:	00005f06 	br	80b108 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80af8c:	e0bff103 	ldbu	r2,-60(fp)
  80af90:	10800054 	ori	r2,r2,1
  80af94:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80af98:	00005b06 	br	80b108 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80af9c:	e0bff417 	ldw	r2,-48(fp)
  80afa0:	10800117 	ldw	r2,4(r2)
  80afa4:	1005003a 	cmpeq	r2,r2,zero
  80afa8:	1000151e 	bne	r2,zero,80b000 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80afac:	e0bff417 	ldw	r2,-48(fp)
  80afb0:	10c00117 	ldw	r3,4(r2)
  80afb4:	e0bff817 	ldw	r2,-32(fp)
  80afb8:	10c00015 	stw	r3,0(r2)
  80afbc:	e0bff817 	ldw	r2,-32(fp)
  80afc0:	10800104 	addi	r2,r2,4
  80afc4:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80afc8:	e0bff417 	ldw	r2,-48(fp)
  80afcc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80afd0:	e0fff717 	ldw	r3,-36(fp)
  80afd4:	e0bff417 	ldw	r2,-48(fp)
  80afd8:	18800015 	stw	r2,0(r3)
  80afdc:	e0bff717 	ldw	r2,-36(fp)
  80afe0:	10800104 	addi	r2,r2,4
  80afe4:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80afe8:	00800044 	movi	r2,1
  80afec:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80aff0:	e0bff18b 	ldhu	r2,-58(fp)
  80aff4:	10800044 	addi	r2,r2,1
  80aff8:	e0bff18d 	sth	r2,-58(fp)
  80affc:	00004206 	br	80b108 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80b000:	e0bff103 	ldbu	r2,-60(fp)
  80b004:	10800094 	ori	r2,r2,2
  80b008:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b00c:	00003e06 	br	80b108 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80b010:	e0bff417 	ldw	r2,-48(fp)
  80b014:	10800117 	ldw	r2,4(r2)
  80b018:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80b01c:	e0bff317 	ldw	r2,-52(fp)
  80b020:	1080058b 	ldhu	r2,22(r2)
  80b024:	10bfffcc 	andi	r2,r2,65535
  80b028:	1005003a 	cmpeq	r2,r2,zero
  80b02c:	1000261e 	bne	r2,zero,80b0c8 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80b030:	e0bff317 	ldw	r2,-52(fp)
  80b034:	11000417 	ldw	r4,16(r2)
  80b038:	20c00017 	ldw	r3,0(r4)
  80b03c:	e0bff817 	ldw	r2,-32(fp)
  80b040:	10c00015 	stw	r3,0(r2)
  80b044:	e0bff817 	ldw	r2,-32(fp)
  80b048:	10800104 	addi	r2,r2,4
  80b04c:	e0bff815 	stw	r2,-32(fp)
  80b050:	20c00104 	addi	r3,r4,4
  80b054:	e0bff317 	ldw	r2,-52(fp)
  80b058:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80b05c:	e0bff317 	ldw	r2,-52(fp)
  80b060:	10c00417 	ldw	r3,16(r2)
  80b064:	e0bff317 	ldw	r2,-52(fp)
  80b068:	10800217 	ldw	r2,8(r2)
  80b06c:	1880041e 	bne	r3,r2,80b080 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80b070:	e0bff317 	ldw	r2,-52(fp)
  80b074:	10c00117 	ldw	r3,4(r2)
  80b078:	e0bff317 	ldw	r2,-52(fp)
  80b07c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80b080:	e0bff317 	ldw	r2,-52(fp)
  80b084:	1080058b 	ldhu	r2,22(r2)
  80b088:	10bfffc4 	addi	r2,r2,-1
  80b08c:	1007883a 	mov	r3,r2
  80b090:	e0bff317 	ldw	r2,-52(fp)
  80b094:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80b098:	e0fff717 	ldw	r3,-36(fp)
  80b09c:	e0bff417 	ldw	r2,-48(fp)
  80b0a0:	18800015 	stw	r2,0(r3)
  80b0a4:	e0bff717 	ldw	r2,-36(fp)
  80b0a8:	10800104 	addi	r2,r2,4
  80b0ac:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80b0b0:	00800044 	movi	r2,1
  80b0b4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80b0b8:	e0bff18b 	ldhu	r2,-58(fp)
  80b0bc:	10800044 	addi	r2,r2,1
  80b0c0:	e0bff18d 	sth	r2,-58(fp)
  80b0c4:	00001006 	br	80b108 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80b0c8:	e0bff103 	ldbu	r2,-60(fp)
  80b0cc:	10800114 	ori	r2,r2,4
  80b0d0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80b0d4:	00000c06 	br	80b108 <OSEventPendMulti+0x3d4>
  80b0d8:	e0bff017 	ldw	r2,-64(fp)
  80b0dc:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b0e0:	e0bfee17 	ldw	r2,-72(fp)
  80b0e4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80b0e8:	e0bff717 	ldw	r2,-36(fp)
  80b0ec:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80b0f0:	e0c00217 	ldw	r3,8(fp)
  80b0f4:	00800044 	movi	r2,1
  80b0f8:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80b0fc:	e0bff18b 	ldhu	r2,-58(fp)
  80b100:	e0bfff15 	stw	r2,-4(fp)
  80b104:	0000b206 	br	80b3d0 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80b108:	e0bff517 	ldw	r2,-44(fp)
  80b10c:	10800104 	addi	r2,r2,4
  80b110:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80b114:	e0bff517 	ldw	r2,-44(fp)
  80b118:	10800017 	ldw	r2,0(r2)
  80b11c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80b120:	e0bff417 	ldw	r2,-48(fp)
  80b124:	1004c03a 	cmpne	r2,r2,zero
  80b128:	103f6e1e 	bne	r2,zero,80aee4 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80b12c:	e0bff203 	ldbu	r2,-56(fp)
  80b130:	10800058 	cmpnei	r2,r2,1
  80b134:	10000b1e 	bne	r2,zero,80b164 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80b138:	e0bff717 	ldw	r2,-36(fp)
  80b13c:	10000015 	stw	zero,0(r2)
  80b140:	e0bff017 	ldw	r2,-64(fp)
  80b144:	e0bfed15 	stw	r2,-76(fp)
  80b148:	e0bfed17 	ldw	r2,-76(fp)
  80b14c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80b150:	e0800217 	ldw	r2,8(fp)
  80b154:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80b158:	e0fff18b 	ldhu	r3,-58(fp)
  80b15c:	e0ffff15 	stw	r3,-4(fp)
  80b160:	00009b06 	br	80b3d0 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80b164:	d1271117 	ldw	r4,-25532(gp)
  80b168:	d0a71117 	ldw	r2,-25532(gp)
  80b16c:	10c00c03 	ldbu	r3,48(r2)
  80b170:	e0bff103 	ldbu	r2,-60(fp)
  80b174:	1884b03a 	or	r2,r3,r2
  80b178:	1007883a 	mov	r3,r2
  80b17c:	00bfe004 	movi	r2,-128
  80b180:	1884b03a 	or	r2,r3,r2
  80b184:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80b188:	d0a71117 	ldw	r2,-25532(gp)
  80b18c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80b190:	d0e71117 	ldw	r3,-25532(gp)
  80b194:	e0bff90b 	ldhu	r2,-28(fp)
  80b198:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80b19c:	e13ff617 	ldw	r4,-40(fp)
  80b1a0:	080bd640 	call	80bd64 <OS_EventTaskWaitMulti>
  80b1a4:	e0bff017 	ldw	r2,-64(fp)
  80b1a8:	e0bfec15 	stw	r2,-80(fp)
  80b1ac:	e0bfec17 	ldw	r2,-80(fp)
  80b1b0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80b1b4:	080c5000 	call	80c500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b1b8:	0005303a 	rdctl	r2,status
  80b1bc:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b1c0:	e0ffeb17 	ldw	r3,-84(fp)
  80b1c4:	00bfff84 	movi	r2,-2
  80b1c8:	1884703a 	and	r2,r3,r2
  80b1cc:	1001703a 	wrctl	status,r2
  
  return context;
  80b1d0:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80b1d4:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80b1d8:	d0a71117 	ldw	r2,-25532(gp)
  80b1dc:	10800c43 	ldbu	r2,49(r2)
  80b1e0:	10803fcc 	andi	r2,r2,255
  80b1e4:	e0bffc15 	stw	r2,-16(fp)
  80b1e8:	e0fffc17 	ldw	r3,-16(fp)
  80b1ec:	1805003a 	cmpeq	r2,r3,zero
  80b1f0:	1000041e 	bne	r2,zero,80b204 <OSEventPendMulti+0x4d0>
  80b1f4:	e0fffc17 	ldw	r3,-16(fp)
  80b1f8:	188000a0 	cmpeqi	r2,r3,2
  80b1fc:	1000011e 	bne	r2,zero,80b204 <OSEventPendMulti+0x4d0>
  80b200:	00001906 	br	80b268 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80b204:	d0a71117 	ldw	r2,-25532(gp)
  80b208:	10800717 	ldw	r2,28(r2)
  80b20c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80b210:	e0bff417 	ldw	r2,-48(fp)
  80b214:	1005003a 	cmpeq	r2,r2,zero
  80b218:	10000c1e 	bne	r2,zero,80b24c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80b21c:	e0fff717 	ldw	r3,-36(fp)
  80b220:	e0bff417 	ldw	r2,-48(fp)
  80b224:	18800015 	stw	r2,0(r3)
  80b228:	e0bff717 	ldw	r2,-36(fp)
  80b22c:	10800104 	addi	r2,r2,4
  80b230:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80b234:	e0bff717 	ldw	r2,-36(fp)
  80b238:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80b23c:	e0bff18b 	ldhu	r2,-58(fp)
  80b240:	10800044 	addi	r2,r2,1
  80b244:	e0bff18d 	sth	r2,-58(fp)
  80b248:	00000a06 	br	80b274 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80b24c:	d0a71117 	ldw	r2,-25532(gp)
  80b250:	00c00044 	movi	r3,1
  80b254:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80b258:	d1271117 	ldw	r4,-25532(gp)
  80b25c:	e17ff617 	ldw	r5,-40(fp)
  80b260:	080bf700 	call	80bf70 <OS_EventTaskRemoveMulti>
             }
			 break;
  80b264:	00000306 	br	80b274 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80b268:	d1271117 	ldw	r4,-25532(gp)
  80b26c:	e17ff617 	ldw	r5,-40(fp)
  80b270:	080bf700 	call	80bf70 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80b274:	d0a71117 	ldw	r2,-25532(gp)
  80b278:	10800c43 	ldbu	r2,49(r2)
  80b27c:	10803fcc 	andi	r2,r2,255
  80b280:	e0bffb15 	stw	r2,-20(fp)
  80b284:	e0fffb17 	ldw	r3,-20(fp)
  80b288:	1805003a 	cmpeq	r2,r3,zero
  80b28c:	1000041e 	bne	r2,zero,80b2a0 <OSEventPendMulti+0x56c>
  80b290:	e0fffb17 	ldw	r3,-20(fp)
  80b294:	188000a0 	cmpeqi	r2,r3,2
  80b298:	10002c1e 	bne	r2,zero,80b34c <OSEventPendMulti+0x618>
  80b29c:	00003406 	br	80b370 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80b2a0:	e0bff417 	ldw	r2,-48(fp)
  80b2a4:	10800003 	ldbu	r2,0(r2)
  80b2a8:	10803fcc 	andi	r2,r2,255
  80b2ac:	e0bffa15 	stw	r2,-24(fp)
  80b2b0:	e0fffa17 	ldw	r3,-24(fp)
  80b2b4:	18800050 	cmplti	r2,r3,1
  80b2b8:	1000151e 	bne	r2,zero,80b310 <OSEventPendMulti+0x5dc>
  80b2bc:	e0fffa17 	ldw	r3,-24(fp)
  80b2c0:	188000d0 	cmplti	r2,r3,3
  80b2c4:	10000a1e 	bne	r2,zero,80b2f0 <OSEventPendMulti+0x5bc>
  80b2c8:	e0fffa17 	ldw	r3,-24(fp)
  80b2cc:	188000e0 	cmpeqi	r2,r3,3
  80b2d0:	1000011e 	bne	r2,zero,80b2d8 <OSEventPendMulti+0x5a4>
  80b2d4:	00000e06 	br	80b310 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80b2d8:	e0bff817 	ldw	r2,-32(fp)
  80b2dc:	10000015 	stw	zero,0(r2)
  80b2e0:	e0bff817 	ldw	r2,-32(fp)
  80b2e4:	10800104 	addi	r2,r2,4
  80b2e8:	e0bff815 	stw	r2,-32(fp)
                      break;
  80b2ec:	00001406 	br	80b340 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80b2f0:	d0a71117 	ldw	r2,-25532(gp)
  80b2f4:	10c00917 	ldw	r3,36(r2)
  80b2f8:	e0bff817 	ldw	r2,-32(fp)
  80b2fc:	10c00015 	stw	r3,0(r2)
  80b300:	e0bff817 	ldw	r2,-32(fp)
  80b304:	10800104 	addi	r2,r2,4
  80b308:	e0bff815 	stw	r2,-32(fp)
                      break;
  80b30c:	00000c06 	br	80b340 <OSEventPendMulti+0x60c>
  80b310:	e0bff017 	ldw	r2,-64(fp)
  80b314:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b318:	e0bfea17 	ldw	r2,-88(fp)
  80b31c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80b320:	e0bff717 	ldw	r2,-36(fp)
  80b324:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80b328:	e0c00217 	ldw	r3,8(fp)
  80b32c:	00800044 	movi	r2,1
  80b330:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80b334:	e0bff18b 	ldhu	r2,-58(fp)
  80b338:	e0bfff15 	stw	r2,-4(fp)
  80b33c:	00002406 	br	80b3d0 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80b340:	e0800217 	ldw	r2,8(fp)
  80b344:	10000005 	stb	zero,0(r2)
             break;
  80b348:	00001106 	br	80b390 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80b34c:	e0bff817 	ldw	r2,-32(fp)
  80b350:	10000015 	stw	zero,0(r2)
  80b354:	e0bff817 	ldw	r2,-32(fp)
  80b358:	10800104 	addi	r2,r2,4
  80b35c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80b360:	e0c00217 	ldw	r3,8(fp)
  80b364:	00800384 	movi	r2,14
  80b368:	18800005 	stb	r2,0(r3)
             break;
  80b36c:	00000806 	br	80b390 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80b370:	e0bff817 	ldw	r2,-32(fp)
  80b374:	10000015 	stw	zero,0(r2)
  80b378:	e0bff817 	ldw	r2,-32(fp)
  80b37c:	10800104 	addi	r2,r2,4
  80b380:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80b384:	e0c00217 	ldw	r3,8(fp)
  80b388:	00800284 	movi	r2,10
  80b38c:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80b390:	d0a71117 	ldw	r2,-25532(gp)
  80b394:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80b398:	d0a71117 	ldw	r2,-25532(gp)
  80b39c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80b3a0:	d0a71117 	ldw	r2,-25532(gp)
  80b3a4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80b3a8:	d0a71117 	ldw	r2,-25532(gp)
  80b3ac:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80b3b0:	d0a71117 	ldw	r2,-25532(gp)
  80b3b4:	10000915 	stw	zero,36(r2)
  80b3b8:	e0bff017 	ldw	r2,-64(fp)
  80b3bc:	e0bfe915 	stw	r2,-92(fp)
  80b3c0:	e0bfe917 	ldw	r2,-92(fp)
  80b3c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80b3c8:	e0fff18b 	ldhu	r3,-58(fp)
  80b3cc:	e0ffff15 	stw	r3,-4(fp)
  80b3d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80b3d4:	e037883a 	mov	sp,fp
  80b3d8:	dfc00117 	ldw	ra,4(sp)
  80b3dc:	df000017 	ldw	fp,0(sp)
  80b3e0:	dec00204 	addi	sp,sp,8
  80b3e4:	f800283a 	ret

0080b3e8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80b3e8:	defffe04 	addi	sp,sp,-8
  80b3ec:	dfc00115 	stw	ra,4(sp)
  80b3f0:	df000015 	stw	fp,0(sp)
  80b3f4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80b3f8:	08158980 	call	815898 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80b3fc:	080c1b80 	call	80c1b8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80b400:	080c1fc0 	call	80c1fc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80b404:	080c3600 	call	80c360 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80b408:	080c0dc0 	call	80c0dc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80b40c:	080e4100 	call	80e410 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80b410:	080ede80 	call	80ede8 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80b414:	08101400 	call	810140 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80b418:	080c2680 	call	80c268 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80b41c:	080c2e40 	call	80c2e4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80b420:	08158b40 	call	8158b4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80b424:	080cbe80 	call	80cbe8 <OSDebugInit>
#endif
}
  80b428:	e037883a 	mov	sp,fp
  80b42c:	dfc00117 	ldw	ra,4(sp)
  80b430:	df000017 	ldw	fp,0(sp)
  80b434:	dec00204 	addi	sp,sp,8
  80b438:	f800283a 	ret

0080b43c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80b43c:	defffc04 	addi	sp,sp,-16
  80b440:	df000315 	stw	fp,12(sp)
  80b444:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b448:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80b44c:	d0a70243 	ldbu	r2,-25591(gp)
  80b450:	10803fcc 	andi	r2,r2,255
  80b454:	10800058 	cmpnei	r2,r2,1
  80b458:	1000131e 	bne	r2,zero,80b4a8 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b45c:	0005303a 	rdctl	r2,status
  80b460:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b464:	e0fffe17 	ldw	r3,-8(fp)
  80b468:	00bfff84 	movi	r2,-2
  80b46c:	1884703a 	and	r2,r3,r2
  80b470:	1001703a 	wrctl	status,r2
  
  return context;
  80b474:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b478:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80b47c:	d0a71003 	ldbu	r2,-25536(gp)
  80b480:	10803fcc 	andi	r2,r2,255
  80b484:	10803fe0 	cmpeqi	r2,r2,255
  80b488:	1000031e 	bne	r2,zero,80b498 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80b48c:	d0a71003 	ldbu	r2,-25536(gp)
  80b490:	10800044 	addi	r2,r2,1
  80b494:	d0a71005 	stb	r2,-25536(gp)
  80b498:	e0bfff17 	ldw	r2,-4(fp)
  80b49c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4a0:	e0bffd17 	ldw	r2,-12(fp)
  80b4a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80b4a8:	e037883a 	mov	sp,fp
  80b4ac:	df000017 	ldw	fp,0(sp)
  80b4b0:	dec00104 	addi	sp,sp,4
  80b4b4:	f800283a 	ret

0080b4b8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80b4b8:	defffb04 	addi	sp,sp,-20
  80b4bc:	dfc00415 	stw	ra,16(sp)
  80b4c0:	df000315 	stw	fp,12(sp)
  80b4c4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b4c8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80b4cc:	d0a70243 	ldbu	r2,-25591(gp)
  80b4d0:	10803fcc 	andi	r2,r2,255
  80b4d4:	10800058 	cmpnei	r2,r2,1
  80b4d8:	1000321e 	bne	r2,zero,80b5a4 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b4dc:	0005303a 	rdctl	r2,status
  80b4e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b4e4:	e0fffe17 	ldw	r3,-8(fp)
  80b4e8:	00bfff84 	movi	r2,-2
  80b4ec:	1884703a 	and	r2,r3,r2
  80b4f0:	1001703a 	wrctl	status,r2
  
  return context;
  80b4f4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b4f8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80b4fc:	d0a71003 	ldbu	r2,-25536(gp)
  80b500:	10803fcc 	andi	r2,r2,255
  80b504:	1005003a 	cmpeq	r2,r2,zero
  80b508:	1000031e 	bne	r2,zero,80b518 <OSIntExit+0x60>
            OSIntNesting--;
  80b50c:	d0a71003 	ldbu	r2,-25536(gp)
  80b510:	10bfffc4 	addi	r2,r2,-1
  80b514:	d0a71005 	stb	r2,-25536(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80b518:	d0a71003 	ldbu	r2,-25536(gp)
  80b51c:	10803fcc 	andi	r2,r2,255
  80b520:	1004c03a 	cmpne	r2,r2,zero
  80b524:	10001b1e 	bne	r2,zero,80b594 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80b528:	d0a70203 	ldbu	r2,-25592(gp)
  80b52c:	10803fcc 	andi	r2,r2,255
  80b530:	1004c03a 	cmpne	r2,r2,zero
  80b534:	1000171e 	bne	r2,zero,80b594 <OSIntExit+0xdc>
                OS_SchedNew();
  80b538:	080c5d40 	call	80c5d4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80b53c:	d0a70403 	ldbu	r2,-25584(gp)
  80b540:	d0e70443 	ldbu	r3,-25583(gp)
  80b544:	11003fcc 	andi	r4,r2,255
  80b548:	18803fcc 	andi	r2,r3,255
  80b54c:	20801126 	beq	r4,r2,80b594 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80b550:	d0a70403 	ldbu	r2,-25584(gp)
  80b554:	10803fcc 	andi	r2,r2,255
  80b558:	00c020b4 	movhi	r3,130
  80b55c:	18fb4004 	addi	r3,r3,-4864
  80b560:	1085883a 	add	r2,r2,r2
  80b564:	1085883a 	add	r2,r2,r2
  80b568:	10c5883a 	add	r2,r2,r3
  80b56c:	10800017 	ldw	r2,0(r2)
  80b570:	d0a70c15 	stw	r2,-25552(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80b574:	d0e70c17 	ldw	r3,-25552(gp)
  80b578:	18800e17 	ldw	r2,56(r3)
  80b57c:	10800044 	addi	r2,r2,1
  80b580:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80b584:	d0a70717 	ldw	r2,-25572(gp)
  80b588:	10800044 	addi	r2,r2,1
  80b58c:	d0a70715 	stw	r2,-25572(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80b590:	08154240 	call	815424 <OSCtxSw>
  80b594:	e0bfff17 	ldw	r2,-4(fp)
  80b598:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b59c:	e0bffd17 	ldw	r2,-12(fp)
  80b5a0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80b5a4:	e037883a 	mov	sp,fp
  80b5a8:	dfc00117 	ldw	ra,4(sp)
  80b5ac:	df000017 	ldw	fp,0(sp)
  80b5b0:	dec00204 	addi	sp,sp,8
  80b5b4:	f800283a 	ret

0080b5b8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80b5b8:	defffc04 	addi	sp,sp,-16
  80b5bc:	df000315 	stw	fp,12(sp)
  80b5c0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b5c4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80b5c8:	d0a70243 	ldbu	r2,-25591(gp)
  80b5cc:	10803fcc 	andi	r2,r2,255
  80b5d0:	10800058 	cmpnei	r2,r2,1
  80b5d4:	1000171e 	bne	r2,zero,80b634 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b5d8:	0005303a 	rdctl	r2,status
  80b5dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b5e0:	e0fffe17 	ldw	r3,-8(fp)
  80b5e4:	00bfff84 	movi	r2,-2
  80b5e8:	1884703a 	and	r2,r3,r2
  80b5ec:	1001703a 	wrctl	status,r2
  
  return context;
  80b5f0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b5f4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80b5f8:	d0a71003 	ldbu	r2,-25536(gp)
  80b5fc:	10803fcc 	andi	r2,r2,255
  80b600:	1004c03a 	cmpne	r2,r2,zero
  80b604:	1000071e 	bne	r2,zero,80b624 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80b608:	d0a70203 	ldbu	r2,-25592(gp)
  80b60c:	10803fcc 	andi	r2,r2,255
  80b610:	10803fe0 	cmpeqi	r2,r2,255
  80b614:	1000031e 	bne	r2,zero,80b624 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80b618:	d0a70203 	ldbu	r2,-25592(gp)
  80b61c:	10800044 	addi	r2,r2,1
  80b620:	d0a70205 	stb	r2,-25592(gp)
  80b624:	e0bfff17 	ldw	r2,-4(fp)
  80b628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b62c:	e0bffd17 	ldw	r2,-12(fp)
  80b630:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80b634:	e037883a 	mov	sp,fp
  80b638:	df000017 	ldw	fp,0(sp)
  80b63c:	dec00104 	addi	sp,sp,4
  80b640:	f800283a 	ret

0080b644 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80b644:	defff804 	addi	sp,sp,-32
  80b648:	dfc00715 	stw	ra,28(sp)
  80b64c:	df000615 	stw	fp,24(sp)
  80b650:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b654:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80b658:	d0a70243 	ldbu	r2,-25591(gp)
  80b65c:	10803fcc 	andi	r2,r2,255
  80b660:	10800058 	cmpnei	r2,r2,1
  80b664:	10002b1e 	bne	r2,zero,80b714 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b668:	0005303a 	rdctl	r2,status
  80b66c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b670:	e0fffe17 	ldw	r3,-8(fp)
  80b674:	00bfff84 	movi	r2,-2
  80b678:	1884703a 	and	r2,r3,r2
  80b67c:	1001703a 	wrctl	status,r2
  
  return context;
  80b680:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b684:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80b688:	d0a70203 	ldbu	r2,-25592(gp)
  80b68c:	10803fcc 	andi	r2,r2,255
  80b690:	1005003a 	cmpeq	r2,r2,zero
  80b694:	10001b1e 	bne	r2,zero,80b704 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80b698:	d0a70203 	ldbu	r2,-25592(gp)
  80b69c:	10bfffc4 	addi	r2,r2,-1
  80b6a0:	d0a70205 	stb	r2,-25592(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80b6a4:	d0a70203 	ldbu	r2,-25592(gp)
  80b6a8:	10803fcc 	andi	r2,r2,255
  80b6ac:	1004c03a 	cmpne	r2,r2,zero
  80b6b0:	10000f1e 	bne	r2,zero,80b6f0 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80b6b4:	d0a71003 	ldbu	r2,-25536(gp)
  80b6b8:	10803fcc 	andi	r2,r2,255
  80b6bc:	1004c03a 	cmpne	r2,r2,zero
  80b6c0:	1000061e 	bne	r2,zero,80b6dc <OSSchedUnlock+0x98>
  80b6c4:	e0bfff17 	ldw	r2,-4(fp)
  80b6c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b6cc:	e0bffd17 	ldw	r2,-12(fp)
  80b6d0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80b6d4:	080c5000 	call	80c500 <OS_Sched>
  80b6d8:	00000e06 	br	80b714 <OSSchedUnlock+0xd0>
  80b6dc:	e0bfff17 	ldw	r2,-4(fp)
  80b6e0:	e0bffc15 	stw	r2,-16(fp)
  80b6e4:	e0bffc17 	ldw	r2,-16(fp)
  80b6e8:	1001703a 	wrctl	status,r2
  80b6ec:	00000906 	br	80b714 <OSSchedUnlock+0xd0>
  80b6f0:	e0bfff17 	ldw	r2,-4(fp)
  80b6f4:	e0bffb15 	stw	r2,-20(fp)
  80b6f8:	e0bffb17 	ldw	r2,-20(fp)
  80b6fc:	1001703a 	wrctl	status,r2
  80b700:	00000406 	br	80b714 <OSSchedUnlock+0xd0>
  80b704:	e0bfff17 	ldw	r2,-4(fp)
  80b708:	e0bffa15 	stw	r2,-24(fp)
  80b70c:	e0bffa17 	ldw	r2,-24(fp)
  80b710:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80b714:	e037883a 	mov	sp,fp
  80b718:	dfc00117 	ldw	ra,4(sp)
  80b71c:	df000017 	ldw	fp,0(sp)
  80b720:	dec00204 	addi	sp,sp,8
  80b724:	f800283a 	ret

0080b728 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80b728:	defffe04 	addi	sp,sp,-8
  80b72c:	dfc00115 	stw	ra,4(sp)
  80b730:	df000015 	stw	fp,0(sp)
  80b734:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80b738:	d0a70243 	ldbu	r2,-25591(gp)
  80b73c:	10803fcc 	andi	r2,r2,255
  80b740:	1004c03a 	cmpne	r2,r2,zero
  80b744:	10000f1e 	bne	r2,zero,80b784 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80b748:	080c5d40 	call	80c5d4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80b74c:	d0a70403 	ldbu	r2,-25584(gp)
  80b750:	d0a70445 	stb	r2,-25583(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80b754:	d0a70403 	ldbu	r2,-25584(gp)
  80b758:	10803fcc 	andi	r2,r2,255
  80b75c:	00c020b4 	movhi	r3,130
  80b760:	18fb4004 	addi	r3,r3,-4864
  80b764:	1085883a 	add	r2,r2,r2
  80b768:	1085883a 	add	r2,r2,r2
  80b76c:	10c5883a 	add	r2,r2,r3
  80b770:	10800017 	ldw	r2,0(r2)
  80b774:	d0a70c15 	stw	r2,-25552(gp)
        OSTCBCur      = OSTCBHighRdy;
  80b778:	d0a70c17 	ldw	r2,-25552(gp)
  80b77c:	d0a71115 	stw	r2,-25532(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80b780:	08154b00 	call	8154b0 <OSStartHighRdy>
    }
}
  80b784:	e037883a 	mov	sp,fp
  80b788:	dfc00117 	ldw	ra,4(sp)
  80b78c:	df000017 	ldw	fp,0(sp)
  80b790:	dec00204 	addi	sp,sp,8
  80b794:	f800283a 	ret

0080b798 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80b798:	defff904 	addi	sp,sp,-28
  80b79c:	dfc00615 	stw	ra,24(sp)
  80b7a0:	df000515 	stw	fp,20(sp)
  80b7a4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b7a8:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80b7ac:	01000084 	movi	r4,2
  80b7b0:	08127f40 	call	8127f4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b7b4:	0005303a 	rdctl	r2,status
  80b7b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b7bc:	e0fffe17 	ldw	r3,-8(fp)
  80b7c0:	00bfff84 	movi	r2,-2
  80b7c4:	1884703a 	and	r2,r3,r2
  80b7c8:	1001703a 	wrctl	status,r2
  
  return context;
  80b7cc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80b7d0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80b7d4:	d0270315 	stw	zero,-25588(gp)
  80b7d8:	e0bfff17 	ldw	r2,-4(fp)
  80b7dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b7e0:	e0bffd17 	ldw	r2,-12(fp)
  80b7e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80b7e8:	01001904 	movi	r4,100
  80b7ec:	08127f40 	call	8127f4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b7f0:	0005303a 	rdctl	r2,status
  80b7f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b7f8:	e0fffc17 	ldw	r3,-16(fp)
  80b7fc:	00bfff84 	movi	r2,-2
  80b800:	1884703a 	and	r2,r3,r2
  80b804:	1001703a 	wrctl	status,r2
  
  return context;
  80b808:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80b80c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80b810:	d0a70317 	ldw	r2,-25588(gp)
  80b814:	d0a70815 	stw	r2,-25568(gp)
    OSStatRdy    = OS_TRUE;
  80b818:	00800044 	movi	r2,1
  80b81c:	d0a71405 	stb	r2,-25520(gp)
  80b820:	e0bfff17 	ldw	r2,-4(fp)
  80b824:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b828:	e0bffb17 	ldw	r2,-20(fp)
  80b82c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80b830:	e037883a 	mov	sp,fp
  80b834:	dfc00117 	ldw	ra,4(sp)
  80b838:	df000017 	ldw	fp,0(sp)
  80b83c:	dec00204 	addi	sp,sp,8
  80b840:	f800283a 	ret

0080b844 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80b844:	defff604 	addi	sp,sp,-40
  80b848:	dfc00915 	stw	ra,36(sp)
  80b84c:	df000815 	stw	fp,32(sp)
  80b850:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80b854:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80b858:	081587c0 	call	81587c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b85c:	0005303a 	rdctl	r2,status
  80b860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b864:	e0fffb17 	ldw	r3,-20(fp)
  80b868:	00bfff84 	movi	r2,-2
  80b86c:	1884703a 	and	r2,r3,r2
  80b870:	1001703a 	wrctl	status,r2
  
  return context;
  80b874:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80b878:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80b87c:	d0a71217 	ldw	r2,-25528(gp)
  80b880:	10800044 	addi	r2,r2,1
  80b884:	d0a71215 	stw	r2,-25528(gp)
  80b888:	e0bffc17 	ldw	r2,-16(fp)
  80b88c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b890:	e0bffa17 	ldw	r2,-24(fp)
  80b894:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80b898:	d0a70243 	ldbu	r2,-25591(gp)
  80b89c:	10803fcc 	andi	r2,r2,255
  80b8a0:	10800058 	cmpnei	r2,r2,1
  80b8a4:	1000721e 	bne	r2,zero,80ba70 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80b8a8:	d0a70603 	ldbu	r2,-25576(gp)
  80b8ac:	10803fcc 	andi	r2,r2,255
  80b8b0:	e0bfff15 	stw	r2,-4(fp)
  80b8b4:	e0ffff17 	ldw	r3,-4(fp)
  80b8b8:	18800060 	cmpeqi	r2,r3,1
  80b8bc:	10000a1e 	bne	r2,zero,80b8e8 <OSTimeTick+0xa4>
  80b8c0:	e0ffff17 	ldw	r3,-4(fp)
  80b8c4:	188000a0 	cmpeqi	r2,r3,2
  80b8c8:	1000091e 	bne	r2,zero,80b8f0 <OSTimeTick+0xac>
  80b8cc:	e0ffff17 	ldw	r3,-4(fp)
  80b8d0:	1805003a 	cmpeq	r2,r3,zero
  80b8d4:	1000011e 	bne	r2,zero,80b8dc <OSTimeTick+0x98>
  80b8d8:	00000a06 	br	80b904 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80b8dc:	00800044 	movi	r2,1
  80b8e0:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80b8e4:	00000a06 	br	80b910 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80b8e8:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80b8ec:	00000806 	br	80b910 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80b8f0:	00800044 	movi	r2,1
  80b8f4:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80b8f8:	00800044 	movi	r2,1
  80b8fc:	d0a70605 	stb	r2,-25576(gp)
                 break;
  80b900:	00000306 	br	80b910 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80b904:	00800044 	movi	r2,1
  80b908:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80b90c:	d0270605 	stb	zero,-25576(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80b910:	e0bffd03 	ldbu	r2,-12(fp)
  80b914:	1005003a 	cmpeq	r2,r2,zero
  80b918:	1000551e 	bne	r2,zero,80ba70 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80b91c:	d0a70517 	ldw	r2,-25580(gp)
  80b920:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80b924:	00004d06 	br	80ba5c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b928:	0005303a 	rdctl	r2,status
  80b92c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b930:	e0fff917 	ldw	r3,-28(fp)
  80b934:	00bfff84 	movi	r2,-2
  80b938:	1884703a 	and	r2,r3,r2
  80b93c:	1001703a 	wrctl	status,r2
  
  return context;
  80b940:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80b944:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80b948:	e0bffe17 	ldw	r2,-8(fp)
  80b94c:	10800b8b 	ldhu	r2,46(r2)
  80b950:	10bfffcc 	andi	r2,r2,65535
  80b954:	1005003a 	cmpeq	r2,r2,zero
  80b958:	1000391e 	bne	r2,zero,80ba40 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80b95c:	e0bffe17 	ldw	r2,-8(fp)
  80b960:	10800b8b 	ldhu	r2,46(r2)
  80b964:	10bfffc4 	addi	r2,r2,-1
  80b968:	1007883a 	mov	r3,r2
  80b96c:	e0bffe17 	ldw	r2,-8(fp)
  80b970:	10c00b8d 	sth	r3,46(r2)
  80b974:	e0bffe17 	ldw	r2,-8(fp)
  80b978:	10800b8b 	ldhu	r2,46(r2)
  80b97c:	10bfffcc 	andi	r2,r2,65535
  80b980:	1004c03a 	cmpne	r2,r2,zero
  80b984:	10002e1e 	bne	r2,zero,80ba40 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80b988:	e0bffe17 	ldw	r2,-8(fp)
  80b98c:	10800c03 	ldbu	r2,48(r2)
  80b990:	10803fcc 	andi	r2,r2,255
  80b994:	10800dcc 	andi	r2,r2,55
  80b998:	1005003a 	cmpeq	r2,r2,zero
  80b99c:	10000b1e 	bne	r2,zero,80b9cc <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80b9a0:	e0bffe17 	ldw	r2,-8(fp)
  80b9a4:	10c00c03 	ldbu	r3,48(r2)
  80b9a8:	00bff204 	movi	r2,-56
  80b9ac:	1884703a 	and	r2,r3,r2
  80b9b0:	1007883a 	mov	r3,r2
  80b9b4:	e0bffe17 	ldw	r2,-8(fp)
  80b9b8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80b9bc:	e0fffe17 	ldw	r3,-8(fp)
  80b9c0:	00800044 	movi	r2,1
  80b9c4:	18800c45 	stb	r2,49(r3)
  80b9c8:	00000206 	br	80b9d4 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80b9cc:	e0bffe17 	ldw	r2,-8(fp)
  80b9d0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80b9d4:	e0bffe17 	ldw	r2,-8(fp)
  80b9d8:	10800c03 	ldbu	r2,48(r2)
  80b9dc:	10803fcc 	andi	r2,r2,255
  80b9e0:	1080020c 	andi	r2,r2,8
  80b9e4:	1004c03a 	cmpne	r2,r2,zero
  80b9e8:	1000151e 	bne	r2,zero,80ba40 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80b9ec:	e0bffe17 	ldw	r2,-8(fp)
  80b9f0:	10c00d83 	ldbu	r3,54(r2)
  80b9f4:	d0a70e03 	ldbu	r2,-25544(gp)
  80b9f8:	1884b03a 	or	r2,r3,r2
  80b9fc:	d0a70e05 	stb	r2,-25544(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80ba00:	e0bffe17 	ldw	r2,-8(fp)
  80ba04:	10800d03 	ldbu	r2,52(r2)
  80ba08:	11003fcc 	andi	r4,r2,255
  80ba0c:	e0bffe17 	ldw	r2,-8(fp)
  80ba10:	10800d03 	ldbu	r2,52(r2)
  80ba14:	10c03fcc 	andi	r3,r2,255
  80ba18:	d0a70e44 	addi	r2,gp,-25543
  80ba1c:	1885883a 	add	r2,r3,r2
  80ba20:	10c00003 	ldbu	r3,0(r2)
  80ba24:	e0bffe17 	ldw	r2,-8(fp)
  80ba28:	10800d43 	ldbu	r2,53(r2)
  80ba2c:	1884b03a 	or	r2,r3,r2
  80ba30:	1007883a 	mov	r3,r2
  80ba34:	d0a70e44 	addi	r2,gp,-25543
  80ba38:	2085883a 	add	r2,r4,r2
  80ba3c:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80ba40:	e0bffe17 	ldw	r2,-8(fp)
  80ba44:	10800517 	ldw	r2,20(r2)
  80ba48:	e0bffe15 	stw	r2,-8(fp)
  80ba4c:	e0bffc17 	ldw	r2,-16(fp)
  80ba50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba54:	e0bff817 	ldw	r2,-32(fp)
  80ba58:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80ba5c:	e0bffe17 	ldw	r2,-8(fp)
  80ba60:	10800c83 	ldbu	r2,50(r2)
  80ba64:	10803fcc 	andi	r2,r2,255
  80ba68:	10800518 	cmpnei	r2,r2,20
  80ba6c:	103fae1e 	bne	r2,zero,80b928 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80ba70:	e037883a 	mov	sp,fp
  80ba74:	dfc00117 	ldw	ra,4(sp)
  80ba78:	df000017 	ldw	fp,0(sp)
  80ba7c:	dec00204 	addi	sp,sp,8
  80ba80:	f800283a 	ret

0080ba84 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80ba84:	deffff04 	addi	sp,sp,-4
  80ba88:	df000015 	stw	fp,0(sp)
  80ba8c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80ba90:	00804784 	movi	r2,286
}
  80ba94:	e037883a 	mov	sp,fp
  80ba98:	df000017 	ldw	fp,0(sp)
  80ba9c:	dec00104 	addi	sp,sp,4
  80baa0:	f800283a 	ret

0080baa4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80baa4:	deffff04 	addi	sp,sp,-4
  80baa8:	df000015 	stw	fp,0(sp)
  80baac:	d839883a 	mov	fp,sp
}
  80bab0:	e037883a 	mov	sp,fp
  80bab4:	df000017 	ldw	fp,0(sp)
  80bab8:	dec00104 	addi	sp,sp,4
  80babc:	f800283a 	ret

0080bac0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80bac0:	defff804 	addi	sp,sp,-32
  80bac4:	dfc00715 	stw	ra,28(sp)
  80bac8:	df000615 	stw	fp,24(sp)
  80bacc:	df000604 	addi	fp,sp,24
  80bad0:	e13ffc15 	stw	r4,-16(fp)
  80bad4:	e17ffd15 	stw	r5,-12(fp)
  80bad8:	e1bffe05 	stb	r6,-8(fp)
  80badc:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80bae0:	e0bffc17 	ldw	r2,-16(fp)
  80bae4:	10800283 	ldbu	r2,10(r2)
  80bae8:	10c03fcc 	andi	r3,r2,255
  80baec:	00802074 	movhi	r2,129
  80baf0:	1098c004 	addi	r2,r2,25344
  80baf4:	10c5883a 	add	r2,r2,r3
  80baf8:	10800003 	ldbu	r2,0(r2)
  80bafc:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80bb00:	e0fffa83 	ldbu	r3,-22(fp)
  80bb04:	e0bffc17 	ldw	r2,-16(fp)
  80bb08:	1885883a 	add	r2,r3,r2
  80bb0c:	10800204 	addi	r2,r2,8
  80bb10:	108000c3 	ldbu	r2,3(r2)
  80bb14:	10c03fcc 	andi	r3,r2,255
  80bb18:	00802074 	movhi	r2,129
  80bb1c:	1098c004 	addi	r2,r2,25344
  80bb20:	10c5883a 	add	r2,r2,r3
  80bb24:	10800003 	ldbu	r2,0(r2)
  80bb28:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80bb2c:	e0bffa83 	ldbu	r2,-22(fp)
  80bb30:	100490fa 	slli	r2,r2,3
  80bb34:	1007883a 	mov	r3,r2
  80bb38:	e0bffa43 	ldbu	r2,-23(fp)
  80bb3c:	1885883a 	add	r2,r3,r2
  80bb40:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80bb44:	e0bffa03 	ldbu	r2,-24(fp)
  80bb48:	00c020b4 	movhi	r3,130
  80bb4c:	18fb4004 	addi	r3,r3,-4864
  80bb50:	1085883a 	add	r2,r2,r2
  80bb54:	1085883a 	add	r2,r2,r2
  80bb58:	10c5883a 	add	r2,r2,r3
  80bb5c:	10800017 	ldw	r2,0(r2)
  80bb60:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80bb64:	e0bffb17 	ldw	r2,-20(fp)
  80bb68:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80bb6c:	e0fffb17 	ldw	r3,-20(fp)
  80bb70:	e0bffd17 	ldw	r2,-12(fp)
  80bb74:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80bb78:	e0bffb17 	ldw	r2,-20(fp)
  80bb7c:	10800c03 	ldbu	r2,48(r2)
  80bb80:	1007883a 	mov	r3,r2
  80bb84:	e0bffe03 	ldbu	r2,-8(fp)
  80bb88:	0084303a 	nor	r2,zero,r2
  80bb8c:	1884703a 	and	r2,r3,r2
  80bb90:	1007883a 	mov	r3,r2
  80bb94:	e0bffb17 	ldw	r2,-20(fp)
  80bb98:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80bb9c:	e0fffb17 	ldw	r3,-20(fp)
  80bba0:	e0bfff03 	ldbu	r2,-4(fp)
  80bba4:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80bba8:	e0bffb17 	ldw	r2,-20(fp)
  80bbac:	10800c03 	ldbu	r2,48(r2)
  80bbb0:	10803fcc 	andi	r2,r2,255
  80bbb4:	1080020c 	andi	r2,r2,8
  80bbb8:	1004c03a 	cmpne	r2,r2,zero
  80bbbc:	1000111e 	bne	r2,zero,80bc04 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80bbc0:	e0bffb17 	ldw	r2,-20(fp)
  80bbc4:	10c00d83 	ldbu	r3,54(r2)
  80bbc8:	d0a70e03 	ldbu	r2,-25544(gp)
  80bbcc:	1884b03a 	or	r2,r3,r2
  80bbd0:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80bbd4:	e13ffa83 	ldbu	r4,-22(fp)
  80bbd8:	e0fffa83 	ldbu	r3,-22(fp)
  80bbdc:	d0a70e44 	addi	r2,gp,-25543
  80bbe0:	1885883a 	add	r2,r3,r2
  80bbe4:	10c00003 	ldbu	r3,0(r2)
  80bbe8:	e0bffb17 	ldw	r2,-20(fp)
  80bbec:	10800d43 	ldbu	r2,53(r2)
  80bbf0:	1884b03a 	or	r2,r3,r2
  80bbf4:	1007883a 	mov	r3,r2
  80bbf8:	d0a70e44 	addi	r2,gp,-25543
  80bbfc:	2085883a 	add	r2,r4,r2
  80bc00:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80bc04:	e13ffb17 	ldw	r4,-20(fp)
  80bc08:	e17ffc17 	ldw	r5,-16(fp)
  80bc0c:	080beb80 	call	80beb8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80bc10:	e0bffb17 	ldw	r2,-20(fp)
  80bc14:	10800817 	ldw	r2,32(r2)
  80bc18:	1005003a 	cmpeq	r2,r2,zero
  80bc1c:	1000071e 	bne	r2,zero,80bc3c <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80bc20:	e0bffb17 	ldw	r2,-20(fp)
  80bc24:	11400817 	ldw	r5,32(r2)
  80bc28:	e13ffb17 	ldw	r4,-20(fp)
  80bc2c:	080bf700 	call	80bf70 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80bc30:	e0fffb17 	ldw	r3,-20(fp)
  80bc34:	e0bffc17 	ldw	r2,-16(fp)
  80bc38:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  80bc3c:	e0bffa03 	ldbu	r2,-24(fp)
}
  80bc40:	e037883a 	mov	sp,fp
  80bc44:	dfc00117 	ldw	ra,4(sp)
  80bc48:	df000017 	ldw	fp,0(sp)
  80bc4c:	dec00204 	addi	sp,sp,8
  80bc50:	f800283a 	ret

0080bc54 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80bc54:	defffd04 	addi	sp,sp,-12
  80bc58:	df000215 	stw	fp,8(sp)
  80bc5c:	df000204 	addi	fp,sp,8
  80bc60:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80bc64:	d0e71117 	ldw	r3,-25532(gp)
  80bc68:	e0bfff17 	ldw	r2,-4(fp)
  80bc6c:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80bc70:	d0a71117 	ldw	r2,-25532(gp)
  80bc74:	10800d03 	ldbu	r2,52(r2)
  80bc78:	11003fcc 	andi	r4,r2,255
  80bc7c:	d0a71117 	ldw	r2,-25532(gp)
  80bc80:	10800d03 	ldbu	r2,52(r2)
  80bc84:	10c03fcc 	andi	r3,r2,255
  80bc88:	e0bfff17 	ldw	r2,-4(fp)
  80bc8c:	1885883a 	add	r2,r3,r2
  80bc90:	10800204 	addi	r2,r2,8
  80bc94:	10c000c3 	ldbu	r3,3(r2)
  80bc98:	d0a71117 	ldw	r2,-25532(gp)
  80bc9c:	10800d43 	ldbu	r2,53(r2)
  80bca0:	1884b03a 	or	r2,r3,r2
  80bca4:	1007883a 	mov	r3,r2
  80bca8:	e0bfff17 	ldw	r2,-4(fp)
  80bcac:	2085883a 	add	r2,r4,r2
  80bcb0:	10800204 	addi	r2,r2,8
  80bcb4:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80bcb8:	e0bfff17 	ldw	r2,-4(fp)
  80bcbc:	10c00283 	ldbu	r3,10(r2)
  80bcc0:	d0a71117 	ldw	r2,-25532(gp)
  80bcc4:	10800d83 	ldbu	r2,54(r2)
  80bcc8:	1884b03a 	or	r2,r3,r2
  80bccc:	1007883a 	mov	r3,r2
  80bcd0:	e0bfff17 	ldw	r2,-4(fp)
  80bcd4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80bcd8:	d0a71117 	ldw	r2,-25532(gp)
  80bcdc:	10800d03 	ldbu	r2,52(r2)
  80bce0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80bce4:	e13ffe03 	ldbu	r4,-8(fp)
  80bce8:	e0fffe03 	ldbu	r3,-8(fp)
  80bcec:	d0a70e44 	addi	r2,gp,-25543
  80bcf0:	1885883a 	add	r2,r3,r2
  80bcf4:	10800003 	ldbu	r2,0(r2)
  80bcf8:	1007883a 	mov	r3,r2
  80bcfc:	d0a71117 	ldw	r2,-25532(gp)
  80bd00:	10800d43 	ldbu	r2,53(r2)
  80bd04:	0084303a 	nor	r2,zero,r2
  80bd08:	1884703a 	and	r2,r3,r2
  80bd0c:	1007883a 	mov	r3,r2
  80bd10:	d0a70e44 	addi	r2,gp,-25543
  80bd14:	2085883a 	add	r2,r4,r2
  80bd18:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80bd1c:	e0fffe03 	ldbu	r3,-8(fp)
  80bd20:	d0a70e44 	addi	r2,gp,-25543
  80bd24:	1885883a 	add	r2,r3,r2
  80bd28:	10800003 	ldbu	r2,0(r2)
  80bd2c:	10803fcc 	andi	r2,r2,255
  80bd30:	1004c03a 	cmpne	r2,r2,zero
  80bd34:	1000071e 	bne	r2,zero,80bd54 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80bd38:	d0a71117 	ldw	r2,-25532(gp)
  80bd3c:	10800d83 	ldbu	r2,54(r2)
  80bd40:	0084303a 	nor	r2,zero,r2
  80bd44:	1007883a 	mov	r3,r2
  80bd48:	d0a70e03 	ldbu	r2,-25544(gp)
  80bd4c:	1884703a 	and	r2,r3,r2
  80bd50:	d0a70e05 	stb	r2,-25544(gp)
    }
}
  80bd54:	e037883a 	mov	sp,fp
  80bd58:	df000017 	ldw	fp,0(sp)
  80bd5c:	dec00104 	addi	sp,sp,4
  80bd60:	f800283a 	ret

0080bd64 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80bd64:	defffb04 	addi	sp,sp,-20
  80bd68:	df000415 	stw	fp,16(sp)
  80bd6c:	df000404 	addi	fp,sp,16
  80bd70:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80bd74:	d0a71117 	ldw	r2,-25532(gp)
  80bd78:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80bd7c:	d0e71117 	ldw	r3,-25532(gp)
  80bd80:	e0bfff17 	ldw	r2,-4(fp)
  80bd84:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80bd88:	e0bfff17 	ldw	r2,-4(fp)
  80bd8c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80bd90:	e0bffe17 	ldw	r2,-8(fp)
  80bd94:	10800017 	ldw	r2,0(r2)
  80bd98:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80bd9c:	00002006 	br	80be20 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80bda0:	d0a71117 	ldw	r2,-25532(gp)
  80bda4:	10800d03 	ldbu	r2,52(r2)
  80bda8:	11003fcc 	andi	r4,r2,255
  80bdac:	d0a71117 	ldw	r2,-25532(gp)
  80bdb0:	10800d03 	ldbu	r2,52(r2)
  80bdb4:	10c03fcc 	andi	r3,r2,255
  80bdb8:	e0bffd17 	ldw	r2,-12(fp)
  80bdbc:	1885883a 	add	r2,r3,r2
  80bdc0:	10800204 	addi	r2,r2,8
  80bdc4:	10c000c3 	ldbu	r3,3(r2)
  80bdc8:	d0a71117 	ldw	r2,-25532(gp)
  80bdcc:	10800d43 	ldbu	r2,53(r2)
  80bdd0:	1884b03a 	or	r2,r3,r2
  80bdd4:	1007883a 	mov	r3,r2
  80bdd8:	e0bffd17 	ldw	r2,-12(fp)
  80bddc:	2085883a 	add	r2,r4,r2
  80bde0:	10800204 	addi	r2,r2,8
  80bde4:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80bde8:	e0bffd17 	ldw	r2,-12(fp)
  80bdec:	10c00283 	ldbu	r3,10(r2)
  80bdf0:	d0a71117 	ldw	r2,-25532(gp)
  80bdf4:	10800d83 	ldbu	r2,54(r2)
  80bdf8:	1884b03a 	or	r2,r3,r2
  80bdfc:	1007883a 	mov	r3,r2
  80be00:	e0bffd17 	ldw	r2,-12(fp)
  80be04:	10c00285 	stb	r3,10(r2)
        pevents++;
  80be08:	e0bffe17 	ldw	r2,-8(fp)
  80be0c:	10800104 	addi	r2,r2,4
  80be10:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80be14:	e0bffe17 	ldw	r2,-8(fp)
  80be18:	10800017 	ldw	r2,0(r2)
  80be1c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80be20:	e0bffd17 	ldw	r2,-12(fp)
  80be24:	1004c03a 	cmpne	r2,r2,zero
  80be28:	103fdd1e 	bne	r2,zero,80bda0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80be2c:	d0a71117 	ldw	r2,-25532(gp)
  80be30:	10800d03 	ldbu	r2,52(r2)
  80be34:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80be38:	e13ffc03 	ldbu	r4,-16(fp)
  80be3c:	e0fffc03 	ldbu	r3,-16(fp)
  80be40:	d0a70e44 	addi	r2,gp,-25543
  80be44:	1885883a 	add	r2,r3,r2
  80be48:	10800003 	ldbu	r2,0(r2)
  80be4c:	1007883a 	mov	r3,r2
  80be50:	d0a71117 	ldw	r2,-25532(gp)
  80be54:	10800d43 	ldbu	r2,53(r2)
  80be58:	0084303a 	nor	r2,zero,r2
  80be5c:	1884703a 	and	r2,r3,r2
  80be60:	1007883a 	mov	r3,r2
  80be64:	d0a70e44 	addi	r2,gp,-25543
  80be68:	2085883a 	add	r2,r4,r2
  80be6c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80be70:	e0fffc03 	ldbu	r3,-16(fp)
  80be74:	d0a70e44 	addi	r2,gp,-25543
  80be78:	1885883a 	add	r2,r3,r2
  80be7c:	10800003 	ldbu	r2,0(r2)
  80be80:	10803fcc 	andi	r2,r2,255
  80be84:	1004c03a 	cmpne	r2,r2,zero
  80be88:	1000071e 	bne	r2,zero,80bea8 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80be8c:	d0a71117 	ldw	r2,-25532(gp)
  80be90:	10800d83 	ldbu	r2,54(r2)
  80be94:	0084303a 	nor	r2,zero,r2
  80be98:	1007883a 	mov	r3,r2
  80be9c:	d0a70e03 	ldbu	r2,-25544(gp)
  80bea0:	1884703a 	and	r2,r3,r2
  80bea4:	d0a70e05 	stb	r2,-25544(gp)
    }
}
  80bea8:	e037883a 	mov	sp,fp
  80beac:	df000017 	ldw	fp,0(sp)
  80beb0:	dec00104 	addi	sp,sp,4
  80beb4:	f800283a 	ret

0080beb8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80beb8:	defffc04 	addi	sp,sp,-16
  80bebc:	df000315 	stw	fp,12(sp)
  80bec0:	df000304 	addi	fp,sp,12
  80bec4:	e13ffe15 	stw	r4,-8(fp)
  80bec8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80becc:	e0bffe17 	ldw	r2,-8(fp)
  80bed0:	10800d03 	ldbu	r2,52(r2)
  80bed4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80bed8:	e13ffd03 	ldbu	r4,-12(fp)
  80bedc:	e0fffd03 	ldbu	r3,-12(fp)
  80bee0:	e0bfff17 	ldw	r2,-4(fp)
  80bee4:	1885883a 	add	r2,r3,r2
  80bee8:	10800204 	addi	r2,r2,8
  80beec:	108000c3 	ldbu	r2,3(r2)
  80bef0:	1007883a 	mov	r3,r2
  80bef4:	e0bffe17 	ldw	r2,-8(fp)
  80bef8:	10800d43 	ldbu	r2,53(r2)
  80befc:	0084303a 	nor	r2,zero,r2
  80bf00:	1884703a 	and	r2,r3,r2
  80bf04:	1007883a 	mov	r3,r2
  80bf08:	e0bfff17 	ldw	r2,-4(fp)
  80bf0c:	2085883a 	add	r2,r4,r2
  80bf10:	10800204 	addi	r2,r2,8
  80bf14:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80bf18:	e0fffd03 	ldbu	r3,-12(fp)
  80bf1c:	e0bfff17 	ldw	r2,-4(fp)
  80bf20:	1885883a 	add	r2,r3,r2
  80bf24:	10800204 	addi	r2,r2,8
  80bf28:	108000c3 	ldbu	r2,3(r2)
  80bf2c:	10803fcc 	andi	r2,r2,255
  80bf30:	1004c03a 	cmpne	r2,r2,zero
  80bf34:	10000a1e 	bne	r2,zero,80bf60 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80bf38:	e0bfff17 	ldw	r2,-4(fp)
  80bf3c:	10800283 	ldbu	r2,10(r2)
  80bf40:	1007883a 	mov	r3,r2
  80bf44:	e0bffe17 	ldw	r2,-8(fp)
  80bf48:	10800d83 	ldbu	r2,54(r2)
  80bf4c:	0084303a 	nor	r2,zero,r2
  80bf50:	1884703a 	and	r2,r3,r2
  80bf54:	1007883a 	mov	r3,r2
  80bf58:	e0bfff17 	ldw	r2,-4(fp)
  80bf5c:	10c00285 	stb	r3,10(r2)
    }
}
  80bf60:	e037883a 	mov	sp,fp
  80bf64:	df000017 	ldw	fp,0(sp)
  80bf68:	dec00104 	addi	sp,sp,4
  80bf6c:	f800283a 	ret

0080bf70 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80bf70:	defffa04 	addi	sp,sp,-24
  80bf74:	df000515 	stw	fp,20(sp)
  80bf78:	df000504 	addi	fp,sp,20
  80bf7c:	e13ffe15 	stw	r4,-8(fp)
  80bf80:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80bf84:	e0bffe17 	ldw	r2,-8(fp)
  80bf88:	10800d03 	ldbu	r2,52(r2)
  80bf8c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80bf90:	e0bffe17 	ldw	r2,-8(fp)
  80bf94:	10800d83 	ldbu	r2,54(r2)
  80bf98:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80bf9c:	e0bffe17 	ldw	r2,-8(fp)
  80bfa0:	10800d43 	ldbu	r2,53(r2)
  80bfa4:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80bfa8:	e0bfff17 	ldw	r2,-4(fp)
  80bfac:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80bfb0:	e0bffd17 	ldw	r2,-12(fp)
  80bfb4:	10800017 	ldw	r2,0(r2)
  80bfb8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80bfbc:	00002606 	br	80c058 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80bfc0:	e13ffb83 	ldbu	r4,-18(fp)
  80bfc4:	e0fffb83 	ldbu	r3,-18(fp)
  80bfc8:	e0bffc17 	ldw	r2,-16(fp)
  80bfcc:	1885883a 	add	r2,r3,r2
  80bfd0:	10800204 	addi	r2,r2,8
  80bfd4:	108000c3 	ldbu	r2,3(r2)
  80bfd8:	1007883a 	mov	r3,r2
  80bfdc:	e0bffb03 	ldbu	r2,-20(fp)
  80bfe0:	0084303a 	nor	r2,zero,r2
  80bfe4:	1884703a 	and	r2,r3,r2
  80bfe8:	1007883a 	mov	r3,r2
  80bfec:	e0bffc17 	ldw	r2,-16(fp)
  80bff0:	2085883a 	add	r2,r4,r2
  80bff4:	10800204 	addi	r2,r2,8
  80bff8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80bffc:	e0fffb83 	ldbu	r3,-18(fp)
  80c000:	e0bffc17 	ldw	r2,-16(fp)
  80c004:	1885883a 	add	r2,r3,r2
  80c008:	10800204 	addi	r2,r2,8
  80c00c:	108000c3 	ldbu	r2,3(r2)
  80c010:	10803fcc 	andi	r2,r2,255
  80c014:	1004c03a 	cmpne	r2,r2,zero
  80c018:	1000091e 	bne	r2,zero,80c040 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80c01c:	e0bffc17 	ldw	r2,-16(fp)
  80c020:	10800283 	ldbu	r2,10(r2)
  80c024:	1007883a 	mov	r3,r2
  80c028:	e0bffb43 	ldbu	r2,-19(fp)
  80c02c:	0084303a 	nor	r2,zero,r2
  80c030:	1884703a 	and	r2,r3,r2
  80c034:	1007883a 	mov	r3,r2
  80c038:	e0bffc17 	ldw	r2,-16(fp)
  80c03c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80c040:	e0bffd17 	ldw	r2,-12(fp)
  80c044:	10800104 	addi	r2,r2,4
  80c048:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80c04c:	e0bffd17 	ldw	r2,-12(fp)
  80c050:	10800017 	ldw	r2,0(r2)
  80c054:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80c058:	e0bffc17 	ldw	r2,-16(fp)
  80c05c:	1004c03a 	cmpne	r2,r2,zero
  80c060:	103fd71e 	bne	r2,zero,80bfc0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80c064:	e037883a 	mov	sp,fp
  80c068:	df000017 	ldw	fp,0(sp)
  80c06c:	dec00104 	addi	sp,sp,4
  80c070:	f800283a 	ret

0080c074 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80c074:	defffc04 	addi	sp,sp,-16
  80c078:	df000315 	stw	fp,12(sp)
  80c07c:	df000304 	addi	fp,sp,12
  80c080:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80c084:	e0bfff17 	ldw	r2,-4(fp)
  80c088:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80c08c:	e0bfff17 	ldw	r2,-4(fp)
  80c090:	108002c4 	addi	r2,r2,11
  80c094:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80c098:	e03ffd05 	stb	zero,-12(fp)
  80c09c:	00000806 	br	80c0c0 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80c0a0:	e0bffe17 	ldw	r2,-8(fp)
  80c0a4:	10000005 	stb	zero,0(r2)
  80c0a8:	e0bffe17 	ldw	r2,-8(fp)
  80c0ac:	10800044 	addi	r2,r2,1
  80c0b0:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80c0b4:	e0bffd03 	ldbu	r2,-12(fp)
  80c0b8:	10800044 	addi	r2,r2,1
  80c0bc:	e0bffd05 	stb	r2,-12(fp)
  80c0c0:	e0bffd03 	ldbu	r2,-12(fp)
  80c0c4:	108000f0 	cmpltui	r2,r2,3
  80c0c8:	103ff51e 	bne	r2,zero,80c0a0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80c0cc:	e037883a 	mov	sp,fp
  80c0d0:	df000017 	ldw	fp,0(sp)
  80c0d4:	dec00104 	addi	sp,sp,4
  80c0d8:	f800283a 	ret

0080c0dc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80c0dc:	defffb04 	addi	sp,sp,-20
  80c0e0:	dfc00415 	stw	ra,16(sp)
  80c0e4:	df000315 	stw	fp,12(sp)
  80c0e8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80c0ec:	010020b4 	movhi	r4,130
  80c0f0:	21372c04 	addi	r4,r4,-9040
  80c0f4:	0142d004 	movi	r5,2880
  80c0f8:	080c4400 	call	80c440 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80c0fc:	008020b4 	movhi	r2,130
  80c100:	10b72c04 	addi	r2,r2,-9040
  80c104:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80c108:	008020b4 	movhi	r2,130
  80c10c:	10b73804 	addi	r2,r2,-8992
  80c110:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c114:	e03fff0d 	sth	zero,-4(fp)
  80c118:	00001306 	br	80c168 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80c11c:	e0bffe17 	ldw	r2,-8(fp)
  80c120:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80c124:	e0fffe17 	ldw	r3,-8(fp)
  80c128:	e0bffd17 	ldw	r2,-12(fp)
  80c12c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80c130:	e0fffe17 	ldw	r3,-8(fp)
  80c134:	00800fc4 	movi	r2,63
  80c138:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80c13c:	e0bffe17 	ldw	r2,-8(fp)
  80c140:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80c144:	e0bffe17 	ldw	r2,-8(fp)
  80c148:	10800c04 	addi	r2,r2,48
  80c14c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80c150:	e0bffd17 	ldw	r2,-12(fp)
  80c154:	10800c04 	addi	r2,r2,48
  80c158:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c15c:	e0bfff0b 	ldhu	r2,-4(fp)
  80c160:	10800044 	addi	r2,r2,1
  80c164:	e0bfff0d 	sth	r2,-4(fp)
  80c168:	e0bfff0b 	ldhu	r2,-4(fp)
  80c16c:	10800ef0 	cmpltui	r2,r2,59
  80c170:	103fea1e 	bne	r2,zero,80c11c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80c174:	e0bffe17 	ldw	r2,-8(fp)
  80c178:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80c17c:	e0bffe17 	ldw	r2,-8(fp)
  80c180:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80c184:	e0fffe17 	ldw	r3,-8(fp)
  80c188:	00800fc4 	movi	r2,63
  80c18c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80c190:	e0bffe17 	ldw	r2,-8(fp)
  80c194:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80c198:	008020b4 	movhi	r2,130
  80c19c:	10b72c04 	addi	r2,r2,-9040
  80c1a0:	d0a70f15 	stw	r2,-25540(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80c1a4:	e037883a 	mov	sp,fp
  80c1a8:	dfc00117 	ldw	ra,4(sp)
  80c1ac:	df000017 	ldw	fp,0(sp)
  80c1b0:	dec00204 	addi	sp,sp,8
  80c1b4:	f800283a 	ret

0080c1b8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80c1b8:	deffff04 	addi	sp,sp,-4
  80c1bc:	df000015 	stw	fp,0(sp)
  80c1c0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80c1c4:	d0271215 	stw	zero,-25528(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80c1c8:	d0271005 	stb	zero,-25536(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80c1cc:	d0270205 	stb	zero,-25592(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80c1d0:	d0270a45 	stb	zero,-25559(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80c1d4:	d0270245 	stb	zero,-25591(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80c1d8:	d0270715 	stw	zero,-25572(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80c1dc:	d0270315 	stw	zero,-25588(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80c1e0:	d0271515 	stw	zero,-25516(gp)
    OSIdleCtrMax  = 0L;
  80c1e4:	d0270815 	stw	zero,-25568(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80c1e8:	d0271405 	stb	zero,-25520(gp)
#endif
}
  80c1ec:	e037883a 	mov	sp,fp
  80c1f0:	df000017 	ldw	fp,0(sp)
  80c1f4:	dec00104 	addi	sp,sp,4
  80c1f8:	f800283a 	ret

0080c1fc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80c1fc:	defffd04 	addi	sp,sp,-12
  80c200:	df000215 	stw	fp,8(sp)
  80c204:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80c208:	d0270e05 	stb	zero,-25544(gp)
    prdytbl       = &OSRdyTbl[0];
  80c20c:	d0a70e44 	addi	r2,gp,-25543
  80c210:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80c214:	e03fff05 	stb	zero,-4(fp)
  80c218:	00000806 	br	80c23c <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80c21c:	e0bffe17 	ldw	r2,-8(fp)
  80c220:	10000005 	stb	zero,0(r2)
  80c224:	e0bffe17 	ldw	r2,-8(fp)
  80c228:	10800044 	addi	r2,r2,1
  80c22c:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80c230:	e0bfff03 	ldbu	r2,-4(fp)
  80c234:	10800044 	addi	r2,r2,1
  80c238:	e0bfff05 	stb	r2,-4(fp)
  80c23c:	e0bfff03 	ldbu	r2,-4(fp)
  80c240:	108000f0 	cmpltui	r2,r2,3
  80c244:	103ff51e 	bne	r2,zero,80c21c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80c248:	d0270445 	stb	zero,-25583(gp)
    OSPrioHighRdy = 0;
  80c24c:	d0270405 	stb	zero,-25584(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80c250:	d0270c15 	stw	zero,-25552(gp)
    OSTCBCur      = (OS_TCB *)0;
  80c254:	d0271115 	stw	zero,-25532(gp)
}
  80c258:	e037883a 	mov	sp,fp
  80c25c:	df000017 	ldw	fp,0(sp)
  80c260:	dec00104 	addi	sp,sp,4
  80c264:	f800283a 	ret

0080c268 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80c268:	defff804 	addi	sp,sp,-32
  80c26c:	dfc00715 	stw	ra,28(sp)
  80c270:	df000615 	stw	fp,24(sp)
  80c274:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80c278:	018020b4 	movhi	r6,130
  80c27c:	31b72b04 	addi	r6,r6,-9044
  80c280:	00bfffd4 	movui	r2,65535
  80c284:	d8800015 	stw	r2,0(sp)
  80c288:	008020b4 	movhi	r2,130
  80c28c:	10b52c04 	addi	r2,r2,-11088
  80c290:	d8800115 	stw	r2,4(sp)
  80c294:	00808004 	movi	r2,512
  80c298:	d8800215 	stw	r2,8(sp)
  80c29c:	d8000315 	stw	zero,12(sp)
  80c2a0:	008000c4 	movi	r2,3
  80c2a4:	d8800415 	stw	r2,16(sp)
  80c2a8:	01002074 	movhi	r4,129
  80c2ac:	2131c704 	addi	r4,r4,-14564
  80c2b0:	000b883a 	mov	r5,zero
  80c2b4:	01c00504 	movi	r7,20
  80c2b8:	08114fc0 	call	8114fc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80c2bc:	01402074 	movhi	r5,129
  80c2c0:	29590004 	addi	r5,r5,25600
  80c2c4:	01000504 	movi	r4,20
  80c2c8:	e1bfff04 	addi	r6,fp,-4
  80c2cc:	0811e300 	call	811e30 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80c2d0:	e037883a 	mov	sp,fp
  80c2d4:	dfc00117 	ldw	ra,4(sp)
  80c2d8:	df000017 	ldw	fp,0(sp)
  80c2dc:	dec00204 	addi	sp,sp,8
  80c2e0:	f800283a 	ret

0080c2e4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80c2e4:	defff804 	addi	sp,sp,-32
  80c2e8:	dfc00715 	stw	ra,28(sp)
  80c2ec:	df000615 	stw	fp,24(sp)
  80c2f0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80c2f4:	018020b4 	movhi	r6,130
  80c2f8:	31b4b304 	addi	r6,r6,-11572
  80c2fc:	00bfff94 	movui	r2,65534
  80c300:	d8800015 	stw	r2,0(sp)
  80c304:	008020b4 	movhi	r2,130
  80c308:	10b2b404 	addi	r2,r2,-13616
  80c30c:	d8800115 	stw	r2,4(sp)
  80c310:	00808004 	movi	r2,512
  80c314:	d8800215 	stw	r2,8(sp)
  80c318:	d8000315 	stw	zero,12(sp)
  80c31c:	008000c4 	movi	r2,3
  80c320:	d8800415 	stw	r2,16(sp)
  80c324:	01002074 	movhi	r4,129
  80c328:	2131de04 	addi	r4,r4,-14472
  80c32c:	000b883a 	mov	r5,zero
  80c330:	01c004c4 	movi	r7,19
  80c334:	08114fc0 	call	8114fc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80c338:	01402074 	movhi	r5,129
  80c33c:	29590404 	addi	r5,r5,25616
  80c340:	010004c4 	movi	r4,19
  80c344:	e1bfff04 	addi	r6,fp,-4
  80c348:	0811e300 	call	811e30 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80c34c:	e037883a 	mov	sp,fp
  80c350:	dfc00117 	ldw	ra,4(sp)
  80c354:	df000017 	ldw	fp,0(sp)
  80c358:	dec00204 	addi	sp,sp,8
  80c35c:	f800283a 	ret

0080c360 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80c360:	defffb04 	addi	sp,sp,-20
  80c364:	dfc00415 	stw	ra,16(sp)
  80c368:	df000315 	stw	fp,12(sp)
  80c36c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80c370:	010020b4 	movhi	r4,130
  80c374:	2139fc04 	addi	r4,r4,-6160
  80c378:	01414404 	movi	r5,1296
  80c37c:	080c4400 	call	80c440 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80c380:	010020b4 	movhi	r4,130
  80c384:	213b4004 	addi	r4,r4,-4864
  80c388:	01401504 	movi	r5,84
  80c38c:	080c4400 	call	80c440 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80c390:	008020b4 	movhi	r2,130
  80c394:	10b9fc04 	addi	r2,r2,-6160
  80c398:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80c39c:	008020b4 	movhi	r2,130
  80c3a0:	10ba1704 	addi	r2,r2,-6052
  80c3a4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80c3a8:	e03fff05 	stb	zero,-4(fp)
  80c3ac:	00001106 	br	80c3f4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80c3b0:	e0fffe17 	ldw	r3,-8(fp)
  80c3b4:	e0bffd17 	ldw	r2,-12(fp)
  80c3b8:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80c3bc:	e0fffe17 	ldw	r3,-8(fp)
  80c3c0:	00800fc4 	movi	r2,63
  80c3c4:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80c3c8:	e0bffe17 	ldw	r2,-8(fp)
  80c3cc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80c3d0:	e0bffe17 	ldw	r2,-8(fp)
  80c3d4:	10801b04 	addi	r2,r2,108
  80c3d8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80c3dc:	e0bffd17 	ldw	r2,-12(fp)
  80c3e0:	10801b04 	addi	r2,r2,108
  80c3e4:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80c3e8:	e0bfff03 	ldbu	r2,-4(fp)
  80c3ec:	10800044 	addi	r2,r2,1
  80c3f0:	e0bfff05 	stb	r2,-4(fp)
  80c3f4:	e0bfff03 	ldbu	r2,-4(fp)
  80c3f8:	108002f0 	cmpltui	r2,r2,11
  80c3fc:	103fec1e 	bne	r2,zero,80c3b0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80c400:	e0bffe17 	ldw	r2,-8(fp)
  80c404:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80c408:	e0fffe17 	ldw	r3,-8(fp)
  80c40c:	00800fc4 	movi	r2,63
  80c410:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80c414:	e0bffe17 	ldw	r2,-8(fp)
  80c418:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80c41c:	d0270515 	stw	zero,-25580(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80c420:	008020b4 	movhi	r2,130
  80c424:	10b9fc04 	addi	r2,r2,-6160
  80c428:	d0a70915 	stw	r2,-25564(gp)
}
  80c42c:	e037883a 	mov	sp,fp
  80c430:	dfc00117 	ldw	ra,4(sp)
  80c434:	df000017 	ldw	fp,0(sp)
  80c438:	dec00204 	addi	sp,sp,8
  80c43c:	f800283a 	ret

0080c440 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80c440:	defffd04 	addi	sp,sp,-12
  80c444:	df000215 	stw	fp,8(sp)
  80c448:	df000204 	addi	fp,sp,8
  80c44c:	e13ffe15 	stw	r4,-8(fp)
  80c450:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80c454:	00000806 	br	80c478 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80c458:	e0bffe17 	ldw	r2,-8(fp)
  80c45c:	10000005 	stb	zero,0(r2)
  80c460:	e0bffe17 	ldw	r2,-8(fp)
  80c464:	10800044 	addi	r2,r2,1
  80c468:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80c46c:	e0bfff0b 	ldhu	r2,-4(fp)
  80c470:	10bfffc4 	addi	r2,r2,-1
  80c474:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80c478:	e0bfff0b 	ldhu	r2,-4(fp)
  80c47c:	1004c03a 	cmpne	r2,r2,zero
  80c480:	103ff51e 	bne	r2,zero,80c458 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80c484:	e037883a 	mov	sp,fp
  80c488:	df000017 	ldw	fp,0(sp)
  80c48c:	dec00104 	addi	sp,sp,4
  80c490:	f800283a 	ret

0080c494 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80c494:	defffc04 	addi	sp,sp,-16
  80c498:	df000315 	stw	fp,12(sp)
  80c49c:	df000304 	addi	fp,sp,12
  80c4a0:	e13ffd15 	stw	r4,-12(fp)
  80c4a4:	e17ffe15 	stw	r5,-8(fp)
  80c4a8:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80c4ac:	00000d06 	br	80c4e4 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80c4b0:	e0bffe17 	ldw	r2,-8(fp)
  80c4b4:	10c00003 	ldbu	r3,0(r2)
  80c4b8:	e0bffd17 	ldw	r2,-12(fp)
  80c4bc:	10c00005 	stb	r3,0(r2)
  80c4c0:	e0bffd17 	ldw	r2,-12(fp)
  80c4c4:	10800044 	addi	r2,r2,1
  80c4c8:	e0bffd15 	stw	r2,-12(fp)
  80c4cc:	e0bffe17 	ldw	r2,-8(fp)
  80c4d0:	10800044 	addi	r2,r2,1
  80c4d4:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80c4d8:	e0bfff0b 	ldhu	r2,-4(fp)
  80c4dc:	10bfffc4 	addi	r2,r2,-1
  80c4e0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80c4e4:	e0bfff0b 	ldhu	r2,-4(fp)
  80c4e8:	1004c03a 	cmpne	r2,r2,zero
  80c4ec:	103ff01e 	bne	r2,zero,80c4b0 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80c4f0:	e037883a 	mov	sp,fp
  80c4f4:	df000017 	ldw	fp,0(sp)
  80c4f8:	dec00104 	addi	sp,sp,4
  80c4fc:	f800283a 	ret

0080c500 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80c500:	defffb04 	addi	sp,sp,-20
  80c504:	dfc00415 	stw	ra,16(sp)
  80c508:	df000315 	stw	fp,12(sp)
  80c50c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80c510:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c514:	0005303a 	rdctl	r2,status
  80c518:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c51c:	e0fffe17 	ldw	r3,-8(fp)
  80c520:	00bfff84 	movi	r2,-2
  80c524:	1884703a 	and	r2,r3,r2
  80c528:	1001703a 	wrctl	status,r2
  
  return context;
  80c52c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80c530:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80c534:	d0a71003 	ldbu	r2,-25536(gp)
  80c538:	10803fcc 	andi	r2,r2,255
  80c53c:	1004c03a 	cmpne	r2,r2,zero
  80c540:	10001b1e 	bne	r2,zero,80c5b0 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80c544:	d0a70203 	ldbu	r2,-25592(gp)
  80c548:	10803fcc 	andi	r2,r2,255
  80c54c:	1004c03a 	cmpne	r2,r2,zero
  80c550:	1000171e 	bne	r2,zero,80c5b0 <OS_Sched+0xb0>
            OS_SchedNew();
  80c554:	080c5d40 	call	80c5d4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80c558:	d0a70403 	ldbu	r2,-25584(gp)
  80c55c:	d0e70443 	ldbu	r3,-25583(gp)
  80c560:	11003fcc 	andi	r4,r2,255
  80c564:	18803fcc 	andi	r2,r3,255
  80c568:	20801126 	beq	r4,r2,80c5b0 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80c56c:	d0a70403 	ldbu	r2,-25584(gp)
  80c570:	10803fcc 	andi	r2,r2,255
  80c574:	00c020b4 	movhi	r3,130
  80c578:	18fb4004 	addi	r3,r3,-4864
  80c57c:	1085883a 	add	r2,r2,r2
  80c580:	1085883a 	add	r2,r2,r2
  80c584:	10c5883a 	add	r2,r2,r3
  80c588:	10800017 	ldw	r2,0(r2)
  80c58c:	d0a70c15 	stw	r2,-25552(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80c590:	d0e70c17 	ldw	r3,-25552(gp)
  80c594:	18800e17 	ldw	r2,56(r3)
  80c598:	10800044 	addi	r2,r2,1
  80c59c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80c5a0:	d0a70717 	ldw	r2,-25572(gp)
  80c5a4:	10800044 	addi	r2,r2,1
  80c5a8:	d0a70715 	stw	r2,-25572(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80c5ac:	08154240 	call	815424 <OSCtxSw>
  80c5b0:	e0bfff17 	ldw	r2,-4(fp)
  80c5b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c5b8:	e0bffd17 	ldw	r2,-12(fp)
  80c5bc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80c5c0:	e037883a 	mov	sp,fp
  80c5c4:	dfc00117 	ldw	ra,4(sp)
  80c5c8:	df000017 	ldw	fp,0(sp)
  80c5cc:	dec00204 	addi	sp,sp,8
  80c5d0:	f800283a 	ret

0080c5d4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80c5d4:	defffe04 	addi	sp,sp,-8
  80c5d8:	df000115 	stw	fp,4(sp)
  80c5dc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80c5e0:	d0a70e03 	ldbu	r2,-25544(gp)
  80c5e4:	10c03fcc 	andi	r3,r2,255
  80c5e8:	00802074 	movhi	r2,129
  80c5ec:	1098c004 	addi	r2,r2,25344
  80c5f0:	10c5883a 	add	r2,r2,r3
  80c5f4:	10800003 	ldbu	r2,0(r2)
  80c5f8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80c5fc:	e0bfff03 	ldbu	r2,-4(fp)
  80c600:	100490fa 	slli	r2,r2,3
  80c604:	1009883a 	mov	r4,r2
  80c608:	e0ffff03 	ldbu	r3,-4(fp)
  80c60c:	d0a70e44 	addi	r2,gp,-25543
  80c610:	1885883a 	add	r2,r3,r2
  80c614:	10800003 	ldbu	r2,0(r2)
  80c618:	10c03fcc 	andi	r3,r2,255
  80c61c:	00802074 	movhi	r2,129
  80c620:	1098c004 	addi	r2,r2,25344
  80c624:	10c5883a 	add	r2,r2,r3
  80c628:	10800003 	ldbu	r2,0(r2)
  80c62c:	2085883a 	add	r2,r4,r2
  80c630:	d0a70405 	stb	r2,-25584(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80c634:	e037883a 	mov	sp,fp
  80c638:	df000017 	ldw	fp,0(sp)
  80c63c:	dec00104 	addi	sp,sp,4
  80c640:	f800283a 	ret

0080c644 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80c644:	defffc04 	addi	sp,sp,-16
  80c648:	df000315 	stw	fp,12(sp)
  80c64c:	df000304 	addi	fp,sp,12
  80c650:	e13ffe15 	stw	r4,-8(fp)
  80c654:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80c658:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80c65c:	00000d06 	br	80c694 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80c660:	e0bfff17 	ldw	r2,-4(fp)
  80c664:	10c00003 	ldbu	r3,0(r2)
  80c668:	e0bffe17 	ldw	r2,-8(fp)
  80c66c:	10c00005 	stb	r3,0(r2)
  80c670:	e0bffe17 	ldw	r2,-8(fp)
  80c674:	10800044 	addi	r2,r2,1
  80c678:	e0bffe15 	stw	r2,-8(fp)
  80c67c:	e0bfff17 	ldw	r2,-4(fp)
  80c680:	10800044 	addi	r2,r2,1
  80c684:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80c688:	e0bffd03 	ldbu	r2,-12(fp)
  80c68c:	10800044 	addi	r2,r2,1
  80c690:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80c694:	e0bfff17 	ldw	r2,-4(fp)
  80c698:	10800003 	ldbu	r2,0(r2)
  80c69c:	10803fcc 	andi	r2,r2,255
  80c6a0:	1004c03a 	cmpne	r2,r2,zero
  80c6a4:	103fee1e 	bne	r2,zero,80c660 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80c6a8:	e0bffe17 	ldw	r2,-8(fp)
  80c6ac:	10000005 	stb	zero,0(r2)
    return (len);
  80c6b0:	e0bffd03 	ldbu	r2,-12(fp)
}
  80c6b4:	e037883a 	mov	sp,fp
  80c6b8:	df000017 	ldw	fp,0(sp)
  80c6bc:	dec00104 	addi	sp,sp,4
  80c6c0:	f800283a 	ret

0080c6c4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80c6c4:	defffd04 	addi	sp,sp,-12
  80c6c8:	df000215 	stw	fp,8(sp)
  80c6cc:	df000204 	addi	fp,sp,8
  80c6d0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80c6d4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80c6d8:	00000606 	br	80c6f4 <OS_StrLen+0x30>
        psrc++;
  80c6dc:	e0bfff17 	ldw	r2,-4(fp)
  80c6e0:	10800044 	addi	r2,r2,1
  80c6e4:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80c6e8:	e0bffe03 	ldbu	r2,-8(fp)
  80c6ec:	10800044 	addi	r2,r2,1
  80c6f0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80c6f4:	e0bfff17 	ldw	r2,-4(fp)
  80c6f8:	10800003 	ldbu	r2,0(r2)
  80c6fc:	10803fcc 	andi	r2,r2,255
  80c700:	1004c03a 	cmpne	r2,r2,zero
  80c704:	103ff51e 	bne	r2,zero,80c6dc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80c708:	e0bffe03 	ldbu	r2,-8(fp)
}
  80c70c:	e037883a 	mov	sp,fp
  80c710:	df000017 	ldw	fp,0(sp)
  80c714:	dec00104 	addi	sp,sp,4
  80c718:	f800283a 	ret

0080c71c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80c71c:	defffa04 	addi	sp,sp,-24
  80c720:	dfc00515 	stw	ra,20(sp)
  80c724:	df000415 	stw	fp,16(sp)
  80c728:	df000404 	addi	fp,sp,16
  80c72c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c730:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c734:	0005303a 	rdctl	r2,status
  80c738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c73c:	e0fffd17 	ldw	r3,-12(fp)
  80c740:	00bfff84 	movi	r2,-2
  80c744:	1884703a 	and	r2,r3,r2
  80c748:	1001703a 	wrctl	status,r2
  
  return context;
  80c74c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80c750:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80c754:	d0a70317 	ldw	r2,-25588(gp)
  80c758:	10800044 	addi	r2,r2,1
  80c75c:	d0a70315 	stw	r2,-25588(gp)
  80c760:	e0bffe17 	ldw	r2,-8(fp)
  80c764:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c768:	e0bffc17 	ldw	r2,-16(fp)
  80c76c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80c770:	08158d00 	call	8158d0 <OSTaskIdleHook>
    }
  80c774:	003fef06 	br	80c734 <OS_TaskIdle+0x18>

0080c778 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80c778:	defffa04 	addi	sp,sp,-24
  80c77c:	dfc00515 	stw	ra,20(sp)
  80c780:	df000415 	stw	fp,16(sp)
  80c784:	df000404 	addi	fp,sp,16
  80c788:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c78c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80c790:	00000206 	br	80c79c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80c794:	01003204 	movi	r4,200
  80c798:	08127f40 	call	8127f4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80c79c:	d0a71403 	ldbu	r2,-25520(gp)
  80c7a0:	10803fcc 	andi	r2,r2,255
  80c7a4:	1005003a 	cmpeq	r2,r2,zero
  80c7a8:	103ffa1e 	bne	r2,zero,80c794 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80c7ac:	d1270817 	ldw	r4,-25568(gp)
  80c7b0:	01401904 	movi	r5,100
  80c7b4:	08004340 	call	800434 <__udivsi3>
  80c7b8:	d0a70815 	stw	r2,-25568(gp)
    if (OSIdleCtrMax == 0L) {
  80c7bc:	d0a70817 	ldw	r2,-25568(gp)
  80c7c0:	1004c03a 	cmpne	r2,r2,zero
  80c7c4:	1000031e 	bne	r2,zero,80c7d4 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80c7c8:	d0270a05 	stb	zero,-25560(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80c7cc:	01003fc4 	movi	r4,255
  80c7d0:	08124080 	call	812408 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c7d4:	0005303a 	rdctl	r2,status
  80c7d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c7dc:	e0fffd17 	ldw	r3,-12(fp)
  80c7e0:	00bfff84 	movi	r2,-2
  80c7e4:	1884703a 	and	r2,r3,r2
  80c7e8:	1001703a 	wrctl	status,r2
  
  return context;
  80c7ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80c7f0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80c7f4:	d0a70317 	ldw	r2,-25588(gp)
  80c7f8:	d0a71515 	stw	r2,-25516(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80c7fc:	d0270315 	stw	zero,-25588(gp)
  80c800:	e0bffe17 	ldw	r2,-8(fp)
  80c804:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c808:	e0bffc17 	ldw	r2,-16(fp)
  80c80c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80c810:	d1271517 	ldw	r4,-25516(gp)
  80c814:	d1670817 	ldw	r5,-25568(gp)
  80c818:	08004340 	call	800434 <__udivsi3>
  80c81c:	1007883a 	mov	r3,r2
  80c820:	00801904 	movi	r2,100
  80c824:	10c5c83a 	sub	r2,r2,r3
  80c828:	d0a70a05 	stb	r2,-25560(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80c82c:	08158600 	call	815860 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80c830:	080c8400 	call	80c840 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80c834:	01001904 	movi	r4,100
  80c838:	08127f40 	call	8127f4 <OSTimeDly>
    }
  80c83c:	003fe506 	br	80c7d4 <OS_TaskStat+0x5c>

0080c840 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80c840:	defffa04 	addi	sp,sp,-24
  80c844:	dfc00515 	stw	ra,20(sp)
  80c848:	df000415 	stw	fp,16(sp)
  80c84c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80c850:	e03ffc05 	stb	zero,-16(fp)
  80c854:	00002406 	br	80c8e8 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80c858:	e13ffc03 	ldbu	r4,-16(fp)
  80c85c:	e17ffe04 	addi	r5,fp,-8
  80c860:	081220c0 	call	81220c <OSTaskStkChk>
  80c864:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80c868:	e0bffc43 	ldbu	r2,-15(fp)
  80c86c:	1004c03a 	cmpne	r2,r2,zero
  80c870:	10001a1e 	bne	r2,zero,80c8dc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80c874:	e0bffc03 	ldbu	r2,-16(fp)
  80c878:	00c020b4 	movhi	r3,130
  80c87c:	18fb4004 	addi	r3,r3,-4864
  80c880:	1085883a 	add	r2,r2,r2
  80c884:	1085883a 	add	r2,r2,r2
  80c888:	10c5883a 	add	r2,r2,r3
  80c88c:	10800017 	ldw	r2,0(r2)
  80c890:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80c894:	e0bffd17 	ldw	r2,-12(fp)
  80c898:	1005003a 	cmpeq	r2,r2,zero
  80c89c:	10000f1e 	bne	r2,zero,80c8dc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80c8a0:	e0bffd17 	ldw	r2,-12(fp)
  80c8a4:	10800060 	cmpeqi	r2,r2,1
  80c8a8:	10000c1e 	bne	r2,zero,80c8dc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80c8ac:	e0bffd17 	ldw	r2,-12(fp)
  80c8b0:	10c00217 	ldw	r3,8(r2)
  80c8b4:	e0bffd17 	ldw	r2,-12(fp)
  80c8b8:	10800317 	ldw	r2,12(r2)
  80c8bc:	1085883a 	add	r2,r2,r2
  80c8c0:	1085883a 	add	r2,r2,r2
  80c8c4:	1887883a 	add	r3,r3,r2
  80c8c8:	e0bffd17 	ldw	r2,-12(fp)
  80c8cc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80c8d0:	e0ffff17 	ldw	r3,-4(fp)
  80c8d4:	e0bffd17 	ldw	r2,-12(fp)
  80c8d8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80c8dc:	e0bffc03 	ldbu	r2,-16(fp)
  80c8e0:	10800044 	addi	r2,r2,1
  80c8e4:	e0bffc05 	stb	r2,-16(fp)
  80c8e8:	e0bffc03 	ldbu	r2,-16(fp)
  80c8ec:	10800570 	cmpltui	r2,r2,21
  80c8f0:	103fd91e 	bne	r2,zero,80c858 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80c8f4:	e037883a 	mov	sp,fp
  80c8f8:	dfc00117 	ldw	ra,4(sp)
  80c8fc:	df000017 	ldw	fp,0(sp)
  80c900:	dec00204 	addi	sp,sp,8
  80c904:	f800283a 	ret

0080c908 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80c908:	defff104 	addi	sp,sp,-60
  80c90c:	dfc00e15 	stw	ra,56(sp)
  80c910:	df000d15 	stw	fp,52(sp)
  80c914:	df000d04 	addi	fp,sp,52
  80c918:	e17ffb15 	stw	r5,-20(fp)
  80c91c:	e1bffc15 	stw	r6,-16(fp)
  80c920:	e0800417 	ldw	r2,16(fp)
  80c924:	e13ffa05 	stb	r4,-24(fp)
  80c928:	e1fffd0d 	sth	r7,-12(fp)
  80c92c:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80c930:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c934:	0005303a 	rdctl	r2,status
  80c938:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c93c:	e0fff717 	ldw	r3,-36(fp)
  80c940:	00bfff84 	movi	r2,-2
  80c944:	1884703a 	and	r2,r3,r2
  80c948:	1001703a 	wrctl	status,r2
  
  return context;
  80c94c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80c950:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80c954:	d0a70917 	ldw	r2,-25564(gp)
  80c958:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80c95c:	e0bff917 	ldw	r2,-28(fp)
  80c960:	1005003a 	cmpeq	r2,r2,zero
  80c964:	1000941e 	bne	r2,zero,80cbb8 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80c968:	e0bff917 	ldw	r2,-28(fp)
  80c96c:	10800517 	ldw	r2,20(r2)
  80c970:	d0a70915 	stw	r2,-25564(gp)
  80c974:	e0bff817 	ldw	r2,-32(fp)
  80c978:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c97c:	e0bff617 	ldw	r2,-40(fp)
  80c980:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80c984:	e0fff917 	ldw	r3,-28(fp)
  80c988:	e0bffb17 	ldw	r2,-20(fp)
  80c98c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80c990:	e0fff917 	ldw	r3,-28(fp)
  80c994:	e0bffa03 	ldbu	r2,-24(fp)
  80c998:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80c99c:	e0bff917 	ldw	r2,-28(fp)
  80c9a0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80c9a4:	e0bff917 	ldw	r2,-28(fp)
  80c9a8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80c9ac:	e0bff917 	ldw	r2,-28(fp)
  80c9b0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80c9b4:	e0fff917 	ldw	r3,-28(fp)
  80c9b8:	e0800317 	ldw	r2,12(fp)
  80c9bc:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80c9c0:	e0fff917 	ldw	r3,-28(fp)
  80c9c4:	e0800217 	ldw	r2,8(fp)
  80c9c8:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80c9cc:	e0fff917 	ldw	r3,-28(fp)
  80c9d0:	e0bffc17 	ldw	r2,-16(fp)
  80c9d4:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80c9d8:	e0fff917 	ldw	r3,-28(fp)
  80c9dc:	e0bffe0b 	ldhu	r2,-8(fp)
  80c9e0:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80c9e4:	e0fff917 	ldw	r3,-28(fp)
  80c9e8:	e0bffd0b 	ldhu	r2,-12(fp)
  80c9ec:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80c9f0:	e0bff917 	ldw	r2,-28(fp)
  80c9f4:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80c9f8:	e0bffa03 	ldbu	r2,-24(fp)
  80c9fc:	1004d0fa 	srli	r2,r2,3
  80ca00:	1007883a 	mov	r3,r2
  80ca04:	e0bff917 	ldw	r2,-28(fp)
  80ca08:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80ca0c:	e0bffa03 	ldbu	r2,-24(fp)
  80ca10:	108001cc 	andi	r2,r2,7
  80ca14:	1007883a 	mov	r3,r2
  80ca18:	e0bff917 	ldw	r2,-28(fp)
  80ca1c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80ca20:	e0bff917 	ldw	r2,-28(fp)
  80ca24:	10800d03 	ldbu	r2,52(r2)
  80ca28:	10c03fcc 	andi	r3,r2,255
  80ca2c:	00800044 	movi	r2,1
  80ca30:	10c4983a 	sll	r2,r2,r3
  80ca34:	1007883a 	mov	r3,r2
  80ca38:	e0bff917 	ldw	r2,-28(fp)
  80ca3c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80ca40:	e0bff917 	ldw	r2,-28(fp)
  80ca44:	10800cc3 	ldbu	r2,51(r2)
  80ca48:	10c03fcc 	andi	r3,r2,255
  80ca4c:	00800044 	movi	r2,1
  80ca50:	10c4983a 	sll	r2,r2,r3
  80ca54:	1007883a 	mov	r3,r2
  80ca58:	e0bff917 	ldw	r2,-28(fp)
  80ca5c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80ca60:	e0bff917 	ldw	r2,-28(fp)
  80ca64:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80ca68:	e0bff917 	ldw	r2,-28(fp)
  80ca6c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80ca70:	e0bff917 	ldw	r2,-28(fp)
  80ca74:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80ca78:	e0bff917 	ldw	r2,-28(fp)
  80ca7c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80ca80:	e0bff917 	ldw	r2,-28(fp)
  80ca84:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80ca88:	e0bff917 	ldw	r2,-28(fp)
  80ca8c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80ca90:	e0bff917 	ldw	r2,-28(fp)
  80ca94:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80ca98:	e0bff917 	ldw	r2,-28(fp)
  80ca9c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80caa0:	e0bff917 	ldw	r2,-28(fp)
  80caa4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80caa8:	e0fff917 	ldw	r3,-28(fp)
  80caac:	00800fc4 	movi	r2,63
  80cab0:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80cab4:	e0bff917 	ldw	r2,-28(fp)
  80cab8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80cabc:	e13ff917 	ldw	r4,-28(fp)
  80cac0:	08158ec0 	call	8158ec <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80cac4:	e13ff917 	ldw	r4,-28(fp)
  80cac8:	08158040 	call	815804 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cacc:	0005303a 	rdctl	r2,status
  80cad0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cad4:	e0fff517 	ldw	r3,-44(fp)
  80cad8:	00bfff84 	movi	r2,-2
  80cadc:	1884703a 	and	r2,r3,r2
  80cae0:	1001703a 	wrctl	status,r2
  
  return context;
  80cae4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80cae8:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80caec:	e0bffa03 	ldbu	r2,-24(fp)
  80caf0:	00c020b4 	movhi	r3,130
  80caf4:	18fb4004 	addi	r3,r3,-4864
  80caf8:	1085883a 	add	r2,r2,r2
  80cafc:	1085883a 	add	r2,r2,r2
  80cb00:	10c7883a 	add	r3,r2,r3
  80cb04:	e0bff917 	ldw	r2,-28(fp)
  80cb08:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80cb0c:	d0e70517 	ldw	r3,-25580(gp)
  80cb10:	e0bff917 	ldw	r2,-28(fp)
  80cb14:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80cb18:	e0bff917 	ldw	r2,-28(fp)
  80cb1c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80cb20:	d0a70517 	ldw	r2,-25580(gp)
  80cb24:	1005003a 	cmpeq	r2,r2,zero
  80cb28:	1000031e 	bne	r2,zero,80cb38 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80cb2c:	d0e70517 	ldw	r3,-25580(gp)
  80cb30:	e0bff917 	ldw	r2,-28(fp)
  80cb34:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80cb38:	e0bff917 	ldw	r2,-28(fp)
  80cb3c:	d0a70515 	stw	r2,-25580(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80cb40:	e0bff917 	ldw	r2,-28(fp)
  80cb44:	10c00d83 	ldbu	r3,54(r2)
  80cb48:	d0a70e03 	ldbu	r2,-25544(gp)
  80cb4c:	1884b03a 	or	r2,r3,r2
  80cb50:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80cb54:	e0bff917 	ldw	r2,-28(fp)
  80cb58:	10800d03 	ldbu	r2,52(r2)
  80cb5c:	11003fcc 	andi	r4,r2,255
  80cb60:	e0bff917 	ldw	r2,-28(fp)
  80cb64:	10800d03 	ldbu	r2,52(r2)
  80cb68:	10c03fcc 	andi	r3,r2,255
  80cb6c:	d0a70e44 	addi	r2,gp,-25543
  80cb70:	1885883a 	add	r2,r3,r2
  80cb74:	10c00003 	ldbu	r3,0(r2)
  80cb78:	e0bff917 	ldw	r2,-28(fp)
  80cb7c:	10800d43 	ldbu	r2,53(r2)
  80cb80:	1884b03a 	or	r2,r3,r2
  80cb84:	1007883a 	mov	r3,r2
  80cb88:	d0a70e44 	addi	r2,gp,-25543
  80cb8c:	2085883a 	add	r2,r4,r2
  80cb90:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80cb94:	d0a70a43 	ldbu	r2,-25559(gp)
  80cb98:	10800044 	addi	r2,r2,1
  80cb9c:	d0a70a45 	stb	r2,-25559(gp)
  80cba0:	e0bff817 	ldw	r2,-32(fp)
  80cba4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cba8:	e0bff417 	ldw	r2,-48(fp)
  80cbac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80cbb0:	e03fff15 	stw	zero,-4(fp)
  80cbb4:	00000606 	br	80cbd0 <OS_TCBInit+0x2c8>
  80cbb8:	e0bff817 	ldw	r2,-32(fp)
  80cbbc:	e0bff315 	stw	r2,-52(fp)
  80cbc0:	e0bff317 	ldw	r2,-52(fp)
  80cbc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80cbc8:	00801084 	movi	r2,66
  80cbcc:	e0bfff15 	stw	r2,-4(fp)
  80cbd0:	e0bfff17 	ldw	r2,-4(fp)
}
  80cbd4:	e037883a 	mov	sp,fp
  80cbd8:	dfc00117 	ldw	ra,4(sp)
  80cbdc:	df000017 	ldw	fp,0(sp)
  80cbe0:	dec00204 	addi	sp,sp,8
  80cbe4:	f800283a 	ret

0080cbe8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80cbe8:	defffe04 	addi	sp,sp,-8
  80cbec:	df000115 	stw	fp,4(sp)
  80cbf0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80cbf4:	d0a00f04 	addi	r2,gp,-32708
  80cbf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80cbfc:	d0a01004 	addi	r2,gp,-32704
  80cc00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80cc04:	d0a01184 	addi	r2,gp,-32698
  80cc08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80cc0c:	d0a01204 	addi	r2,gp,-32696
  80cc10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80cc14:	d0a01104 	addi	r2,gp,-32700
  80cc18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80cc1c:	d0a01284 	addi	r2,gp,-32694
  80cc20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80cc24:	d0a01304 	addi	r2,gp,-32692
  80cc28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80cc2c:	d0a01384 	addi	r2,gp,-32690
  80cc30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80cc34:	d0a01404 	addi	r2,gp,-32688
  80cc38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80cc3c:	d0a01484 	addi	r2,gp,-32686
  80cc40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80cc44:	d0a01504 	addi	r2,gp,-32684
  80cc48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80cc4c:	d0a01584 	addi	r2,gp,-32682
  80cc50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80cc54:	d0a01604 	addi	r2,gp,-32680
  80cc58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80cc5c:	d0a01684 	addi	r2,gp,-32678
  80cc60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80cc64:	d0a01704 	addi	r2,gp,-32676
  80cc68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80cc6c:	d0a01784 	addi	r2,gp,-32674
  80cc70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80cc74:	d0a01804 	addi	r2,gp,-32672
  80cc78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80cc7c:	d0a01884 	addi	r2,gp,-32670
  80cc80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80cc84:	d0a01904 	addi	r2,gp,-32668
  80cc88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80cc8c:	d0a01984 	addi	r2,gp,-32666
  80cc90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80cc94:	d0a01a04 	addi	r2,gp,-32664
  80cc98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80cc9c:	d0a01a84 	addi	r2,gp,-32662
  80cca0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80cca4:	d0a01b04 	addi	r2,gp,-32660
  80cca8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80ccac:	d0a01b84 	addi	r2,gp,-32658
  80ccb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80ccb4:	d0a01c04 	addi	r2,gp,-32656
  80ccb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80ccbc:	d0a01c84 	addi	r2,gp,-32654
  80ccc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80ccc4:	d0a01d04 	addi	r2,gp,-32652
  80ccc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80cccc:	d0a01d84 	addi	r2,gp,-32650
  80ccd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80ccd4:	d0a01e04 	addi	r2,gp,-32648
  80ccd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80ccdc:	d0a01e84 	addi	r2,gp,-32646
  80cce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80cce4:	d0a01f04 	addi	r2,gp,-32644
  80cce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80ccec:	d0a01f84 	addi	r2,gp,-32642
  80ccf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80ccf4:	d0a02004 	addi	r2,gp,-32640
  80ccf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80ccfc:	d0a02084 	addi	r2,gp,-32638
  80cd00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80cd04:	d0a02104 	addi	r2,gp,-32636
  80cd08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80cd0c:	d0a02184 	addi	r2,gp,-32634
  80cd10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80cd14:	d0a02204 	addi	r2,gp,-32632
  80cd18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80cd1c:	d0a02284 	addi	r2,gp,-32630
  80cd20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80cd24:	d0a02304 	addi	r2,gp,-32628
  80cd28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80cd2c:	d0a02384 	addi	r2,gp,-32626
  80cd30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80cd34:	d0a02404 	addi	r2,gp,-32624
  80cd38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80cd3c:	d0a02484 	addi	r2,gp,-32622
  80cd40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80cd44:	d0a02504 	addi	r2,gp,-32620
  80cd48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80cd4c:	d0a02584 	addi	r2,gp,-32618
  80cd50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80cd54:	d0a02604 	addi	r2,gp,-32616
  80cd58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80cd5c:	d0a02b04 	addi	r2,gp,-32596
  80cd60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80cd64:	e037883a 	mov	sp,fp
  80cd68:	df000017 	ldw	fp,0(sp)
  80cd6c:	dec00104 	addi	sp,sp,4
  80cd70:	f800283a 	ret

0080cd74 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80cd74:	defff104 	addi	sp,sp,-60
  80cd78:	df000e15 	stw	fp,56(sp)
  80cd7c:	df000e04 	addi	fp,sp,56
  80cd80:	e13ffa15 	stw	r4,-24(fp)
  80cd84:	e1fffd15 	stw	r7,-12(fp)
  80cd88:	e17ffb0d 	sth	r5,-20(fp)
  80cd8c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80cd90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80cd94:	e0bffd17 	ldw	r2,-12(fp)
  80cd98:	1004c03a 	cmpne	r2,r2,zero
  80cd9c:	1000021e 	bne	r2,zero,80cda8 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80cda0:	e03fff15 	stw	zero,-4(fp)
  80cda4:	0000bb06 	br	80d094 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80cda8:	e0bffa17 	ldw	r2,-24(fp)
  80cdac:	1004c03a 	cmpne	r2,r2,zero
  80cdb0:	1000051e 	bne	r2,zero,80cdc8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80cdb4:	e0fffd17 	ldw	r3,-12(fp)
  80cdb8:	00801b84 	movi	r2,110
  80cdbc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80cdc0:	e03fff15 	stw	zero,-4(fp)
  80cdc4:	0000b306 	br	80d094 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80cdc8:	e0bffa17 	ldw	r2,-24(fp)
  80cdcc:	10800003 	ldbu	r2,0(r2)
  80cdd0:	10803fcc 	andi	r2,r2,255
  80cdd4:	10800160 	cmpeqi	r2,r2,5
  80cdd8:	1000051e 	bne	r2,zero,80cdf0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80cddc:	e0fffd17 	ldw	r3,-12(fp)
  80cde0:	00800044 	movi	r2,1
  80cde4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80cde8:	e03fff15 	stw	zero,-4(fp)
  80cdec:	0000a906 	br	80d094 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80cdf0:	e0fffc03 	ldbu	r3,-16(fp)
  80cdf4:	00bfe004 	movi	r2,-128
  80cdf8:	1884703a 	and	r2,r3,r2
  80cdfc:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80ce00:	e0bff943 	ldbu	r2,-27(fp)
  80ce04:	1005003a 	cmpeq	r2,r2,zero
  80ce08:	1000061e 	bne	r2,zero,80ce24 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80ce0c:	e0bffc03 	ldbu	r2,-16(fp)
  80ce10:	10801fcc 	andi	r2,r2,127
  80ce14:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80ce18:	00800044 	movi	r2,1
  80ce1c:	e0bff905 	stb	r2,-28(fp)
  80ce20:	00000106 	br	80ce28 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80ce24:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80ce28:	e0bffd17 	ldw	r2,-12(fp)
  80ce2c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ce30:	0005303a 	rdctl	r2,status
  80ce34:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ce38:	e0fff717 	ldw	r3,-36(fp)
  80ce3c:	00bfff84 	movi	r2,-2
  80ce40:	1884703a 	and	r2,r3,r2
  80ce44:	1001703a 	wrctl	status,r2
  
  return context;
  80ce48:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80ce4c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80ce50:	e0bffc03 	ldbu	r2,-16(fp)
  80ce54:	e0bffe15 	stw	r2,-8(fp)
  80ce58:	e0fffe17 	ldw	r3,-8(fp)
  80ce5c:	18800060 	cmpeqi	r2,r3,1
  80ce60:	1000651e 	bne	r2,zero,80cff8 <OSFlagAccept+0x284>
  80ce64:	e0fffe17 	ldw	r3,-8(fp)
  80ce68:	18800088 	cmpgei	r2,r3,2
  80ce6c:	1000041e 	bne	r2,zero,80ce80 <OSFlagAccept+0x10c>
  80ce70:	e0fffe17 	ldw	r3,-8(fp)
  80ce74:	1805003a 	cmpeq	r2,r3,zero
  80ce78:	1000421e 	bne	r2,zero,80cf84 <OSFlagAccept+0x210>
  80ce7c:	00007b06 	br	80d06c <OSFlagAccept+0x2f8>
  80ce80:	e0fffe17 	ldw	r3,-8(fp)
  80ce84:	188000a0 	cmpeqi	r2,r3,2
  80ce88:	1000041e 	bne	r2,zero,80ce9c <OSFlagAccept+0x128>
  80ce8c:	e0fffe17 	ldw	r3,-8(fp)
  80ce90:	188000e0 	cmpeqi	r2,r3,3
  80ce94:	10001e1e 	bne	r2,zero,80cf10 <OSFlagAccept+0x19c>
  80ce98:	00007406 	br	80d06c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80ce9c:	e0bffa17 	ldw	r2,-24(fp)
  80cea0:	10c0020b 	ldhu	r3,8(r2)
  80cea4:	e0bffb0b 	ldhu	r2,-20(fp)
  80cea8:	1884703a 	and	r2,r3,r2
  80ceac:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80ceb0:	e0fff98b 	ldhu	r3,-26(fp)
  80ceb4:	e0bffb0b 	ldhu	r2,-20(fp)
  80ceb8:	18800d1e 	bne	r3,r2,80cef0 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80cebc:	e0bff903 	ldbu	r2,-28(fp)
  80cec0:	10800058 	cmpnei	r2,r2,1
  80cec4:	10000d1e 	bne	r2,zero,80cefc <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80cec8:	e0bffa17 	ldw	r2,-24(fp)
  80cecc:	1080020b 	ldhu	r2,8(r2)
  80ced0:	1007883a 	mov	r3,r2
  80ced4:	e0bff98b 	ldhu	r2,-26(fp)
  80ced8:	0084303a 	nor	r2,zero,r2
  80cedc:	1884703a 	and	r2,r3,r2
  80cee0:	1007883a 	mov	r3,r2
  80cee4:	e0bffa17 	ldw	r2,-24(fp)
  80cee8:	10c0020d 	sth	r3,8(r2)
  80ceec:	00000306 	br	80cefc <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80cef0:	e0fffd17 	ldw	r3,-12(fp)
  80cef4:	00801c04 	movi	r2,112
  80cef8:	18800005 	stb	r2,0(r3)
  80cefc:	e0bff817 	ldw	r2,-32(fp)
  80cf00:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf04:	e0bff617 	ldw	r2,-40(fp)
  80cf08:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80cf0c:	00005f06 	br	80d08c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80cf10:	e0bffa17 	ldw	r2,-24(fp)
  80cf14:	10c0020b 	ldhu	r3,8(r2)
  80cf18:	e0bffb0b 	ldhu	r2,-20(fp)
  80cf1c:	1884703a 	and	r2,r3,r2
  80cf20:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80cf24:	e0bff98b 	ldhu	r2,-26(fp)
  80cf28:	1005003a 	cmpeq	r2,r2,zero
  80cf2c:	10000d1e 	bne	r2,zero,80cf64 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80cf30:	e0bff903 	ldbu	r2,-28(fp)
  80cf34:	10800058 	cmpnei	r2,r2,1
  80cf38:	10000d1e 	bne	r2,zero,80cf70 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80cf3c:	e0bffa17 	ldw	r2,-24(fp)
  80cf40:	1080020b 	ldhu	r2,8(r2)
  80cf44:	1007883a 	mov	r3,r2
  80cf48:	e0bff98b 	ldhu	r2,-26(fp)
  80cf4c:	0084303a 	nor	r2,zero,r2
  80cf50:	1884703a 	and	r2,r3,r2
  80cf54:	1007883a 	mov	r3,r2
  80cf58:	e0bffa17 	ldw	r2,-24(fp)
  80cf5c:	10c0020d 	sth	r3,8(r2)
  80cf60:	00000306 	br	80cf70 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80cf64:	e0fffd17 	ldw	r3,-12(fp)
  80cf68:	00801c04 	movi	r2,112
  80cf6c:	18800005 	stb	r2,0(r3)
  80cf70:	e0bff817 	ldw	r2,-32(fp)
  80cf74:	e0bff515 	stw	r2,-44(fp)
  80cf78:	e0bff517 	ldw	r2,-44(fp)
  80cf7c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80cf80:	00004206 	br	80d08c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80cf84:	e0bffa17 	ldw	r2,-24(fp)
  80cf88:	1080020b 	ldhu	r2,8(r2)
  80cf8c:	0084303a 	nor	r2,zero,r2
  80cf90:	1007883a 	mov	r3,r2
  80cf94:	e0bffb0b 	ldhu	r2,-20(fp)
  80cf98:	1884703a 	and	r2,r3,r2
  80cf9c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80cfa0:	e0fff98b 	ldhu	r3,-26(fp)
  80cfa4:	e0bffb0b 	ldhu	r2,-20(fp)
  80cfa8:	18800b1e 	bne	r3,r2,80cfd8 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80cfac:	e0bff903 	ldbu	r2,-28(fp)
  80cfb0:	10800058 	cmpnei	r2,r2,1
  80cfb4:	10000b1e 	bne	r2,zero,80cfe4 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80cfb8:	e0bffa17 	ldw	r2,-24(fp)
  80cfbc:	10c0020b 	ldhu	r3,8(r2)
  80cfc0:	e0bff98b 	ldhu	r2,-26(fp)
  80cfc4:	1884b03a 	or	r2,r3,r2
  80cfc8:	1007883a 	mov	r3,r2
  80cfcc:	e0bffa17 	ldw	r2,-24(fp)
  80cfd0:	10c0020d 	sth	r3,8(r2)
  80cfd4:	00000306 	br	80cfe4 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80cfd8:	e0fffd17 	ldw	r3,-12(fp)
  80cfdc:	00801c04 	movi	r2,112
  80cfe0:	18800005 	stb	r2,0(r3)
  80cfe4:	e0bff817 	ldw	r2,-32(fp)
  80cfe8:	e0bff415 	stw	r2,-48(fp)
  80cfec:	e0bff417 	ldw	r2,-48(fp)
  80cff0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80cff4:	00002506 	br	80d08c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80cff8:	e0bffa17 	ldw	r2,-24(fp)
  80cffc:	1080020b 	ldhu	r2,8(r2)
  80d000:	0084303a 	nor	r2,zero,r2
  80d004:	1007883a 	mov	r3,r2
  80d008:	e0bffb0b 	ldhu	r2,-20(fp)
  80d00c:	1884703a 	and	r2,r3,r2
  80d010:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80d014:	e0bff98b 	ldhu	r2,-26(fp)
  80d018:	1005003a 	cmpeq	r2,r2,zero
  80d01c:	10000b1e 	bne	r2,zero,80d04c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d020:	e0bff903 	ldbu	r2,-28(fp)
  80d024:	10800058 	cmpnei	r2,r2,1
  80d028:	10000b1e 	bne	r2,zero,80d058 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80d02c:	e0bffa17 	ldw	r2,-24(fp)
  80d030:	10c0020b 	ldhu	r3,8(r2)
  80d034:	e0bff98b 	ldhu	r2,-26(fp)
  80d038:	1884b03a 	or	r2,r3,r2
  80d03c:	1007883a 	mov	r3,r2
  80d040:	e0bffa17 	ldw	r2,-24(fp)
  80d044:	10c0020d 	sth	r3,8(r2)
  80d048:	00000306 	br	80d058 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80d04c:	e0fffd17 	ldw	r3,-12(fp)
  80d050:	00801c04 	movi	r2,112
  80d054:	18800005 	stb	r2,0(r3)
  80d058:	e0bff817 	ldw	r2,-32(fp)
  80d05c:	e0bff315 	stw	r2,-52(fp)
  80d060:	e0bff317 	ldw	r2,-52(fp)
  80d064:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80d068:	00000806 	br	80d08c <OSFlagAccept+0x318>
  80d06c:	e0bff817 	ldw	r2,-32(fp)
  80d070:	e0bff215 	stw	r2,-56(fp)
  80d074:	e0bff217 	ldw	r2,-56(fp)
  80d078:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80d07c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80d080:	e0fffd17 	ldw	r3,-12(fp)
  80d084:	00801bc4 	movi	r2,111
  80d088:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80d08c:	e0bff98b 	ldhu	r2,-26(fp)
  80d090:	e0bfff15 	stw	r2,-4(fp)
  80d094:	e0bfff17 	ldw	r2,-4(fp)
}
  80d098:	e037883a 	mov	sp,fp
  80d09c:	df000017 	ldw	fp,0(sp)
  80d0a0:	dec00104 	addi	sp,sp,4
  80d0a4:	f800283a 	ret

0080d0a8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80d0a8:	defff704 	addi	sp,sp,-36
  80d0ac:	df000815 	stw	fp,32(sp)
  80d0b0:	df000804 	addi	fp,sp,32
  80d0b4:	e17ffe15 	stw	r5,-8(fp)
  80d0b8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80d0bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80d0c0:	e0bffe17 	ldw	r2,-8(fp)
  80d0c4:	1004c03a 	cmpne	r2,r2,zero
  80d0c8:	1000021e 	bne	r2,zero,80d0d4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80d0cc:	e03fff15 	stw	zero,-4(fp)
  80d0d0:	00003f06 	br	80d1d0 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80d0d4:	008020b4 	movhi	r2,130
  80d0d8:	10a6b904 	addi	r2,r2,-25884
  80d0dc:	10800003 	ldbu	r2,0(r2)
  80d0e0:	10803fcc 	andi	r2,r2,255
  80d0e4:	1005003a 	cmpeq	r2,r2,zero
  80d0e8:	1000051e 	bne	r2,zero,80d100 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80d0ec:	e0fffe17 	ldw	r3,-8(fp)
  80d0f0:	00800404 	movi	r2,16
  80d0f4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80d0f8:	e03fff15 	stw	zero,-4(fp)
  80d0fc:	00003406 	br	80d1d0 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d100:	0005303a 	rdctl	r2,status
  80d104:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d108:	e0fffa17 	ldw	r3,-24(fp)
  80d10c:	00bfff84 	movi	r2,-2
  80d110:	1884703a 	and	r2,r3,r2
  80d114:	1001703a 	wrctl	status,r2
  
  return context;
  80d118:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d11c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80d120:	008020b4 	movhi	r2,130
  80d124:	10a6bc04 	addi	r2,r2,-25872
  80d128:	10800017 	ldw	r2,0(r2)
  80d12c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80d130:	e0bffc17 	ldw	r2,-16(fp)
  80d134:	1005003a 	cmpeq	r2,r2,zero
  80d138:	10001c1e 	bne	r2,zero,80d1ac <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80d13c:	008020b4 	movhi	r2,130
  80d140:	10a6bc04 	addi	r2,r2,-25872
  80d144:	10800017 	ldw	r2,0(r2)
  80d148:	10800117 	ldw	r2,4(r2)
  80d14c:	1007883a 	mov	r3,r2
  80d150:	008020b4 	movhi	r2,130
  80d154:	10a6bc04 	addi	r2,r2,-25872
  80d158:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80d15c:	e0fffc17 	ldw	r3,-16(fp)
  80d160:	00800144 	movi	r2,5
  80d164:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80d168:	e0fffc17 	ldw	r3,-16(fp)
  80d16c:	e0bffd0b 	ldhu	r2,-12(fp)
  80d170:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80d174:	e0bffc17 	ldw	r2,-16(fp)
  80d178:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80d17c:	e0fffc17 	ldw	r3,-16(fp)
  80d180:	00800fc4 	movi	r2,63
  80d184:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d188:	e0bffc17 	ldw	r2,-16(fp)
  80d18c:	100002c5 	stb	zero,11(r2)
  80d190:	e0bffb17 	ldw	r2,-20(fp)
  80d194:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d198:	e0bff917 	ldw	r2,-28(fp)
  80d19c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80d1a0:	e0bffe17 	ldw	r2,-8(fp)
  80d1a4:	10000005 	stb	zero,0(r2)
  80d1a8:	00000706 	br	80d1c8 <OSFlagCreate+0x120>
  80d1ac:	e0bffb17 	ldw	r2,-20(fp)
  80d1b0:	e0bff815 	stw	r2,-32(fp)
  80d1b4:	e0bff817 	ldw	r2,-32(fp)
  80d1b8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80d1bc:	e0fffe17 	ldw	r3,-8(fp)
  80d1c0:	00801c84 	movi	r2,114
  80d1c4:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80d1c8:	e0bffc17 	ldw	r2,-16(fp)
  80d1cc:	e0bfff15 	stw	r2,-4(fp)
  80d1d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d1d4:	e037883a 	mov	sp,fp
  80d1d8:	df000017 	ldw	fp,0(sp)
  80d1dc:	dec00104 	addi	sp,sp,4
  80d1e0:	f800283a 	ret

0080d1e4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80d1e4:	defff004 	addi	sp,sp,-64
  80d1e8:	dfc00f15 	stw	ra,60(sp)
  80d1ec:	df000e15 	stw	fp,56(sp)
  80d1f0:	df000e04 	addi	fp,sp,56
  80d1f4:	e13ffb15 	stw	r4,-20(fp)
  80d1f8:	e1bffd15 	stw	r6,-12(fp)
  80d1fc:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d200:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d204:	e0bffd17 	ldw	r2,-12(fp)
  80d208:	1004c03a 	cmpne	r2,r2,zero
  80d20c:	1000031e 	bne	r2,zero,80d21c <OSFlagDel+0x38>
        return (pgrp);
  80d210:	e0bffb17 	ldw	r2,-20(fp)
  80d214:	e0bfff15 	stw	r2,-4(fp)
  80d218:	00009606 	br	80d474 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80d21c:	e0bffb17 	ldw	r2,-20(fp)
  80d220:	1004c03a 	cmpne	r2,r2,zero
  80d224:	1000061e 	bne	r2,zero,80d240 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d228:	e0fffd17 	ldw	r3,-12(fp)
  80d22c:	00801b84 	movi	r2,110
  80d230:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d234:	e0fffb17 	ldw	r3,-20(fp)
  80d238:	e0ffff15 	stw	r3,-4(fp)
  80d23c:	00008d06 	br	80d474 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d240:	008020b4 	movhi	r2,130
  80d244:	10a6b904 	addi	r2,r2,-25884
  80d248:	10800003 	ldbu	r2,0(r2)
  80d24c:	10803fcc 	andi	r2,r2,255
  80d250:	1005003a 	cmpeq	r2,r2,zero
  80d254:	1000061e 	bne	r2,zero,80d270 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80d258:	e0fffd17 	ldw	r3,-12(fp)
  80d25c:	008003c4 	movi	r2,15
  80d260:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d264:	e0bffb17 	ldw	r2,-20(fp)
  80d268:	e0bfff15 	stw	r2,-4(fp)
  80d26c:	00008106 	br	80d474 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80d270:	e0bffb17 	ldw	r2,-20(fp)
  80d274:	10800003 	ldbu	r2,0(r2)
  80d278:	10803fcc 	andi	r2,r2,255
  80d27c:	10800160 	cmpeqi	r2,r2,5
  80d280:	1000061e 	bne	r2,zero,80d29c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80d284:	e0fffd17 	ldw	r3,-12(fp)
  80d288:	00800044 	movi	r2,1
  80d28c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d290:	e0fffb17 	ldw	r3,-20(fp)
  80d294:	e0ffff15 	stw	r3,-4(fp)
  80d298:	00007606 	br	80d474 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d29c:	0005303a 	rdctl	r2,status
  80d2a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d2a4:	e0fff617 	ldw	r3,-40(fp)
  80d2a8:	00bfff84 	movi	r2,-2
  80d2ac:	1884703a 	and	r2,r3,r2
  80d2b0:	1001703a 	wrctl	status,r2
  
  return context;
  80d2b4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80d2b8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80d2bc:	e0bffb17 	ldw	r2,-20(fp)
  80d2c0:	10800117 	ldw	r2,4(r2)
  80d2c4:	1005003a 	cmpeq	r2,r2,zero
  80d2c8:	1000031e 	bne	r2,zero,80d2d8 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80d2cc:	00800044 	movi	r2,1
  80d2d0:	e0bffa05 	stb	r2,-24(fp)
  80d2d4:	00000106 	br	80d2dc <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80d2d8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80d2dc:	e0bffc03 	ldbu	r2,-16(fp)
  80d2e0:	e0bffe15 	stw	r2,-8(fp)
  80d2e4:	e0fffe17 	ldw	r3,-8(fp)
  80d2e8:	1805003a 	cmpeq	r2,r3,zero
  80d2ec:	1000041e 	bne	r2,zero,80d300 <OSFlagDel+0x11c>
  80d2f0:	e0fffe17 	ldw	r3,-8(fp)
  80d2f4:	18800060 	cmpeqi	r2,r3,1
  80d2f8:	1000281e 	bne	r2,zero,80d39c <OSFlagDel+0x1b8>
  80d2fc:	00005206 	br	80d448 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80d300:	e0bffa03 	ldbu	r2,-24(fp)
  80d304:	1004c03a 	cmpne	r2,r2,zero
  80d308:	10001a1e 	bne	r2,zero,80d374 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80d30c:	e0fffb17 	ldw	r3,-20(fp)
  80d310:	00800fc4 	movi	r2,63
  80d314:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d318:	e0bffb17 	ldw	r2,-20(fp)
  80d31c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80d320:	e0bffb17 	ldw	r2,-20(fp)
  80d324:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80d328:	008020b4 	movhi	r2,130
  80d32c:	10a6bc04 	addi	r2,r2,-25872
  80d330:	10c00017 	ldw	r3,0(r2)
  80d334:	e0bffb17 	ldw	r2,-20(fp)
  80d338:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80d33c:	e0bffb17 	ldw	r2,-20(fp)
  80d340:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80d344:	00c020b4 	movhi	r3,130
  80d348:	18e6bc04 	addi	r3,r3,-25872
  80d34c:	e0bffb17 	ldw	r2,-20(fp)
  80d350:	18800015 	stw	r2,0(r3)
  80d354:	e0bff717 	ldw	r2,-36(fp)
  80d358:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d35c:	e0bff517 	ldw	r2,-44(fp)
  80d360:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80d364:	e0bffd17 	ldw	r2,-12(fp)
  80d368:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80d36c:	e03ff815 	stw	zero,-32(fp)
  80d370:	00003e06 	br	80d46c <OSFlagDel+0x288>
  80d374:	e0bff717 	ldw	r2,-36(fp)
  80d378:	e0bff415 	stw	r2,-48(fp)
  80d37c:	e0bff417 	ldw	r2,-48(fp)
  80d380:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80d384:	e0fffd17 	ldw	r3,-12(fp)
  80d388:	00801244 	movi	r2,73
  80d38c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80d390:	e0bffb17 	ldw	r2,-20(fp)
  80d394:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80d398:	00003406 	br	80d46c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80d39c:	e0bffb17 	ldw	r2,-20(fp)
  80d3a0:	10800117 	ldw	r2,4(r2)
  80d3a4:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80d3a8:	00000606 	br	80d3c4 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80d3ac:	e13ff917 	ldw	r4,-28(fp)
  80d3b0:	000b883a 	mov	r5,zero
  80d3b4:	080e4f40 	call	80e4f4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80d3b8:	e0bff917 	ldw	r2,-28(fp)
  80d3bc:	10800017 	ldw	r2,0(r2)
  80d3c0:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80d3c4:	e0bff917 	ldw	r2,-28(fp)
  80d3c8:	1004c03a 	cmpne	r2,r2,zero
  80d3cc:	103ff71e 	bne	r2,zero,80d3ac <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80d3d0:	e0fffb17 	ldw	r3,-20(fp)
  80d3d4:	00800fc4 	movi	r2,63
  80d3d8:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d3dc:	e0bffb17 	ldw	r2,-20(fp)
  80d3e0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80d3e4:	e0bffb17 	ldw	r2,-20(fp)
  80d3e8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80d3ec:	008020b4 	movhi	r2,130
  80d3f0:	10a6bc04 	addi	r2,r2,-25872
  80d3f4:	10c00017 	ldw	r3,0(r2)
  80d3f8:	e0bffb17 	ldw	r2,-20(fp)
  80d3fc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80d400:	e0bffb17 	ldw	r2,-20(fp)
  80d404:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80d408:	00c020b4 	movhi	r3,130
  80d40c:	18e6bc04 	addi	r3,r3,-25872
  80d410:	e0bffb17 	ldw	r2,-20(fp)
  80d414:	18800015 	stw	r2,0(r3)
  80d418:	e0bff717 	ldw	r2,-36(fp)
  80d41c:	e0bff315 	stw	r2,-52(fp)
  80d420:	e0bff317 	ldw	r2,-52(fp)
  80d424:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80d428:	e0bffa03 	ldbu	r2,-24(fp)
  80d42c:	10800058 	cmpnei	r2,r2,1
  80d430:	1000011e 	bne	r2,zero,80d438 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80d434:	080c5000 	call	80c500 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80d438:	e0bffd17 	ldw	r2,-12(fp)
  80d43c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80d440:	e03ff815 	stw	zero,-32(fp)
             break;
  80d444:	00000906 	br	80d46c <OSFlagDel+0x288>
  80d448:	e0bff717 	ldw	r2,-36(fp)
  80d44c:	e0bff215 	stw	r2,-56(fp)
  80d450:	e0bff217 	ldw	r2,-56(fp)
  80d454:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80d458:	e0fffd17 	ldw	r3,-12(fp)
  80d45c:	008001c4 	movi	r2,7
  80d460:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80d464:	e0bffb17 	ldw	r2,-20(fp)
  80d468:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80d46c:	e0bff817 	ldw	r2,-32(fp)
  80d470:	e0bfff15 	stw	r2,-4(fp)
  80d474:	e0bfff17 	ldw	r2,-4(fp)
}
  80d478:	e037883a 	mov	sp,fp
  80d47c:	dfc00117 	ldw	ra,4(sp)
  80d480:	df000017 	ldw	fp,0(sp)
  80d484:	dec00204 	addi	sp,sp,8
  80d488:	f800283a 	ret

0080d48c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80d48c:	defff504 	addi	sp,sp,-44
  80d490:	dfc00a15 	stw	ra,40(sp)
  80d494:	df000915 	stw	fp,36(sp)
  80d498:	df000904 	addi	fp,sp,36
  80d49c:	e13ffc15 	stw	r4,-16(fp)
  80d4a0:	e17ffd15 	stw	r5,-12(fp)
  80d4a4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d4a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d4ac:	e0bffe17 	ldw	r2,-8(fp)
  80d4b0:	1004c03a 	cmpne	r2,r2,zero
  80d4b4:	1000021e 	bne	r2,zero,80d4c0 <OSFlagNameGet+0x34>
        return (0);
  80d4b8:	e03fff15 	stw	zero,-4(fp)
  80d4bc:	00003e06 	br	80d5b8 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80d4c0:	e0bffc17 	ldw	r2,-16(fp)
  80d4c4:	1004c03a 	cmpne	r2,r2,zero
  80d4c8:	1000051e 	bne	r2,zero,80d4e0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d4cc:	e0fffe17 	ldw	r3,-8(fp)
  80d4d0:	00801b84 	movi	r2,110
  80d4d4:	18800005 	stb	r2,0(r3)
        return (0);
  80d4d8:	e03fff15 	stw	zero,-4(fp)
  80d4dc:	00003606 	br	80d5b8 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d4e0:	e0bffd17 	ldw	r2,-12(fp)
  80d4e4:	1004c03a 	cmpne	r2,r2,zero
  80d4e8:	1000051e 	bne	r2,zero,80d500 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80d4ec:	e0fffe17 	ldw	r3,-8(fp)
  80d4f0:	00800304 	movi	r2,12
  80d4f4:	18800005 	stb	r2,0(r3)
        return (0);
  80d4f8:	e03fff15 	stw	zero,-4(fp)
  80d4fc:	00002e06 	br	80d5b8 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d500:	008020b4 	movhi	r2,130
  80d504:	10a6b904 	addi	r2,r2,-25884
  80d508:	10800003 	ldbu	r2,0(r2)
  80d50c:	10803fcc 	andi	r2,r2,255
  80d510:	1005003a 	cmpeq	r2,r2,zero
  80d514:	1000051e 	bne	r2,zero,80d52c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80d518:	e0fffe17 	ldw	r3,-8(fp)
  80d51c:	00800444 	movi	r2,17
  80d520:	18800005 	stb	r2,0(r3)
        return (0);
  80d524:	e03fff15 	stw	zero,-4(fp)
  80d528:	00002306 	br	80d5b8 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d52c:	0005303a 	rdctl	r2,status
  80d530:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d534:	e0fff917 	ldw	r3,-28(fp)
  80d538:	00bfff84 	movi	r2,-2
  80d53c:	1884703a 	and	r2,r3,r2
  80d540:	1001703a 	wrctl	status,r2
  
  return context;
  80d544:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80d548:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80d54c:	e0bffc17 	ldw	r2,-16(fp)
  80d550:	10800003 	ldbu	r2,0(r2)
  80d554:	10803fcc 	andi	r2,r2,255
  80d558:	10800160 	cmpeqi	r2,r2,5
  80d55c:	1000091e 	bne	r2,zero,80d584 <OSFlagNameGet+0xf8>
  80d560:	e0bffa17 	ldw	r2,-24(fp)
  80d564:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d568:	e0bff817 	ldw	r2,-32(fp)
  80d56c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80d570:	e0fffe17 	ldw	r3,-8(fp)
  80d574:	00800044 	movi	r2,1
  80d578:	18800005 	stb	r2,0(r3)
        return (0);
  80d57c:	e03fff15 	stw	zero,-4(fp)
  80d580:	00000d06 	br	80d5b8 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80d584:	e0bffc17 	ldw	r2,-16(fp)
  80d588:	11400284 	addi	r5,r2,10
  80d58c:	e13ffd17 	ldw	r4,-12(fp)
  80d590:	080c6440 	call	80c644 <OS_StrCopy>
  80d594:	e0bffb05 	stb	r2,-20(fp)
  80d598:	e0bffa17 	ldw	r2,-24(fp)
  80d59c:	e0bff715 	stw	r2,-36(fp)
  80d5a0:	e0bff717 	ldw	r2,-36(fp)
  80d5a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d5a8:	e0bffe17 	ldw	r2,-8(fp)
  80d5ac:	10000005 	stb	zero,0(r2)
    return (len);
  80d5b0:	e0bffb03 	ldbu	r2,-20(fp)
  80d5b4:	e0bfff15 	stw	r2,-4(fp)
  80d5b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80d5bc:	e037883a 	mov	sp,fp
  80d5c0:	dfc00117 	ldw	ra,4(sp)
  80d5c4:	df000017 	ldw	fp,0(sp)
  80d5c8:	dec00204 	addi	sp,sp,8
  80d5cc:	f800283a 	ret

0080d5d0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80d5d0:	defff504 	addi	sp,sp,-44
  80d5d4:	dfc00a15 	stw	ra,40(sp)
  80d5d8:	df000915 	stw	fp,36(sp)
  80d5dc:	df000904 	addi	fp,sp,36
  80d5e0:	e13ffd15 	stw	r4,-12(fp)
  80d5e4:	e17ffe15 	stw	r5,-8(fp)
  80d5e8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d5ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d5f0:	e0bfff17 	ldw	r2,-4(fp)
  80d5f4:	1005003a 	cmpeq	r2,r2,zero
  80d5f8:	1000451e 	bne	r2,zero,80d710 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80d5fc:	e0bffd17 	ldw	r2,-12(fp)
  80d600:	1004c03a 	cmpne	r2,r2,zero
  80d604:	1000041e 	bne	r2,zero,80d618 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d608:	e0ffff17 	ldw	r3,-4(fp)
  80d60c:	00801b84 	movi	r2,110
  80d610:	18800005 	stb	r2,0(r3)
        return;
  80d614:	00003e06 	br	80d710 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d618:	e0bffe17 	ldw	r2,-8(fp)
  80d61c:	1004c03a 	cmpne	r2,r2,zero
  80d620:	1000041e 	bne	r2,zero,80d634 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80d624:	e0ffff17 	ldw	r3,-4(fp)
  80d628:	00800304 	movi	r2,12
  80d62c:	18800005 	stb	r2,0(r3)
        return;
  80d630:	00003706 	br	80d710 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d634:	008020b4 	movhi	r2,130
  80d638:	10a6b904 	addi	r2,r2,-25884
  80d63c:	10800003 	ldbu	r2,0(r2)
  80d640:	10803fcc 	andi	r2,r2,255
  80d644:	1005003a 	cmpeq	r2,r2,zero
  80d648:	1000041e 	bne	r2,zero,80d65c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80d64c:	e0ffff17 	ldw	r3,-4(fp)
  80d650:	00800484 	movi	r2,18
  80d654:	18800005 	stb	r2,0(r3)
        return;
  80d658:	00002d06 	br	80d710 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d65c:	0005303a 	rdctl	r2,status
  80d660:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d664:	e0fffa17 	ldw	r3,-24(fp)
  80d668:	00bfff84 	movi	r2,-2
  80d66c:	1884703a 	and	r2,r3,r2
  80d670:	1001703a 	wrctl	status,r2
  
  return context;
  80d674:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d678:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80d67c:	e0bffd17 	ldw	r2,-12(fp)
  80d680:	10800003 	ldbu	r2,0(r2)
  80d684:	10803fcc 	andi	r2,r2,255
  80d688:	10800160 	cmpeqi	r2,r2,5
  80d68c:	1000081e 	bne	r2,zero,80d6b0 <OSFlagNameSet+0xe0>
  80d690:	e0bffb17 	ldw	r2,-20(fp)
  80d694:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d698:	e0bff917 	ldw	r2,-28(fp)
  80d69c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80d6a0:	e0ffff17 	ldw	r3,-4(fp)
  80d6a4:	00800044 	movi	r2,1
  80d6a8:	18800005 	stb	r2,0(r3)
        return;
  80d6ac:	00001806 	br	80d710 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80d6b0:	e13ffe17 	ldw	r4,-8(fp)
  80d6b4:	080c6c40 	call	80c6c4 <OS_StrLen>
  80d6b8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80d6bc:	e0bffc03 	ldbu	r2,-16(fp)
  80d6c0:	10800830 	cmpltui	r2,r2,32
  80d6c4:	1000081e 	bne	r2,zero,80d6e8 <OSFlagNameSet+0x118>
  80d6c8:	e0bffb17 	ldw	r2,-20(fp)
  80d6cc:	e0bff815 	stw	r2,-32(fp)
  80d6d0:	e0bff817 	ldw	r2,-32(fp)
  80d6d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80d6d8:	e0ffff17 	ldw	r3,-4(fp)
  80d6dc:	00801cc4 	movi	r2,115
  80d6e0:	18800005 	stb	r2,0(r3)
        return;
  80d6e4:	00000a06 	br	80d710 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80d6e8:	e0bffd17 	ldw	r2,-12(fp)
  80d6ec:	11000284 	addi	r4,r2,10
  80d6f0:	e17ffe17 	ldw	r5,-8(fp)
  80d6f4:	080c6440 	call	80c644 <OS_StrCopy>
  80d6f8:	e0bffb17 	ldw	r2,-20(fp)
  80d6fc:	e0bff715 	stw	r2,-36(fp)
  80d700:	e0bff717 	ldw	r2,-36(fp)
  80d704:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d708:	e0bfff17 	ldw	r2,-4(fp)
  80d70c:	10000005 	stb	zero,0(r2)
    return;
}
  80d710:	e037883a 	mov	sp,fp
  80d714:	dfc00117 	ldw	ra,4(sp)
  80d718:	df000017 	ldw	fp,0(sp)
  80d71c:	dec00204 	addi	sp,sp,8
  80d720:	f800283a 	ret

0080d724 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80d724:	deffe004 	addi	sp,sp,-128
  80d728:	dfc01f15 	stw	ra,124(sp)
  80d72c:	df001e15 	stw	fp,120(sp)
  80d730:	df001e04 	addi	fp,sp,120
  80d734:	e13ff915 	stw	r4,-28(fp)
  80d738:	e17ffa0d 	sth	r5,-24(fp)
  80d73c:	e1bffb05 	stb	r6,-20(fp)
  80d740:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d744:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d748:	e0800217 	ldw	r2,8(fp)
  80d74c:	1004c03a 	cmpne	r2,r2,zero
  80d750:	1000021e 	bne	r2,zero,80d75c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80d754:	e03fff15 	stw	zero,-4(fp)
  80d758:	00017d06 	br	80dd50 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80d75c:	e0bff917 	ldw	r2,-28(fp)
  80d760:	1004c03a 	cmpne	r2,r2,zero
  80d764:	1000051e 	bne	r2,zero,80d77c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d768:	e0c00217 	ldw	r3,8(fp)
  80d76c:	00801b84 	movi	r2,110
  80d770:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d774:	e03fff15 	stw	zero,-4(fp)
  80d778:	00017506 	br	80dd50 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d77c:	008020b4 	movhi	r2,130
  80d780:	10a6b904 	addi	r2,r2,-25884
  80d784:	10800003 	ldbu	r2,0(r2)
  80d788:	10803fcc 	andi	r2,r2,255
  80d78c:	1005003a 	cmpeq	r2,r2,zero
  80d790:	1000051e 	bne	r2,zero,80d7a8 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80d794:	e0c00217 	ldw	r3,8(fp)
  80d798:	00800084 	movi	r2,2
  80d79c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d7a0:	e03fff15 	stw	zero,-4(fp)
  80d7a4:	00016a06 	br	80dd50 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80d7a8:	008020b4 	movhi	r2,130
  80d7ac:	10a6ab04 	addi	r2,r2,-25940
  80d7b0:	10800003 	ldbu	r2,0(r2)
  80d7b4:	10803fcc 	andi	r2,r2,255
  80d7b8:	1005003a 	cmpeq	r2,r2,zero
  80d7bc:	1000051e 	bne	r2,zero,80d7d4 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80d7c0:	e0c00217 	ldw	r3,8(fp)
  80d7c4:	00800344 	movi	r2,13
  80d7c8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d7cc:	e03fff15 	stw	zero,-4(fp)
  80d7d0:	00015f06 	br	80dd50 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80d7d4:	e0bff917 	ldw	r2,-28(fp)
  80d7d8:	10800003 	ldbu	r2,0(r2)
  80d7dc:	10803fcc 	andi	r2,r2,255
  80d7e0:	10800160 	cmpeqi	r2,r2,5
  80d7e4:	1000051e 	bne	r2,zero,80d7fc <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80d7e8:	e0c00217 	ldw	r3,8(fp)
  80d7ec:	00800044 	movi	r2,1
  80d7f0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d7f4:	e03fff15 	stw	zero,-4(fp)
  80d7f8:	00015506 	br	80dd50 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80d7fc:	e0fffb03 	ldbu	r3,-20(fp)
  80d800:	00bfe004 	movi	r2,-128
  80d804:	1884703a 	and	r2,r3,r2
  80d808:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80d80c:	e0bff283 	ldbu	r2,-54(fp)
  80d810:	1005003a 	cmpeq	r2,r2,zero
  80d814:	1000071e 	bne	r2,zero,80d834 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80d818:	00c01fc4 	movi	r3,127
  80d81c:	e0bffb03 	ldbu	r2,-20(fp)
  80d820:	10c4703a 	and	r2,r2,r3
  80d824:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80d828:	00800044 	movi	r2,1
  80d82c:	e0bff205 	stb	r2,-56(fp)
  80d830:	00000106 	br	80d838 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80d834:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d838:	0005303a 	rdctl	r2,status
  80d83c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d840:	e0fff017 	ldw	r3,-64(fp)
  80d844:	00bfff84 	movi	r2,-2
  80d848:	1884703a 	and	r2,r3,r2
  80d84c:	1001703a 	wrctl	status,r2
  
  return context;
  80d850:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80d854:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80d858:	e0bffb03 	ldbu	r2,-20(fp)
  80d85c:	e0bffe15 	stw	r2,-8(fp)
  80d860:	e0fffe17 	ldw	r3,-8(fp)
  80d864:	18800060 	cmpeqi	r2,r3,1
  80d868:	1000981e 	bne	r2,zero,80dacc <OSFlagPend+0x3a8>
  80d86c:	e0fffe17 	ldw	r3,-8(fp)
  80d870:	18800088 	cmpgei	r2,r3,2
  80d874:	1000041e 	bne	r2,zero,80d888 <OSFlagPend+0x164>
  80d878:	e0fffe17 	ldw	r3,-8(fp)
  80d87c:	1805003a 	cmpeq	r2,r3,zero
  80d880:	1000641e 	bne	r2,zero,80da14 <OSFlagPend+0x2f0>
  80d884:	0000bf06 	br	80db84 <OSFlagPend+0x460>
  80d888:	e0fffe17 	ldw	r3,-8(fp)
  80d88c:	188000a0 	cmpeqi	r2,r3,2
  80d890:	1000041e 	bne	r2,zero,80d8a4 <OSFlagPend+0x180>
  80d894:	e0fffe17 	ldw	r3,-8(fp)
  80d898:	188000e0 	cmpeqi	r2,r3,3
  80d89c:	10002f1e 	bne	r2,zero,80d95c <OSFlagPend+0x238>
  80d8a0:	0000b806 	br	80db84 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80d8a4:	e0bff917 	ldw	r2,-28(fp)
  80d8a8:	10c0020b 	ldhu	r3,8(r2)
  80d8ac:	e0bffa0b 	ldhu	r2,-24(fp)
  80d8b0:	1884703a 	and	r2,r3,r2
  80d8b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80d8b8:	e0fff30b 	ldhu	r3,-52(fp)
  80d8bc:	e0bffa0b 	ldhu	r2,-24(fp)
  80d8c0:	18801a1e 	bne	r3,r2,80d92c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d8c4:	e0bff203 	ldbu	r2,-56(fp)
  80d8c8:	10800058 	cmpnei	r2,r2,1
  80d8cc:	1000091e 	bne	r2,zero,80d8f4 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80d8d0:	e0bff917 	ldw	r2,-28(fp)
  80d8d4:	1080020b 	ldhu	r2,8(r2)
  80d8d8:	1007883a 	mov	r3,r2
  80d8dc:	e0bff30b 	ldhu	r2,-52(fp)
  80d8e0:	0084303a 	nor	r2,zero,r2
  80d8e4:	1884703a 	and	r2,r3,r2
  80d8e8:	1007883a 	mov	r3,r2
  80d8ec:	e0bff917 	ldw	r2,-28(fp)
  80d8f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80d8f4:	008020b4 	movhi	r2,130
  80d8f8:	10a6ba04 	addi	r2,r2,-25880
  80d8fc:	10c00017 	ldw	r3,0(r2)
  80d900:	e0bff30b 	ldhu	r2,-52(fp)
  80d904:	18800b0d 	sth	r2,44(r3)
  80d908:	e0bff117 	ldw	r2,-60(fp)
  80d90c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d910:	e0bfef17 	ldw	r2,-68(fp)
  80d914:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80d918:	e0800217 	ldw	r2,8(fp)
  80d91c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80d920:	e0bff30b 	ldhu	r2,-52(fp)
  80d924:	e0bfff15 	stw	r2,-4(fp)
  80d928:	00010906 	br	80dd50 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80d92c:	e1bffa0b 	ldhu	r6,-24(fp)
  80d930:	e1fffb03 	ldbu	r7,-20(fp)
  80d934:	e0bffc0b 	ldhu	r2,-16(fp)
  80d938:	e17ff404 	addi	r5,fp,-48
  80d93c:	d8800015 	stw	r2,0(sp)
  80d940:	e13ff917 	ldw	r4,-28(fp)
  80d944:	080e24c0 	call	80e24c <OS_FlagBlock>
  80d948:	e0bff117 	ldw	r2,-60(fp)
  80d94c:	e0bfee15 	stw	r2,-72(fp)
  80d950:	e0bfee17 	ldw	r2,-72(fp)
  80d954:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80d958:	00009506 	br	80dbb0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80d95c:	e0bff917 	ldw	r2,-28(fp)
  80d960:	10c0020b 	ldhu	r3,8(r2)
  80d964:	e0bffa0b 	ldhu	r2,-24(fp)
  80d968:	1884703a 	and	r2,r3,r2
  80d96c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80d970:	e0bff30b 	ldhu	r2,-52(fp)
  80d974:	1005003a 	cmpeq	r2,r2,zero
  80d978:	10001a1e 	bne	r2,zero,80d9e4 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d97c:	e0bff203 	ldbu	r2,-56(fp)
  80d980:	10800058 	cmpnei	r2,r2,1
  80d984:	1000091e 	bne	r2,zero,80d9ac <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80d988:	e0bff917 	ldw	r2,-28(fp)
  80d98c:	1080020b 	ldhu	r2,8(r2)
  80d990:	1007883a 	mov	r3,r2
  80d994:	e0bff30b 	ldhu	r2,-52(fp)
  80d998:	0084303a 	nor	r2,zero,r2
  80d99c:	1884703a 	and	r2,r3,r2
  80d9a0:	1007883a 	mov	r3,r2
  80d9a4:	e0bff917 	ldw	r2,-28(fp)
  80d9a8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80d9ac:	008020b4 	movhi	r2,130
  80d9b0:	10a6ba04 	addi	r2,r2,-25880
  80d9b4:	10c00017 	ldw	r3,0(r2)
  80d9b8:	e0bff30b 	ldhu	r2,-52(fp)
  80d9bc:	18800b0d 	sth	r2,44(r3)
  80d9c0:	e0bff117 	ldw	r2,-60(fp)
  80d9c4:	e0bfed15 	stw	r2,-76(fp)
  80d9c8:	e0bfed17 	ldw	r2,-76(fp)
  80d9cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80d9d0:	e0800217 	ldw	r2,8(fp)
  80d9d4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80d9d8:	e0fff30b 	ldhu	r3,-52(fp)
  80d9dc:	e0ffff15 	stw	r3,-4(fp)
  80d9e0:	0000db06 	br	80dd50 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80d9e4:	e1bffa0b 	ldhu	r6,-24(fp)
  80d9e8:	e1fffb03 	ldbu	r7,-20(fp)
  80d9ec:	e0bffc0b 	ldhu	r2,-16(fp)
  80d9f0:	e17ff404 	addi	r5,fp,-48
  80d9f4:	d8800015 	stw	r2,0(sp)
  80d9f8:	e13ff917 	ldw	r4,-28(fp)
  80d9fc:	080e24c0 	call	80e24c <OS_FlagBlock>
  80da00:	e0bff117 	ldw	r2,-60(fp)
  80da04:	e0bfec15 	stw	r2,-80(fp)
  80da08:	e0bfec17 	ldw	r2,-80(fp)
  80da0c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80da10:	00006706 	br	80dbb0 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80da14:	e0bff917 	ldw	r2,-28(fp)
  80da18:	1080020b 	ldhu	r2,8(r2)
  80da1c:	0084303a 	nor	r2,zero,r2
  80da20:	1007883a 	mov	r3,r2
  80da24:	e0bffa0b 	ldhu	r2,-24(fp)
  80da28:	1884703a 	and	r2,r3,r2
  80da2c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80da30:	e0fff30b 	ldhu	r3,-52(fp)
  80da34:	e0bffa0b 	ldhu	r2,-24(fp)
  80da38:	1880181e 	bne	r3,r2,80da9c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80da3c:	e0bff203 	ldbu	r2,-56(fp)
  80da40:	10800058 	cmpnei	r2,r2,1
  80da44:	1000071e 	bne	r2,zero,80da64 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80da48:	e0bff917 	ldw	r2,-28(fp)
  80da4c:	10c0020b 	ldhu	r3,8(r2)
  80da50:	e0bff30b 	ldhu	r2,-52(fp)
  80da54:	1884b03a 	or	r2,r3,r2
  80da58:	1007883a 	mov	r3,r2
  80da5c:	e0bff917 	ldw	r2,-28(fp)
  80da60:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80da64:	008020b4 	movhi	r2,130
  80da68:	10a6ba04 	addi	r2,r2,-25880
  80da6c:	10c00017 	ldw	r3,0(r2)
  80da70:	e0bff30b 	ldhu	r2,-52(fp)
  80da74:	18800b0d 	sth	r2,44(r3)
  80da78:	e0bff117 	ldw	r2,-60(fp)
  80da7c:	e0bfeb15 	stw	r2,-84(fp)
  80da80:	e0bfeb17 	ldw	r2,-84(fp)
  80da84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80da88:	e0800217 	ldw	r2,8(fp)
  80da8c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80da90:	e0bff30b 	ldhu	r2,-52(fp)
  80da94:	e0bfff15 	stw	r2,-4(fp)
  80da98:	0000ad06 	br	80dd50 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80da9c:	e1bffa0b 	ldhu	r6,-24(fp)
  80daa0:	e1fffb03 	ldbu	r7,-20(fp)
  80daa4:	e0bffc0b 	ldhu	r2,-16(fp)
  80daa8:	e17ff404 	addi	r5,fp,-48
  80daac:	d8800015 	stw	r2,0(sp)
  80dab0:	e13ff917 	ldw	r4,-28(fp)
  80dab4:	080e24c0 	call	80e24c <OS_FlagBlock>
  80dab8:	e0bff117 	ldw	r2,-60(fp)
  80dabc:	e0bfea15 	stw	r2,-88(fp)
  80dac0:	e0bfea17 	ldw	r2,-88(fp)
  80dac4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80dac8:	00003906 	br	80dbb0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80dacc:	e0bff917 	ldw	r2,-28(fp)
  80dad0:	1080020b 	ldhu	r2,8(r2)
  80dad4:	0084303a 	nor	r2,zero,r2
  80dad8:	1007883a 	mov	r3,r2
  80dadc:	e0bffa0b 	ldhu	r2,-24(fp)
  80dae0:	1884703a 	and	r2,r3,r2
  80dae4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80dae8:	e0bff30b 	ldhu	r2,-52(fp)
  80daec:	1005003a 	cmpeq	r2,r2,zero
  80daf0:	1000181e 	bne	r2,zero,80db54 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80daf4:	e0bff203 	ldbu	r2,-56(fp)
  80daf8:	10800058 	cmpnei	r2,r2,1
  80dafc:	1000071e 	bne	r2,zero,80db1c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80db00:	e0bff917 	ldw	r2,-28(fp)
  80db04:	10c0020b 	ldhu	r3,8(r2)
  80db08:	e0bff30b 	ldhu	r2,-52(fp)
  80db0c:	1884b03a 	or	r2,r3,r2
  80db10:	1007883a 	mov	r3,r2
  80db14:	e0bff917 	ldw	r2,-28(fp)
  80db18:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80db1c:	008020b4 	movhi	r2,130
  80db20:	10a6ba04 	addi	r2,r2,-25880
  80db24:	10c00017 	ldw	r3,0(r2)
  80db28:	e0bff30b 	ldhu	r2,-52(fp)
  80db2c:	18800b0d 	sth	r2,44(r3)
  80db30:	e0bff117 	ldw	r2,-60(fp)
  80db34:	e0bfe915 	stw	r2,-92(fp)
  80db38:	e0bfe917 	ldw	r2,-92(fp)
  80db3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80db40:	e0800217 	ldw	r2,8(fp)
  80db44:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80db48:	e0fff30b 	ldhu	r3,-52(fp)
  80db4c:	e0ffff15 	stw	r3,-4(fp)
  80db50:	00007f06 	br	80dd50 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80db54:	e1bffa0b 	ldhu	r6,-24(fp)
  80db58:	e1fffb03 	ldbu	r7,-20(fp)
  80db5c:	e0bffc0b 	ldhu	r2,-16(fp)
  80db60:	e17ff404 	addi	r5,fp,-48
  80db64:	d8800015 	stw	r2,0(sp)
  80db68:	e13ff917 	ldw	r4,-28(fp)
  80db6c:	080e24c0 	call	80e24c <OS_FlagBlock>
  80db70:	e0bff117 	ldw	r2,-60(fp)
  80db74:	e0bfe815 	stw	r2,-96(fp)
  80db78:	e0bfe817 	ldw	r2,-96(fp)
  80db7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80db80:	00000b06 	br	80dbb0 <OSFlagPend+0x48c>
  80db84:	e0bff117 	ldw	r2,-60(fp)
  80db88:	e0bfe715 	stw	r2,-100(fp)
  80db8c:	e0bfe717 	ldw	r2,-100(fp)
  80db90:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80db94:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80db98:	e0c00217 	ldw	r3,8(fp)
  80db9c:	00801bc4 	movi	r2,111
  80dba0:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80dba4:	e0bff30b 	ldhu	r2,-52(fp)
  80dba8:	e0bfff15 	stw	r2,-4(fp)
  80dbac:	00006806 	br	80dd50 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80dbb0:	080c5000 	call	80c500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dbb4:	0005303a 	rdctl	r2,status
  80dbb8:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dbbc:	e0ffe617 	ldw	r3,-104(fp)
  80dbc0:	00bfff84 	movi	r2,-2
  80dbc4:	1884703a 	and	r2,r3,r2
  80dbc8:	1001703a 	wrctl	status,r2
  
  return context;
  80dbcc:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80dbd0:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80dbd4:	008020b4 	movhi	r2,130
  80dbd8:	10a6ba04 	addi	r2,r2,-25880
  80dbdc:	10800017 	ldw	r2,0(r2)
  80dbe0:	10800c43 	ldbu	r2,49(r2)
  80dbe4:	10803fcc 	andi	r2,r2,255
  80dbe8:	1005003a 	cmpeq	r2,r2,zero
  80dbec:	1000221e 	bne	r2,zero,80dc78 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80dbf0:	008020b4 	movhi	r2,130
  80dbf4:	10a6ba04 	addi	r2,r2,-25880
  80dbf8:	10800017 	ldw	r2,0(r2)
  80dbfc:	10800c43 	ldbu	r2,49(r2)
  80dc00:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80dc04:	008020b4 	movhi	r2,130
  80dc08:	10a6ba04 	addi	r2,r2,-25880
  80dc0c:	10800017 	ldw	r2,0(r2)
  80dc10:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80dc14:	e13ff404 	addi	r4,fp,-48
  80dc18:	080e6040 	call	80e604 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80dc1c:	008020b4 	movhi	r2,130
  80dc20:	10a6ba04 	addi	r2,r2,-25880
  80dc24:	10800017 	ldw	r2,0(r2)
  80dc28:	10000c05 	stb	zero,48(r2)
  80dc2c:	e0bff117 	ldw	r2,-60(fp)
  80dc30:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc34:	e0bfe517 	ldw	r2,-108(fp)
  80dc38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80dc3c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80dc40:	e0bff243 	ldbu	r2,-55(fp)
  80dc44:	108000a0 	cmpeqi	r2,r2,2
  80dc48:	1000011e 	bne	r2,zero,80dc50 <OSFlagPend+0x52c>
  80dc4c:	00000406 	br	80dc60 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80dc50:	e0c00217 	ldw	r3,8(fp)
  80dc54:	00800384 	movi	r2,14
  80dc58:	18800005 	stb	r2,0(r3)
                 break;
  80dc5c:	00000306 	br	80dc6c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80dc60:	e0c00217 	ldw	r3,8(fp)
  80dc64:	00800284 	movi	r2,10
  80dc68:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80dc6c:	e0fff30b 	ldhu	r3,-52(fp)
  80dc70:	e0ffff15 	stw	r3,-4(fp)
  80dc74:	00003606 	br	80dd50 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80dc78:	008020b4 	movhi	r2,130
  80dc7c:	10a6ba04 	addi	r2,r2,-25880
  80dc80:	10800017 	ldw	r2,0(r2)
  80dc84:	10800b0b 	ldhu	r2,44(r2)
  80dc88:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80dc8c:	e0bff203 	ldbu	r2,-56(fp)
  80dc90:	10800058 	cmpnei	r2,r2,1
  80dc94:	1000261e 	bne	r2,zero,80dd30 <OSFlagPend+0x60c>
        switch (wait_type) {
  80dc98:	e0bffb03 	ldbu	r2,-20(fp)
  80dc9c:	e0bffd15 	stw	r2,-12(fp)
  80dca0:	e0fffd17 	ldw	r3,-12(fp)
  80dca4:	1804803a 	cmplt	r2,r3,zero
  80dca8:	1000181e 	bne	r2,zero,80dd0c <OSFlagPend+0x5e8>
  80dcac:	e0fffd17 	ldw	r3,-12(fp)
  80dcb0:	18800090 	cmplti	r2,r3,2
  80dcb4:	10000d1e 	bne	r2,zero,80dcec <OSFlagPend+0x5c8>
  80dcb8:	e0fffd17 	ldw	r3,-12(fp)
  80dcbc:	18800108 	cmpgei	r2,r3,4
  80dcc0:	1000121e 	bne	r2,zero,80dd0c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80dcc4:	e0bff917 	ldw	r2,-28(fp)
  80dcc8:	1080020b 	ldhu	r2,8(r2)
  80dccc:	1007883a 	mov	r3,r2
  80dcd0:	e0bff30b 	ldhu	r2,-52(fp)
  80dcd4:	0084303a 	nor	r2,zero,r2
  80dcd8:	1884703a 	and	r2,r3,r2
  80dcdc:	1007883a 	mov	r3,r2
  80dce0:	e0bff917 	ldw	r2,-28(fp)
  80dce4:	10c0020d 	sth	r3,8(r2)
                 break;
  80dce8:	00001106 	br	80dd30 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80dcec:	e0bff917 	ldw	r2,-28(fp)
  80dcf0:	10c0020b 	ldhu	r3,8(r2)
  80dcf4:	e0bff30b 	ldhu	r2,-52(fp)
  80dcf8:	1884b03a 	or	r2,r3,r2
  80dcfc:	1007883a 	mov	r3,r2
  80dd00:	e0bff917 	ldw	r2,-28(fp)
  80dd04:	10c0020d 	sth	r3,8(r2)
                 break;
  80dd08:	00000906 	br	80dd30 <OSFlagPend+0x60c>
  80dd0c:	e0bff117 	ldw	r2,-60(fp)
  80dd10:	e0bfe415 	stw	r2,-112(fp)
  80dd14:	e0bfe417 	ldw	r2,-112(fp)
  80dd18:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80dd1c:	e0c00217 	ldw	r3,8(fp)
  80dd20:	00801bc4 	movi	r2,111
  80dd24:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80dd28:	e03fff15 	stw	zero,-4(fp)
  80dd2c:	00000806 	br	80dd50 <OSFlagPend+0x62c>
  80dd30:	e0bff117 	ldw	r2,-60(fp)
  80dd34:	e0bfe315 	stw	r2,-116(fp)
  80dd38:	e0bfe317 	ldw	r2,-116(fp)
  80dd3c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80dd40:	e0800217 	ldw	r2,8(fp)
  80dd44:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80dd48:	e0bff30b 	ldhu	r2,-52(fp)
  80dd4c:	e0bfff15 	stw	r2,-4(fp)
  80dd50:	e0bfff17 	ldw	r2,-4(fp)
}
  80dd54:	e037883a 	mov	sp,fp
  80dd58:	dfc00117 	ldw	ra,4(sp)
  80dd5c:	df000017 	ldw	fp,0(sp)
  80dd60:	dec00204 	addi	sp,sp,8
  80dd64:	f800283a 	ret

0080dd68 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80dd68:	defffb04 	addi	sp,sp,-20
  80dd6c:	df000415 	stw	fp,16(sp)
  80dd70:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80dd74:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd78:	0005303a 	rdctl	r2,status
  80dd7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd80:	e0fffd17 	ldw	r3,-12(fp)
  80dd84:	00bfff84 	movi	r2,-2
  80dd88:	1884703a 	and	r2,r3,r2
  80dd8c:	1001703a 	wrctl	status,r2
  
  return context;
  80dd90:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80dd94:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80dd98:	008020b4 	movhi	r2,130
  80dd9c:	10a6ba04 	addi	r2,r2,-25880
  80dda0:	10800017 	ldw	r2,0(r2)
  80dda4:	10800b0b 	ldhu	r2,44(r2)
  80dda8:	e0bfff0d 	sth	r2,-4(fp)
  80ddac:	e0bffe17 	ldw	r2,-8(fp)
  80ddb0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ddb4:	e0bffc17 	ldw	r2,-16(fp)
  80ddb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80ddbc:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80ddc0:	e037883a 	mov	sp,fp
  80ddc4:	df000017 	ldw	fp,0(sp)
  80ddc8:	dec00104 	addi	sp,sp,4
  80ddcc:	f800283a 	ret

0080ddd0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80ddd0:	deffed04 	addi	sp,sp,-76
  80ddd4:	dfc01215 	stw	ra,72(sp)
  80ddd8:	df001115 	stw	fp,68(sp)
  80dddc:	df001104 	addi	fp,sp,68
  80dde0:	e13ff915 	stw	r4,-28(fp)
  80dde4:	e1fffc15 	stw	r7,-16(fp)
  80dde8:	e17ffa0d 	sth	r5,-24(fp)
  80ddec:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80ddf0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80ddf4:	e0bffc17 	ldw	r2,-16(fp)
  80ddf8:	1004c03a 	cmpne	r2,r2,zero
  80ddfc:	1000021e 	bne	r2,zero,80de08 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80de00:	e03fff15 	stw	zero,-4(fp)
  80de04:	0000d606 	br	80e160 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80de08:	e0bff917 	ldw	r2,-28(fp)
  80de0c:	1004c03a 	cmpne	r2,r2,zero
  80de10:	1000051e 	bne	r2,zero,80de28 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80de14:	e0fffc17 	ldw	r3,-16(fp)
  80de18:	00801b84 	movi	r2,110
  80de1c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80de20:	e03fff15 	stw	zero,-4(fp)
  80de24:	0000ce06 	br	80e160 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80de28:	e0bff917 	ldw	r2,-28(fp)
  80de2c:	10800003 	ldbu	r2,0(r2)
  80de30:	10803fcc 	andi	r2,r2,255
  80de34:	10800160 	cmpeqi	r2,r2,5
  80de38:	1000051e 	bne	r2,zero,80de50 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80de3c:	e0fffc17 	ldw	r3,-16(fp)
  80de40:	00800044 	movi	r2,1
  80de44:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80de48:	e03fff15 	stw	zero,-4(fp)
  80de4c:	0000c406 	br	80e160 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80de50:	0005303a 	rdctl	r2,status
  80de54:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80de58:	e0fff417 	ldw	r3,-48(fp)
  80de5c:	00bfff84 	movi	r2,-2
  80de60:	1884703a 	and	r2,r3,r2
  80de64:	1001703a 	wrctl	status,r2
  
  return context;
  80de68:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80de6c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80de70:	e0bffb03 	ldbu	r2,-20(fp)
  80de74:	e0bffe15 	stw	r2,-8(fp)
  80de78:	e0fffe17 	ldw	r3,-8(fp)
  80de7c:	1805003a 	cmpeq	r2,r3,zero
  80de80:	1000041e 	bne	r2,zero,80de94 <OSFlagPost+0xc4>
  80de84:	e0fffe17 	ldw	r3,-8(fp)
  80de88:	18800060 	cmpeqi	r2,r3,1
  80de8c:	10000b1e 	bne	r2,zero,80debc <OSFlagPost+0xec>
  80de90:	00001206 	br	80dedc <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80de94:	e0bff917 	ldw	r2,-28(fp)
  80de98:	1080020b 	ldhu	r2,8(r2)
  80de9c:	1007883a 	mov	r3,r2
  80dea0:	e0bffa0b 	ldhu	r2,-24(fp)
  80dea4:	0084303a 	nor	r2,zero,r2
  80dea8:	1884703a 	and	r2,r3,r2
  80deac:	1007883a 	mov	r3,r2
  80deb0:	e0bff917 	ldw	r2,-28(fp)
  80deb4:	10c0020d 	sth	r3,8(r2)
             break;
  80deb8:	00001106 	br	80df00 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80debc:	e0bff917 	ldw	r2,-28(fp)
  80dec0:	10c0020b 	ldhu	r3,8(r2)
  80dec4:	e0bffa0b 	ldhu	r2,-24(fp)
  80dec8:	1884b03a 	or	r2,r3,r2
  80decc:	1007883a 	mov	r3,r2
  80ded0:	e0bff917 	ldw	r2,-28(fp)
  80ded4:	10c0020d 	sth	r3,8(r2)
             break;
  80ded8:	00000906 	br	80df00 <OSFlagPost+0x130>
  80dedc:	e0bff517 	ldw	r2,-44(fp)
  80dee0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dee4:	e0bff317 	ldw	r2,-52(fp)
  80dee8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80deec:	e0fffc17 	ldw	r3,-16(fp)
  80def0:	00801c44 	movi	r2,113
  80def4:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80def8:	e03fff15 	stw	zero,-4(fp)
  80defc:	00009806 	br	80e160 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80df00:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80df04:	e0bff917 	ldw	r2,-28(fp)
  80df08:	10800117 	ldw	r2,4(r2)
  80df0c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80df10:	00007506 	br	80e0e8 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80df14:	e0bff817 	ldw	r2,-32(fp)
  80df18:	10800483 	ldbu	r2,18(r2)
  80df1c:	10803fcc 	andi	r2,r2,255
  80df20:	e0bffd15 	stw	r2,-12(fp)
  80df24:	e0fffd17 	ldw	r3,-12(fp)
  80df28:	18800060 	cmpeqi	r2,r3,1
  80df2c:	10004d1e 	bne	r2,zero,80e064 <OSFlagPost+0x294>
  80df30:	e0fffd17 	ldw	r3,-12(fp)
  80df34:	18800088 	cmpgei	r2,r3,2
  80df38:	1000041e 	bne	r2,zero,80df4c <OSFlagPost+0x17c>
  80df3c:	e0fffd17 	ldw	r3,-12(fp)
  80df40:	1805003a 	cmpeq	r2,r3,zero
  80df44:	1000301e 	bne	r2,zero,80e008 <OSFlagPost+0x238>
  80df48:	00005b06 	br	80e0b8 <OSFlagPost+0x2e8>
  80df4c:	e0fffd17 	ldw	r3,-12(fp)
  80df50:	188000a0 	cmpeqi	r2,r3,2
  80df54:	1000041e 	bne	r2,zero,80df68 <OSFlagPost+0x198>
  80df58:	e0fffd17 	ldw	r3,-12(fp)
  80df5c:	188000e0 	cmpeqi	r2,r3,3
  80df60:	1000161e 	bne	r2,zero,80dfbc <OSFlagPost+0x1ec>
  80df64:	00005406 	br	80e0b8 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80df68:	e0bff917 	ldw	r2,-28(fp)
  80df6c:	10c0020b 	ldhu	r3,8(r2)
  80df70:	e0bff817 	ldw	r2,-32(fp)
  80df74:	1080040b 	ldhu	r2,16(r2)
  80df78:	1884703a 	and	r2,r3,r2
  80df7c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80df80:	e0bff817 	ldw	r2,-32(fp)
  80df84:	1080040b 	ldhu	r2,16(r2)
  80df88:	10ffffcc 	andi	r3,r2,65535
  80df8c:	e0bff68b 	ldhu	r2,-38(fp)
  80df90:	1880521e 	bne	r3,r2,80e0dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80df94:	e17ff68b 	ldhu	r5,-38(fp)
  80df98:	e13ff817 	ldw	r4,-32(fp)
  80df9c:	080e4f40 	call	80e4f4 <OS_FlagTaskRdy>
  80dfa0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80dfa4:	e0bff603 	ldbu	r2,-40(fp)
  80dfa8:	10800058 	cmpnei	r2,r2,1
  80dfac:	10004b1e 	bne	r2,zero,80e0dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80dfb0:	00800044 	movi	r2,1
  80dfb4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80dfb8:	00004806 	br	80e0dc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80dfbc:	e0bff917 	ldw	r2,-28(fp)
  80dfc0:	10c0020b 	ldhu	r3,8(r2)
  80dfc4:	e0bff817 	ldw	r2,-32(fp)
  80dfc8:	1080040b 	ldhu	r2,16(r2)
  80dfcc:	1884703a 	and	r2,r3,r2
  80dfd0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80dfd4:	e0bff68b 	ldhu	r2,-38(fp)
  80dfd8:	1005003a 	cmpeq	r2,r2,zero
  80dfdc:	10003f1e 	bne	r2,zero,80e0dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80dfe0:	e17ff68b 	ldhu	r5,-38(fp)
  80dfe4:	e13ff817 	ldw	r4,-32(fp)
  80dfe8:	080e4f40 	call	80e4f4 <OS_FlagTaskRdy>
  80dfec:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80dff0:	e0bff603 	ldbu	r2,-40(fp)
  80dff4:	10800058 	cmpnei	r2,r2,1
  80dff8:	1000381e 	bne	r2,zero,80e0dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80dffc:	00800044 	movi	r2,1
  80e000:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e004:	00003506 	br	80e0dc <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e008:	e0bff917 	ldw	r2,-28(fp)
  80e00c:	1080020b 	ldhu	r2,8(r2)
  80e010:	0084303a 	nor	r2,zero,r2
  80e014:	1007883a 	mov	r3,r2
  80e018:	e0bff817 	ldw	r2,-32(fp)
  80e01c:	1080040b 	ldhu	r2,16(r2)
  80e020:	1884703a 	and	r2,r3,r2
  80e024:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80e028:	e0bff817 	ldw	r2,-32(fp)
  80e02c:	1080040b 	ldhu	r2,16(r2)
  80e030:	10ffffcc 	andi	r3,r2,65535
  80e034:	e0bff68b 	ldhu	r2,-38(fp)
  80e038:	1880281e 	bne	r3,r2,80e0dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e03c:	e17ff68b 	ldhu	r5,-38(fp)
  80e040:	e13ff817 	ldw	r4,-32(fp)
  80e044:	080e4f40 	call	80e4f4 <OS_FlagTaskRdy>
  80e048:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e04c:	e0bff603 	ldbu	r2,-40(fp)
  80e050:	10800058 	cmpnei	r2,r2,1
  80e054:	1000211e 	bne	r2,zero,80e0dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e058:	00800044 	movi	r2,1
  80e05c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e060:	00001e06 	br	80e0dc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80e064:	e0bff917 	ldw	r2,-28(fp)
  80e068:	1080020b 	ldhu	r2,8(r2)
  80e06c:	0084303a 	nor	r2,zero,r2
  80e070:	1007883a 	mov	r3,r2
  80e074:	e0bff817 	ldw	r2,-32(fp)
  80e078:	1080040b 	ldhu	r2,16(r2)
  80e07c:	1884703a 	and	r2,r3,r2
  80e080:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80e084:	e0bff68b 	ldhu	r2,-38(fp)
  80e088:	1005003a 	cmpeq	r2,r2,zero
  80e08c:	1000131e 	bne	r2,zero,80e0dc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80e090:	e17ff68b 	ldhu	r5,-38(fp)
  80e094:	e13ff817 	ldw	r4,-32(fp)
  80e098:	080e4f40 	call	80e4f4 <OS_FlagTaskRdy>
  80e09c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80e0a0:	e0bff603 	ldbu	r2,-40(fp)
  80e0a4:	10800058 	cmpnei	r2,r2,1
  80e0a8:	10000c1e 	bne	r2,zero,80e0dc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80e0ac:	00800044 	movi	r2,1
  80e0b0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80e0b4:	00000906 	br	80e0dc <OSFlagPost+0x30c>
  80e0b8:	e0bff517 	ldw	r2,-44(fp)
  80e0bc:	e0bff215 	stw	r2,-56(fp)
  80e0c0:	e0bff217 	ldw	r2,-56(fp)
  80e0c4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80e0c8:	e0fffc17 	ldw	r3,-16(fp)
  80e0cc:	00801bc4 	movi	r2,111
  80e0d0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80e0d4:	e03fff15 	stw	zero,-4(fp)
  80e0d8:	00002106 	br	80e160 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80e0dc:	e0bff817 	ldw	r2,-32(fp)
  80e0e0:	10800017 	ldw	r2,0(r2)
  80e0e4:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80e0e8:	e0bff817 	ldw	r2,-32(fp)
  80e0ec:	1004c03a 	cmpne	r2,r2,zero
  80e0f0:	103f881e 	bne	r2,zero,80df14 <OSFlagPost+0x144>
  80e0f4:	e0bff517 	ldw	r2,-44(fp)
  80e0f8:	e0bff115 	stw	r2,-60(fp)
  80e0fc:	e0bff117 	ldw	r2,-60(fp)
  80e100:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80e104:	e0bff783 	ldbu	r2,-34(fp)
  80e108:	10800058 	cmpnei	r2,r2,1
  80e10c:	1000011e 	bne	r2,zero,80e114 <OSFlagPost+0x344>
        OS_Sched();
  80e110:	080c5000 	call	80c500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e114:	0005303a 	rdctl	r2,status
  80e118:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e11c:	e0fff017 	ldw	r3,-64(fp)
  80e120:	00bfff84 	movi	r2,-2
  80e124:	1884703a 	and	r2,r3,r2
  80e128:	1001703a 	wrctl	status,r2
  
  return context;
  80e12c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80e130:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80e134:	e0bff917 	ldw	r2,-28(fp)
  80e138:	1080020b 	ldhu	r2,8(r2)
  80e13c:	e0bff70d 	sth	r2,-36(fp)
  80e140:	e0bff517 	ldw	r2,-44(fp)
  80e144:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e148:	e0bfef17 	ldw	r2,-68(fp)
  80e14c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80e150:	e0bffc17 	ldw	r2,-16(fp)
  80e154:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80e158:	e0bff70b 	ldhu	r2,-36(fp)
  80e15c:	e0bfff15 	stw	r2,-4(fp)
  80e160:	e0bfff17 	ldw	r2,-4(fp)
}
  80e164:	e037883a 	mov	sp,fp
  80e168:	dfc00117 	ldw	ra,4(sp)
  80e16c:	df000017 	ldw	fp,0(sp)
  80e170:	dec00204 	addi	sp,sp,8
  80e174:	f800283a 	ret

0080e178 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80e178:	defff804 	addi	sp,sp,-32
  80e17c:	df000715 	stw	fp,28(sp)
  80e180:	df000704 	addi	fp,sp,28
  80e184:	e13ffd15 	stw	r4,-12(fp)
  80e188:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80e18c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  80e190:	e0bffe17 	ldw	r2,-8(fp)
  80e194:	1004c03a 	cmpne	r2,r2,zero
  80e198:	1000021e 	bne	r2,zero,80e1a4 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  80e19c:	e03fff15 	stw	zero,-4(fp)
  80e1a0:	00002506 	br	80e238 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  80e1a4:	e0bffd17 	ldw	r2,-12(fp)
  80e1a8:	1004c03a 	cmpne	r2,r2,zero
  80e1ac:	1000051e 	bne	r2,zero,80e1c4 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80e1b0:	e0fffe17 	ldw	r3,-8(fp)
  80e1b4:	00801b84 	movi	r2,110
  80e1b8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e1bc:	e03fff15 	stw	zero,-4(fp)
  80e1c0:	00001d06 	br	80e238 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80e1c4:	e0bffd17 	ldw	r2,-12(fp)
  80e1c8:	10800003 	ldbu	r2,0(r2)
  80e1cc:	10803fcc 	andi	r2,r2,255
  80e1d0:	10800160 	cmpeqi	r2,r2,5
  80e1d4:	1000051e 	bne	r2,zero,80e1ec <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80e1d8:	e0fffe17 	ldw	r3,-8(fp)
  80e1dc:	00800044 	movi	r2,1
  80e1e0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e1e4:	e03fff15 	stw	zero,-4(fp)
  80e1e8:	00001306 	br	80e238 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e1ec:	0005303a 	rdctl	r2,status
  80e1f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e1f4:	e0fffa17 	ldw	r3,-24(fp)
  80e1f8:	00bfff84 	movi	r2,-2
  80e1fc:	1884703a 	and	r2,r3,r2
  80e200:	1001703a 	wrctl	status,r2
  
  return context;
  80e204:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80e208:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  80e20c:	e0bffd17 	ldw	r2,-12(fp)
  80e210:	1080020b 	ldhu	r2,8(r2)
  80e214:	e0bffc0d 	sth	r2,-16(fp)
  80e218:	e0bffb17 	ldw	r2,-20(fp)
  80e21c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e220:	e0bff917 	ldw	r2,-28(fp)
  80e224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80e228:	e0bffe17 	ldw	r2,-8(fp)
  80e22c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80e230:	e0bffc0b 	ldhu	r2,-16(fp)
  80e234:	e0bfff15 	stw	r2,-4(fp)
  80e238:	e0bfff17 	ldw	r2,-4(fp)
}
  80e23c:	e037883a 	mov	sp,fp
  80e240:	df000017 	ldw	fp,0(sp)
  80e244:	dec00104 	addi	sp,sp,4
  80e248:	f800283a 	ret

0080e24c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80e24c:	defff804 	addi	sp,sp,-32
  80e250:	df000715 	stw	fp,28(sp)
  80e254:	df000704 	addi	fp,sp,28
  80e258:	e13ffb15 	stw	r4,-20(fp)
  80e25c:	e17ffc15 	stw	r5,-16(fp)
  80e260:	e0800117 	ldw	r2,4(fp)
  80e264:	e1bffd0d 	sth	r6,-12(fp)
  80e268:	e1fffe05 	stb	r7,-8(fp)
  80e26c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80e270:	008020b4 	movhi	r2,130
  80e274:	10a6ba04 	addi	r2,r2,-25880
  80e278:	10c00017 	ldw	r3,0(r2)
  80e27c:	008020b4 	movhi	r2,130
  80e280:	10a6ba04 	addi	r2,r2,-25880
  80e284:	10800017 	ldw	r2,0(r2)
  80e288:	10800c03 	ldbu	r2,48(r2)
  80e28c:	10800814 	ori	r2,r2,32
  80e290:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80e294:	008020b4 	movhi	r2,130
  80e298:	10a6ba04 	addi	r2,r2,-25880
  80e29c:	10800017 	ldw	r2,0(r2)
  80e2a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  80e2a4:	008020b4 	movhi	r2,130
  80e2a8:	10a6ba04 	addi	r2,r2,-25880
  80e2ac:	10c00017 	ldw	r3,0(r2)
  80e2b0:	e0bfff0b 	ldhu	r2,-4(fp)
  80e2b4:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  80e2b8:	008020b4 	movhi	r2,130
  80e2bc:	10a6ba04 	addi	r2,r2,-25880
  80e2c0:	10c00017 	ldw	r3,0(r2)
  80e2c4:	e0bffc17 	ldw	r2,-16(fp)
  80e2c8:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80e2cc:	e0fffc17 	ldw	r3,-16(fp)
  80e2d0:	e0bffd0b 	ldhu	r2,-12(fp)
  80e2d4:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80e2d8:	e0fffc17 	ldw	r3,-16(fp)
  80e2dc:	e0bffe03 	ldbu	r2,-8(fp)
  80e2e0:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  80e2e4:	008020b4 	movhi	r2,130
  80e2e8:	10a6ba04 	addi	r2,r2,-25880
  80e2ec:	10c00017 	ldw	r3,0(r2)
  80e2f0:	e0bffc17 	ldw	r2,-16(fp)
  80e2f4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80e2f8:	e0bffb17 	ldw	r2,-20(fp)
  80e2fc:	10c00117 	ldw	r3,4(r2)
  80e300:	e0bffc17 	ldw	r2,-16(fp)
  80e304:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80e308:	e0bffc17 	ldw	r2,-16(fp)
  80e30c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80e310:	e0fffc17 	ldw	r3,-16(fp)
  80e314:	e0bffb17 	ldw	r2,-20(fp)
  80e318:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80e31c:	e0bffb17 	ldw	r2,-20(fp)
  80e320:	10800117 	ldw	r2,4(r2)
  80e324:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80e328:	e0bffa17 	ldw	r2,-24(fp)
  80e32c:	1005003a 	cmpeq	r2,r2,zero
  80e330:	1000031e 	bne	r2,zero,80e340 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80e334:	e0fffa17 	ldw	r3,-24(fp)
  80e338:	e0bffc17 	ldw	r2,-16(fp)
  80e33c:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  80e340:	e0fffb17 	ldw	r3,-20(fp)
  80e344:	e0bffc17 	ldw	r2,-16(fp)
  80e348:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  80e34c:	008020b4 	movhi	r2,130
  80e350:	10a6ba04 	addi	r2,r2,-25880
  80e354:	10800017 	ldw	r2,0(r2)
  80e358:	10800d03 	ldbu	r2,52(r2)
  80e35c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80e360:	e13ff903 	ldbu	r4,-28(fp)
  80e364:	e0fff903 	ldbu	r3,-28(fp)
  80e368:	008020b4 	movhi	r2,130
  80e36c:	10a6b744 	addi	r2,r2,-25891
  80e370:	10c5883a 	add	r2,r2,r3
  80e374:	10800003 	ldbu	r2,0(r2)
  80e378:	1007883a 	mov	r3,r2
  80e37c:	008020b4 	movhi	r2,130
  80e380:	10a6ba04 	addi	r2,r2,-25880
  80e384:	10800017 	ldw	r2,0(r2)
  80e388:	10800d43 	ldbu	r2,53(r2)
  80e38c:	0084303a 	nor	r2,zero,r2
  80e390:	1884703a 	and	r2,r3,r2
  80e394:	1007883a 	mov	r3,r2
  80e398:	008020b4 	movhi	r2,130
  80e39c:	10a6b744 	addi	r2,r2,-25891
  80e3a0:	1105883a 	add	r2,r2,r4
  80e3a4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  80e3a8:	e0fff903 	ldbu	r3,-28(fp)
  80e3ac:	008020b4 	movhi	r2,130
  80e3b0:	10a6b744 	addi	r2,r2,-25891
  80e3b4:	10c5883a 	add	r2,r2,r3
  80e3b8:	10800003 	ldbu	r2,0(r2)
  80e3bc:	10803fcc 	andi	r2,r2,255
  80e3c0:	1004c03a 	cmpne	r2,r2,zero
  80e3c4:	10000e1e 	bne	r2,zero,80e400 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80e3c8:	008020b4 	movhi	r2,130
  80e3cc:	10a6ba04 	addi	r2,r2,-25880
  80e3d0:	10800017 	ldw	r2,0(r2)
  80e3d4:	10800d83 	ldbu	r2,54(r2)
  80e3d8:	0084303a 	nor	r2,zero,r2
  80e3dc:	1007883a 	mov	r3,r2
  80e3e0:	008020b4 	movhi	r2,130
  80e3e4:	10a6b704 	addi	r2,r2,-25892
  80e3e8:	10800003 	ldbu	r2,0(r2)
  80e3ec:	1884703a 	and	r2,r3,r2
  80e3f0:	1007883a 	mov	r3,r2
  80e3f4:	008020b4 	movhi	r2,130
  80e3f8:	10a6b704 	addi	r2,r2,-25892
  80e3fc:	10c00005 	stb	r3,0(r2)
    }
}
  80e400:	e037883a 	mov	sp,fp
  80e404:	df000017 	ldw	fp,0(sp)
  80e408:	dec00104 	addi	sp,sp,4
  80e40c:	f800283a 	ret

0080e410 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80e410:	defffb04 	addi	sp,sp,-20
  80e414:	dfc00415 	stw	ra,16(sp)
  80e418:	df000315 	stw	fp,12(sp)
  80e41c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80e420:	010020b4 	movhi	r4,130
  80e424:	212ecc04 	addi	r4,r4,-17616
  80e428:	0140dc04 	movi	r5,880
  80e42c:	080c4400 	call	80c440 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80e430:	008020b4 	movhi	r2,130
  80e434:	10aecc04 	addi	r2,r2,-17616
  80e438:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80e43c:	008020b4 	movhi	r2,130
  80e440:	10aed704 	addi	r2,r2,-17572
  80e444:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80e448:	e03fff0d 	sth	zero,-4(fp)
  80e44c:	00001306 	br	80e49c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80e450:	e0bffe17 	ldw	r2,-8(fp)
  80e454:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80e458:	e0fffe17 	ldw	r3,-8(fp)
  80e45c:	e0bffd17 	ldw	r2,-12(fp)
  80e460:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  80e464:	e0fffe17 	ldw	r3,-8(fp)
  80e468:	00800fc4 	movi	r2,63
  80e46c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80e470:	e0bffe17 	ldw	r2,-8(fp)
  80e474:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80e478:	e0bffe17 	ldw	r2,-8(fp)
  80e47c:	10800b04 	addi	r2,r2,44
  80e480:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  80e484:	e0bffd17 	ldw	r2,-12(fp)
  80e488:	10800b04 	addi	r2,r2,44
  80e48c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80e490:	e0bfff0b 	ldhu	r2,-4(fp)
  80e494:	10800044 	addi	r2,r2,1
  80e498:	e0bfff0d 	sth	r2,-4(fp)
  80e49c:	e0bfff0b 	ldhu	r2,-4(fp)
  80e4a0:	108004f0 	cmpltui	r2,r2,19
  80e4a4:	103fea1e 	bne	r2,zero,80e450 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80e4a8:	e0bffe17 	ldw	r2,-8(fp)
  80e4ac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80e4b0:	e0bffe17 	ldw	r2,-8(fp)
  80e4b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  80e4b8:	e0fffe17 	ldw	r3,-8(fp)
  80e4bc:	00800fc4 	movi	r2,63
  80e4c0:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80e4c4:	e0bffe17 	ldw	r2,-8(fp)
  80e4c8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80e4cc:	00c020b4 	movhi	r3,130
  80e4d0:	18e6bc04 	addi	r3,r3,-25872
  80e4d4:	008020b4 	movhi	r2,130
  80e4d8:	10aecc04 	addi	r2,r2,-17616
  80e4dc:	18800015 	stw	r2,0(r3)
#endif
}
  80e4e0:	e037883a 	mov	sp,fp
  80e4e4:	dfc00117 	ldw	ra,4(sp)
  80e4e8:	df000017 	ldw	fp,0(sp)
  80e4ec:	dec00204 	addi	sp,sp,8
  80e4f0:	f800283a 	ret

0080e4f4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80e4f4:	defffa04 	addi	sp,sp,-24
  80e4f8:	dfc00515 	stw	ra,20(sp)
  80e4fc:	df000415 	stw	fp,16(sp)
  80e500:	df000404 	addi	fp,sp,16
  80e504:	e13ffe15 	stw	r4,-8(fp)
  80e508:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80e50c:	e0bffe17 	ldw	r2,-8(fp)
  80e510:	10800217 	ldw	r2,8(r2)
  80e514:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80e518:	e0bffd17 	ldw	r2,-12(fp)
  80e51c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80e520:	e0fffd17 	ldw	r3,-12(fp)
  80e524:	e0bfff0b 	ldhu	r2,-4(fp)
  80e528:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80e52c:	e0bffd17 	ldw	r2,-12(fp)
  80e530:	10c00c03 	ldbu	r3,48(r2)
  80e534:	00bff7c4 	movi	r2,-33
  80e538:	1884703a 	and	r2,r3,r2
  80e53c:	1007883a 	mov	r3,r2
  80e540:	e0bffd17 	ldw	r2,-12(fp)
  80e544:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80e548:	e0bffd17 	ldw	r2,-12(fp)
  80e54c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  80e550:	e0bffd17 	ldw	r2,-12(fp)
  80e554:	10800c03 	ldbu	r2,48(r2)
  80e558:	10803fcc 	andi	r2,r2,255
  80e55c:	1004c03a 	cmpne	r2,r2,zero
  80e560:	10001f1e 	bne	r2,zero,80e5e0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  80e564:	e0bffd17 	ldw	r2,-12(fp)
  80e568:	10c00d83 	ldbu	r3,54(r2)
  80e56c:	008020b4 	movhi	r2,130
  80e570:	10a6b704 	addi	r2,r2,-25892
  80e574:	10800003 	ldbu	r2,0(r2)
  80e578:	1884b03a 	or	r2,r3,r2
  80e57c:	1007883a 	mov	r3,r2
  80e580:	008020b4 	movhi	r2,130
  80e584:	10a6b704 	addi	r2,r2,-25892
  80e588:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80e58c:	e0bffd17 	ldw	r2,-12(fp)
  80e590:	10800d03 	ldbu	r2,52(r2)
  80e594:	11003fcc 	andi	r4,r2,255
  80e598:	e0bffd17 	ldw	r2,-12(fp)
  80e59c:	10800d03 	ldbu	r2,52(r2)
  80e5a0:	10c03fcc 	andi	r3,r2,255
  80e5a4:	008020b4 	movhi	r2,130
  80e5a8:	10a6b744 	addi	r2,r2,-25891
  80e5ac:	10c5883a 	add	r2,r2,r3
  80e5b0:	10c00003 	ldbu	r3,0(r2)
  80e5b4:	e0bffd17 	ldw	r2,-12(fp)
  80e5b8:	10800d43 	ldbu	r2,53(r2)
  80e5bc:	1884b03a 	or	r2,r3,r2
  80e5c0:	1007883a 	mov	r3,r2
  80e5c4:	008020b4 	movhi	r2,130
  80e5c8:	10a6b744 	addi	r2,r2,-25891
  80e5cc:	1105883a 	add	r2,r2,r4
  80e5d0:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  80e5d4:	00800044 	movi	r2,1
  80e5d8:	e0bffc05 	stb	r2,-16(fp)
  80e5dc:	00000106 	br	80e5e4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  80e5e0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  80e5e4:	e13ffe17 	ldw	r4,-8(fp)
  80e5e8:	080e6040 	call	80e604 <OS_FlagUnlink>
    return (sched);
  80e5ec:	e0bffc03 	ldbu	r2,-16(fp)
}
  80e5f0:	e037883a 	mov	sp,fp
  80e5f4:	dfc00117 	ldw	ra,4(sp)
  80e5f8:	df000017 	ldw	fp,0(sp)
  80e5fc:	dec00204 	addi	sp,sp,8
  80e600:	f800283a 	ret

0080e604 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  80e604:	defffa04 	addi	sp,sp,-24
  80e608:	df000515 	stw	fp,20(sp)
  80e60c:	df000504 	addi	fp,sp,20
  80e610:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  80e614:	e0bfff17 	ldw	r2,-4(fp)
  80e618:	10800117 	ldw	r2,4(r2)
  80e61c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80e620:	e0bfff17 	ldw	r2,-4(fp)
  80e624:	10800017 	ldw	r2,0(r2)
  80e628:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80e62c:	e0bffc17 	ldw	r2,-16(fp)
  80e630:	1004c03a 	cmpne	r2,r2,zero
  80e634:	10000c1e 	bne	r2,zero,80e668 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80e638:	e0bfff17 	ldw	r2,-4(fp)
  80e63c:	10800317 	ldw	r2,12(r2)
  80e640:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80e644:	e0fffd17 	ldw	r3,-12(fp)
  80e648:	e0bffb17 	ldw	r2,-20(fp)
  80e64c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80e650:	e0bffb17 	ldw	r2,-20(fp)
  80e654:	1005003a 	cmpeq	r2,r2,zero
  80e658:	10000c1e 	bne	r2,zero,80e68c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  80e65c:	e0bffb17 	ldw	r2,-20(fp)
  80e660:	10000115 	stw	zero,4(r2)
  80e664:	00000906 	br	80e68c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80e668:	e0fffc17 	ldw	r3,-16(fp)
  80e66c:	e0bffb17 	ldw	r2,-20(fp)
  80e670:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80e674:	e0bffb17 	ldw	r2,-20(fp)
  80e678:	1005003a 	cmpeq	r2,r2,zero
  80e67c:	1000031e 	bne	r2,zero,80e68c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  80e680:	e0fffb17 	ldw	r3,-20(fp)
  80e684:	e0bffc17 	ldw	r2,-16(fp)
  80e688:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  80e68c:	e0bfff17 	ldw	r2,-4(fp)
  80e690:	10800217 	ldw	r2,8(r2)
  80e694:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80e698:	e0bffe17 	ldw	r2,-8(fp)
  80e69c:	10000a15 	stw	zero,40(r2)
#endif
}
  80e6a0:	e037883a 	mov	sp,fp
  80e6a4:	df000017 	ldw	fp,0(sp)
  80e6a8:	dec00104 	addi	sp,sp,4
  80e6ac:	f800283a 	ret

0080e6b0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  80e6b0:	defff304 	addi	sp,sp,-52
  80e6b4:	df000c15 	stw	fp,48(sp)
  80e6b8:	df000c04 	addi	fp,sp,48
  80e6bc:	e13ffb15 	stw	r4,-20(fp)
  80e6c0:	e17ffc15 	stw	r5,-16(fp)
  80e6c4:	e1bffd15 	stw	r6,-12(fp)
  80e6c8:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e6cc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80e6d0:	e0bffe17 	ldw	r2,-8(fp)
  80e6d4:	1004c03a 	cmpne	r2,r2,zero
  80e6d8:	1000021e 	bne	r2,zero,80e6e4 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  80e6dc:	e03fff15 	stw	zero,-4(fp)
  80e6e0:	00007506 	br	80e8b8 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  80e6e4:	e0bffb17 	ldw	r2,-20(fp)
  80e6e8:	1004c03a 	cmpne	r2,r2,zero
  80e6ec:	1000051e 	bne	r2,zero,80e704 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80e6f0:	e0fffe17 	ldw	r3,-8(fp)
  80e6f4:	00801884 	movi	r2,98
  80e6f8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e6fc:	e03fff15 	stw	zero,-4(fp)
  80e700:	00006d06 	br	80e8b8 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  80e704:	e0bffb17 	ldw	r2,-20(fp)
  80e708:	108000cc 	andi	r2,r2,3
  80e70c:	1005003a 	cmpeq	r2,r2,zero
  80e710:	1000051e 	bne	r2,zero,80e728 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80e714:	e0fffe17 	ldw	r3,-8(fp)
  80e718:	00801884 	movi	r2,98
  80e71c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e720:	e03fff15 	stw	zero,-4(fp)
  80e724:	00006406 	br	80e8b8 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80e728:	e0bffc17 	ldw	r2,-16(fp)
  80e72c:	108000a8 	cmpgeui	r2,r2,2
  80e730:	1000051e 	bne	r2,zero,80e748 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80e734:	e0fffe17 	ldw	r3,-8(fp)
  80e738:	008016c4 	movi	r2,91
  80e73c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e740:	e03fff15 	stw	zero,-4(fp)
  80e744:	00005c06 	br	80e8b8 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80e748:	e0bffd17 	ldw	r2,-12(fp)
  80e74c:	10800128 	cmpgeui	r2,r2,4
  80e750:	1000051e 	bne	r2,zero,80e768 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80e754:	e0fffe17 	ldw	r3,-8(fp)
  80e758:	00801704 	movi	r2,92
  80e75c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e760:	e03fff15 	stw	zero,-4(fp)
  80e764:	00005406 	br	80e8b8 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e768:	0005303a 	rdctl	r2,status
  80e76c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e770:	e0fff517 	ldw	r3,-44(fp)
  80e774:	00bfff84 	movi	r2,-2
  80e778:	1884703a 	and	r2,r3,r2
  80e77c:	1001703a 	wrctl	status,r2
  
  return context;
  80e780:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e784:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80e788:	008020b4 	movhi	r2,130
  80e78c:	10a6b404 	addi	r2,r2,-25904
  80e790:	10800017 	ldw	r2,0(r2)
  80e794:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80e798:	008020b4 	movhi	r2,130
  80e79c:	10a6b404 	addi	r2,r2,-25904
  80e7a0:	10800017 	ldw	r2,0(r2)
  80e7a4:	1005003a 	cmpeq	r2,r2,zero
  80e7a8:	1000081e 	bne	r2,zero,80e7cc <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  80e7ac:	008020b4 	movhi	r2,130
  80e7b0:	10a6b404 	addi	r2,r2,-25904
  80e7b4:	10800017 	ldw	r2,0(r2)
  80e7b8:	10800117 	ldw	r2,4(r2)
  80e7bc:	1007883a 	mov	r3,r2
  80e7c0:	008020b4 	movhi	r2,130
  80e7c4:	10a6b404 	addi	r2,r2,-25904
  80e7c8:	10c00015 	stw	r3,0(r2)
  80e7cc:	e0bff617 	ldw	r2,-40(fp)
  80e7d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e7d4:	e0bff417 	ldw	r2,-48(fp)
  80e7d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  80e7dc:	e0bffa17 	ldw	r2,-24(fp)
  80e7e0:	1004c03a 	cmpne	r2,r2,zero
  80e7e4:	1000051e 	bne	r2,zero,80e7fc <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  80e7e8:	e0fffe17 	ldw	r3,-8(fp)
  80e7ec:	00801684 	movi	r2,90
  80e7f0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e7f4:	e03fff15 	stw	zero,-4(fp)
  80e7f8:	00002f06 	br	80e8b8 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80e7fc:	e0bffb17 	ldw	r2,-20(fp)
  80e800:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  80e804:	e0bffb17 	ldw	r2,-20(fp)
  80e808:	1007883a 	mov	r3,r2
  80e80c:	e0bffd17 	ldw	r2,-12(fp)
  80e810:	1885883a 	add	r2,r3,r2
  80e814:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80e818:	e03ff715 	stw	zero,-36(fp)
  80e81c:	00000d06 	br	80e854 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  80e820:	e0fff817 	ldw	r3,-32(fp)
  80e824:	e0bff917 	ldw	r2,-28(fp)
  80e828:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  80e82c:	e0bff917 	ldw	r2,-28(fp)
  80e830:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80e834:	e0bff917 	ldw	r2,-28(fp)
  80e838:	1007883a 	mov	r3,r2
  80e83c:	e0bffd17 	ldw	r2,-12(fp)
  80e840:	1885883a 	add	r2,r3,r2
  80e844:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80e848:	e0bff717 	ldw	r2,-36(fp)
  80e84c:	10800044 	addi	r2,r2,1
  80e850:	e0bff715 	stw	r2,-36(fp)
  80e854:	e0bffc17 	ldw	r2,-16(fp)
  80e858:	10ffffc4 	addi	r3,r2,-1
  80e85c:	e0bff717 	ldw	r2,-36(fp)
  80e860:	10ffef36 	bltu	r2,r3,80e820 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80e864:	e0bff817 	ldw	r2,-32(fp)
  80e868:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  80e86c:	e0fffa17 	ldw	r3,-24(fp)
  80e870:	e0bffb17 	ldw	r2,-20(fp)
  80e874:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80e878:	e0fffa17 	ldw	r3,-24(fp)
  80e87c:	e0bffb17 	ldw	r2,-20(fp)
  80e880:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80e884:	e0fffa17 	ldw	r3,-24(fp)
  80e888:	e0bffc17 	ldw	r2,-16(fp)
  80e88c:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  80e890:	e0fffa17 	ldw	r3,-24(fp)
  80e894:	e0bffc17 	ldw	r2,-16(fp)
  80e898:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  80e89c:	e0fffa17 	ldw	r3,-24(fp)
  80e8a0:	e0bffd17 	ldw	r2,-12(fp)
  80e8a4:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  80e8a8:	e0bffe17 	ldw	r2,-8(fp)
  80e8ac:	10000005 	stb	zero,0(r2)
    return (pmem);
  80e8b0:	e0bffa17 	ldw	r2,-24(fp)
  80e8b4:	e0bfff15 	stw	r2,-4(fp)
  80e8b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80e8bc:	e037883a 	mov	sp,fp
  80e8c0:	df000017 	ldw	fp,0(sp)
  80e8c4:	dec00104 	addi	sp,sp,4
  80e8c8:	f800283a 	ret

0080e8cc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80e8cc:	defff704 	addi	sp,sp,-36
  80e8d0:	df000815 	stw	fp,32(sp)
  80e8d4:	df000804 	addi	fp,sp,32
  80e8d8:	e13ffd15 	stw	r4,-12(fp)
  80e8dc:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e8e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80e8e4:	e0bffe17 	ldw	r2,-8(fp)
  80e8e8:	1004c03a 	cmpne	r2,r2,zero
  80e8ec:	1000021e 	bne	r2,zero,80e8f8 <OSMemGet+0x2c>
        return ((void *)0);
  80e8f0:	e03fff15 	stw	zero,-4(fp)
  80e8f4:	00003106 	br	80e9bc <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80e8f8:	e0bffd17 	ldw	r2,-12(fp)
  80e8fc:	1004c03a 	cmpne	r2,r2,zero
  80e900:	1000051e 	bne	r2,zero,80e918 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80e904:	e0fffe17 	ldw	r3,-8(fp)
  80e908:	00801804 	movi	r2,96
  80e90c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80e910:	e03fff15 	stw	zero,-4(fp)
  80e914:	00002906 	br	80e9bc <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e918:	0005303a 	rdctl	r2,status
  80e91c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e920:	e0fffa17 	ldw	r3,-24(fp)
  80e924:	00bfff84 	movi	r2,-2
  80e928:	1884703a 	and	r2,r3,r2
  80e92c:	1001703a 	wrctl	status,r2
  
  return context;
  80e930:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e934:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80e938:	e0bffd17 	ldw	r2,-12(fp)
  80e93c:	10800417 	ldw	r2,16(r2)
  80e940:	1005003a 	cmpeq	r2,r2,zero
  80e944:	1000151e 	bne	r2,zero,80e99c <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80e948:	e0bffd17 	ldw	r2,-12(fp)
  80e94c:	10800117 	ldw	r2,4(r2)
  80e950:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80e954:	e0bffc17 	ldw	r2,-16(fp)
  80e958:	10c00017 	ldw	r3,0(r2)
  80e95c:	e0bffd17 	ldw	r2,-12(fp)
  80e960:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80e964:	e0bffd17 	ldw	r2,-12(fp)
  80e968:	10800417 	ldw	r2,16(r2)
  80e96c:	10ffffc4 	addi	r3,r2,-1
  80e970:	e0bffd17 	ldw	r2,-12(fp)
  80e974:	10c00415 	stw	r3,16(r2)
  80e978:	e0bffb17 	ldw	r2,-20(fp)
  80e97c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e980:	e0bff917 	ldw	r2,-28(fp)
  80e984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80e988:	e0bffe17 	ldw	r2,-8(fp)
  80e98c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  80e990:	e0bffc17 	ldw	r2,-16(fp)
  80e994:	e0bfff15 	stw	r2,-4(fp)
  80e998:	00000806 	br	80e9bc <OSMemGet+0xf0>
  80e99c:	e0bffb17 	ldw	r2,-20(fp)
  80e9a0:	e0bff815 	stw	r2,-32(fp)
  80e9a4:	e0bff817 	ldw	r2,-32(fp)
  80e9a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80e9ac:	e0fffe17 	ldw	r3,-8(fp)
  80e9b0:	00801744 	movi	r2,93
  80e9b4:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80e9b8:	e03fff15 	stw	zero,-4(fp)
  80e9bc:	e0bfff17 	ldw	r2,-4(fp)
}
  80e9c0:	e037883a 	mov	sp,fp
  80e9c4:	df000017 	ldw	fp,0(sp)
  80e9c8:	dec00104 	addi	sp,sp,4
  80e9cc:	f800283a 	ret

0080e9d0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80e9d0:	defff604 	addi	sp,sp,-40
  80e9d4:	dfc00915 	stw	ra,36(sp)
  80e9d8:	df000815 	stw	fp,32(sp)
  80e9dc:	df000804 	addi	fp,sp,32
  80e9e0:	e13ffc15 	stw	r4,-16(fp)
  80e9e4:	e17ffd15 	stw	r5,-12(fp)
  80e9e8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e9ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80e9f0:	e0bffe17 	ldw	r2,-8(fp)
  80e9f4:	1004c03a 	cmpne	r2,r2,zero
  80e9f8:	1000021e 	bne	r2,zero,80ea04 <OSMemNameGet+0x34>
        return (0);
  80e9fc:	e03fff15 	stw	zero,-4(fp)
  80ea00:	00003006 	br	80eac4 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80ea04:	e0bffc17 	ldw	r2,-16(fp)
  80ea08:	1004c03a 	cmpne	r2,r2,zero
  80ea0c:	1000051e 	bne	r2,zero,80ea24 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80ea10:	e0fffe17 	ldw	r3,-8(fp)
  80ea14:	00801804 	movi	r2,96
  80ea18:	18800005 	stb	r2,0(r3)
        return (0);
  80ea1c:	e03fff15 	stw	zero,-4(fp)
  80ea20:	00002806 	br	80eac4 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ea24:	e0bffd17 	ldw	r2,-12(fp)
  80ea28:	1004c03a 	cmpne	r2,r2,zero
  80ea2c:	1000051e 	bne	r2,zero,80ea44 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80ea30:	e0fffe17 	ldw	r3,-8(fp)
  80ea34:	00800304 	movi	r2,12
  80ea38:	18800005 	stb	r2,0(r3)
        return (0);
  80ea3c:	e03fff15 	stw	zero,-4(fp)
  80ea40:	00002006 	br	80eac4 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ea44:	008020b4 	movhi	r2,130
  80ea48:	10a6b904 	addi	r2,r2,-25884
  80ea4c:	10800003 	ldbu	r2,0(r2)
  80ea50:	10803fcc 	andi	r2,r2,255
  80ea54:	1005003a 	cmpeq	r2,r2,zero
  80ea58:	1000051e 	bne	r2,zero,80ea70 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80ea5c:	e0fffe17 	ldw	r3,-8(fp)
  80ea60:	00800444 	movi	r2,17
  80ea64:	18800005 	stb	r2,0(r3)
        return (0);
  80ea68:	e03fff15 	stw	zero,-4(fp)
  80ea6c:	00001506 	br	80eac4 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea70:	0005303a 	rdctl	r2,status
  80ea74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea78:	e0fff917 	ldw	r3,-28(fp)
  80ea7c:	00bfff84 	movi	r2,-2
  80ea80:	1884703a 	and	r2,r3,r2
  80ea84:	1001703a 	wrctl	status,r2
  
  return context;
  80ea88:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80ea8c:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  80ea90:	e0bffc17 	ldw	r2,-16(fp)
  80ea94:	11400504 	addi	r5,r2,20
  80ea98:	e13ffd17 	ldw	r4,-12(fp)
  80ea9c:	080c6440 	call	80c644 <OS_StrCopy>
  80eaa0:	e0bffb05 	stb	r2,-20(fp)
  80eaa4:	e0bffa17 	ldw	r2,-24(fp)
  80eaa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eaac:	e0bff817 	ldw	r2,-32(fp)
  80eab0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80eab4:	e0bffe17 	ldw	r2,-8(fp)
  80eab8:	10000005 	stb	zero,0(r2)
    return (len);
  80eabc:	e0bffb03 	ldbu	r2,-20(fp)
  80eac0:	e0bfff15 	stw	r2,-4(fp)
  80eac4:	e0bfff17 	ldw	r2,-4(fp)
}
  80eac8:	e037883a 	mov	sp,fp
  80eacc:	dfc00117 	ldw	ra,4(sp)
  80ead0:	df000017 	ldw	fp,0(sp)
  80ead4:	dec00204 	addi	sp,sp,8
  80ead8:	f800283a 	ret

0080eadc <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80eadc:	defff604 	addi	sp,sp,-40
  80eae0:	dfc00915 	stw	ra,36(sp)
  80eae4:	df000815 	stw	fp,32(sp)
  80eae8:	df000804 	addi	fp,sp,32
  80eaec:	e13ffd15 	stw	r4,-12(fp)
  80eaf0:	e17ffe15 	stw	r5,-8(fp)
  80eaf4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80eaf8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80eafc:	e0bfff17 	ldw	r2,-4(fp)
  80eb00:	1005003a 	cmpeq	r2,r2,zero
  80eb04:	1000381e 	bne	r2,zero,80ebe8 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80eb08:	e0bffd17 	ldw	r2,-12(fp)
  80eb0c:	1004c03a 	cmpne	r2,r2,zero
  80eb10:	1000041e 	bne	r2,zero,80eb24 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80eb14:	e0ffff17 	ldw	r3,-4(fp)
  80eb18:	00801804 	movi	r2,96
  80eb1c:	18800005 	stb	r2,0(r3)
        return;
  80eb20:	00003106 	br	80ebe8 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80eb24:	e0bffe17 	ldw	r2,-8(fp)
  80eb28:	1004c03a 	cmpne	r2,r2,zero
  80eb2c:	1000041e 	bne	r2,zero,80eb40 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80eb30:	e0ffff17 	ldw	r3,-4(fp)
  80eb34:	00800304 	movi	r2,12
  80eb38:	18800005 	stb	r2,0(r3)
        return;
  80eb3c:	00002a06 	br	80ebe8 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80eb40:	008020b4 	movhi	r2,130
  80eb44:	10a6b904 	addi	r2,r2,-25884
  80eb48:	10800003 	ldbu	r2,0(r2)
  80eb4c:	10803fcc 	andi	r2,r2,255
  80eb50:	1005003a 	cmpeq	r2,r2,zero
  80eb54:	1000041e 	bne	r2,zero,80eb68 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80eb58:	e0ffff17 	ldw	r3,-4(fp)
  80eb5c:	00800484 	movi	r2,18
  80eb60:	18800005 	stb	r2,0(r3)
        return;
  80eb64:	00002006 	br	80ebe8 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb68:	0005303a 	rdctl	r2,status
  80eb6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb70:	e0fffa17 	ldw	r3,-24(fp)
  80eb74:	00bfff84 	movi	r2,-2
  80eb78:	1884703a 	and	r2,r3,r2
  80eb7c:	1001703a 	wrctl	status,r2
  
  return context;
  80eb80:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80eb84:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80eb88:	e13ffe17 	ldw	r4,-8(fp)
  80eb8c:	080c6c40 	call	80c6c4 <OS_StrLen>
  80eb90:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80eb94:	e0bffc03 	ldbu	r2,-16(fp)
  80eb98:	10800830 	cmpltui	r2,r2,32
  80eb9c:	1000081e 	bne	r2,zero,80ebc0 <OSMemNameSet+0xe4>
  80eba0:	e0bffb17 	ldw	r2,-20(fp)
  80eba4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eba8:	e0bff917 	ldw	r2,-28(fp)
  80ebac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80ebb0:	e0ffff17 	ldw	r3,-4(fp)
  80ebb4:	008018c4 	movi	r2,99
  80ebb8:	18800005 	stb	r2,0(r3)
        return;
  80ebbc:	00000a06 	br	80ebe8 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80ebc0:	e0bffd17 	ldw	r2,-12(fp)
  80ebc4:	11000504 	addi	r4,r2,20
  80ebc8:	e17ffe17 	ldw	r5,-8(fp)
  80ebcc:	080c6440 	call	80c644 <OS_StrCopy>
  80ebd0:	e0bffb17 	ldw	r2,-20(fp)
  80ebd4:	e0bff815 	stw	r2,-32(fp)
  80ebd8:	e0bff817 	ldw	r2,-32(fp)
  80ebdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ebe0:	e0bfff17 	ldw	r2,-4(fp)
  80ebe4:	10000005 	stb	zero,0(r2)
}
  80ebe8:	e037883a 	mov	sp,fp
  80ebec:	dfc00117 	ldw	ra,4(sp)
  80ebf0:	df000017 	ldw	fp,0(sp)
  80ebf4:	dec00204 	addi	sp,sp,8
  80ebf8:	f800283a 	ret

0080ebfc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80ebfc:	defff804 	addi	sp,sp,-32
  80ec00:	df000715 	stw	fp,28(sp)
  80ec04:	df000704 	addi	fp,sp,28
  80ec08:	e13ffd15 	stw	r4,-12(fp)
  80ec0c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ec10:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80ec14:	e0bffd17 	ldw	r2,-12(fp)
  80ec18:	1004c03a 	cmpne	r2,r2,zero
  80ec1c:	1000031e 	bne	r2,zero,80ec2c <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80ec20:	00801804 	movi	r2,96
  80ec24:	e0bfff15 	stw	r2,-4(fp)
  80ec28:	00002b06 	br	80ecd8 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  80ec2c:	e0bffe17 	ldw	r2,-8(fp)
  80ec30:	1004c03a 	cmpne	r2,r2,zero
  80ec34:	1000031e 	bne	r2,zero,80ec44 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  80ec38:	008017c4 	movi	r2,95
  80ec3c:	e0bfff15 	stw	r2,-4(fp)
  80ec40:	00002506 	br	80ecd8 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec44:	0005303a 	rdctl	r2,status
  80ec48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec4c:	e0fffb17 	ldw	r3,-20(fp)
  80ec50:	00bfff84 	movi	r2,-2
  80ec54:	1884703a 	and	r2,r3,r2
  80ec58:	1001703a 	wrctl	status,r2
  
  return context;
  80ec5c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80ec60:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  80ec64:	e0bffd17 	ldw	r2,-12(fp)
  80ec68:	10c00417 	ldw	r3,16(r2)
  80ec6c:	e0bffd17 	ldw	r2,-12(fp)
  80ec70:	10800317 	ldw	r2,12(r2)
  80ec74:	18800736 	bltu	r3,r2,80ec94 <OSMemPut+0x98>
  80ec78:	e0bffc17 	ldw	r2,-16(fp)
  80ec7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ec80:	e0bffa17 	ldw	r2,-24(fp)
  80ec84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80ec88:	00801784 	movi	r2,94
  80ec8c:	e0bfff15 	stw	r2,-4(fp)
  80ec90:	00001106 	br	80ecd8 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  80ec94:	e0fffe17 	ldw	r3,-8(fp)
  80ec98:	e0bffd17 	ldw	r2,-12(fp)
  80ec9c:	10800117 	ldw	r2,4(r2)
  80eca0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  80eca4:	e0fffd17 	ldw	r3,-12(fp)
  80eca8:	e0bffe17 	ldw	r2,-8(fp)
  80ecac:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80ecb0:	e0bffd17 	ldw	r2,-12(fp)
  80ecb4:	10800417 	ldw	r2,16(r2)
  80ecb8:	10c00044 	addi	r3,r2,1
  80ecbc:	e0bffd17 	ldw	r2,-12(fp)
  80ecc0:	10c00415 	stw	r3,16(r2)
  80ecc4:	e0bffc17 	ldw	r2,-16(fp)
  80ecc8:	e0bff915 	stw	r2,-28(fp)
  80eccc:	e0bff917 	ldw	r2,-28(fp)
  80ecd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  80ecd4:	e03fff15 	stw	zero,-4(fp)
  80ecd8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ecdc:	e037883a 	mov	sp,fp
  80ece0:	df000017 	ldw	fp,0(sp)
  80ece4:	dec00104 	addi	sp,sp,4
  80ece8:	f800283a 	ret

0080ecec <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80ecec:	defff904 	addi	sp,sp,-28
  80ecf0:	df000615 	stw	fp,24(sp)
  80ecf4:	df000604 	addi	fp,sp,24
  80ecf8:	e13ffd15 	stw	r4,-12(fp)
  80ecfc:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ed00:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80ed04:	e0bffd17 	ldw	r2,-12(fp)
  80ed08:	1004c03a 	cmpne	r2,r2,zero
  80ed0c:	1000031e 	bne	r2,zero,80ed1c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80ed10:	00801804 	movi	r2,96
  80ed14:	e0bfff15 	stw	r2,-4(fp)
  80ed18:	00002e06 	br	80edd4 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80ed1c:	e0bffe17 	ldw	r2,-8(fp)
  80ed20:	1004c03a 	cmpne	r2,r2,zero
  80ed24:	1000031e 	bne	r2,zero,80ed34 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  80ed28:	00801844 	movi	r2,97
  80ed2c:	e0bfff15 	stw	r2,-4(fp)
  80ed30:	00002806 	br	80edd4 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed34:	0005303a 	rdctl	r2,status
  80ed38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed3c:	e0fffb17 	ldw	r3,-20(fp)
  80ed40:	00bfff84 	movi	r2,-2
  80ed44:	1884703a 	and	r2,r3,r2
  80ed48:	1001703a 	wrctl	status,r2
  
  return context;
  80ed4c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80ed50:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80ed54:	e0bffd17 	ldw	r2,-12(fp)
  80ed58:	10c00017 	ldw	r3,0(r2)
  80ed5c:	e0bffe17 	ldw	r2,-8(fp)
  80ed60:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80ed64:	e0bffd17 	ldw	r2,-12(fp)
  80ed68:	10c00117 	ldw	r3,4(r2)
  80ed6c:	e0bffe17 	ldw	r2,-8(fp)
  80ed70:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80ed74:	e0bffd17 	ldw	r2,-12(fp)
  80ed78:	10c00217 	ldw	r3,8(r2)
  80ed7c:	e0bffe17 	ldw	r2,-8(fp)
  80ed80:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80ed84:	e0bffd17 	ldw	r2,-12(fp)
  80ed88:	10c00317 	ldw	r3,12(r2)
  80ed8c:	e0bffe17 	ldw	r2,-8(fp)
  80ed90:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80ed94:	e0bffd17 	ldw	r2,-12(fp)
  80ed98:	10c00417 	ldw	r3,16(r2)
  80ed9c:	e0bffe17 	ldw	r2,-8(fp)
  80eda0:	10c00415 	stw	r3,16(r2)
  80eda4:	e0bffc17 	ldw	r2,-16(fp)
  80eda8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edac:	e0bffa17 	ldw	r2,-24(fp)
  80edb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80edb4:	e0bffe17 	ldw	r2,-8(fp)
  80edb8:	10c00317 	ldw	r3,12(r2)
  80edbc:	e0bffe17 	ldw	r2,-8(fp)
  80edc0:	10800417 	ldw	r2,16(r2)
  80edc4:	1887c83a 	sub	r3,r3,r2
  80edc8:	e0bffe17 	ldw	r2,-8(fp)
  80edcc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  80edd0:	e03fff15 	stw	zero,-4(fp)
  80edd4:	e0bfff17 	ldw	r2,-4(fp)
}
  80edd8:	e037883a 	mov	sp,fp
  80eddc:	df000017 	ldw	fp,0(sp)
  80ede0:	dec00104 	addi	sp,sp,4
  80ede4:	f800283a 	ret

0080ede8 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80ede8:	defffc04 	addi	sp,sp,-16
  80edec:	dfc00315 	stw	ra,12(sp)
  80edf0:	df000215 	stw	fp,8(sp)
  80edf4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80edf8:	010020b4 	movhi	r4,130
  80edfc:	212fa804 	addi	r4,r4,-16736
  80ee00:	01430c04 	movi	r5,3120
  80ee04:	080c4400 	call	80c440 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80ee08:	008020b4 	movhi	r2,130
  80ee0c:	10afa804 	addi	r2,r2,-16736
  80ee10:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80ee14:	e03ffe0d 	sth	zero,-8(fp)
  80ee18:	00001306 	br	80ee68 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  80ee1c:	e0bffe0b 	ldhu	r2,-8(fp)
  80ee20:	10800d24 	muli	r2,r2,52
  80ee24:	1007883a 	mov	r3,r2
  80ee28:	008020b4 	movhi	r2,130
  80ee2c:	10afb504 	addi	r2,r2,-16684
  80ee30:	1887883a 	add	r3,r3,r2
  80ee34:	e0bfff17 	ldw	r2,-4(fp)
  80ee38:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80ee3c:	e0ffff17 	ldw	r3,-4(fp)
  80ee40:	00800fc4 	movi	r2,63
  80ee44:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  80ee48:	e0bfff17 	ldw	r2,-4(fp)
  80ee4c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  80ee50:	e0bfff17 	ldw	r2,-4(fp)
  80ee54:	10800d04 	addi	r2,r2,52
  80ee58:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80ee5c:	e0bffe0b 	ldhu	r2,-8(fp)
  80ee60:	10800044 	addi	r2,r2,1
  80ee64:	e0bffe0d 	sth	r2,-8(fp)
  80ee68:	e0bffe0b 	ldhu	r2,-8(fp)
  80ee6c:	10800ef0 	cmpltui	r2,r2,59
  80ee70:	103fea1e 	bne	r2,zero,80ee1c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  80ee74:	e0bfff17 	ldw	r2,-4(fp)
  80ee78:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80ee7c:	e0ffff17 	ldw	r3,-4(fp)
  80ee80:	00800fc4 	movi	r2,63
  80ee84:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  80ee88:	e0bfff17 	ldw	r2,-4(fp)
  80ee8c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  80ee90:	00c020b4 	movhi	r3,130
  80ee94:	18e6b404 	addi	r3,r3,-25904
  80ee98:	008020b4 	movhi	r2,130
  80ee9c:	10afa804 	addi	r2,r2,-16736
  80eea0:	18800015 	stw	r2,0(r3)
#endif
}
  80eea4:	e037883a 	mov	sp,fp
  80eea8:	dfc00117 	ldw	ra,4(sp)
  80eeac:	df000017 	ldw	fp,0(sp)
  80eeb0:	dec00204 	addi	sp,sp,8
  80eeb4:	f800283a 	ret

0080eeb8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80eeb8:	defff704 	addi	sp,sp,-36
  80eebc:	df000815 	stw	fp,32(sp)
  80eec0:	df000804 	addi	fp,sp,32
  80eec4:	e13ffd15 	stw	r4,-12(fp)
  80eec8:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80eecc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80eed0:	e0bffe17 	ldw	r2,-8(fp)
  80eed4:	1004c03a 	cmpne	r2,r2,zero
  80eed8:	1000021e 	bne	r2,zero,80eee4 <OSQAccept+0x2c>
        return ((void *)0);
  80eedc:	e03fff15 	stw	zero,-4(fp)
  80eee0:	00004506 	br	80eff8 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80eee4:	e0bffd17 	ldw	r2,-12(fp)
  80eee8:	1004c03a 	cmpne	r2,r2,zero
  80eeec:	1000051e 	bne	r2,zero,80ef04 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80eef0:	e0fffe17 	ldw	r3,-8(fp)
  80eef4:	00800104 	movi	r2,4
  80eef8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80eefc:	e03fff15 	stw	zero,-4(fp)
  80ef00:	00003d06 	br	80eff8 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80ef04:	e0bffd17 	ldw	r2,-12(fp)
  80ef08:	10800003 	ldbu	r2,0(r2)
  80ef0c:	10803fcc 	andi	r2,r2,255
  80ef10:	108000a0 	cmpeqi	r2,r2,2
  80ef14:	1000051e 	bne	r2,zero,80ef2c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80ef18:	e0fffe17 	ldw	r3,-8(fp)
  80ef1c:	00800044 	movi	r2,1
  80ef20:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80ef24:	e03fff15 	stw	zero,-4(fp)
  80ef28:	00003306 	br	80eff8 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef2c:	0005303a 	rdctl	r2,status
  80ef30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef34:	e0fff917 	ldw	r3,-28(fp)
  80ef38:	00bfff84 	movi	r2,-2
  80ef3c:	1884703a 	and	r2,r3,r2
  80ef40:	1001703a 	wrctl	status,r2
  
  return context;
  80ef44:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80ef48:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80ef4c:	e0bffd17 	ldw	r2,-12(fp)
  80ef50:	10800117 	ldw	r2,4(r2)
  80ef54:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80ef58:	e0bffb17 	ldw	r2,-20(fp)
  80ef5c:	1080058b 	ldhu	r2,22(r2)
  80ef60:	10bfffcc 	andi	r2,r2,65535
  80ef64:	1005003a 	cmpeq	r2,r2,zero
  80ef68:	1000191e 	bne	r2,zero,80efd0 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80ef6c:	e0bffb17 	ldw	r2,-20(fp)
  80ef70:	10c00417 	ldw	r3,16(r2)
  80ef74:	18800017 	ldw	r2,0(r3)
  80ef78:	e0bffc15 	stw	r2,-16(fp)
  80ef7c:	18c00104 	addi	r3,r3,4
  80ef80:	e0bffb17 	ldw	r2,-20(fp)
  80ef84:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80ef88:	e0bffb17 	ldw	r2,-20(fp)
  80ef8c:	1080058b 	ldhu	r2,22(r2)
  80ef90:	10bfffc4 	addi	r2,r2,-1
  80ef94:	1007883a 	mov	r3,r2
  80ef98:	e0bffb17 	ldw	r2,-20(fp)
  80ef9c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80efa0:	e0bffb17 	ldw	r2,-20(fp)
  80efa4:	10c00417 	ldw	r3,16(r2)
  80efa8:	e0bffb17 	ldw	r2,-20(fp)
  80efac:	10800217 	ldw	r2,8(r2)
  80efb0:	1880041e 	bne	r3,r2,80efc4 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  80efb4:	e0bffb17 	ldw	r2,-20(fp)
  80efb8:	10c00117 	ldw	r3,4(r2)
  80efbc:	e0bffb17 	ldw	r2,-20(fp)
  80efc0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80efc4:	e0bffe17 	ldw	r2,-8(fp)
  80efc8:	10000005 	stb	zero,0(r2)
  80efcc:	00000406 	br	80efe0 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  80efd0:	e0fffe17 	ldw	r3,-8(fp)
  80efd4:	008007c4 	movi	r2,31
  80efd8:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80efdc:	e03ffc15 	stw	zero,-16(fp)
  80efe0:	e0bffa17 	ldw	r2,-24(fp)
  80efe4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efe8:	e0bff817 	ldw	r2,-32(fp)
  80efec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  80eff0:	e0bffc17 	ldw	r2,-16(fp)
  80eff4:	e0bfff15 	stw	r2,-4(fp)
  80eff8:	e0bfff17 	ldw	r2,-4(fp)
}
  80effc:	e037883a 	mov	sp,fp
  80f000:	df000017 	ldw	fp,0(sp)
  80f004:	dec00104 	addi	sp,sp,4
  80f008:	f800283a 	ret

0080f00c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80f00c:	defff304 	addi	sp,sp,-52
  80f010:	dfc00c15 	stw	ra,48(sp)
  80f014:	df000b15 	stw	fp,44(sp)
  80f018:	df000b04 	addi	fp,sp,44
  80f01c:	e13ffd15 	stw	r4,-12(fp)
  80f020:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f024:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80f028:	008020b4 	movhi	r2,130
  80f02c:	10a6b904 	addi	r2,r2,-25884
  80f030:	10800003 	ldbu	r2,0(r2)
  80f034:	10803fcc 	andi	r2,r2,255
  80f038:	1005003a 	cmpeq	r2,r2,zero
  80f03c:	1000021e 	bne	r2,zero,80f048 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  80f040:	e03fff15 	stw	zero,-4(fp)
  80f044:	00007006 	br	80f208 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f048:	0005303a 	rdctl	r2,status
  80f04c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f050:	e0fff917 	ldw	r3,-28(fp)
  80f054:	00bfff84 	movi	r2,-2
  80f058:	1884703a 	and	r2,r3,r2
  80f05c:	1001703a 	wrctl	status,r2
  
  return context;
  80f060:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f064:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80f068:	008020b4 	movhi	r2,130
  80f06c:	10a6b804 	addi	r2,r2,-25888
  80f070:	10800017 	ldw	r2,0(r2)
  80f074:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  80f078:	008020b4 	movhi	r2,130
  80f07c:	10a6b804 	addi	r2,r2,-25888
  80f080:	10800017 	ldw	r2,0(r2)
  80f084:	1005003a 	cmpeq	r2,r2,zero
  80f088:	1000081e 	bne	r2,zero,80f0ac <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80f08c:	008020b4 	movhi	r2,130
  80f090:	10a6b804 	addi	r2,r2,-25888
  80f094:	10800017 	ldw	r2,0(r2)
  80f098:	10800117 	ldw	r2,4(r2)
  80f09c:	1007883a 	mov	r3,r2
  80f0a0:	008020b4 	movhi	r2,130
  80f0a4:	10a6b804 	addi	r2,r2,-25888
  80f0a8:	10c00015 	stw	r3,0(r2)
  80f0ac:	e0bffa17 	ldw	r2,-24(fp)
  80f0b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f0b4:	e0bff817 	ldw	r2,-32(fp)
  80f0b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  80f0bc:	e0bffc17 	ldw	r2,-16(fp)
  80f0c0:	1005003a 	cmpeq	r2,r2,zero
  80f0c4:	10004e1e 	bne	r2,zero,80f200 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0c8:	0005303a 	rdctl	r2,status
  80f0cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0d0:	e0fff717 	ldw	r3,-36(fp)
  80f0d4:	00bfff84 	movi	r2,-2
  80f0d8:	1884703a 	and	r2,r3,r2
  80f0dc:	1001703a 	wrctl	status,r2
  
  return context;
  80f0e0:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  80f0e4:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80f0e8:	008020b4 	movhi	r2,130
  80f0ec:	10a6b604 	addi	r2,r2,-25896
  80f0f0:	10800017 	ldw	r2,0(r2)
  80f0f4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80f0f8:	e0bffb17 	ldw	r2,-20(fp)
  80f0fc:	1005003a 	cmpeq	r2,r2,zero
  80f100:	1000311e 	bne	r2,zero,80f1c8 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80f104:	008020b4 	movhi	r2,130
  80f108:	10a6b604 	addi	r2,r2,-25896
  80f10c:	10800017 	ldw	r2,0(r2)
  80f110:	10c00017 	ldw	r3,0(r2)
  80f114:	008020b4 	movhi	r2,130
  80f118:	10a6b604 	addi	r2,r2,-25896
  80f11c:	10c00015 	stw	r3,0(r2)
  80f120:	e0bffa17 	ldw	r2,-24(fp)
  80f124:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f128:	e0bff617 	ldw	r2,-40(fp)
  80f12c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  80f130:	e0fffb17 	ldw	r3,-20(fp)
  80f134:	e0bffd17 	ldw	r2,-12(fp)
  80f138:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  80f13c:	e0bffe0b 	ldhu	r2,-8(fp)
  80f140:	1085883a 	add	r2,r2,r2
  80f144:	1085883a 	add	r2,r2,r2
  80f148:	1007883a 	mov	r3,r2
  80f14c:	e0bffd17 	ldw	r2,-12(fp)
  80f150:	1887883a 	add	r3,r3,r2
  80f154:	e0bffb17 	ldw	r2,-20(fp)
  80f158:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80f15c:	e0fffb17 	ldw	r3,-20(fp)
  80f160:	e0bffd17 	ldw	r2,-12(fp)
  80f164:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  80f168:	e0fffb17 	ldw	r3,-20(fp)
  80f16c:	e0bffd17 	ldw	r2,-12(fp)
  80f170:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80f174:	e0fffb17 	ldw	r3,-20(fp)
  80f178:	e0bffe0b 	ldhu	r2,-8(fp)
  80f17c:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  80f180:	e0bffb17 	ldw	r2,-20(fp)
  80f184:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  80f188:	e0fffc17 	ldw	r3,-16(fp)
  80f18c:	00800084 	movi	r2,2
  80f190:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  80f194:	e0bffc17 	ldw	r2,-16(fp)
  80f198:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80f19c:	e0fffc17 	ldw	r3,-16(fp)
  80f1a0:	e0bffb17 	ldw	r2,-20(fp)
  80f1a4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  80f1a8:	e0fffc17 	ldw	r3,-16(fp)
  80f1ac:	00800fc4 	movi	r2,63
  80f1b0:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80f1b4:	e0bffc17 	ldw	r2,-16(fp)
  80f1b8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  80f1bc:	e13ffc17 	ldw	r4,-16(fp)
  80f1c0:	080c0740 	call	80c074 <OS_EventWaitListInit>
  80f1c4:	00000e06 	br	80f200 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  80f1c8:	008020b4 	movhi	r2,130
  80f1cc:	10a6b804 	addi	r2,r2,-25888
  80f1d0:	10c00017 	ldw	r3,0(r2)
  80f1d4:	e0bffc17 	ldw	r2,-16(fp)
  80f1d8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80f1dc:	00c020b4 	movhi	r3,130
  80f1e0:	18e6b804 	addi	r3,r3,-25888
  80f1e4:	e0bffc17 	ldw	r2,-16(fp)
  80f1e8:	18800015 	stw	r2,0(r3)
  80f1ec:	e0bffa17 	ldw	r2,-24(fp)
  80f1f0:	e0bff515 	stw	r2,-44(fp)
  80f1f4:	e0bff517 	ldw	r2,-44(fp)
  80f1f8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  80f1fc:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  80f200:	e0bffc17 	ldw	r2,-16(fp)
  80f204:	e0bfff15 	stw	r2,-4(fp)
  80f208:	e0bfff17 	ldw	r2,-4(fp)
}
  80f20c:	e037883a 	mov	sp,fp
  80f210:	dfc00117 	ldw	ra,4(sp)
  80f214:	df000017 	ldw	fp,0(sp)
  80f218:	dec00204 	addi	sp,sp,8
  80f21c:	f800283a 	ret

0080f220 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80f220:	defff004 	addi	sp,sp,-64
  80f224:	dfc00f15 	stw	ra,60(sp)
  80f228:	df000e15 	stw	fp,56(sp)
  80f22c:	df000e04 	addi	fp,sp,56
  80f230:	e13ffb15 	stw	r4,-20(fp)
  80f234:	e1bffd15 	stw	r6,-12(fp)
  80f238:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f23c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f240:	e0bffd17 	ldw	r2,-12(fp)
  80f244:	1004c03a 	cmpne	r2,r2,zero
  80f248:	1000031e 	bne	r2,zero,80f258 <OSQDel+0x38>
        return (pevent);
  80f24c:	e0bffb17 	ldw	r2,-20(fp)
  80f250:	e0bfff15 	stw	r2,-4(fp)
  80f254:	0000ac06 	br	80f508 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80f258:	e0bffb17 	ldw	r2,-20(fp)
  80f25c:	1004c03a 	cmpne	r2,r2,zero
  80f260:	1000061e 	bne	r2,zero,80f27c <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80f264:	e0fffd17 	ldw	r3,-12(fp)
  80f268:	00800104 	movi	r2,4
  80f26c:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f270:	e0fffb17 	ldw	r3,-20(fp)
  80f274:	e0ffff15 	stw	r3,-4(fp)
  80f278:	0000a306 	br	80f508 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80f27c:	e0bffb17 	ldw	r2,-20(fp)
  80f280:	10800003 	ldbu	r2,0(r2)
  80f284:	10803fcc 	andi	r2,r2,255
  80f288:	108000a0 	cmpeqi	r2,r2,2
  80f28c:	1000061e 	bne	r2,zero,80f2a8 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80f290:	e0fffd17 	ldw	r3,-12(fp)
  80f294:	00800044 	movi	r2,1
  80f298:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f29c:	e0bffb17 	ldw	r2,-20(fp)
  80f2a0:	e0bfff15 	stw	r2,-4(fp)
  80f2a4:	00009806 	br	80f508 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80f2a8:	008020b4 	movhi	r2,130
  80f2ac:	10a6b904 	addi	r2,r2,-25884
  80f2b0:	10800003 	ldbu	r2,0(r2)
  80f2b4:	10803fcc 	andi	r2,r2,255
  80f2b8:	1005003a 	cmpeq	r2,r2,zero
  80f2bc:	1000061e 	bne	r2,zero,80f2d8 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80f2c0:	e0fffd17 	ldw	r3,-12(fp)
  80f2c4:	008003c4 	movi	r2,15
  80f2c8:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f2cc:	e0fffb17 	ldw	r3,-20(fp)
  80f2d0:	e0ffff15 	stw	r3,-4(fp)
  80f2d4:	00008c06 	br	80f508 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2d8:	0005303a 	rdctl	r2,status
  80f2dc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f2e0:	e0fff617 	ldw	r3,-40(fp)
  80f2e4:	00bfff84 	movi	r2,-2
  80f2e8:	1884703a 	and	r2,r3,r2
  80f2ec:	1001703a 	wrctl	status,r2
  
  return context;
  80f2f0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80f2f4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80f2f8:	e0bffb17 	ldw	r2,-20(fp)
  80f2fc:	10800283 	ldbu	r2,10(r2)
  80f300:	10803fcc 	andi	r2,r2,255
  80f304:	1005003a 	cmpeq	r2,r2,zero
  80f308:	1000031e 	bne	r2,zero,80f318 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80f30c:	00800044 	movi	r2,1
  80f310:	e0bffa05 	stb	r2,-24(fp)
  80f314:	00000106 	br	80f31c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80f318:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80f31c:	e0bffc03 	ldbu	r2,-16(fp)
  80f320:	e0bffe15 	stw	r2,-8(fp)
  80f324:	e0fffe17 	ldw	r3,-8(fp)
  80f328:	1805003a 	cmpeq	r2,r3,zero
  80f32c:	1000041e 	bne	r2,zero,80f340 <OSQDel+0x120>
  80f330:	e0fffe17 	ldw	r3,-8(fp)
  80f334:	18800060 	cmpeqi	r2,r3,1
  80f338:	1000391e 	bne	r2,zero,80f420 <OSQDel+0x200>
  80f33c:	00006706 	br	80f4dc <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80f340:	e0bffa03 	ldbu	r2,-24(fp)
  80f344:	1004c03a 	cmpne	r2,r2,zero
  80f348:	1000261e 	bne	r2,zero,80f3e4 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80f34c:	e0fffb17 	ldw	r3,-20(fp)
  80f350:	00800fc4 	movi	r2,63
  80f354:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80f358:	e0bffb17 	ldw	r2,-20(fp)
  80f35c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  80f360:	e0bffb17 	ldw	r2,-20(fp)
  80f364:	10800117 	ldw	r2,4(r2)
  80f368:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  80f36c:	008020b4 	movhi	r2,130
  80f370:	10a6b604 	addi	r2,r2,-25896
  80f374:	10c00017 	ldw	r3,0(r2)
  80f378:	e0bff817 	ldw	r2,-32(fp)
  80f37c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  80f380:	00c020b4 	movhi	r3,130
  80f384:	18e6b604 	addi	r3,r3,-25896
  80f388:	e0bff817 	ldw	r2,-32(fp)
  80f38c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80f390:	e0bffb17 	ldw	r2,-20(fp)
  80f394:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80f398:	008020b4 	movhi	r2,130
  80f39c:	10a6b804 	addi	r2,r2,-25888
  80f3a0:	10c00017 	ldw	r3,0(r2)
  80f3a4:	e0bffb17 	ldw	r2,-20(fp)
  80f3a8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80f3ac:	e0bffb17 	ldw	r2,-20(fp)
  80f3b0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80f3b4:	00c020b4 	movhi	r3,130
  80f3b8:	18e6b804 	addi	r3,r3,-25888
  80f3bc:	e0bffb17 	ldw	r2,-20(fp)
  80f3c0:	18800015 	stw	r2,0(r3)
  80f3c4:	e0bff717 	ldw	r2,-36(fp)
  80f3c8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3cc:	e0bff517 	ldw	r2,-44(fp)
  80f3d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80f3d4:	e0bffd17 	ldw	r2,-12(fp)
  80f3d8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  80f3dc:	e03ff915 	stw	zero,-28(fp)
  80f3e0:	00004706 	br	80f500 <OSQDel+0x2e0>
  80f3e4:	e0bff717 	ldw	r2,-36(fp)
  80f3e8:	e0bff415 	stw	r2,-48(fp)
  80f3ec:	e0bff417 	ldw	r2,-48(fp)
  80f3f0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80f3f4:	e0fffd17 	ldw	r3,-12(fp)
  80f3f8:	00801244 	movi	r2,73
  80f3fc:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80f400:	e0bffb17 	ldw	r2,-20(fp)
  80f404:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80f408:	00003d06 	br	80f500 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  80f40c:	e13ffb17 	ldw	r4,-20(fp)
  80f410:	000b883a 	mov	r5,zero
  80f414:	01800104 	movi	r6,4
  80f418:	000f883a 	mov	r7,zero
  80f41c:	080bac00 	call	80bac0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80f420:	e0bffb17 	ldw	r2,-20(fp)
  80f424:	10800283 	ldbu	r2,10(r2)
  80f428:	10803fcc 	andi	r2,r2,255
  80f42c:	1004c03a 	cmpne	r2,r2,zero
  80f430:	103ff61e 	bne	r2,zero,80f40c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80f434:	e0fffb17 	ldw	r3,-20(fp)
  80f438:	00800fc4 	movi	r2,63
  80f43c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80f440:	e0bffb17 	ldw	r2,-20(fp)
  80f444:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80f448:	e0bffb17 	ldw	r2,-20(fp)
  80f44c:	10800117 	ldw	r2,4(r2)
  80f450:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80f454:	008020b4 	movhi	r2,130
  80f458:	10a6b604 	addi	r2,r2,-25896
  80f45c:	10c00017 	ldw	r3,0(r2)
  80f460:	e0bff817 	ldw	r2,-32(fp)
  80f464:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  80f468:	00c020b4 	movhi	r3,130
  80f46c:	18e6b604 	addi	r3,r3,-25896
  80f470:	e0bff817 	ldw	r2,-32(fp)
  80f474:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80f478:	e0bffb17 	ldw	r2,-20(fp)
  80f47c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80f480:	008020b4 	movhi	r2,130
  80f484:	10a6b804 	addi	r2,r2,-25888
  80f488:	10c00017 	ldw	r3,0(r2)
  80f48c:	e0bffb17 	ldw	r2,-20(fp)
  80f490:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80f494:	e0bffb17 	ldw	r2,-20(fp)
  80f498:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80f49c:	00c020b4 	movhi	r3,130
  80f4a0:	18e6b804 	addi	r3,r3,-25888
  80f4a4:	e0bffb17 	ldw	r2,-20(fp)
  80f4a8:	18800015 	stw	r2,0(r3)
  80f4ac:	e0bff717 	ldw	r2,-36(fp)
  80f4b0:	e0bff315 	stw	r2,-52(fp)
  80f4b4:	e0bff317 	ldw	r2,-52(fp)
  80f4b8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80f4bc:	e0bffa03 	ldbu	r2,-24(fp)
  80f4c0:	10800058 	cmpnei	r2,r2,1
  80f4c4:	1000011e 	bne	r2,zero,80f4cc <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80f4c8:	080c5000 	call	80c500 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80f4cc:	e0bffd17 	ldw	r2,-12(fp)
  80f4d0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80f4d4:	e03ff915 	stw	zero,-28(fp)
             break;
  80f4d8:	00000906 	br	80f500 <OSQDel+0x2e0>
  80f4dc:	e0bff717 	ldw	r2,-36(fp)
  80f4e0:	e0bff215 	stw	r2,-56(fp)
  80f4e4:	e0bff217 	ldw	r2,-56(fp)
  80f4e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80f4ec:	e0fffd17 	ldw	r3,-12(fp)
  80f4f0:	008001c4 	movi	r2,7
  80f4f4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80f4f8:	e0bffb17 	ldw	r2,-20(fp)
  80f4fc:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80f500:	e0bff917 	ldw	r2,-28(fp)
  80f504:	e0bfff15 	stw	r2,-4(fp)
  80f508:	e0bfff17 	ldw	r2,-4(fp)
}
  80f50c:	e037883a 	mov	sp,fp
  80f510:	dfc00117 	ldw	ra,4(sp)
  80f514:	df000017 	ldw	fp,0(sp)
  80f518:	dec00204 	addi	sp,sp,8
  80f51c:	f800283a 	ret

0080f520 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  80f520:	defff904 	addi	sp,sp,-28
  80f524:	df000615 	stw	fp,24(sp)
  80f528:	df000604 	addi	fp,sp,24
  80f52c:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80f530:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80f534:	e0bffe17 	ldw	r2,-8(fp)
  80f538:	1004c03a 	cmpne	r2,r2,zero
  80f53c:	1000031e 	bne	r2,zero,80f54c <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80f540:	00800104 	movi	r2,4
  80f544:	e0bfff15 	stw	r2,-4(fp)
  80f548:	00002206 	br	80f5d4 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80f54c:	e0bffe17 	ldw	r2,-8(fp)
  80f550:	10800003 	ldbu	r2,0(r2)
  80f554:	10803fcc 	andi	r2,r2,255
  80f558:	108000a0 	cmpeqi	r2,r2,2
  80f55c:	1000031e 	bne	r2,zero,80f56c <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  80f560:	00800044 	movi	r2,1
  80f564:	e0bfff15 	stw	r2,-4(fp)
  80f568:	00001a06 	br	80f5d4 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f56c:	0005303a 	rdctl	r2,status
  80f570:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f574:	e0fffb17 	ldw	r3,-20(fp)
  80f578:	00bfff84 	movi	r2,-2
  80f57c:	1884703a 	and	r2,r3,r2
  80f580:	1001703a 	wrctl	status,r2
  
  return context;
  80f584:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f588:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  80f58c:	e0bffe17 	ldw	r2,-8(fp)
  80f590:	10800117 	ldw	r2,4(r2)
  80f594:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  80f598:	e0bffd17 	ldw	r2,-12(fp)
  80f59c:	10c00117 	ldw	r3,4(r2)
  80f5a0:	e0bffd17 	ldw	r2,-12(fp)
  80f5a4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80f5a8:	e0bffd17 	ldw	r2,-12(fp)
  80f5ac:	10c00117 	ldw	r3,4(r2)
  80f5b0:	e0bffd17 	ldw	r2,-12(fp)
  80f5b4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80f5b8:	e0bffd17 	ldw	r2,-12(fp)
  80f5bc:	1000058d 	sth	zero,22(r2)
  80f5c0:	e0bffc17 	ldw	r2,-16(fp)
  80f5c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f5c8:	e0bffa17 	ldw	r2,-24(fp)
  80f5cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80f5d0:	e03fff15 	stw	zero,-4(fp)
  80f5d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f5d8:	e037883a 	mov	sp,fp
  80f5dc:	df000017 	ldw	fp,0(sp)
  80f5e0:	dec00104 	addi	sp,sp,4
  80f5e4:	f800283a 	ret

0080f5e8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80f5e8:	defff104 	addi	sp,sp,-60
  80f5ec:	dfc00e15 	stw	ra,56(sp)
  80f5f0:	df000d15 	stw	fp,52(sp)
  80f5f4:	df000d04 	addi	fp,sp,52
  80f5f8:	e13ffb15 	stw	r4,-20(fp)
  80f5fc:	e1bffd15 	stw	r6,-12(fp)
  80f600:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f604:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f608:	e0bffd17 	ldw	r2,-12(fp)
  80f60c:	1004c03a 	cmpne	r2,r2,zero
  80f610:	1000021e 	bne	r2,zero,80f61c <OSQPend+0x34>
        return ((void *)0);
  80f614:	e03fff15 	stw	zero,-4(fp)
  80f618:	0000b506 	br	80f8f0 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80f61c:	e0bffb17 	ldw	r2,-20(fp)
  80f620:	1004c03a 	cmpne	r2,r2,zero
  80f624:	1000051e 	bne	r2,zero,80f63c <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80f628:	e0fffd17 	ldw	r3,-12(fp)
  80f62c:	00800104 	movi	r2,4
  80f630:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f634:	e03fff15 	stw	zero,-4(fp)
  80f638:	0000ad06 	br	80f8f0 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80f63c:	e0bffb17 	ldw	r2,-20(fp)
  80f640:	10800003 	ldbu	r2,0(r2)
  80f644:	10803fcc 	andi	r2,r2,255
  80f648:	108000a0 	cmpeqi	r2,r2,2
  80f64c:	1000051e 	bne	r2,zero,80f664 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80f650:	e0fffd17 	ldw	r3,-12(fp)
  80f654:	00800044 	movi	r2,1
  80f658:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f65c:	e03fff15 	stw	zero,-4(fp)
  80f660:	0000a306 	br	80f8f0 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80f664:	008020b4 	movhi	r2,130
  80f668:	10a6b904 	addi	r2,r2,-25884
  80f66c:	10800003 	ldbu	r2,0(r2)
  80f670:	10803fcc 	andi	r2,r2,255
  80f674:	1005003a 	cmpeq	r2,r2,zero
  80f678:	1000051e 	bne	r2,zero,80f690 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  80f67c:	e0fffd17 	ldw	r3,-12(fp)
  80f680:	00800084 	movi	r2,2
  80f684:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f688:	e03fff15 	stw	zero,-4(fp)
  80f68c:	00009806 	br	80f8f0 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  80f690:	008020b4 	movhi	r2,130
  80f694:	10a6ab04 	addi	r2,r2,-25940
  80f698:	10800003 	ldbu	r2,0(r2)
  80f69c:	10803fcc 	andi	r2,r2,255
  80f6a0:	1005003a 	cmpeq	r2,r2,zero
  80f6a4:	1000051e 	bne	r2,zero,80f6bc <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80f6a8:	e0fffd17 	ldw	r3,-12(fp)
  80f6ac:	00800344 	movi	r2,13
  80f6b0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f6b4:	e03fff15 	stw	zero,-4(fp)
  80f6b8:	00008d06 	br	80f8f0 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6bc:	0005303a 	rdctl	r2,status
  80f6c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6c4:	e0fff717 	ldw	r3,-36(fp)
  80f6c8:	00bfff84 	movi	r2,-2
  80f6cc:	1884703a 	and	r2,r3,r2
  80f6d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f6d4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80f6d8:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80f6dc:	e0bffb17 	ldw	r2,-20(fp)
  80f6e0:	10800117 	ldw	r2,4(r2)
  80f6e4:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80f6e8:	e0bff917 	ldw	r2,-28(fp)
  80f6ec:	1080058b 	ldhu	r2,22(r2)
  80f6f0:	10bfffcc 	andi	r2,r2,65535
  80f6f4:	1005003a 	cmpeq	r2,r2,zero
  80f6f8:	10001f1e 	bne	r2,zero,80f778 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80f6fc:	e0bff917 	ldw	r2,-28(fp)
  80f700:	10c00417 	ldw	r3,16(r2)
  80f704:	18800017 	ldw	r2,0(r3)
  80f708:	e0bffa15 	stw	r2,-24(fp)
  80f70c:	18c00104 	addi	r3,r3,4
  80f710:	e0bff917 	ldw	r2,-28(fp)
  80f714:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80f718:	e0bff917 	ldw	r2,-28(fp)
  80f71c:	1080058b 	ldhu	r2,22(r2)
  80f720:	10bfffc4 	addi	r2,r2,-1
  80f724:	1007883a 	mov	r3,r2
  80f728:	e0bff917 	ldw	r2,-28(fp)
  80f72c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80f730:	e0bff917 	ldw	r2,-28(fp)
  80f734:	10c00417 	ldw	r3,16(r2)
  80f738:	e0bff917 	ldw	r2,-28(fp)
  80f73c:	10800217 	ldw	r2,8(r2)
  80f740:	1880041e 	bne	r3,r2,80f754 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80f744:	e0bff917 	ldw	r2,-28(fp)
  80f748:	10c00117 	ldw	r3,4(r2)
  80f74c:	e0bff917 	ldw	r2,-28(fp)
  80f750:	10c00415 	stw	r3,16(r2)
  80f754:	e0bff817 	ldw	r2,-32(fp)
  80f758:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f75c:	e0bff617 	ldw	r2,-40(fp)
  80f760:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80f764:	e0bffd17 	ldw	r2,-12(fp)
  80f768:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  80f76c:	e0bffa17 	ldw	r2,-24(fp)
  80f770:	e0bfff15 	stw	r2,-4(fp)
  80f774:	00005e06 	br	80f8f0 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  80f778:	008020b4 	movhi	r2,130
  80f77c:	10a6ba04 	addi	r2,r2,-25880
  80f780:	10c00017 	ldw	r3,0(r2)
  80f784:	008020b4 	movhi	r2,130
  80f788:	10a6ba04 	addi	r2,r2,-25880
  80f78c:	10800017 	ldw	r2,0(r2)
  80f790:	10800c03 	ldbu	r2,48(r2)
  80f794:	10800114 	ori	r2,r2,4
  80f798:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80f79c:	008020b4 	movhi	r2,130
  80f7a0:	10a6ba04 	addi	r2,r2,-25880
  80f7a4:	10800017 	ldw	r2,0(r2)
  80f7a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  80f7ac:	008020b4 	movhi	r2,130
  80f7b0:	10a6ba04 	addi	r2,r2,-25880
  80f7b4:	10c00017 	ldw	r3,0(r2)
  80f7b8:	e0bffc0b 	ldhu	r2,-16(fp)
  80f7bc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  80f7c0:	e13ffb17 	ldw	r4,-20(fp)
  80f7c4:	080bc540 	call	80bc54 <OS_EventTaskWait>
  80f7c8:	e0bff817 	ldw	r2,-32(fp)
  80f7cc:	e0bff515 	stw	r2,-44(fp)
  80f7d0:	e0bff517 	ldw	r2,-44(fp)
  80f7d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  80f7d8:	080c5000 	call	80c500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f7dc:	0005303a 	rdctl	r2,status
  80f7e0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f7e4:	e0fff417 	ldw	r3,-48(fp)
  80f7e8:	00bfff84 	movi	r2,-2
  80f7ec:	1884703a 	and	r2,r3,r2
  80f7f0:	1001703a 	wrctl	status,r2
  
  return context;
  80f7f4:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  80f7f8:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80f7fc:	008020b4 	movhi	r2,130
  80f800:	10a6ba04 	addi	r2,r2,-25880
  80f804:	10800017 	ldw	r2,0(r2)
  80f808:	10800c43 	ldbu	r2,49(r2)
  80f80c:	10803fcc 	andi	r2,r2,255
  80f810:	e0bffe15 	stw	r2,-8(fp)
  80f814:	e0fffe17 	ldw	r3,-8(fp)
  80f818:	1805003a 	cmpeq	r2,r3,zero
  80f81c:	1000041e 	bne	r2,zero,80f830 <OSQPend+0x248>
  80f820:	e0fffe17 	ldw	r3,-8(fp)
  80f824:	188000a0 	cmpeqi	r2,r3,2
  80f828:	1000091e 	bne	r2,zero,80f850 <OSQPend+0x268>
  80f82c:	00000d06 	br	80f864 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  80f830:	008020b4 	movhi	r2,130
  80f834:	10a6ba04 	addi	r2,r2,-25880
  80f838:	10800017 	ldw	r2,0(r2)
  80f83c:	10800917 	ldw	r2,36(r2)
  80f840:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  80f844:	e0bffd17 	ldw	r2,-12(fp)
  80f848:	10000005 	stb	zero,0(r2)
             break;
  80f84c:	00000e06 	br	80f888 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  80f850:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80f854:	e0fffd17 	ldw	r3,-12(fp)
  80f858:	00800384 	movi	r2,14
  80f85c:	18800005 	stb	r2,0(r3)
             break;
  80f860:	00000906 	br	80f888 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  80f864:	008020b4 	movhi	r2,130
  80f868:	10a6ba04 	addi	r2,r2,-25880
  80f86c:	11000017 	ldw	r4,0(r2)
  80f870:	e17ffb17 	ldw	r5,-20(fp)
  80f874:	080beb80 	call	80beb8 <OS_EventTaskRemove>
             pmsg = (void *)0;
  80f878:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80f87c:	e0fffd17 	ldw	r3,-12(fp)
  80f880:	00800284 	movi	r2,10
  80f884:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80f888:	008020b4 	movhi	r2,130
  80f88c:	10a6ba04 	addi	r2,r2,-25880
  80f890:	10800017 	ldw	r2,0(r2)
  80f894:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80f898:	008020b4 	movhi	r2,130
  80f89c:	10a6ba04 	addi	r2,r2,-25880
  80f8a0:	10800017 	ldw	r2,0(r2)
  80f8a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80f8a8:	008020b4 	movhi	r2,130
  80f8ac:	10a6ba04 	addi	r2,r2,-25880
  80f8b0:	10800017 	ldw	r2,0(r2)
  80f8b4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80f8b8:	008020b4 	movhi	r2,130
  80f8bc:	10a6ba04 	addi	r2,r2,-25880
  80f8c0:	10800017 	ldw	r2,0(r2)
  80f8c4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  80f8c8:	008020b4 	movhi	r2,130
  80f8cc:	10a6ba04 	addi	r2,r2,-25880
  80f8d0:	10800017 	ldw	r2,0(r2)
  80f8d4:	10000915 	stw	zero,36(r2)
  80f8d8:	e0bff817 	ldw	r2,-32(fp)
  80f8dc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f8e0:	e0bff317 	ldw	r2,-52(fp)
  80f8e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  80f8e8:	e0bffa17 	ldw	r2,-24(fp)
  80f8ec:	e0bfff15 	stw	r2,-4(fp)
  80f8f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80f8f4:	e037883a 	mov	sp,fp
  80f8f8:	dfc00117 	ldw	ra,4(sp)
  80f8fc:	df000017 	ldw	fp,0(sp)
  80f900:	dec00204 	addi	sp,sp,8
  80f904:	f800283a 	ret

0080f908 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80f908:	defff504 	addi	sp,sp,-44
  80f90c:	dfc00a15 	stw	ra,40(sp)
  80f910:	df000915 	stw	fp,36(sp)
  80f914:	df000904 	addi	fp,sp,36
  80f918:	e13ffc15 	stw	r4,-16(fp)
  80f91c:	e1bffe15 	stw	r6,-8(fp)
  80f920:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f924:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f928:	e0bffe17 	ldw	r2,-8(fp)
  80f92c:	1004c03a 	cmpne	r2,r2,zero
  80f930:	1000021e 	bne	r2,zero,80f93c <OSQPendAbort+0x34>
        return (0);
  80f934:	e03fff15 	stw	zero,-4(fp)
  80f938:	00004c06 	br	80fa6c <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80f93c:	e0bffc17 	ldw	r2,-16(fp)
  80f940:	1004c03a 	cmpne	r2,r2,zero
  80f944:	1000051e 	bne	r2,zero,80f95c <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80f948:	e0fffe17 	ldw	r3,-8(fp)
  80f94c:	00800104 	movi	r2,4
  80f950:	18800005 	stb	r2,0(r3)
        return (0);
  80f954:	e03fff15 	stw	zero,-4(fp)
  80f958:	00004406 	br	80fa6c <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80f95c:	e0bffc17 	ldw	r2,-16(fp)
  80f960:	10800003 	ldbu	r2,0(r2)
  80f964:	10803fcc 	andi	r2,r2,255
  80f968:	108000a0 	cmpeqi	r2,r2,2
  80f96c:	1000051e 	bne	r2,zero,80f984 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80f970:	e0fffe17 	ldw	r3,-8(fp)
  80f974:	00800044 	movi	r2,1
  80f978:	18800005 	stb	r2,0(r3)
        return (0);
  80f97c:	e03fff15 	stw	zero,-4(fp)
  80f980:	00003a06 	br	80fa6c <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f984:	0005303a 	rdctl	r2,status
  80f988:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f98c:	e0fff917 	ldw	r3,-28(fp)
  80f990:	00bfff84 	movi	r2,-2
  80f994:	1884703a 	and	r2,r3,r2
  80f998:	1001703a 	wrctl	status,r2
  
  return context;
  80f99c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f9a0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  80f9a4:	e0bffc17 	ldw	r2,-16(fp)
  80f9a8:	10800283 	ldbu	r2,10(r2)
  80f9ac:	10803fcc 	andi	r2,r2,255
  80f9b0:	1005003a 	cmpeq	r2,r2,zero
  80f9b4:	1000261e 	bne	r2,zero,80fa50 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  80f9b8:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80f9bc:	e0bffd03 	ldbu	r2,-12(fp)
  80f9c0:	10800060 	cmpeqi	r2,r2,1
  80f9c4:	1000091e 	bne	r2,zero,80f9ec <OSQPendAbort+0xe4>
  80f9c8:	00000e06 	br	80fa04 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80f9cc:	e13ffc17 	ldw	r4,-16(fp)
  80f9d0:	000b883a 	mov	r5,zero
  80f9d4:	01800104 	movi	r6,4
  80f9d8:	01c00084 	movi	r7,2
  80f9dc:	080bac00 	call	80bac0 <OS_EventTaskRdy>
                     nbr_tasks++;
  80f9e0:	e0bffb03 	ldbu	r2,-20(fp)
  80f9e4:	10800044 	addi	r2,r2,1
  80f9e8:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  80f9ec:	e0bffc17 	ldw	r2,-16(fp)
  80f9f0:	10800283 	ldbu	r2,10(r2)
  80f9f4:	10803fcc 	andi	r2,r2,255
  80f9f8:	1004c03a 	cmpne	r2,r2,zero
  80f9fc:	103ff31e 	bne	r2,zero,80f9cc <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80fa00:	00000806 	br	80fa24 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80fa04:	e13ffc17 	ldw	r4,-16(fp)
  80fa08:	000b883a 	mov	r5,zero
  80fa0c:	01800104 	movi	r6,4
  80fa10:	01c00084 	movi	r7,2
  80fa14:	080bac00 	call	80bac0 <OS_EventTaskRdy>
                 nbr_tasks++;
  80fa18:	e0bffb03 	ldbu	r2,-20(fp)
  80fa1c:	10800044 	addi	r2,r2,1
  80fa20:	e0bffb05 	stb	r2,-20(fp)
  80fa24:	e0bffa17 	ldw	r2,-24(fp)
  80fa28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa2c:	e0bff817 	ldw	r2,-32(fp)
  80fa30:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  80fa34:	080c5000 	call	80c500 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80fa38:	e0fffe17 	ldw	r3,-8(fp)
  80fa3c:	00800384 	movi	r2,14
  80fa40:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80fa44:	e0bffb03 	ldbu	r2,-20(fp)
  80fa48:	e0bfff15 	stw	r2,-4(fp)
  80fa4c:	00000706 	br	80fa6c <OSQPendAbort+0x164>
  80fa50:	e0bffa17 	ldw	r2,-24(fp)
  80fa54:	e0bff715 	stw	r2,-36(fp)
  80fa58:	e0bff717 	ldw	r2,-36(fp)
  80fa5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80fa60:	e0bffe17 	ldw	r2,-8(fp)
  80fa64:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  80fa68:	e03fff15 	stw	zero,-4(fp)
  80fa6c:	e0bfff17 	ldw	r2,-4(fp)
}
  80fa70:	e037883a 	mov	sp,fp
  80fa74:	dfc00117 	ldw	ra,4(sp)
  80fa78:	df000017 	ldw	fp,0(sp)
  80fa7c:	dec00204 	addi	sp,sp,8
  80fa80:	f800283a 	ret

0080fa84 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  80fa84:	defff504 	addi	sp,sp,-44
  80fa88:	dfc00a15 	stw	ra,40(sp)
  80fa8c:	df000915 	stw	fp,36(sp)
  80fa90:	df000904 	addi	fp,sp,36
  80fa94:	e13ffd15 	stw	r4,-12(fp)
  80fa98:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80fa9c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80faa0:	e0bffd17 	ldw	r2,-12(fp)
  80faa4:	1004c03a 	cmpne	r2,r2,zero
  80faa8:	1000031e 	bne	r2,zero,80fab8 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  80faac:	00800104 	movi	r2,4
  80fab0:	e0bfff15 	stw	r2,-4(fp)
  80fab4:	00004d06 	br	80fbec <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80fab8:	e0bffd17 	ldw	r2,-12(fp)
  80fabc:	10800003 	ldbu	r2,0(r2)
  80fac0:	10803fcc 	andi	r2,r2,255
  80fac4:	108000a0 	cmpeqi	r2,r2,2
  80fac8:	1000031e 	bne	r2,zero,80fad8 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  80facc:	00800044 	movi	r2,1
  80fad0:	e0bfff15 	stw	r2,-4(fp)
  80fad4:	00004506 	br	80fbec <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fad8:	0005303a 	rdctl	r2,status
  80fadc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fae0:	e0fffa17 	ldw	r3,-24(fp)
  80fae4:	00bfff84 	movi	r2,-2
  80fae8:	1884703a 	and	r2,r3,r2
  80faec:	1001703a 	wrctl	status,r2
  
  return context;
  80faf0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80faf4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  80faf8:	e0bffd17 	ldw	r2,-12(fp)
  80fafc:	10800283 	ldbu	r2,10(r2)
  80fb00:	10803fcc 	andi	r2,r2,255
  80fb04:	1005003a 	cmpeq	r2,r2,zero
  80fb08:	10000c1e 	bne	r2,zero,80fb3c <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fb0c:	e13ffd17 	ldw	r4,-12(fp)
  80fb10:	e17ffe17 	ldw	r5,-8(fp)
  80fb14:	01800104 	movi	r6,4
  80fb18:	000f883a 	mov	r7,zero
  80fb1c:	080bac00 	call	80bac0 <OS_EventTaskRdy>
  80fb20:	e0bffb17 	ldw	r2,-20(fp)
  80fb24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fb28:	e0bff917 	ldw	r2,-28(fp)
  80fb2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  80fb30:	080c5000 	call	80c500 <OS_Sched>
        return (OS_ERR_NONE);
  80fb34:	e03fff15 	stw	zero,-4(fp)
  80fb38:	00002c06 	br	80fbec <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  80fb3c:	e0bffd17 	ldw	r2,-12(fp)
  80fb40:	10800117 	ldw	r2,4(r2)
  80fb44:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  80fb48:	e0bffc17 	ldw	r2,-16(fp)
  80fb4c:	10c0058b 	ldhu	r3,22(r2)
  80fb50:	e0bffc17 	ldw	r2,-16(fp)
  80fb54:	1080050b 	ldhu	r2,20(r2)
  80fb58:	18ffffcc 	andi	r3,r3,65535
  80fb5c:	10bfffcc 	andi	r2,r2,65535
  80fb60:	18800736 	bltu	r3,r2,80fb80 <OSQPost+0xfc>
  80fb64:	e0bffb17 	ldw	r2,-20(fp)
  80fb68:	e0bff815 	stw	r2,-32(fp)
  80fb6c:	e0bff817 	ldw	r2,-32(fp)
  80fb70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80fb74:	00800784 	movi	r2,30
  80fb78:	e0bfff15 	stw	r2,-4(fp)
  80fb7c:	00001b06 	br	80fbec <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  80fb80:	e0bffc17 	ldw	r2,-16(fp)
  80fb84:	10c00317 	ldw	r3,12(r2)
  80fb88:	e0bffe17 	ldw	r2,-8(fp)
  80fb8c:	18800015 	stw	r2,0(r3)
  80fb90:	18c00104 	addi	r3,r3,4
  80fb94:	e0bffc17 	ldw	r2,-16(fp)
  80fb98:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  80fb9c:	e0bffc17 	ldw	r2,-16(fp)
  80fba0:	1080058b 	ldhu	r2,22(r2)
  80fba4:	10800044 	addi	r2,r2,1
  80fba8:	1007883a 	mov	r3,r2
  80fbac:	e0bffc17 	ldw	r2,-16(fp)
  80fbb0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80fbb4:	e0bffc17 	ldw	r2,-16(fp)
  80fbb8:	10c00317 	ldw	r3,12(r2)
  80fbbc:	e0bffc17 	ldw	r2,-16(fp)
  80fbc0:	10800217 	ldw	r2,8(r2)
  80fbc4:	1880041e 	bne	r3,r2,80fbd8 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  80fbc8:	e0bffc17 	ldw	r2,-16(fp)
  80fbcc:	10c00117 	ldw	r3,4(r2)
  80fbd0:	e0bffc17 	ldw	r2,-16(fp)
  80fbd4:	10c00315 	stw	r3,12(r2)
  80fbd8:	e0bffb17 	ldw	r2,-20(fp)
  80fbdc:	e0bff715 	stw	r2,-36(fp)
  80fbe0:	e0bff717 	ldw	r2,-36(fp)
  80fbe4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80fbe8:	e03fff15 	stw	zero,-4(fp)
  80fbec:	e0bfff17 	ldw	r2,-4(fp)
}
  80fbf0:	e037883a 	mov	sp,fp
  80fbf4:	dfc00117 	ldw	ra,4(sp)
  80fbf8:	df000017 	ldw	fp,0(sp)
  80fbfc:	dec00204 	addi	sp,sp,8
  80fc00:	f800283a 	ret

0080fc04 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  80fc04:	defff504 	addi	sp,sp,-44
  80fc08:	dfc00a15 	stw	ra,40(sp)
  80fc0c:	df000915 	stw	fp,36(sp)
  80fc10:	df000904 	addi	fp,sp,36
  80fc14:	e13ffd15 	stw	r4,-12(fp)
  80fc18:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80fc1c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80fc20:	e0bffd17 	ldw	r2,-12(fp)
  80fc24:	1004c03a 	cmpne	r2,r2,zero
  80fc28:	1000031e 	bne	r2,zero,80fc38 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  80fc2c:	00800104 	movi	r2,4
  80fc30:	e0bfff15 	stw	r2,-4(fp)
  80fc34:	00004f06 	br	80fd74 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80fc38:	e0bffd17 	ldw	r2,-12(fp)
  80fc3c:	10800003 	ldbu	r2,0(r2)
  80fc40:	10803fcc 	andi	r2,r2,255
  80fc44:	108000a0 	cmpeqi	r2,r2,2
  80fc48:	1000031e 	bne	r2,zero,80fc58 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  80fc4c:	00800044 	movi	r2,1
  80fc50:	e0bfff15 	stw	r2,-4(fp)
  80fc54:	00004706 	br	80fd74 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fc58:	0005303a 	rdctl	r2,status
  80fc5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fc60:	e0fffa17 	ldw	r3,-24(fp)
  80fc64:	00bfff84 	movi	r2,-2
  80fc68:	1884703a 	and	r2,r3,r2
  80fc6c:	1001703a 	wrctl	status,r2
  
  return context;
  80fc70:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80fc74:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  80fc78:	e0bffd17 	ldw	r2,-12(fp)
  80fc7c:	10800283 	ldbu	r2,10(r2)
  80fc80:	10803fcc 	andi	r2,r2,255
  80fc84:	1005003a 	cmpeq	r2,r2,zero
  80fc88:	10000c1e 	bne	r2,zero,80fcbc <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fc8c:	e13ffd17 	ldw	r4,-12(fp)
  80fc90:	e17ffe17 	ldw	r5,-8(fp)
  80fc94:	01800104 	movi	r6,4
  80fc98:	000f883a 	mov	r7,zero
  80fc9c:	080bac00 	call	80bac0 <OS_EventTaskRdy>
  80fca0:	e0bffb17 	ldw	r2,-20(fp)
  80fca4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fca8:	e0bff917 	ldw	r2,-28(fp)
  80fcac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  80fcb0:	080c5000 	call	80c500 <OS_Sched>
        return (OS_ERR_NONE);
  80fcb4:	e03fff15 	stw	zero,-4(fp)
  80fcb8:	00002e06 	br	80fd74 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80fcbc:	e0bffd17 	ldw	r2,-12(fp)
  80fcc0:	10800117 	ldw	r2,4(r2)
  80fcc4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80fcc8:	e0bffc17 	ldw	r2,-16(fp)
  80fccc:	10c0058b 	ldhu	r3,22(r2)
  80fcd0:	e0bffc17 	ldw	r2,-16(fp)
  80fcd4:	1080050b 	ldhu	r2,20(r2)
  80fcd8:	18ffffcc 	andi	r3,r3,65535
  80fcdc:	10bfffcc 	andi	r2,r2,65535
  80fce0:	18800736 	bltu	r3,r2,80fd00 <OSQPostFront+0xfc>
  80fce4:	e0bffb17 	ldw	r2,-20(fp)
  80fce8:	e0bff815 	stw	r2,-32(fp)
  80fcec:	e0bff817 	ldw	r2,-32(fp)
  80fcf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80fcf4:	00800784 	movi	r2,30
  80fcf8:	e0bfff15 	stw	r2,-4(fp)
  80fcfc:	00001d06 	br	80fd74 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  80fd00:	e0bffc17 	ldw	r2,-16(fp)
  80fd04:	10c00417 	ldw	r3,16(r2)
  80fd08:	e0bffc17 	ldw	r2,-16(fp)
  80fd0c:	10800117 	ldw	r2,4(r2)
  80fd10:	1880041e 	bne	r3,r2,80fd24 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  80fd14:	e0bffc17 	ldw	r2,-16(fp)
  80fd18:	10c00217 	ldw	r3,8(r2)
  80fd1c:	e0bffc17 	ldw	r2,-16(fp)
  80fd20:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  80fd24:	e0bffc17 	ldw	r2,-16(fp)
  80fd28:	10800417 	ldw	r2,16(r2)
  80fd2c:	10ffff04 	addi	r3,r2,-4
  80fd30:	e0bffc17 	ldw	r2,-16(fp)
  80fd34:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  80fd38:	e0bffc17 	ldw	r2,-16(fp)
  80fd3c:	10c00417 	ldw	r3,16(r2)
  80fd40:	e0bffe17 	ldw	r2,-8(fp)
  80fd44:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80fd48:	e0bffc17 	ldw	r2,-16(fp)
  80fd4c:	1080058b 	ldhu	r2,22(r2)
  80fd50:	10800044 	addi	r2,r2,1
  80fd54:	1007883a 	mov	r3,r2
  80fd58:	e0bffc17 	ldw	r2,-16(fp)
  80fd5c:	10c0058d 	sth	r3,22(r2)
  80fd60:	e0bffb17 	ldw	r2,-20(fp)
  80fd64:	e0bff715 	stw	r2,-36(fp)
  80fd68:	e0bff717 	ldw	r2,-36(fp)
  80fd6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80fd70:	e03fff15 	stw	zero,-4(fp)
  80fd74:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd78:	e037883a 	mov	sp,fp
  80fd7c:	dfc00117 	ldw	ra,4(sp)
  80fd80:	df000017 	ldw	fp,0(sp)
  80fd84:	dec00204 	addi	sp,sp,8
  80fd88:	f800283a 	ret

0080fd8c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  80fd8c:	defff404 	addi	sp,sp,-48
  80fd90:	dfc00b15 	stw	ra,44(sp)
  80fd94:	df000a15 	stw	fp,40(sp)
  80fd98:	df000a04 	addi	fp,sp,40
  80fd9c:	e13ffc15 	stw	r4,-16(fp)
  80fda0:	e17ffd15 	stw	r5,-12(fp)
  80fda4:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80fda8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80fdac:	e0bffc17 	ldw	r2,-16(fp)
  80fdb0:	1004c03a 	cmpne	r2,r2,zero
  80fdb4:	1000031e 	bne	r2,zero,80fdc4 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  80fdb8:	00800104 	movi	r2,4
  80fdbc:	e0bfff15 	stw	r2,-4(fp)
  80fdc0:	00007906 	br	80ffa8 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80fdc4:	e0bffc17 	ldw	r2,-16(fp)
  80fdc8:	10800003 	ldbu	r2,0(r2)
  80fdcc:	10803fcc 	andi	r2,r2,255
  80fdd0:	108000a0 	cmpeqi	r2,r2,2
  80fdd4:	1000031e 	bne	r2,zero,80fde4 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  80fdd8:	00800044 	movi	r2,1
  80fddc:	e0bfff15 	stw	r2,-4(fp)
  80fde0:	00007106 	br	80ffa8 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fde4:	0005303a 	rdctl	r2,status
  80fde8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fdec:	e0fff917 	ldw	r3,-28(fp)
  80fdf0:	00bfff84 	movi	r2,-2
  80fdf4:	1884703a 	and	r2,r3,r2
  80fdf8:	1001703a 	wrctl	status,r2
  
  return context;
  80fdfc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80fe00:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  80fe04:	e0bffc17 	ldw	r2,-16(fp)
  80fe08:	10800283 	ldbu	r2,10(r2)
  80fe0c:	10803fcc 	andi	r2,r2,255
  80fe10:	1005003a 	cmpeq	r2,r2,zero
  80fe14:	1000211e 	bne	r2,zero,80fe9c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  80fe18:	e0bffe03 	ldbu	r2,-8(fp)
  80fe1c:	1080004c 	andi	r2,r2,1
  80fe20:	10803fcc 	andi	r2,r2,255
  80fe24:	1005003a 	cmpeq	r2,r2,zero
  80fe28:	10000c1e 	bne	r2,zero,80fe5c <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80fe2c:	00000506 	br	80fe44 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fe30:	e13ffc17 	ldw	r4,-16(fp)
  80fe34:	e17ffd17 	ldw	r5,-12(fp)
  80fe38:	01800104 	movi	r6,4
  80fe3c:	000f883a 	mov	r7,zero
  80fe40:	080bac00 	call	80bac0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80fe44:	e0bffc17 	ldw	r2,-16(fp)
  80fe48:	10800283 	ldbu	r2,10(r2)
  80fe4c:	10803fcc 	andi	r2,r2,255
  80fe50:	1004c03a 	cmpne	r2,r2,zero
  80fe54:	103ff61e 	bne	r2,zero,80fe30 <OSQPostOpt+0xa4>
  80fe58:	00000506 	br	80fe70 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fe5c:	e13ffc17 	ldw	r4,-16(fp)
  80fe60:	e17ffd17 	ldw	r5,-12(fp)
  80fe64:	01800104 	movi	r6,4
  80fe68:	000f883a 	mov	r7,zero
  80fe6c:	080bac00 	call	80bac0 <OS_EventTaskRdy>
  80fe70:	e0bffa17 	ldw	r2,-24(fp)
  80fe74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe78:	e0bff817 	ldw	r2,-32(fp)
  80fe7c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  80fe80:	e0bffe03 	ldbu	r2,-8(fp)
  80fe84:	1080010c 	andi	r2,r2,4
  80fe88:	1004c03a 	cmpne	r2,r2,zero
  80fe8c:	1000011e 	bne	r2,zero,80fe94 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  80fe90:	080c5000 	call	80c500 <OS_Sched>
        }
        return (OS_ERR_NONE);
  80fe94:	e03fff15 	stw	zero,-4(fp)
  80fe98:	00004306 	br	80ffa8 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80fe9c:	e0bffc17 	ldw	r2,-16(fp)
  80fea0:	10800117 	ldw	r2,4(r2)
  80fea4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80fea8:	e0bffb17 	ldw	r2,-20(fp)
  80feac:	10c0058b 	ldhu	r3,22(r2)
  80feb0:	e0bffb17 	ldw	r2,-20(fp)
  80feb4:	1080050b 	ldhu	r2,20(r2)
  80feb8:	18ffffcc 	andi	r3,r3,65535
  80febc:	10bfffcc 	andi	r2,r2,65535
  80fec0:	18800736 	bltu	r3,r2,80fee0 <OSQPostOpt+0x154>
  80fec4:	e0bffa17 	ldw	r2,-24(fp)
  80fec8:	e0bff715 	stw	r2,-36(fp)
  80fecc:	e0bff717 	ldw	r2,-36(fp)
  80fed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80fed4:	00800784 	movi	r2,30
  80fed8:	e0bfff15 	stw	r2,-4(fp)
  80fedc:	00003206 	br	80ffa8 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  80fee0:	e0bffe03 	ldbu	r2,-8(fp)
  80fee4:	1080008c 	andi	r2,r2,2
  80fee8:	1005003a 	cmpeq	r2,r2,zero
  80feec:	1000131e 	bne	r2,zero,80ff3c <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  80fef0:	e0bffb17 	ldw	r2,-20(fp)
  80fef4:	10c00417 	ldw	r3,16(r2)
  80fef8:	e0bffb17 	ldw	r2,-20(fp)
  80fefc:	10800117 	ldw	r2,4(r2)
  80ff00:	1880041e 	bne	r3,r2,80ff14 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80ff04:	e0bffb17 	ldw	r2,-20(fp)
  80ff08:	10c00217 	ldw	r3,8(r2)
  80ff0c:	e0bffb17 	ldw	r2,-20(fp)
  80ff10:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80ff14:	e0bffb17 	ldw	r2,-20(fp)
  80ff18:	10800417 	ldw	r2,16(r2)
  80ff1c:	10ffff04 	addi	r3,r2,-4
  80ff20:	e0bffb17 	ldw	r2,-20(fp)
  80ff24:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  80ff28:	e0bffb17 	ldw	r2,-20(fp)
  80ff2c:	10c00417 	ldw	r3,16(r2)
  80ff30:	e0bffd17 	ldw	r2,-12(fp)
  80ff34:	18800015 	stw	r2,0(r3)
  80ff38:	00001006 	br	80ff7c <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  80ff3c:	e0bffb17 	ldw	r2,-20(fp)
  80ff40:	10c00317 	ldw	r3,12(r2)
  80ff44:	e0bffd17 	ldw	r2,-12(fp)
  80ff48:	18800015 	stw	r2,0(r3)
  80ff4c:	18c00104 	addi	r3,r3,4
  80ff50:	e0bffb17 	ldw	r2,-20(fp)
  80ff54:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  80ff58:	e0bffb17 	ldw	r2,-20(fp)
  80ff5c:	10c00317 	ldw	r3,12(r2)
  80ff60:	e0bffb17 	ldw	r2,-20(fp)
  80ff64:	10800217 	ldw	r2,8(r2)
  80ff68:	1880041e 	bne	r3,r2,80ff7c <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  80ff6c:	e0bffb17 	ldw	r2,-20(fp)
  80ff70:	10c00117 	ldw	r3,4(r2)
  80ff74:	e0bffb17 	ldw	r2,-20(fp)
  80ff78:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80ff7c:	e0bffb17 	ldw	r2,-20(fp)
  80ff80:	1080058b 	ldhu	r2,22(r2)
  80ff84:	10800044 	addi	r2,r2,1
  80ff88:	1007883a 	mov	r3,r2
  80ff8c:	e0bffb17 	ldw	r2,-20(fp)
  80ff90:	10c0058d 	sth	r3,22(r2)
  80ff94:	e0bffa17 	ldw	r2,-24(fp)
  80ff98:	e0bff615 	stw	r2,-40(fp)
  80ff9c:	e0bff617 	ldw	r2,-40(fp)
  80ffa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80ffa4:	e03fff15 	stw	zero,-4(fp)
  80ffa8:	e0bfff17 	ldw	r2,-4(fp)
}
  80ffac:	e037883a 	mov	sp,fp
  80ffb0:	dfc00117 	ldw	ra,4(sp)
  80ffb4:	df000017 	ldw	fp,0(sp)
  80ffb8:	dec00204 	addi	sp,sp,8
  80ffbc:	f800283a 	ret

0080ffc0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  80ffc0:	defff504 	addi	sp,sp,-44
  80ffc4:	df000a15 	stw	fp,40(sp)
  80ffc8:	df000a04 	addi	fp,sp,40
  80ffcc:	e13ffd15 	stw	r4,-12(fp)
  80ffd0:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80ffd4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80ffd8:	e0bffd17 	ldw	r2,-12(fp)
  80ffdc:	1004c03a 	cmpne	r2,r2,zero
  80ffe0:	1000031e 	bne	r2,zero,80fff0 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80ffe4:	00800104 	movi	r2,4
  80ffe8:	e0bfff15 	stw	r2,-4(fp)
  80ffec:	00004f06 	br	81012c <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  80fff0:	e0bffe17 	ldw	r2,-8(fp)
  80fff4:	1004c03a 	cmpne	r2,r2,zero
  80fff8:	1000031e 	bne	r2,zero,810008 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80fffc:	00800244 	movi	r2,9
  810000:	e0bfff15 	stw	r2,-4(fp)
  810004:	00004906 	br	81012c <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  810008:	e0bffd17 	ldw	r2,-12(fp)
  81000c:	10800003 	ldbu	r2,0(r2)
  810010:	10803fcc 	andi	r2,r2,255
  810014:	108000a0 	cmpeqi	r2,r2,2
  810018:	1000031e 	bne	r2,zero,810028 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  81001c:	00800044 	movi	r2,1
  810020:	e0bfff15 	stw	r2,-4(fp)
  810024:	00004106 	br	81012c <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810028:	0005303a 	rdctl	r2,status
  81002c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810030:	e0fff717 	ldw	r3,-36(fp)
  810034:	00bfff84 	movi	r2,-2
  810038:	1884703a 	and	r2,r3,r2
  81003c:	1001703a 	wrctl	status,r2
  
  return context;
  810040:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  810044:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  810048:	e0bffd17 	ldw	r2,-12(fp)
  81004c:	10c00283 	ldbu	r3,10(r2)
  810050:	e0bffe17 	ldw	r2,-8(fp)
  810054:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  810058:	e0bffd17 	ldw	r2,-12(fp)
  81005c:	108002c4 	addi	r2,r2,11
  810060:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  810064:	e0bffe17 	ldw	r2,-8(fp)
  810068:	10800204 	addi	r2,r2,8
  81006c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810070:	e03ffb05 	stb	zero,-20(fp)
  810074:	00000d06 	br	8100ac <OSQQuery+0xec>
        *pdest++ = *psrc++;
  810078:	e0bffa17 	ldw	r2,-24(fp)
  81007c:	10c00003 	ldbu	r3,0(r2)
  810080:	e0bff917 	ldw	r2,-28(fp)
  810084:	10c00005 	stb	r3,0(r2)
  810088:	e0bff917 	ldw	r2,-28(fp)
  81008c:	10800044 	addi	r2,r2,1
  810090:	e0bff915 	stw	r2,-28(fp)
  810094:	e0bffa17 	ldw	r2,-24(fp)
  810098:	10800044 	addi	r2,r2,1
  81009c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8100a0:	e0bffb03 	ldbu	r2,-20(fp)
  8100a4:	10800044 	addi	r2,r2,1
  8100a8:	e0bffb05 	stb	r2,-20(fp)
  8100ac:	e0bffb03 	ldbu	r2,-20(fp)
  8100b0:	108000f0 	cmpltui	r2,r2,3
  8100b4:	103ff01e 	bne	r2,zero,810078 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8100b8:	e0bffd17 	ldw	r2,-12(fp)
  8100bc:	10800117 	ldw	r2,4(r2)
  8100c0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8100c4:	e0bffc17 	ldw	r2,-16(fp)
  8100c8:	1080058b 	ldhu	r2,22(r2)
  8100cc:	10bfffcc 	andi	r2,r2,65535
  8100d0:	1005003a 	cmpeq	r2,r2,zero
  8100d4:	1000061e 	bne	r2,zero,8100f0 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8100d8:	e0bffc17 	ldw	r2,-16(fp)
  8100dc:	10800417 	ldw	r2,16(r2)
  8100e0:	10c00017 	ldw	r3,0(r2)
  8100e4:	e0bffe17 	ldw	r2,-8(fp)
  8100e8:	10c00015 	stw	r3,0(r2)
  8100ec:	00000206 	br	8100f8 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  8100f0:	e0bffe17 	ldw	r2,-8(fp)
  8100f4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  8100f8:	e0bffc17 	ldw	r2,-16(fp)
  8100fc:	10c0058b 	ldhu	r3,22(r2)
  810100:	e0bffe17 	ldw	r2,-8(fp)
  810104:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  810108:	e0bffc17 	ldw	r2,-16(fp)
  81010c:	10c0050b 	ldhu	r3,20(r2)
  810110:	e0bffe17 	ldw	r2,-8(fp)
  810114:	10c0018d 	sth	r3,6(r2)
  810118:	e0bff817 	ldw	r2,-32(fp)
  81011c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810120:	e0bff617 	ldw	r2,-40(fp)
  810124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810128:	e03fff15 	stw	zero,-4(fp)
  81012c:	e0bfff17 	ldw	r2,-4(fp)
}
  810130:	e037883a 	mov	sp,fp
  810134:	df000017 	ldw	fp,0(sp)
  810138:	dec00104 	addi	sp,sp,4
  81013c:	f800283a 	ret

00810140 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  810140:	defffb04 	addi	sp,sp,-20
  810144:	dfc00415 	stw	ra,16(sp)
  810148:	df000315 	stw	fp,12(sp)
  81014c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  810150:	010020b4 	movhi	r4,130
  810154:	2134b404 	addi	r4,r4,-11568
  810158:	01407804 	movi	r5,480
  81015c:	080c4400 	call	80c440 <OS_MemClr>
    pq1 = &OSQTbl[0];
  810160:	008020b4 	movhi	r2,130
  810164:	10b4b404 	addi	r2,r2,-11568
  810168:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  81016c:	008020b4 	movhi	r2,130
  810170:	10b4ba04 	addi	r2,r2,-11544
  810174:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  810178:	e03fff0d 	sth	zero,-4(fp)
  81017c:	00000c06 	br	8101b0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  810180:	e0fffe17 	ldw	r3,-8(fp)
  810184:	e0bffd17 	ldw	r2,-12(fp)
  810188:	18800015 	stw	r2,0(r3)
        pq1++;
  81018c:	e0bffe17 	ldw	r2,-8(fp)
  810190:	10800604 	addi	r2,r2,24
  810194:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  810198:	e0bffd17 	ldw	r2,-12(fp)
  81019c:	10800604 	addi	r2,r2,24
  8101a0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8101a4:	e0bfff0b 	ldhu	r2,-4(fp)
  8101a8:	10800044 	addi	r2,r2,1
  8101ac:	e0bfff0d 	sth	r2,-4(fp)
  8101b0:	e0bfff0b 	ldhu	r2,-4(fp)
  8101b4:	108004f0 	cmpltui	r2,r2,19
  8101b8:	103ff11e 	bne	r2,zero,810180 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8101bc:	e0bffe17 	ldw	r2,-8(fp)
  8101c0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8101c4:	00c020b4 	movhi	r3,130
  8101c8:	18e6b604 	addi	r3,r3,-25896
  8101cc:	008020b4 	movhi	r2,130
  8101d0:	10b4b404 	addi	r2,r2,-11568
  8101d4:	18800015 	stw	r2,0(r3)
#endif
}
  8101d8:	e037883a 	mov	sp,fp
  8101dc:	dfc00117 	ldw	ra,4(sp)
  8101e0:	df000017 	ldw	fp,0(sp)
  8101e4:	dec00204 	addi	sp,sp,8
  8101e8:	f800283a 	ret

008101ec <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8101ec:	defff904 	addi	sp,sp,-28
  8101f0:	df000615 	stw	fp,24(sp)
  8101f4:	df000604 	addi	fp,sp,24
  8101f8:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8101fc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810200:	e0bffe17 	ldw	r2,-8(fp)
  810204:	1004c03a 	cmpne	r2,r2,zero
  810208:	1000021e 	bne	r2,zero,810214 <OSSemAccept+0x28>
        return (0);
  81020c:	e03fff15 	stw	zero,-4(fp)
  810210:	00002106 	br	810298 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810214:	e0bffe17 	ldw	r2,-8(fp)
  810218:	10800003 	ldbu	r2,0(r2)
  81021c:	10803fcc 	andi	r2,r2,255
  810220:	108000e0 	cmpeqi	r2,r2,3
  810224:	1000021e 	bne	r2,zero,810230 <OSSemAccept+0x44>
        return (0);
  810228:	e03fff15 	stw	zero,-4(fp)
  81022c:	00001a06 	br	810298 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810230:	0005303a 	rdctl	r2,status
  810234:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810238:	e0fffb17 	ldw	r3,-20(fp)
  81023c:	00bfff84 	movi	r2,-2
  810240:	1884703a 	and	r2,r3,r2
  810244:	1001703a 	wrctl	status,r2
  
  return context;
  810248:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81024c:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  810250:	e0bffe17 	ldw	r2,-8(fp)
  810254:	1080020b 	ldhu	r2,8(r2)
  810258:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  81025c:	e0bffd0b 	ldhu	r2,-12(fp)
  810260:	1005003a 	cmpeq	r2,r2,zero
  810264:	1000061e 	bne	r2,zero,810280 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  810268:	e0bffe17 	ldw	r2,-8(fp)
  81026c:	1080020b 	ldhu	r2,8(r2)
  810270:	10bfffc4 	addi	r2,r2,-1
  810274:	1007883a 	mov	r3,r2
  810278:	e0bffe17 	ldw	r2,-8(fp)
  81027c:	10c0020d 	sth	r3,8(r2)
  810280:	e0bffc17 	ldw	r2,-16(fp)
  810284:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810288:	e0bffa17 	ldw	r2,-24(fp)
  81028c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  810290:	e0bffd0b 	ldhu	r2,-12(fp)
  810294:	e0bfff15 	stw	r2,-4(fp)
  810298:	e0bfff17 	ldw	r2,-4(fp)
}
  81029c:	e037883a 	mov	sp,fp
  8102a0:	df000017 	ldw	fp,0(sp)
  8102a4:	dec00104 	addi	sp,sp,4
  8102a8:	f800283a 	ret

008102ac <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  8102ac:	defff804 	addi	sp,sp,-32
  8102b0:	dfc00715 	stw	ra,28(sp)
  8102b4:	df000615 	stw	fp,24(sp)
  8102b8:	df000604 	addi	fp,sp,24
  8102bc:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8102c0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8102c4:	008020b4 	movhi	r2,130
  8102c8:	10a6b904 	addi	r2,r2,-25884
  8102cc:	10800003 	ldbu	r2,0(r2)
  8102d0:	10803fcc 	andi	r2,r2,255
  8102d4:	1005003a 	cmpeq	r2,r2,zero
  8102d8:	1000021e 	bne	r2,zero,8102e4 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8102dc:	e03fff15 	stw	zero,-4(fp)
  8102e0:	00003106 	br	8103a8 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8102e4:	0005303a 	rdctl	r2,status
  8102e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8102ec:	e0fffb17 	ldw	r3,-20(fp)
  8102f0:	00bfff84 	movi	r2,-2
  8102f4:	1884703a 	and	r2,r3,r2
  8102f8:	1001703a 	wrctl	status,r2
  
  return context;
  8102fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810300:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  810304:	008020b4 	movhi	r2,130
  810308:	10a6b804 	addi	r2,r2,-25888
  81030c:	10800017 	ldw	r2,0(r2)
  810310:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  810314:	008020b4 	movhi	r2,130
  810318:	10a6b804 	addi	r2,r2,-25888
  81031c:	10800017 	ldw	r2,0(r2)
  810320:	1005003a 	cmpeq	r2,r2,zero
  810324:	1000081e 	bne	r2,zero,810348 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  810328:	008020b4 	movhi	r2,130
  81032c:	10a6b804 	addi	r2,r2,-25888
  810330:	10800017 	ldw	r2,0(r2)
  810334:	10800117 	ldw	r2,4(r2)
  810338:	1007883a 	mov	r3,r2
  81033c:	008020b4 	movhi	r2,130
  810340:	10a6b804 	addi	r2,r2,-25888
  810344:	10c00015 	stw	r3,0(r2)
  810348:	e0bffc17 	ldw	r2,-16(fp)
  81034c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810350:	e0bffa17 	ldw	r2,-24(fp)
  810354:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  810358:	e0bffd17 	ldw	r2,-12(fp)
  81035c:	1005003a 	cmpeq	r2,r2,zero
  810360:	10000f1e 	bne	r2,zero,8103a0 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  810364:	e0fffd17 	ldw	r3,-12(fp)
  810368:	008000c4 	movi	r2,3
  81036c:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  810370:	e0fffd17 	ldw	r3,-12(fp)
  810374:	e0bffe0b 	ldhu	r2,-8(fp)
  810378:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  81037c:	e0bffd17 	ldw	r2,-12(fp)
  810380:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  810384:	e0fffd17 	ldw	r3,-12(fp)
  810388:	00800fc4 	movi	r2,63
  81038c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  810390:	e0bffd17 	ldw	r2,-12(fp)
  810394:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  810398:	e13ffd17 	ldw	r4,-12(fp)
  81039c:	080c0740 	call	80c074 <OS_EventWaitListInit>
    }
    return (pevent);
  8103a0:	e0bffd17 	ldw	r2,-12(fp)
  8103a4:	e0bfff15 	stw	r2,-4(fp)
  8103a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8103ac:	e037883a 	mov	sp,fp
  8103b0:	dfc00117 	ldw	ra,4(sp)
  8103b4:	df000017 	ldw	fp,0(sp)
  8103b8:	dec00204 	addi	sp,sp,8
  8103bc:	f800283a 	ret

008103c0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8103c0:	defff104 	addi	sp,sp,-60
  8103c4:	dfc00e15 	stw	ra,56(sp)
  8103c8:	df000d15 	stw	fp,52(sp)
  8103cc:	df000d04 	addi	fp,sp,52
  8103d0:	e13ffb15 	stw	r4,-20(fp)
  8103d4:	e1bffd15 	stw	r6,-12(fp)
  8103d8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8103dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8103e0:	e0bffd17 	ldw	r2,-12(fp)
  8103e4:	1004c03a 	cmpne	r2,r2,zero
  8103e8:	1000031e 	bne	r2,zero,8103f8 <OSSemDel+0x38>
        return (pevent);
  8103ec:	e0bffb17 	ldw	r2,-20(fp)
  8103f0:	e0bfff15 	stw	r2,-4(fp)
  8103f4:	00009406 	br	810648 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8103f8:	e0bffb17 	ldw	r2,-20(fp)
  8103fc:	1004c03a 	cmpne	r2,r2,zero
  810400:	1000061e 	bne	r2,zero,81041c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  810404:	e0fffd17 	ldw	r3,-12(fp)
  810408:	00800104 	movi	r2,4
  81040c:	18800005 	stb	r2,0(r3)
        return (pevent);
  810410:	e0fffb17 	ldw	r3,-20(fp)
  810414:	e0ffff15 	stw	r3,-4(fp)
  810418:	00008b06 	br	810648 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  81041c:	e0bffb17 	ldw	r2,-20(fp)
  810420:	10800003 	ldbu	r2,0(r2)
  810424:	10803fcc 	andi	r2,r2,255
  810428:	108000e0 	cmpeqi	r2,r2,3
  81042c:	1000061e 	bne	r2,zero,810448 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  810430:	e0fffd17 	ldw	r3,-12(fp)
  810434:	00800044 	movi	r2,1
  810438:	18800005 	stb	r2,0(r3)
        return (pevent);
  81043c:	e0bffb17 	ldw	r2,-20(fp)
  810440:	e0bfff15 	stw	r2,-4(fp)
  810444:	00008006 	br	810648 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810448:	008020b4 	movhi	r2,130
  81044c:	10a6b904 	addi	r2,r2,-25884
  810450:	10800003 	ldbu	r2,0(r2)
  810454:	10803fcc 	andi	r2,r2,255
  810458:	1005003a 	cmpeq	r2,r2,zero
  81045c:	1000061e 	bne	r2,zero,810478 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  810460:	e0fffd17 	ldw	r3,-12(fp)
  810464:	008003c4 	movi	r2,15
  810468:	18800005 	stb	r2,0(r3)
        return (pevent);
  81046c:	e0fffb17 	ldw	r3,-20(fp)
  810470:	e0ffff15 	stw	r3,-4(fp)
  810474:	00007406 	br	810648 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810478:	0005303a 	rdctl	r2,status
  81047c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810480:	e0fff717 	ldw	r3,-36(fp)
  810484:	00bfff84 	movi	r2,-2
  810488:	1884703a 	and	r2,r3,r2
  81048c:	1001703a 	wrctl	status,r2
  
  return context;
  810490:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  810494:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  810498:	e0bffb17 	ldw	r2,-20(fp)
  81049c:	10800283 	ldbu	r2,10(r2)
  8104a0:	10803fcc 	andi	r2,r2,255
  8104a4:	1005003a 	cmpeq	r2,r2,zero
  8104a8:	1000031e 	bne	r2,zero,8104b8 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8104ac:	00800044 	movi	r2,1
  8104b0:	e0bffa05 	stb	r2,-24(fp)
  8104b4:	00000106 	br	8104bc <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8104b8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8104bc:	e0bffc03 	ldbu	r2,-16(fp)
  8104c0:	e0bffe15 	stw	r2,-8(fp)
  8104c4:	e0fffe17 	ldw	r3,-8(fp)
  8104c8:	1805003a 	cmpeq	r2,r3,zero
  8104cc:	1000041e 	bne	r2,zero,8104e0 <OSSemDel+0x120>
  8104d0:	e0fffe17 	ldw	r3,-8(fp)
  8104d4:	18800060 	cmpeqi	r2,r3,1
  8104d8:	10002d1e 	bne	r2,zero,810590 <OSSemDel+0x1d0>
  8104dc:	00004f06 	br	81061c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  8104e0:	e0bffa03 	ldbu	r2,-24(fp)
  8104e4:	1004c03a 	cmpne	r2,r2,zero
  8104e8:	10001a1e 	bne	r2,zero,810554 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8104ec:	e0fffb17 	ldw	r3,-20(fp)
  8104f0:	00800fc4 	movi	r2,63
  8104f4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  8104f8:	e0bffb17 	ldw	r2,-20(fp)
  8104fc:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  810500:	e0bffb17 	ldw	r2,-20(fp)
  810504:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  810508:	008020b4 	movhi	r2,130
  81050c:	10a6b804 	addi	r2,r2,-25888
  810510:	10c00017 	ldw	r3,0(r2)
  810514:	e0bffb17 	ldw	r2,-20(fp)
  810518:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  81051c:	e0bffb17 	ldw	r2,-20(fp)
  810520:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  810524:	00c020b4 	movhi	r3,130
  810528:	18e6b804 	addi	r3,r3,-25888
  81052c:	e0bffb17 	ldw	r2,-20(fp)
  810530:	18800015 	stw	r2,0(r3)
  810534:	e0bff817 	ldw	r2,-32(fp)
  810538:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81053c:	e0bff617 	ldw	r2,-40(fp)
  810540:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  810544:	e0bffd17 	ldw	r2,-12(fp)
  810548:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  81054c:	e03ff915 	stw	zero,-28(fp)
  810550:	00003b06 	br	810640 <OSSemDel+0x280>
  810554:	e0bff817 	ldw	r2,-32(fp)
  810558:	e0bff515 	stw	r2,-44(fp)
  81055c:	e0bff517 	ldw	r2,-44(fp)
  810560:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  810564:	e0fffd17 	ldw	r3,-12(fp)
  810568:	00801244 	movi	r2,73
  81056c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  810570:	e0bffb17 	ldw	r2,-20(fp)
  810574:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  810578:	00003106 	br	810640 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  81057c:	e13ffb17 	ldw	r4,-20(fp)
  810580:	000b883a 	mov	r5,zero
  810584:	01800044 	movi	r6,1
  810588:	000f883a 	mov	r7,zero
  81058c:	080bac00 	call	80bac0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  810590:	e0bffb17 	ldw	r2,-20(fp)
  810594:	10800283 	ldbu	r2,10(r2)
  810598:	10803fcc 	andi	r2,r2,255
  81059c:	1004c03a 	cmpne	r2,r2,zero
  8105a0:	103ff61e 	bne	r2,zero,81057c <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8105a4:	e0fffb17 	ldw	r3,-20(fp)
  8105a8:	00800fc4 	movi	r2,63
  8105ac:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  8105b0:	e0bffb17 	ldw	r2,-20(fp)
  8105b4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8105b8:	e0bffb17 	ldw	r2,-20(fp)
  8105bc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8105c0:	008020b4 	movhi	r2,130
  8105c4:	10a6b804 	addi	r2,r2,-25888
  8105c8:	10c00017 	ldw	r3,0(r2)
  8105cc:	e0bffb17 	ldw	r2,-20(fp)
  8105d0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8105d4:	e0bffb17 	ldw	r2,-20(fp)
  8105d8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8105dc:	00c020b4 	movhi	r3,130
  8105e0:	18e6b804 	addi	r3,r3,-25888
  8105e4:	e0bffb17 	ldw	r2,-20(fp)
  8105e8:	18800015 	stw	r2,0(r3)
  8105ec:	e0bff817 	ldw	r2,-32(fp)
  8105f0:	e0bff415 	stw	r2,-48(fp)
  8105f4:	e0bff417 	ldw	r2,-48(fp)
  8105f8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8105fc:	e0bffa03 	ldbu	r2,-24(fp)
  810600:	10800058 	cmpnei	r2,r2,1
  810604:	1000011e 	bne	r2,zero,81060c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  810608:	080c5000 	call	80c500 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  81060c:	e0bffd17 	ldw	r2,-12(fp)
  810610:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  810614:	e03ff915 	stw	zero,-28(fp)
             break;
  810618:	00000906 	br	810640 <OSSemDel+0x280>
  81061c:	e0bff817 	ldw	r2,-32(fp)
  810620:	e0bff315 	stw	r2,-52(fp)
  810624:	e0bff317 	ldw	r2,-52(fp)
  810628:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  81062c:	e0fffd17 	ldw	r3,-12(fp)
  810630:	008001c4 	movi	r2,7
  810634:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  810638:	e0bffb17 	ldw	r2,-20(fp)
  81063c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  810640:	e0bff917 	ldw	r2,-28(fp)
  810644:	e0bfff15 	stw	r2,-4(fp)
  810648:	e0bfff17 	ldw	r2,-4(fp)
}
  81064c:	e037883a 	mov	sp,fp
  810650:	dfc00117 	ldw	ra,4(sp)
  810654:	df000017 	ldw	fp,0(sp)
  810658:	dec00204 	addi	sp,sp,8
  81065c:	f800283a 	ret

00810660 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  810660:	defff404 	addi	sp,sp,-48
  810664:	dfc00b15 	stw	ra,44(sp)
  810668:	df000a15 	stw	fp,40(sp)
  81066c:	df000a04 	addi	fp,sp,40
  810670:	e13ffc15 	stw	r4,-16(fp)
  810674:	e1bffe15 	stw	r6,-8(fp)
  810678:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  81067c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810680:	e0bffe17 	ldw	r2,-8(fp)
  810684:	1005003a 	cmpeq	r2,r2,zero
  810688:	10008f1e 	bne	r2,zero,8108c8 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81068c:	e0bffc17 	ldw	r2,-16(fp)
  810690:	1004c03a 	cmpne	r2,r2,zero
  810694:	1000041e 	bne	r2,zero,8106a8 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  810698:	e0fffe17 	ldw	r3,-8(fp)
  81069c:	00800104 	movi	r2,4
  8106a0:	18800005 	stb	r2,0(r3)
        return;
  8106a4:	00008806 	br	8108c8 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8106a8:	e0bffc17 	ldw	r2,-16(fp)
  8106ac:	10800003 	ldbu	r2,0(r2)
  8106b0:	10803fcc 	andi	r2,r2,255
  8106b4:	108000e0 	cmpeqi	r2,r2,3
  8106b8:	1000041e 	bne	r2,zero,8106cc <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  8106bc:	e0fffe17 	ldw	r3,-8(fp)
  8106c0:	00800044 	movi	r2,1
  8106c4:	18800005 	stb	r2,0(r3)
        return;
  8106c8:	00007f06 	br	8108c8 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  8106cc:	008020b4 	movhi	r2,130
  8106d0:	10a6b904 	addi	r2,r2,-25884
  8106d4:	10800003 	ldbu	r2,0(r2)
  8106d8:	10803fcc 	andi	r2,r2,255
  8106dc:	1005003a 	cmpeq	r2,r2,zero
  8106e0:	1000041e 	bne	r2,zero,8106f4 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  8106e4:	e0fffe17 	ldw	r3,-8(fp)
  8106e8:	00800084 	movi	r2,2
  8106ec:	18800005 	stb	r2,0(r3)
        return;
  8106f0:	00007506 	br	8108c8 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  8106f4:	008020b4 	movhi	r2,130
  8106f8:	10a6ab04 	addi	r2,r2,-25940
  8106fc:	10800003 	ldbu	r2,0(r2)
  810700:	10803fcc 	andi	r2,r2,255
  810704:	1005003a 	cmpeq	r2,r2,zero
  810708:	1000041e 	bne	r2,zero,81071c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  81070c:	e0fffe17 	ldw	r3,-8(fp)
  810710:	00800344 	movi	r2,13
  810714:	18800005 	stb	r2,0(r3)
        return;
  810718:	00006b06 	br	8108c8 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81071c:	0005303a 	rdctl	r2,status
  810720:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810724:	e0fffa17 	ldw	r3,-24(fp)
  810728:	00bfff84 	movi	r2,-2
  81072c:	1884703a 	and	r2,r3,r2
  810730:	1001703a 	wrctl	status,r2
  
  return context;
  810734:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810738:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  81073c:	e0bffc17 	ldw	r2,-16(fp)
  810740:	1080020b 	ldhu	r2,8(r2)
  810744:	10bfffcc 	andi	r2,r2,65535
  810748:	1005003a 	cmpeq	r2,r2,zero
  81074c:	10000d1e 	bne	r2,zero,810784 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  810750:	e0bffc17 	ldw	r2,-16(fp)
  810754:	1080020b 	ldhu	r2,8(r2)
  810758:	10bfffc4 	addi	r2,r2,-1
  81075c:	1007883a 	mov	r3,r2
  810760:	e0bffc17 	ldw	r2,-16(fp)
  810764:	10c0020d 	sth	r3,8(r2)
  810768:	e0bffb17 	ldw	r2,-20(fp)
  81076c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810770:	e0bff917 	ldw	r2,-28(fp)
  810774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  810778:	e0bffe17 	ldw	r2,-8(fp)
  81077c:	10000005 	stb	zero,0(r2)
        return;
  810780:	00005106 	br	8108c8 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  810784:	008020b4 	movhi	r2,130
  810788:	10a6ba04 	addi	r2,r2,-25880
  81078c:	10c00017 	ldw	r3,0(r2)
  810790:	008020b4 	movhi	r2,130
  810794:	10a6ba04 	addi	r2,r2,-25880
  810798:	10800017 	ldw	r2,0(r2)
  81079c:	10800c03 	ldbu	r2,48(r2)
  8107a0:	10800054 	ori	r2,r2,1
  8107a4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8107a8:	008020b4 	movhi	r2,130
  8107ac:	10a6ba04 	addi	r2,r2,-25880
  8107b0:	10800017 	ldw	r2,0(r2)
  8107b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  8107b8:	008020b4 	movhi	r2,130
  8107bc:	10a6ba04 	addi	r2,r2,-25880
  8107c0:	10c00017 	ldw	r3,0(r2)
  8107c4:	e0bffd0b 	ldhu	r2,-12(fp)
  8107c8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  8107cc:	e13ffc17 	ldw	r4,-16(fp)
  8107d0:	080bc540 	call	80bc54 <OS_EventTaskWait>
  8107d4:	e0bffb17 	ldw	r2,-20(fp)
  8107d8:	e0bff815 	stw	r2,-32(fp)
  8107dc:	e0bff817 	ldw	r2,-32(fp)
  8107e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  8107e4:	080c5000 	call	80c500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8107e8:	0005303a 	rdctl	r2,status
  8107ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8107f0:	e0fff717 	ldw	r3,-36(fp)
  8107f4:	00bfff84 	movi	r2,-2
  8107f8:	1884703a 	and	r2,r3,r2
  8107fc:	1001703a 	wrctl	status,r2
  
  return context;
  810800:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  810804:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  810808:	008020b4 	movhi	r2,130
  81080c:	10a6ba04 	addi	r2,r2,-25880
  810810:	10800017 	ldw	r2,0(r2)
  810814:	10800c43 	ldbu	r2,49(r2)
  810818:	10803fcc 	andi	r2,r2,255
  81081c:	e0bfff15 	stw	r2,-4(fp)
  810820:	e0ffff17 	ldw	r3,-4(fp)
  810824:	1805003a 	cmpeq	r2,r3,zero
  810828:	1000041e 	bne	r2,zero,81083c <OSSemPend+0x1dc>
  81082c:	e0ffff17 	ldw	r3,-4(fp)
  810830:	188000a0 	cmpeqi	r2,r3,2
  810834:	1000041e 	bne	r2,zero,810848 <OSSemPend+0x1e8>
  810838:	00000706 	br	810858 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  81083c:	e0bffe17 	ldw	r2,-8(fp)
  810840:	10000005 	stb	zero,0(r2)
             break;
  810844:	00000c06 	br	810878 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  810848:	e0fffe17 	ldw	r3,-8(fp)
  81084c:	00800384 	movi	r2,14
  810850:	18800005 	stb	r2,0(r3)
             break;
  810854:	00000806 	br	810878 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  810858:	008020b4 	movhi	r2,130
  81085c:	10a6ba04 	addi	r2,r2,-25880
  810860:	11000017 	ldw	r4,0(r2)
  810864:	e17ffc17 	ldw	r5,-16(fp)
  810868:	080beb80 	call	80beb8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  81086c:	e0fffe17 	ldw	r3,-8(fp)
  810870:	00800284 	movi	r2,10
  810874:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  810878:	008020b4 	movhi	r2,130
  81087c:	10a6ba04 	addi	r2,r2,-25880
  810880:	10800017 	ldw	r2,0(r2)
  810884:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  810888:	008020b4 	movhi	r2,130
  81088c:	10a6ba04 	addi	r2,r2,-25880
  810890:	10800017 	ldw	r2,0(r2)
  810894:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  810898:	008020b4 	movhi	r2,130
  81089c:	10a6ba04 	addi	r2,r2,-25880
  8108a0:	10800017 	ldw	r2,0(r2)
  8108a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8108a8:	008020b4 	movhi	r2,130
  8108ac:	10a6ba04 	addi	r2,r2,-25880
  8108b0:	10800017 	ldw	r2,0(r2)
  8108b4:	10000815 	stw	zero,32(r2)
  8108b8:	e0bffb17 	ldw	r2,-20(fp)
  8108bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8108c0:	e0bff617 	ldw	r2,-40(fp)
  8108c4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  8108c8:	e037883a 	mov	sp,fp
  8108cc:	dfc00117 	ldw	ra,4(sp)
  8108d0:	df000017 	ldw	fp,0(sp)
  8108d4:	dec00204 	addi	sp,sp,8
  8108d8:	f800283a 	ret

008108dc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8108dc:	defff504 	addi	sp,sp,-44
  8108e0:	dfc00a15 	stw	ra,40(sp)
  8108e4:	df000915 	stw	fp,36(sp)
  8108e8:	df000904 	addi	fp,sp,36
  8108ec:	e13ffc15 	stw	r4,-16(fp)
  8108f0:	e1bffe15 	stw	r6,-8(fp)
  8108f4:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8108f8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8108fc:	e0bffe17 	ldw	r2,-8(fp)
  810900:	1004c03a 	cmpne	r2,r2,zero
  810904:	1000021e 	bne	r2,zero,810910 <OSSemPendAbort+0x34>
        return (0);
  810908:	e03fff15 	stw	zero,-4(fp)
  81090c:	00004c06 	br	810a40 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810910:	e0bffc17 	ldw	r2,-16(fp)
  810914:	1004c03a 	cmpne	r2,r2,zero
  810918:	1000051e 	bne	r2,zero,810930 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  81091c:	e0fffe17 	ldw	r3,-8(fp)
  810920:	00800104 	movi	r2,4
  810924:	18800005 	stb	r2,0(r3)
        return (0);
  810928:	e03fff15 	stw	zero,-4(fp)
  81092c:	00004406 	br	810a40 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810930:	e0bffc17 	ldw	r2,-16(fp)
  810934:	10800003 	ldbu	r2,0(r2)
  810938:	10803fcc 	andi	r2,r2,255
  81093c:	108000e0 	cmpeqi	r2,r2,3
  810940:	1000051e 	bne	r2,zero,810958 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  810944:	e0fffe17 	ldw	r3,-8(fp)
  810948:	00800044 	movi	r2,1
  81094c:	18800005 	stb	r2,0(r3)
        return (0);
  810950:	e03fff15 	stw	zero,-4(fp)
  810954:	00003a06 	br	810a40 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810958:	0005303a 	rdctl	r2,status
  81095c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810960:	e0fff917 	ldw	r3,-28(fp)
  810964:	00bfff84 	movi	r2,-2
  810968:	1884703a 	and	r2,r3,r2
  81096c:	1001703a 	wrctl	status,r2
  
  return context;
  810970:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810974:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  810978:	e0bffc17 	ldw	r2,-16(fp)
  81097c:	10800283 	ldbu	r2,10(r2)
  810980:	10803fcc 	andi	r2,r2,255
  810984:	1005003a 	cmpeq	r2,r2,zero
  810988:	1000261e 	bne	r2,zero,810a24 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  81098c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  810990:	e0bffd03 	ldbu	r2,-12(fp)
  810994:	10800060 	cmpeqi	r2,r2,1
  810998:	1000091e 	bne	r2,zero,8109c0 <OSSemPendAbort+0xe4>
  81099c:	00000e06 	br	8109d8 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8109a0:	e13ffc17 	ldw	r4,-16(fp)
  8109a4:	000b883a 	mov	r5,zero
  8109a8:	01800044 	movi	r6,1
  8109ac:	01c00084 	movi	r7,2
  8109b0:	080bac00 	call	80bac0 <OS_EventTaskRdy>
                     nbr_tasks++;
  8109b4:	e0bffb03 	ldbu	r2,-20(fp)
  8109b8:	10800044 	addi	r2,r2,1
  8109bc:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8109c0:	e0bffc17 	ldw	r2,-16(fp)
  8109c4:	10800283 	ldbu	r2,10(r2)
  8109c8:	10803fcc 	andi	r2,r2,255
  8109cc:	1004c03a 	cmpne	r2,r2,zero
  8109d0:	103ff31e 	bne	r2,zero,8109a0 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8109d4:	00000806 	br	8109f8 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8109d8:	e13ffc17 	ldw	r4,-16(fp)
  8109dc:	000b883a 	mov	r5,zero
  8109e0:	01800044 	movi	r6,1
  8109e4:	01c00084 	movi	r7,2
  8109e8:	080bac00 	call	80bac0 <OS_EventTaskRdy>
                 nbr_tasks++;
  8109ec:	e0bffb03 	ldbu	r2,-20(fp)
  8109f0:	10800044 	addi	r2,r2,1
  8109f4:	e0bffb05 	stb	r2,-20(fp)
  8109f8:	e0bffa17 	ldw	r2,-24(fp)
  8109fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a00:	e0bff817 	ldw	r2,-32(fp)
  810a04:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  810a08:	080c5000 	call	80c500 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  810a0c:	e0fffe17 	ldw	r3,-8(fp)
  810a10:	00800384 	movi	r2,14
  810a14:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  810a18:	e0bffb03 	ldbu	r2,-20(fp)
  810a1c:	e0bfff15 	stw	r2,-4(fp)
  810a20:	00000706 	br	810a40 <OSSemPendAbort+0x164>
  810a24:	e0bffa17 	ldw	r2,-24(fp)
  810a28:	e0bff715 	stw	r2,-36(fp)
  810a2c:	e0bff717 	ldw	r2,-36(fp)
  810a30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810a34:	e0bffe17 	ldw	r2,-8(fp)
  810a38:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  810a3c:	e03fff15 	stw	zero,-4(fp)
  810a40:	e0bfff17 	ldw	r2,-4(fp)
}
  810a44:	e037883a 	mov	sp,fp
  810a48:	dfc00117 	ldw	ra,4(sp)
  810a4c:	df000017 	ldw	fp,0(sp)
  810a50:	dec00204 	addi	sp,sp,8
  810a54:	f800283a 	ret

00810a58 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  810a58:	defff704 	addi	sp,sp,-36
  810a5c:	dfc00815 	stw	ra,32(sp)
  810a60:	df000715 	stw	fp,28(sp)
  810a64:	df000704 	addi	fp,sp,28
  810a68:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810a6c:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810a70:	e0bffe17 	ldw	r2,-8(fp)
  810a74:	1004c03a 	cmpne	r2,r2,zero
  810a78:	1000031e 	bne	r2,zero,810a88 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  810a7c:	00800104 	movi	r2,4
  810a80:	e0bfff15 	stw	r2,-4(fp)
  810a84:	00003806 	br	810b68 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810a88:	e0bffe17 	ldw	r2,-8(fp)
  810a8c:	10800003 	ldbu	r2,0(r2)
  810a90:	10803fcc 	andi	r2,r2,255
  810a94:	108000e0 	cmpeqi	r2,r2,3
  810a98:	1000031e 	bne	r2,zero,810aa8 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  810a9c:	00800044 	movi	r2,1
  810aa0:	e0bfff15 	stw	r2,-4(fp)
  810aa4:	00003006 	br	810b68 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810aa8:	0005303a 	rdctl	r2,status
  810aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810ab0:	e0fffc17 	ldw	r3,-16(fp)
  810ab4:	00bfff84 	movi	r2,-2
  810ab8:	1884703a 	and	r2,r3,r2
  810abc:	1001703a 	wrctl	status,r2
  
  return context;
  810ac0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  810ac4:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  810ac8:	e0bffe17 	ldw	r2,-8(fp)
  810acc:	10800283 	ldbu	r2,10(r2)
  810ad0:	10803fcc 	andi	r2,r2,255
  810ad4:	1005003a 	cmpeq	r2,r2,zero
  810ad8:	10000c1e 	bne	r2,zero,810b0c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  810adc:	e13ffe17 	ldw	r4,-8(fp)
  810ae0:	000b883a 	mov	r5,zero
  810ae4:	01800044 	movi	r6,1
  810ae8:	000f883a 	mov	r7,zero
  810aec:	080bac00 	call	80bac0 <OS_EventTaskRdy>
  810af0:	e0bffd17 	ldw	r2,-12(fp)
  810af4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810af8:	e0bffb17 	ldw	r2,-20(fp)
  810afc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  810b00:	080c5000 	call	80c500 <OS_Sched>
        return (OS_ERR_NONE);
  810b04:	e03fff15 	stw	zero,-4(fp)
  810b08:	00001706 	br	810b68 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  810b0c:	e0bffe17 	ldw	r2,-8(fp)
  810b10:	1080020b 	ldhu	r2,8(r2)
  810b14:	10ffffcc 	andi	r3,r2,65535
  810b18:	00bfffd4 	movui	r2,65535
  810b1c:	18800c26 	beq	r3,r2,810b50 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  810b20:	e0bffe17 	ldw	r2,-8(fp)
  810b24:	1080020b 	ldhu	r2,8(r2)
  810b28:	10800044 	addi	r2,r2,1
  810b2c:	1007883a 	mov	r3,r2
  810b30:	e0bffe17 	ldw	r2,-8(fp)
  810b34:	10c0020d 	sth	r3,8(r2)
  810b38:	e0bffd17 	ldw	r2,-12(fp)
  810b3c:	e0bffa15 	stw	r2,-24(fp)
  810b40:	e0bffa17 	ldw	r2,-24(fp)
  810b44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  810b48:	e03fff15 	stw	zero,-4(fp)
  810b4c:	00000606 	br	810b68 <OSSemPost+0x110>
  810b50:	e0bffd17 	ldw	r2,-12(fp)
  810b54:	e0bff915 	stw	r2,-28(fp)
  810b58:	e0bff917 	ldw	r2,-28(fp)
  810b5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  810b60:	00800c84 	movi	r2,50
  810b64:	e0bfff15 	stw	r2,-4(fp)
  810b68:	e0bfff17 	ldw	r2,-4(fp)
}
  810b6c:	e037883a 	mov	sp,fp
  810b70:	dfc00117 	ldw	ra,4(sp)
  810b74:	df000017 	ldw	fp,0(sp)
  810b78:	dec00204 	addi	sp,sp,8
  810b7c:	f800283a 	ret

00810b80 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  810b80:	defff604 	addi	sp,sp,-40
  810b84:	df000915 	stw	fp,36(sp)
  810b88:	df000904 	addi	fp,sp,36
  810b8c:	e13ffd15 	stw	r4,-12(fp)
  810b90:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810b94:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  810b98:	e0bffd17 	ldw	r2,-12(fp)
  810b9c:	1004c03a 	cmpne	r2,r2,zero
  810ba0:	1000031e 	bne	r2,zero,810bb0 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  810ba4:	00800104 	movi	r2,4
  810ba8:	e0bfff15 	stw	r2,-4(fp)
  810bac:	00003b06 	br	810c9c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  810bb0:	e0bffe17 	ldw	r2,-8(fp)
  810bb4:	1004c03a 	cmpne	r2,r2,zero
  810bb8:	1000031e 	bne	r2,zero,810bc8 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  810bbc:	00800244 	movi	r2,9
  810bc0:	e0bfff15 	stw	r2,-4(fp)
  810bc4:	00003506 	br	810c9c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  810bc8:	e0bffd17 	ldw	r2,-12(fp)
  810bcc:	10800003 	ldbu	r2,0(r2)
  810bd0:	10803fcc 	andi	r2,r2,255
  810bd4:	108000e0 	cmpeqi	r2,r2,3
  810bd8:	1000031e 	bne	r2,zero,810be8 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  810bdc:	00800044 	movi	r2,1
  810be0:	e0bfff15 	stw	r2,-4(fp)
  810be4:	00002d06 	br	810c9c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810be8:	0005303a 	rdctl	r2,status
  810bec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810bf0:	e0fff817 	ldw	r3,-32(fp)
  810bf4:	00bfff84 	movi	r2,-2
  810bf8:	1884703a 	and	r2,r3,r2
  810bfc:	1001703a 	wrctl	status,r2
  
  return context;
  810c00:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  810c04:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  810c08:	e0bffd17 	ldw	r2,-12(fp)
  810c0c:	10c00283 	ldbu	r3,10(r2)
  810c10:	e0bffe17 	ldw	r2,-8(fp)
  810c14:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  810c18:	e0bffd17 	ldw	r2,-12(fp)
  810c1c:	108002c4 	addi	r2,r2,11
  810c20:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  810c24:	e0bffe17 	ldw	r2,-8(fp)
  810c28:	10800084 	addi	r2,r2,2
  810c2c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810c30:	e03ffa05 	stb	zero,-24(fp)
  810c34:	00000d06 	br	810c6c <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  810c38:	e0bffc17 	ldw	r2,-16(fp)
  810c3c:	10c00003 	ldbu	r3,0(r2)
  810c40:	e0bffb17 	ldw	r2,-20(fp)
  810c44:	10c00005 	stb	r3,0(r2)
  810c48:	e0bffb17 	ldw	r2,-20(fp)
  810c4c:	10800044 	addi	r2,r2,1
  810c50:	e0bffb15 	stw	r2,-20(fp)
  810c54:	e0bffc17 	ldw	r2,-16(fp)
  810c58:	10800044 	addi	r2,r2,1
  810c5c:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810c60:	e0bffa03 	ldbu	r2,-24(fp)
  810c64:	10800044 	addi	r2,r2,1
  810c68:	e0bffa05 	stb	r2,-24(fp)
  810c6c:	e0bffa03 	ldbu	r2,-24(fp)
  810c70:	108000f0 	cmpltui	r2,r2,3
  810c74:	103ff01e 	bne	r2,zero,810c38 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  810c78:	e0bffd17 	ldw	r2,-12(fp)
  810c7c:	10c0020b 	ldhu	r3,8(r2)
  810c80:	e0bffe17 	ldw	r2,-8(fp)
  810c84:	10c0000d 	sth	r3,0(r2)
  810c88:	e0bff917 	ldw	r2,-28(fp)
  810c8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810c90:	e0bff717 	ldw	r2,-36(fp)
  810c94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810c98:	e03fff15 	stw	zero,-4(fp)
  810c9c:	e0bfff17 	ldw	r2,-4(fp)
}
  810ca0:	e037883a 	mov	sp,fp
  810ca4:	df000017 	ldw	fp,0(sp)
  810ca8:	dec00104 	addi	sp,sp,4
  810cac:	f800283a 	ret

00810cb0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  810cb0:	defff904 	addi	sp,sp,-28
  810cb4:	df000615 	stw	fp,24(sp)
  810cb8:	df000604 	addi	fp,sp,24
  810cbc:	e13ffd15 	stw	r4,-12(fp)
  810cc0:	e1bfff15 	stw	r6,-4(fp)
  810cc4:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810cc8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810ccc:	e0bfff17 	ldw	r2,-4(fp)
  810cd0:	1005003a 	cmpeq	r2,r2,zero
  810cd4:	1000331e 	bne	r2,zero,810da4 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810cd8:	e0bffd17 	ldw	r2,-12(fp)
  810cdc:	1004c03a 	cmpne	r2,r2,zero
  810ce0:	1000041e 	bne	r2,zero,810cf4 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  810ce4:	e0ffff17 	ldw	r3,-4(fp)
  810ce8:	00800104 	movi	r2,4
  810cec:	18800005 	stb	r2,0(r3)
        return;
  810cf0:	00002c06 	br	810da4 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810cf4:	e0bffd17 	ldw	r2,-12(fp)
  810cf8:	10800003 	ldbu	r2,0(r2)
  810cfc:	10803fcc 	andi	r2,r2,255
  810d00:	108000e0 	cmpeqi	r2,r2,3
  810d04:	1000041e 	bne	r2,zero,810d18 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  810d08:	e0ffff17 	ldw	r3,-4(fp)
  810d0c:	00800044 	movi	r2,1
  810d10:	18800005 	stb	r2,0(r3)
        return;
  810d14:	00002306 	br	810da4 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810d18:	0005303a 	rdctl	r2,status
  810d1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810d20:	e0fffb17 	ldw	r3,-20(fp)
  810d24:	00bfff84 	movi	r2,-2
  810d28:	1884703a 	and	r2,r3,r2
  810d2c:	1001703a 	wrctl	status,r2
  
  return context;
  810d30:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810d34:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  810d38:	e0bfff17 	ldw	r2,-4(fp)
  810d3c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  810d40:	e0bffd17 	ldw	r2,-12(fp)
  810d44:	1080020b 	ldhu	r2,8(r2)
  810d48:	10bfffcc 	andi	r2,r2,65535
  810d4c:	1005003a 	cmpeq	r2,r2,zero
  810d50:	1000041e 	bne	r2,zero,810d64 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  810d54:	e0fffd17 	ldw	r3,-12(fp)
  810d58:	e0bffe0b 	ldhu	r2,-8(fp)
  810d5c:	1880020d 	sth	r2,8(r3)
  810d60:	00000c06 	br	810d94 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  810d64:	e0bffd17 	ldw	r2,-12(fp)
  810d68:	10800283 	ldbu	r2,10(r2)
  810d6c:	10803fcc 	andi	r2,r2,255
  810d70:	1004c03a 	cmpne	r2,r2,zero
  810d74:	1000041e 	bne	r2,zero,810d88 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  810d78:	e0fffd17 	ldw	r3,-12(fp)
  810d7c:	e0bffe0b 	ldhu	r2,-8(fp)
  810d80:	1880020d 	sth	r2,8(r3)
  810d84:	00000306 	br	810d94 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  810d88:	e0ffff17 	ldw	r3,-4(fp)
  810d8c:	00801244 	movi	r2,73
  810d90:	18800005 	stb	r2,0(r3)
  810d94:	e0bffc17 	ldw	r2,-16(fp)
  810d98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810d9c:	e0bffa17 	ldw	r2,-24(fp)
  810da0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  810da4:	e037883a 	mov	sp,fp
  810da8:	df000017 	ldw	fp,0(sp)
  810dac:	dec00104 	addi	sp,sp,4
  810db0:	f800283a 	ret

00810db4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  810db4:	defff004 	addi	sp,sp,-64
  810db8:	dfc00f15 	stw	ra,60(sp)
  810dbc:	df000e15 	stw	fp,56(sp)
  810dc0:	df000e04 	addi	fp,sp,56
  810dc4:	e13ffd05 	stb	r4,-12(fp)
  810dc8:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  810dcc:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  810dd0:	e0bffd03 	ldbu	r2,-12(fp)
  810dd4:	10800530 	cmpltui	r2,r2,20
  810dd8:	1000061e 	bne	r2,zero,810df4 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  810ddc:	e0bffd03 	ldbu	r2,-12(fp)
  810de0:	10803fe0 	cmpeqi	r2,r2,255
  810de4:	1000031e 	bne	r2,zero,810df4 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  810de8:	00800a84 	movi	r2,42
  810dec:	e0bfff15 	stw	r2,-4(fp)
  810df0:	00014706 	br	811310 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  810df4:	e0bffe03 	ldbu	r2,-8(fp)
  810df8:	10800530 	cmpltui	r2,r2,20
  810dfc:	1000031e 	bne	r2,zero,810e0c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  810e00:	00800a84 	movi	r2,42
  810e04:	e0bfff15 	stw	r2,-4(fp)
  810e08:	00014106 	br	811310 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810e0c:	0005303a 	rdctl	r2,status
  810e10:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810e14:	e0fff617 	ldw	r3,-40(fp)
  810e18:	00bfff84 	movi	r2,-2
  810e1c:	1884703a 	and	r2,r3,r2
  810e20:	1001703a 	wrctl	status,r2
  
  return context;
  810e24:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  810e28:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  810e2c:	e0bffe03 	ldbu	r2,-8(fp)
  810e30:	00c020b4 	movhi	r3,130
  810e34:	18fb4004 	addi	r3,r3,-4864
  810e38:	1085883a 	add	r2,r2,r2
  810e3c:	1085883a 	add	r2,r2,r2
  810e40:	10c5883a 	add	r2,r2,r3
  810e44:	10800017 	ldw	r2,0(r2)
  810e48:	1005003a 	cmpeq	r2,r2,zero
  810e4c:	1000071e 	bne	r2,zero,810e6c <OSTaskChangePrio+0xb8>
  810e50:	e0bff717 	ldw	r2,-36(fp)
  810e54:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e58:	e0bff517 	ldw	r2,-44(fp)
  810e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  810e60:	00800a04 	movi	r2,40
  810e64:	e0bfff15 	stw	r2,-4(fp)
  810e68:	00012906 	br	811310 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  810e6c:	e0bffd03 	ldbu	r2,-12(fp)
  810e70:	10803fd8 	cmpnei	r2,r2,255
  810e74:	1000051e 	bne	r2,zero,810e8c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  810e78:	008020b4 	movhi	r2,130
  810e7c:	10a6ba04 	addi	r2,r2,-25880
  810e80:	10800017 	ldw	r2,0(r2)
  810e84:	10800c83 	ldbu	r2,50(r2)
  810e88:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  810e8c:	e0bffd03 	ldbu	r2,-12(fp)
  810e90:	00c020b4 	movhi	r3,130
  810e94:	18fb4004 	addi	r3,r3,-4864
  810e98:	1085883a 	add	r2,r2,r2
  810e9c:	1085883a 	add	r2,r2,r2
  810ea0:	10c5883a 	add	r2,r2,r3
  810ea4:	10800017 	ldw	r2,0(r2)
  810ea8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  810eac:	e0bffa17 	ldw	r2,-24(fp)
  810eb0:	1004c03a 	cmpne	r2,r2,zero
  810eb4:	1000071e 	bne	r2,zero,810ed4 <OSTaskChangePrio+0x120>
  810eb8:	e0bff717 	ldw	r2,-36(fp)
  810ebc:	e0bff415 	stw	r2,-48(fp)
  810ec0:	e0bff417 	ldw	r2,-48(fp)
  810ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  810ec8:	00800a44 	movi	r2,41
  810ecc:	e0bfff15 	stw	r2,-4(fp)
  810ed0:	00010f06 	br	811310 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  810ed4:	e0bffa17 	ldw	r2,-24(fp)
  810ed8:	10800058 	cmpnei	r2,r2,1
  810edc:	1000071e 	bne	r2,zero,810efc <OSTaskChangePrio+0x148>
  810ee0:	e0bff717 	ldw	r2,-36(fp)
  810ee4:	e0bff315 	stw	r2,-52(fp)
  810ee8:	e0bff317 	ldw	r2,-52(fp)
  810eec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  810ef0:	008010c4 	movi	r2,67
  810ef4:	e0bfff15 	stw	r2,-4(fp)
  810ef8:	00010506 	br	811310 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  810efc:	e0bffe03 	ldbu	r2,-8(fp)
  810f00:	1004d0fa 	srli	r2,r2,3
  810f04:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  810f08:	e0bffe03 	ldbu	r2,-8(fp)
  810f0c:	108001cc 	andi	r2,r2,7
  810f10:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  810f14:	e0fff983 	ldbu	r3,-26(fp)
  810f18:	00800044 	movi	r2,1
  810f1c:	10c4983a 	sll	r2,r2,r3
  810f20:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  810f24:	e0fff943 	ldbu	r3,-27(fp)
  810f28:	00800044 	movi	r2,1
  810f2c:	10c4983a 	sll	r2,r2,r3
  810f30:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  810f34:	e0bffd03 	ldbu	r2,-12(fp)
  810f38:	00c020b4 	movhi	r3,130
  810f3c:	18fb4004 	addi	r3,r3,-4864
  810f40:	1085883a 	add	r2,r2,r2
  810f44:	1085883a 	add	r2,r2,r2
  810f48:	10c5883a 	add	r2,r2,r3
  810f4c:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  810f50:	e0bffe03 	ldbu	r2,-8(fp)
  810f54:	00c020b4 	movhi	r3,130
  810f58:	18fb4004 	addi	r3,r3,-4864
  810f5c:	1085883a 	add	r2,r2,r2
  810f60:	1085883a 	add	r2,r2,r2
  810f64:	10c7883a 	add	r3,r2,r3
  810f68:	e0bffa17 	ldw	r2,-24(fp)
  810f6c:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  810f70:	e0bffa17 	ldw	r2,-24(fp)
  810f74:	10800d03 	ldbu	r2,52(r2)
  810f78:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  810f7c:	e0bffa17 	ldw	r2,-24(fp)
  810f80:	10800d83 	ldbu	r2,54(r2)
  810f84:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  810f88:	e0bffa17 	ldw	r2,-24(fp)
  810f8c:	10800d43 	ldbu	r2,53(r2)
  810f90:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  810f94:	e0fff903 	ldbu	r3,-28(fp)
  810f98:	008020b4 	movhi	r2,130
  810f9c:	10a6b744 	addi	r2,r2,-25891
  810fa0:	10c5883a 	add	r2,r2,r3
  810fa4:	10c00003 	ldbu	r3,0(r2)
  810fa8:	e0bff803 	ldbu	r2,-32(fp)
  810fac:	1884703a 	and	r2,r3,r2
  810fb0:	10803fcc 	andi	r2,r2,255
  810fb4:	1005003a 	cmpeq	r2,r2,zero
  810fb8:	1000381e 	bne	r2,zero,81109c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  810fbc:	e13ff903 	ldbu	r4,-28(fp)
  810fc0:	e0fff903 	ldbu	r3,-28(fp)
  810fc4:	008020b4 	movhi	r2,130
  810fc8:	10a6b744 	addi	r2,r2,-25891
  810fcc:	10c5883a 	add	r2,r2,r3
  810fd0:	10800003 	ldbu	r2,0(r2)
  810fd4:	1007883a 	mov	r3,r2
  810fd8:	e0bff803 	ldbu	r2,-32(fp)
  810fdc:	0084303a 	nor	r2,zero,r2
  810fe0:	1884703a 	and	r2,r3,r2
  810fe4:	1007883a 	mov	r3,r2
  810fe8:	008020b4 	movhi	r2,130
  810fec:	10a6b744 	addi	r2,r2,-25891
  810ff0:	1105883a 	add	r2,r2,r4
  810ff4:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  810ff8:	e0fff903 	ldbu	r3,-28(fp)
  810ffc:	008020b4 	movhi	r2,130
  811000:	10a6b744 	addi	r2,r2,-25891
  811004:	10c5883a 	add	r2,r2,r3
  811008:	10800003 	ldbu	r2,0(r2)
  81100c:	10803fcc 	andi	r2,r2,255
  811010:	1004c03a 	cmpne	r2,r2,zero
  811014:	10000b1e 	bne	r2,zero,811044 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  811018:	e0bff843 	ldbu	r2,-31(fp)
  81101c:	0084303a 	nor	r2,zero,r2
  811020:	1007883a 	mov	r3,r2
  811024:	008020b4 	movhi	r2,130
  811028:	10a6b704 	addi	r2,r2,-25892
  81102c:	10800003 	ldbu	r2,0(r2)
  811030:	1884703a 	and	r2,r3,r2
  811034:	1007883a 	mov	r3,r2
  811038:	008020b4 	movhi	r2,130
  81103c:	10a6b704 	addi	r2,r2,-25892
  811040:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  811044:	008020b4 	movhi	r2,130
  811048:	10a6b704 	addi	r2,r2,-25892
  81104c:	10c00003 	ldbu	r3,0(r2)
  811050:	e0bff8c3 	ldbu	r2,-29(fp)
  811054:	1884b03a 	or	r2,r3,r2
  811058:	1007883a 	mov	r3,r2
  81105c:	008020b4 	movhi	r2,130
  811060:	10a6b704 	addi	r2,r2,-25892
  811064:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  811068:	e13ff983 	ldbu	r4,-26(fp)
  81106c:	e0fff983 	ldbu	r3,-26(fp)
  811070:	008020b4 	movhi	r2,130
  811074:	10a6b744 	addi	r2,r2,-25891
  811078:	10c5883a 	add	r2,r2,r3
  81107c:	10c00003 	ldbu	r3,0(r2)
  811080:	e0bff883 	ldbu	r2,-30(fp)
  811084:	1884b03a 	or	r2,r3,r2
  811088:	1007883a 	mov	r3,r2
  81108c:	008020b4 	movhi	r2,130
  811090:	10a6b744 	addi	r2,r2,-25891
  811094:	1105883a 	add	r2,r2,r4
  811098:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  81109c:	e0bffa17 	ldw	r2,-24(fp)
  8110a0:	10800717 	ldw	r2,28(r2)
  8110a4:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  8110a8:	e0bffc17 	ldw	r2,-16(fp)
  8110ac:	1005003a 	cmpeq	r2,r2,zero
  8110b0:	1000341e 	bne	r2,zero,811184 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  8110b4:	e13ff903 	ldbu	r4,-28(fp)
  8110b8:	e0fff903 	ldbu	r3,-28(fp)
  8110bc:	e0bffc17 	ldw	r2,-16(fp)
  8110c0:	1885883a 	add	r2,r3,r2
  8110c4:	10800204 	addi	r2,r2,8
  8110c8:	108000c3 	ldbu	r2,3(r2)
  8110cc:	1007883a 	mov	r3,r2
  8110d0:	e0bff803 	ldbu	r2,-32(fp)
  8110d4:	0084303a 	nor	r2,zero,r2
  8110d8:	1884703a 	and	r2,r3,r2
  8110dc:	1007883a 	mov	r3,r2
  8110e0:	e0bffc17 	ldw	r2,-16(fp)
  8110e4:	2085883a 	add	r2,r4,r2
  8110e8:	10800204 	addi	r2,r2,8
  8110ec:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  8110f0:	e0fff903 	ldbu	r3,-28(fp)
  8110f4:	e0bffc17 	ldw	r2,-16(fp)
  8110f8:	1885883a 	add	r2,r3,r2
  8110fc:	10800204 	addi	r2,r2,8
  811100:	108000c3 	ldbu	r2,3(r2)
  811104:	10803fcc 	andi	r2,r2,255
  811108:	1004c03a 	cmpne	r2,r2,zero
  81110c:	1000091e 	bne	r2,zero,811134 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  811110:	e0bffc17 	ldw	r2,-16(fp)
  811114:	10800283 	ldbu	r2,10(r2)
  811118:	1007883a 	mov	r3,r2
  81111c:	e0bff843 	ldbu	r2,-31(fp)
  811120:	0084303a 	nor	r2,zero,r2
  811124:	1884703a 	and	r2,r3,r2
  811128:	1007883a 	mov	r3,r2
  81112c:	e0bffc17 	ldw	r2,-16(fp)
  811130:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  811134:	e0bffc17 	ldw	r2,-16(fp)
  811138:	10c00283 	ldbu	r3,10(r2)
  81113c:	e0bff8c3 	ldbu	r2,-29(fp)
  811140:	1884b03a 	or	r2,r3,r2
  811144:	1007883a 	mov	r3,r2
  811148:	e0bffc17 	ldw	r2,-16(fp)
  81114c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  811150:	e13ff983 	ldbu	r4,-26(fp)
  811154:	e0fff983 	ldbu	r3,-26(fp)
  811158:	e0bffc17 	ldw	r2,-16(fp)
  81115c:	1885883a 	add	r2,r3,r2
  811160:	10800204 	addi	r2,r2,8
  811164:	10c000c3 	ldbu	r3,3(r2)
  811168:	e0bff883 	ldbu	r2,-30(fp)
  81116c:	1884b03a 	or	r2,r3,r2
  811170:	1007883a 	mov	r3,r2
  811174:	e0bffc17 	ldw	r2,-16(fp)
  811178:	2085883a 	add	r2,r4,r2
  81117c:	10800204 	addi	r2,r2,8
  811180:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  811184:	e0bffa17 	ldw	r2,-24(fp)
  811188:	10800817 	ldw	r2,32(r2)
  81118c:	1005003a 	cmpeq	r2,r2,zero
  811190:	1000441e 	bne	r2,zero,8112a4 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  811194:	e0bffa17 	ldw	r2,-24(fp)
  811198:	10800817 	ldw	r2,32(r2)
  81119c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  8111a0:	e0bffb17 	ldw	r2,-20(fp)
  8111a4:	10800017 	ldw	r2,0(r2)
  8111a8:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  8111ac:	00003a06 	br	811298 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  8111b0:	e13ff903 	ldbu	r4,-28(fp)
  8111b4:	e0fff903 	ldbu	r3,-28(fp)
  8111b8:	e0bffc17 	ldw	r2,-16(fp)
  8111bc:	1885883a 	add	r2,r3,r2
  8111c0:	10800204 	addi	r2,r2,8
  8111c4:	108000c3 	ldbu	r2,3(r2)
  8111c8:	1007883a 	mov	r3,r2
  8111cc:	e0bff803 	ldbu	r2,-32(fp)
  8111d0:	0084303a 	nor	r2,zero,r2
  8111d4:	1884703a 	and	r2,r3,r2
  8111d8:	1007883a 	mov	r3,r2
  8111dc:	e0bffc17 	ldw	r2,-16(fp)
  8111e0:	2085883a 	add	r2,r4,r2
  8111e4:	10800204 	addi	r2,r2,8
  8111e8:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  8111ec:	e0fff903 	ldbu	r3,-28(fp)
  8111f0:	e0bffc17 	ldw	r2,-16(fp)
  8111f4:	1885883a 	add	r2,r3,r2
  8111f8:	10800204 	addi	r2,r2,8
  8111fc:	108000c3 	ldbu	r2,3(r2)
  811200:	10803fcc 	andi	r2,r2,255
  811204:	1004c03a 	cmpne	r2,r2,zero
  811208:	1000091e 	bne	r2,zero,811230 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  81120c:	e0bffc17 	ldw	r2,-16(fp)
  811210:	10800283 	ldbu	r2,10(r2)
  811214:	1007883a 	mov	r3,r2
  811218:	e0bff843 	ldbu	r2,-31(fp)
  81121c:	0084303a 	nor	r2,zero,r2
  811220:	1884703a 	and	r2,r3,r2
  811224:	1007883a 	mov	r3,r2
  811228:	e0bffc17 	ldw	r2,-16(fp)
  81122c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  811230:	e0bffc17 	ldw	r2,-16(fp)
  811234:	10c00283 	ldbu	r3,10(r2)
  811238:	e0bff8c3 	ldbu	r2,-29(fp)
  81123c:	1884b03a 	or	r2,r3,r2
  811240:	1007883a 	mov	r3,r2
  811244:	e0bffc17 	ldw	r2,-16(fp)
  811248:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  81124c:	e13ff983 	ldbu	r4,-26(fp)
  811250:	e0fff983 	ldbu	r3,-26(fp)
  811254:	e0bffc17 	ldw	r2,-16(fp)
  811258:	1885883a 	add	r2,r3,r2
  81125c:	10800204 	addi	r2,r2,8
  811260:	10c000c3 	ldbu	r3,3(r2)
  811264:	e0bff883 	ldbu	r2,-30(fp)
  811268:	1884b03a 	or	r2,r3,r2
  81126c:	1007883a 	mov	r3,r2
  811270:	e0bffc17 	ldw	r2,-16(fp)
  811274:	2085883a 	add	r2,r4,r2
  811278:	10800204 	addi	r2,r2,8
  81127c:	10c000c5 	stb	r3,3(r2)
            pevents++;
  811280:	e0bffb17 	ldw	r2,-20(fp)
  811284:	10800104 	addi	r2,r2,4
  811288:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  81128c:	e0bffb17 	ldw	r2,-20(fp)
  811290:	10800017 	ldw	r2,0(r2)
  811294:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  811298:	e0bffc17 	ldw	r2,-16(fp)
  81129c:	1004c03a 	cmpne	r2,r2,zero
  8112a0:	103fc31e 	bne	r2,zero,8111b0 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  8112a4:	e0fffa17 	ldw	r3,-24(fp)
  8112a8:	e0bffe03 	ldbu	r2,-8(fp)
  8112ac:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  8112b0:	e0fffa17 	ldw	r3,-24(fp)
  8112b4:	e0bff983 	ldbu	r2,-26(fp)
  8112b8:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  8112bc:	e0fffa17 	ldw	r3,-24(fp)
  8112c0:	e0bff943 	ldbu	r2,-27(fp)
  8112c4:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  8112c8:	e0fffa17 	ldw	r3,-24(fp)
  8112cc:	e0bff8c3 	ldbu	r2,-29(fp)
  8112d0:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  8112d4:	e0fffa17 	ldw	r3,-24(fp)
  8112d8:	e0bff883 	ldbu	r2,-30(fp)
  8112dc:	18800d45 	stb	r2,53(r3)
  8112e0:	e0bff717 	ldw	r2,-36(fp)
  8112e4:	e0bff215 	stw	r2,-56(fp)
  8112e8:	e0bff217 	ldw	r2,-56(fp)
  8112ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8112f0:	008020b4 	movhi	r2,130
  8112f4:	10a6ab44 	addi	r2,r2,-25939
  8112f8:	10800003 	ldbu	r2,0(r2)
  8112fc:	10803fcc 	andi	r2,r2,255
  811300:	10800058 	cmpnei	r2,r2,1
  811304:	1000011e 	bne	r2,zero,81130c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  811308:	080c5000 	call	80c500 <OS_Sched>
    }
    return (OS_ERR_NONE);
  81130c:	e03fff15 	stw	zero,-4(fp)
  811310:	e0bfff17 	ldw	r2,-4(fp)
}
  811314:	e037883a 	mov	sp,fp
  811318:	dfc00117 	ldw	ra,4(sp)
  81131c:	df000017 	ldw	fp,0(sp)
  811320:	dec00204 	addi	sp,sp,8
  811324:	f800283a 	ret

00811328 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  811328:	deffed04 	addi	sp,sp,-76
  81132c:	dfc01215 	stw	ra,72(sp)
  811330:	df001115 	stw	fp,68(sp)
  811334:	df001104 	addi	fp,sp,68
  811338:	e13ffb15 	stw	r4,-20(fp)
  81133c:	e17ffc15 	stw	r5,-16(fp)
  811340:	e1bffd15 	stw	r6,-12(fp)
  811344:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  811348:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81134c:	e0bffe03 	ldbu	r2,-8(fp)
  811350:	10800570 	cmpltui	r2,r2,21
  811354:	1000031e 	bne	r2,zero,811364 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  811358:	00800a84 	movi	r2,42
  81135c:	e0bfff15 	stw	r2,-4(fp)
  811360:	00006006 	br	8114e4 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811364:	0005303a 	rdctl	r2,status
  811368:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81136c:	e0fff717 	ldw	r3,-36(fp)
  811370:	00bfff84 	movi	r2,-2
  811374:	1884703a 	and	r2,r3,r2
  811378:	1001703a 	wrctl	status,r2
  
  return context;
  81137c:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811380:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  811384:	008020b4 	movhi	r2,130
  811388:	10a6b904 	addi	r2,r2,-25884
  81138c:	10800003 	ldbu	r2,0(r2)
  811390:	10803fcc 	andi	r2,r2,255
  811394:	1005003a 	cmpeq	r2,r2,zero
  811398:	1000071e 	bne	r2,zero,8113b8 <OSTaskCreate+0x90>
  81139c:	e0bff817 	ldw	r2,-32(fp)
  8113a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113a4:	e0bff617 	ldw	r2,-40(fp)
  8113a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  8113ac:	00800f04 	movi	r2,60
  8113b0:	e0bfff15 	stw	r2,-4(fp)
  8113b4:	00004b06 	br	8114e4 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8113b8:	e0bffe03 	ldbu	r2,-8(fp)
  8113bc:	00c020b4 	movhi	r3,130
  8113c0:	18fb4004 	addi	r3,r3,-4864
  8113c4:	1085883a 	add	r2,r2,r2
  8113c8:	1085883a 	add	r2,r2,r2
  8113cc:	10c5883a 	add	r2,r2,r3
  8113d0:	10800017 	ldw	r2,0(r2)
  8113d4:	1004c03a 	cmpne	r2,r2,zero
  8113d8:	10003c1e 	bne	r2,zero,8114cc <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8113dc:	e0bffe03 	ldbu	r2,-8(fp)
  8113e0:	00c020b4 	movhi	r3,130
  8113e4:	18fb4004 	addi	r3,r3,-4864
  8113e8:	1085883a 	add	r2,r2,r2
  8113ec:	1085883a 	add	r2,r2,r2
  8113f0:	10c7883a 	add	r3,r2,r3
  8113f4:	00800044 	movi	r2,1
  8113f8:	18800015 	stw	r2,0(r3)
  8113fc:	e0bff817 	ldw	r2,-32(fp)
  811400:	e0bff515 	stw	r2,-44(fp)
  811404:	e0bff517 	ldw	r2,-44(fp)
  811408:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  81140c:	e13ffb17 	ldw	r4,-20(fp)
  811410:	e17ffc17 	ldw	r5,-16(fp)
  811414:	e1bffd17 	ldw	r6,-12(fp)
  811418:	000f883a 	mov	r7,zero
  81141c:	08154f40 	call	8154f4 <OSTaskStkInit>
  811420:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  811424:	e13ffe03 	ldbu	r4,-8(fp)
  811428:	d8000015 	stw	zero,0(sp)
  81142c:	d8000115 	stw	zero,4(sp)
  811430:	d8000215 	stw	zero,8(sp)
  811434:	e17ffa17 	ldw	r5,-24(fp)
  811438:	000d883a 	mov	r6,zero
  81143c:	000f883a 	mov	r7,zero
  811440:	080c9080 	call	80c908 <OS_TCBInit>
  811444:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  811448:	e0bff903 	ldbu	r2,-28(fp)
  81144c:	1004c03a 	cmpne	r2,r2,zero
  811450:	1000081e 	bne	r2,zero,811474 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  811454:	008020b4 	movhi	r2,130
  811458:	10a6ab44 	addi	r2,r2,-25939
  81145c:	10800003 	ldbu	r2,0(r2)
  811460:	10803fcc 	andi	r2,r2,255
  811464:	10800058 	cmpnei	r2,r2,1
  811468:	1000151e 	bne	r2,zero,8114c0 <OSTaskCreate+0x198>
                OS_Sched();
  81146c:	080c5000 	call	80c500 <OS_Sched>
  811470:	00001306 	br	8114c0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811474:	0005303a 	rdctl	r2,status
  811478:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81147c:	e0fff417 	ldw	r3,-48(fp)
  811480:	00bfff84 	movi	r2,-2
  811484:	1884703a 	and	r2,r3,r2
  811488:	1001703a 	wrctl	status,r2
  
  return context;
  81148c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  811490:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  811494:	e0bffe03 	ldbu	r2,-8(fp)
  811498:	00c020b4 	movhi	r3,130
  81149c:	18fb4004 	addi	r3,r3,-4864
  8114a0:	1085883a 	add	r2,r2,r2
  8114a4:	1085883a 	add	r2,r2,r2
  8114a8:	10c5883a 	add	r2,r2,r3
  8114ac:	10000015 	stw	zero,0(r2)
  8114b0:	e0bff817 	ldw	r2,-32(fp)
  8114b4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8114b8:	e0bff317 	ldw	r2,-52(fp)
  8114bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8114c0:	e0bff903 	ldbu	r2,-28(fp)
  8114c4:	e0bfff15 	stw	r2,-4(fp)
  8114c8:	00000606 	br	8114e4 <OSTaskCreate+0x1bc>
  8114cc:	e0bff817 	ldw	r2,-32(fp)
  8114d0:	e0bff215 	stw	r2,-56(fp)
  8114d4:	e0bff217 	ldw	r2,-56(fp)
  8114d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8114dc:	00800a04 	movi	r2,40
  8114e0:	e0bfff15 	stw	r2,-4(fp)
  8114e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8114e8:	e037883a 	mov	sp,fp
  8114ec:	dfc00117 	ldw	ra,4(sp)
  8114f0:	df000017 	ldw	fp,0(sp)
  8114f4:	dec00204 	addi	sp,sp,8
  8114f8:	f800283a 	ret

008114fc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8114fc:	deffeb04 	addi	sp,sp,-84
  811500:	dfc01415 	stw	ra,80(sp)
  811504:	df001315 	stw	fp,76(sp)
  811508:	df001304 	addi	fp,sp,76
  81150c:	e13ff915 	stw	r4,-28(fp)
  811510:	e17ffa15 	stw	r5,-24(fp)
  811514:	e1bffb15 	stw	r6,-20(fp)
  811518:	e0800217 	ldw	r2,8(fp)
  81151c:	e0c00617 	ldw	r3,24(fp)
  811520:	e1fffc05 	stb	r7,-16(fp)
  811524:	e0bffd0d 	sth	r2,-12(fp)
  811528:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  81152c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  811530:	e0bffc03 	ldbu	r2,-16(fp)
  811534:	10800570 	cmpltui	r2,r2,21
  811538:	1000031e 	bne	r2,zero,811548 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  81153c:	00800a84 	movi	r2,42
  811540:	e0bfff15 	stw	r2,-4(fp)
  811544:	00006706 	br	8116e4 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811548:	0005303a 	rdctl	r2,status
  81154c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811550:	e0fff517 	ldw	r3,-44(fp)
  811554:	00bfff84 	movi	r2,-2
  811558:	1884703a 	and	r2,r3,r2
  81155c:	1001703a 	wrctl	status,r2
  
  return context;
  811560:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811564:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  811568:	008020b4 	movhi	r2,130
  81156c:	10a6b904 	addi	r2,r2,-25884
  811570:	10800003 	ldbu	r2,0(r2)
  811574:	10803fcc 	andi	r2,r2,255
  811578:	1005003a 	cmpeq	r2,r2,zero
  81157c:	1000071e 	bne	r2,zero,81159c <OSTaskCreateExt+0xa0>
  811580:	e0bff617 	ldw	r2,-40(fp)
  811584:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811588:	e0bff417 	ldw	r2,-48(fp)
  81158c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  811590:	00800f04 	movi	r2,60
  811594:	e0bfff15 	stw	r2,-4(fp)
  811598:	00005206 	br	8116e4 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  81159c:	e0bffc03 	ldbu	r2,-16(fp)
  8115a0:	00c020b4 	movhi	r3,130
  8115a4:	18fb4004 	addi	r3,r3,-4864
  8115a8:	1085883a 	add	r2,r2,r2
  8115ac:	1085883a 	add	r2,r2,r2
  8115b0:	10c5883a 	add	r2,r2,r3
  8115b4:	10800017 	ldw	r2,0(r2)
  8115b8:	1004c03a 	cmpne	r2,r2,zero
  8115bc:	1000431e 	bne	r2,zero,8116cc <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8115c0:	e0bffc03 	ldbu	r2,-16(fp)
  8115c4:	00c020b4 	movhi	r3,130
  8115c8:	18fb4004 	addi	r3,r3,-4864
  8115cc:	1085883a 	add	r2,r2,r2
  8115d0:	1085883a 	add	r2,r2,r2
  8115d4:	10c7883a 	add	r3,r2,r3
  8115d8:	00800044 	movi	r2,1
  8115dc:	18800015 	stw	r2,0(r3)
  8115e0:	e0bff617 	ldw	r2,-40(fp)
  8115e4:	e0bff315 	stw	r2,-52(fp)
  8115e8:	e0bff317 	ldw	r2,-52(fp)
  8115ec:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  8115f0:	e1bffe0b 	ldhu	r6,-8(fp)
  8115f4:	e1000317 	ldw	r4,12(fp)
  8115f8:	e1400417 	ldw	r5,16(fp)
  8115fc:	08127780 	call	812778 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  811600:	e1fffe0b 	ldhu	r7,-8(fp)
  811604:	e13ff917 	ldw	r4,-28(fp)
  811608:	e17ffa17 	ldw	r5,-24(fp)
  81160c:	e1bffb17 	ldw	r6,-20(fp)
  811610:	08154f40 	call	8154f4 <OSTaskStkInit>
  811614:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  811618:	e13ffc03 	ldbu	r4,-16(fp)
  81161c:	e1fffd0b 	ldhu	r7,-12(fp)
  811620:	e0fffe0b 	ldhu	r3,-8(fp)
  811624:	e0800417 	ldw	r2,16(fp)
  811628:	d8800015 	stw	r2,0(sp)
  81162c:	e0800517 	ldw	r2,20(fp)
  811630:	d8800115 	stw	r2,4(sp)
  811634:	d8c00215 	stw	r3,8(sp)
  811638:	e17ff817 	ldw	r5,-32(fp)
  81163c:	e1800317 	ldw	r6,12(fp)
  811640:	080c9080 	call	80c908 <OS_TCBInit>
  811644:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  811648:	e0bff703 	ldbu	r2,-36(fp)
  81164c:	1004c03a 	cmpne	r2,r2,zero
  811650:	1000081e 	bne	r2,zero,811674 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  811654:	008020b4 	movhi	r2,130
  811658:	10a6ab44 	addi	r2,r2,-25939
  81165c:	10800003 	ldbu	r2,0(r2)
  811660:	10803fcc 	andi	r2,r2,255
  811664:	10800058 	cmpnei	r2,r2,1
  811668:	1000151e 	bne	r2,zero,8116c0 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  81166c:	080c5000 	call	80c500 <OS_Sched>
  811670:	00001306 	br	8116c0 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811674:	0005303a 	rdctl	r2,status
  811678:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81167c:	e0fff217 	ldw	r3,-56(fp)
  811680:	00bfff84 	movi	r2,-2
  811684:	1884703a 	and	r2,r3,r2
  811688:	1001703a 	wrctl	status,r2
  
  return context;
  81168c:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  811690:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  811694:	e0bffc03 	ldbu	r2,-16(fp)
  811698:	00c020b4 	movhi	r3,130
  81169c:	18fb4004 	addi	r3,r3,-4864
  8116a0:	1085883a 	add	r2,r2,r2
  8116a4:	1085883a 	add	r2,r2,r2
  8116a8:	10c5883a 	add	r2,r2,r3
  8116ac:	10000015 	stw	zero,0(r2)
  8116b0:	e0bff617 	ldw	r2,-40(fp)
  8116b4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8116b8:	e0bff117 	ldw	r2,-60(fp)
  8116bc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8116c0:	e0bff703 	ldbu	r2,-36(fp)
  8116c4:	e0bfff15 	stw	r2,-4(fp)
  8116c8:	00000606 	br	8116e4 <OSTaskCreateExt+0x1e8>
  8116cc:	e0bff617 	ldw	r2,-40(fp)
  8116d0:	e0bff015 	stw	r2,-64(fp)
  8116d4:	e0bff017 	ldw	r2,-64(fp)
  8116d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8116dc:	00800a04 	movi	r2,40
  8116e0:	e0bfff15 	stw	r2,-4(fp)
  8116e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8116e8:	e037883a 	mov	sp,fp
  8116ec:	dfc00117 	ldw	ra,4(sp)
  8116f0:	df000017 	ldw	fp,0(sp)
  8116f4:	dec00204 	addi	sp,sp,8
  8116f8:	f800283a 	ret

008116fc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  8116fc:	defff304 	addi	sp,sp,-52
  811700:	dfc00c15 	stw	ra,48(sp)
  811704:	df000b15 	stw	fp,44(sp)
  811708:	df000b04 	addi	fp,sp,44
  81170c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  811710:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  811714:	008020b4 	movhi	r2,130
  811718:	10a6b904 	addi	r2,r2,-25884
  81171c:	10800003 	ldbu	r2,0(r2)
  811720:	10803fcc 	andi	r2,r2,255
  811724:	1005003a 	cmpeq	r2,r2,zero
  811728:	1000031e 	bne	r2,zero,811738 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  81172c:	00801004 	movi	r2,64
  811730:	e0bfff15 	stw	r2,-4(fp)
  811734:	0000ee06 	br	811af0 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  811738:	e0bffe03 	ldbu	r2,-8(fp)
  81173c:	10800518 	cmpnei	r2,r2,20
  811740:	1000031e 	bne	r2,zero,811750 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  811744:	00800f84 	movi	r2,62
  811748:	e0bfff15 	stw	r2,-4(fp)
  81174c:	0000e806 	br	811af0 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  811750:	e0bffe03 	ldbu	r2,-8(fp)
  811754:	10800530 	cmpltui	r2,r2,20
  811758:	1000061e 	bne	r2,zero,811774 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  81175c:	e0bffe03 	ldbu	r2,-8(fp)
  811760:	10803fe0 	cmpeqi	r2,r2,255
  811764:	1000031e 	bne	r2,zero,811774 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  811768:	00800a84 	movi	r2,42
  81176c:	e0bfff15 	stw	r2,-4(fp)
  811770:	0000df06 	br	811af0 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811774:	0005303a 	rdctl	r2,status
  811778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81177c:	e0fffa17 	ldw	r3,-24(fp)
  811780:	00bfff84 	movi	r2,-2
  811784:	1884703a 	and	r2,r3,r2
  811788:	1001703a 	wrctl	status,r2
  
  return context;
  81178c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  811790:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  811794:	e0bffe03 	ldbu	r2,-8(fp)
  811798:	10803fd8 	cmpnei	r2,r2,255
  81179c:	1000051e 	bne	r2,zero,8117b4 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  8117a0:	008020b4 	movhi	r2,130
  8117a4:	10a6ba04 	addi	r2,r2,-25880
  8117a8:	10800017 	ldw	r2,0(r2)
  8117ac:	10800c83 	ldbu	r2,50(r2)
  8117b0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8117b4:	e0bffe03 	ldbu	r2,-8(fp)
  8117b8:	00c020b4 	movhi	r3,130
  8117bc:	18fb4004 	addi	r3,r3,-4864
  8117c0:	1085883a 	add	r2,r2,r2
  8117c4:	1085883a 	add	r2,r2,r2
  8117c8:	10c5883a 	add	r2,r2,r3
  8117cc:	10800017 	ldw	r2,0(r2)
  8117d0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  8117d4:	e0bffc17 	ldw	r2,-16(fp)
  8117d8:	1004c03a 	cmpne	r2,r2,zero
  8117dc:	1000071e 	bne	r2,zero,8117fc <OSTaskDel+0x100>
  8117e0:	e0bffb17 	ldw	r2,-20(fp)
  8117e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8117e8:	e0bff917 	ldw	r2,-28(fp)
  8117ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8117f0:	008010c4 	movi	r2,67
  8117f4:	e0bfff15 	stw	r2,-4(fp)
  8117f8:	0000bd06 	br	811af0 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  8117fc:	e0bffc17 	ldw	r2,-16(fp)
  811800:	10800058 	cmpnei	r2,r2,1
  811804:	1000071e 	bne	r2,zero,811824 <OSTaskDel+0x128>
  811808:	e0bffb17 	ldw	r2,-20(fp)
  81180c:	e0bff815 	stw	r2,-32(fp)
  811810:	e0bff817 	ldw	r2,-32(fp)
  811814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  811818:	00800f44 	movi	r2,61
  81181c:	e0bfff15 	stw	r2,-4(fp)
  811820:	0000b306 	br	811af0 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  811824:	e0bffc17 	ldw	r2,-16(fp)
  811828:	10800d03 	ldbu	r2,52(r2)
  81182c:	11003fcc 	andi	r4,r2,255
  811830:	e0bffc17 	ldw	r2,-16(fp)
  811834:	10800d03 	ldbu	r2,52(r2)
  811838:	10c03fcc 	andi	r3,r2,255
  81183c:	008020b4 	movhi	r2,130
  811840:	10a6b744 	addi	r2,r2,-25891
  811844:	10c5883a 	add	r2,r2,r3
  811848:	10800003 	ldbu	r2,0(r2)
  81184c:	1007883a 	mov	r3,r2
  811850:	e0bffc17 	ldw	r2,-16(fp)
  811854:	10800d43 	ldbu	r2,53(r2)
  811858:	0084303a 	nor	r2,zero,r2
  81185c:	1884703a 	and	r2,r3,r2
  811860:	1007883a 	mov	r3,r2
  811864:	008020b4 	movhi	r2,130
  811868:	10a6b744 	addi	r2,r2,-25891
  81186c:	1105883a 	add	r2,r2,r4
  811870:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  811874:	e0bffc17 	ldw	r2,-16(fp)
  811878:	10800d03 	ldbu	r2,52(r2)
  81187c:	10c03fcc 	andi	r3,r2,255
  811880:	008020b4 	movhi	r2,130
  811884:	10a6b744 	addi	r2,r2,-25891
  811888:	10c5883a 	add	r2,r2,r3
  81188c:	10800003 	ldbu	r2,0(r2)
  811890:	10803fcc 	andi	r2,r2,255
  811894:	1004c03a 	cmpne	r2,r2,zero
  811898:	10000c1e 	bne	r2,zero,8118cc <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  81189c:	e0bffc17 	ldw	r2,-16(fp)
  8118a0:	10800d83 	ldbu	r2,54(r2)
  8118a4:	0084303a 	nor	r2,zero,r2
  8118a8:	1007883a 	mov	r3,r2
  8118ac:	008020b4 	movhi	r2,130
  8118b0:	10a6b704 	addi	r2,r2,-25892
  8118b4:	10800003 	ldbu	r2,0(r2)
  8118b8:	1884703a 	and	r2,r3,r2
  8118bc:	1007883a 	mov	r3,r2
  8118c0:	008020b4 	movhi	r2,130
  8118c4:	10a6b704 	addi	r2,r2,-25892
  8118c8:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  8118cc:	e0bffc17 	ldw	r2,-16(fp)
  8118d0:	10800717 	ldw	r2,28(r2)
  8118d4:	1005003a 	cmpeq	r2,r2,zero
  8118d8:	1000041e 	bne	r2,zero,8118ec <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  8118dc:	e0bffc17 	ldw	r2,-16(fp)
  8118e0:	11400717 	ldw	r5,28(r2)
  8118e4:	e13ffc17 	ldw	r4,-16(fp)
  8118e8:	080beb80 	call	80beb8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  8118ec:	e0bffc17 	ldw	r2,-16(fp)
  8118f0:	10800817 	ldw	r2,32(r2)
  8118f4:	1005003a 	cmpeq	r2,r2,zero
  8118f8:	1000041e 	bne	r2,zero,81190c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  8118fc:	e0bffc17 	ldw	r2,-16(fp)
  811900:	11400817 	ldw	r5,32(r2)
  811904:	e13ffc17 	ldw	r4,-16(fp)
  811908:	080bf700 	call	80bf70 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  81190c:	e0bffc17 	ldw	r2,-16(fp)
  811910:	10800a17 	ldw	r2,40(r2)
  811914:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  811918:	e0bffd17 	ldw	r2,-12(fp)
  81191c:	1005003a 	cmpeq	r2,r2,zero
  811920:	1000021e 	bne	r2,zero,81192c <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  811924:	e13ffd17 	ldw	r4,-12(fp)
  811928:	080e6040 	call	80e604 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  81192c:	e0bffc17 	ldw	r2,-16(fp)
  811930:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  811934:	e0bffc17 	ldw	r2,-16(fp)
  811938:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  81193c:	e0bffc17 	ldw	r2,-16(fp)
  811940:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  811944:	008020b4 	movhi	r2,130
  811948:	10a6ab04 	addi	r2,r2,-25940
  81194c:	10800003 	ldbu	r2,0(r2)
  811950:	10803fcc 	andi	r2,r2,255
  811954:	10803fe0 	cmpeqi	r2,r2,255
  811958:	1000081e 	bne	r2,zero,81197c <OSTaskDel+0x280>
        OSLockNesting++;
  81195c:	008020b4 	movhi	r2,130
  811960:	10a6ab04 	addi	r2,r2,-25940
  811964:	10800003 	ldbu	r2,0(r2)
  811968:	10800044 	addi	r2,r2,1
  81196c:	1007883a 	mov	r3,r2
  811970:	008020b4 	movhi	r2,130
  811974:	10a6ab04 	addi	r2,r2,-25940
  811978:	10c00005 	stb	r3,0(r2)
  81197c:	e0bffb17 	ldw	r2,-20(fp)
  811980:	e0bff715 	stw	r2,-36(fp)
  811984:	e0bff717 	ldw	r2,-36(fp)
  811988:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  81198c:	080baa40 	call	80baa4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811990:	0005303a 	rdctl	r2,status
  811994:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811998:	e0fff617 	ldw	r3,-40(fp)
  81199c:	00bfff84 	movi	r2,-2
  8119a0:	1884703a 	and	r2,r3,r2
  8119a4:	1001703a 	wrctl	status,r2
  
  return context;
  8119a8:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  8119ac:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  8119b0:	008020b4 	movhi	r2,130
  8119b4:	10a6ab04 	addi	r2,r2,-25940
  8119b8:	10800003 	ldbu	r2,0(r2)
  8119bc:	10803fcc 	andi	r2,r2,255
  8119c0:	1005003a 	cmpeq	r2,r2,zero
  8119c4:	1000081e 	bne	r2,zero,8119e8 <OSTaskDel+0x2ec>
        OSLockNesting--;
  8119c8:	008020b4 	movhi	r2,130
  8119cc:	10a6ab04 	addi	r2,r2,-25940
  8119d0:	10800003 	ldbu	r2,0(r2)
  8119d4:	10bfffc4 	addi	r2,r2,-1
  8119d8:	1007883a 	mov	r3,r2
  8119dc:	008020b4 	movhi	r2,130
  8119e0:	10a6ab04 	addi	r2,r2,-25940
  8119e4:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  8119e8:	e13ffc17 	ldw	r4,-16(fp)
  8119ec:	08158240 	call	815824 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  8119f0:	008020b4 	movhi	r2,130
  8119f4:	10a6b344 	addi	r2,r2,-25907
  8119f8:	10800003 	ldbu	r2,0(r2)
  8119fc:	10bfffc4 	addi	r2,r2,-1
  811a00:	1007883a 	mov	r3,r2
  811a04:	008020b4 	movhi	r2,130
  811a08:	10a6b344 	addi	r2,r2,-25907
  811a0c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  811a10:	e0bffe03 	ldbu	r2,-8(fp)
  811a14:	00c020b4 	movhi	r3,130
  811a18:	18fb4004 	addi	r3,r3,-4864
  811a1c:	1085883a 	add	r2,r2,r2
  811a20:	1085883a 	add	r2,r2,r2
  811a24:	10c5883a 	add	r2,r2,r3
  811a28:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  811a2c:	e0bffc17 	ldw	r2,-16(fp)
  811a30:	10800617 	ldw	r2,24(r2)
  811a34:	1004c03a 	cmpne	r2,r2,zero
  811a38:	1000091e 	bne	r2,zero,811a60 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  811a3c:	e0bffc17 	ldw	r2,-16(fp)
  811a40:	10800517 	ldw	r2,20(r2)
  811a44:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  811a48:	e0bffc17 	ldw	r2,-16(fp)
  811a4c:	10c00517 	ldw	r3,20(r2)
  811a50:	008020b4 	movhi	r2,130
  811a54:	10a6ae04 	addi	r2,r2,-25928
  811a58:	10c00015 	stw	r3,0(r2)
  811a5c:	00000a06 	br	811a88 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  811a60:	e0bffc17 	ldw	r2,-16(fp)
  811a64:	10c00617 	ldw	r3,24(r2)
  811a68:	e0bffc17 	ldw	r2,-16(fp)
  811a6c:	10800517 	ldw	r2,20(r2)
  811a70:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  811a74:	e0bffc17 	ldw	r2,-16(fp)
  811a78:	10c00517 	ldw	r3,20(r2)
  811a7c:	e0bffc17 	ldw	r2,-16(fp)
  811a80:	10800617 	ldw	r2,24(r2)
  811a84:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  811a88:	008020b4 	movhi	r2,130
  811a8c:	10a6b204 	addi	r2,r2,-25912
  811a90:	10c00017 	ldw	r3,0(r2)
  811a94:	e0bffc17 	ldw	r2,-16(fp)
  811a98:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  811a9c:	00c020b4 	movhi	r3,130
  811aa0:	18e6b204 	addi	r3,r3,-25912
  811aa4:	e0bffc17 	ldw	r2,-16(fp)
  811aa8:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  811aac:	e0fffc17 	ldw	r3,-16(fp)
  811ab0:	00800fc4 	movi	r2,63
  811ab4:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  811ab8:	e0bffc17 	ldw	r2,-16(fp)
  811abc:	10001345 	stb	zero,77(r2)
  811ac0:	e0bffb17 	ldw	r2,-20(fp)
  811ac4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ac8:	e0bff517 	ldw	r2,-44(fp)
  811acc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  811ad0:	008020b4 	movhi	r2,130
  811ad4:	10a6ab44 	addi	r2,r2,-25939
  811ad8:	10800003 	ldbu	r2,0(r2)
  811adc:	10803fcc 	andi	r2,r2,255
  811ae0:	10800058 	cmpnei	r2,r2,1
  811ae4:	1000011e 	bne	r2,zero,811aec <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  811ae8:	080c5000 	call	80c500 <OS_Sched>
    }
    return (OS_ERR_NONE);
  811aec:	e03fff15 	stw	zero,-4(fp)
  811af0:	e0bfff17 	ldw	r2,-4(fp)
}
  811af4:	e037883a 	mov	sp,fp
  811af8:	dfc00117 	ldw	ra,4(sp)
  811afc:	df000017 	ldw	fp,0(sp)
  811b00:	dec00204 	addi	sp,sp,8
  811b04:	f800283a 	ret

00811b08 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  811b08:	defff404 	addi	sp,sp,-48
  811b0c:	df000b15 	stw	fp,44(sp)
  811b10:	df000b04 	addi	fp,sp,44
  811b14:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811b18:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  811b1c:	e0bffe03 	ldbu	r2,-8(fp)
  811b20:	10800518 	cmpnei	r2,r2,20
  811b24:	1000031e 	bne	r2,zero,811b34 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  811b28:	00800f84 	movi	r2,62
  811b2c:	e0bfff15 	stw	r2,-4(fp)
  811b30:	00004c06 	br	811c64 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  811b34:	e0bffe03 	ldbu	r2,-8(fp)
  811b38:	10800530 	cmpltui	r2,r2,20
  811b3c:	1000061e 	bne	r2,zero,811b58 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  811b40:	e0bffe03 	ldbu	r2,-8(fp)
  811b44:	10803fe0 	cmpeqi	r2,r2,255
  811b48:	1000031e 	bne	r2,zero,811b58 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  811b4c:	00800a84 	movi	r2,42
  811b50:	e0bfff15 	stw	r2,-4(fp)
  811b54:	00004306 	br	811c64 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  811b58:	e0bffe03 	ldbu	r2,-8(fp)
  811b5c:	10803fd8 	cmpnei	r2,r2,255
  811b60:	1000141e 	bne	r2,zero,811bb4 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811b64:	0005303a 	rdctl	r2,status
  811b68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811b6c:	e0fffa17 	ldw	r3,-24(fp)
  811b70:	00bfff84 	movi	r2,-2
  811b74:	1884703a 	and	r2,r3,r2
  811b78:	1001703a 	wrctl	status,r2
  
  return context;
  811b7c:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  811b80:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  811b84:	008020b4 	movhi	r2,130
  811b88:	10a6ba04 	addi	r2,r2,-25880
  811b8c:	10800017 	ldw	r2,0(r2)
  811b90:	10800dc3 	ldbu	r2,55(r2)
  811b94:	e0bffd05 	stb	r2,-12(fp)
  811b98:	e0bffb17 	ldw	r2,-20(fp)
  811b9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ba0:	e0bff917 	ldw	r2,-28(fp)
  811ba4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  811ba8:	e0bffd03 	ldbu	r2,-12(fp)
  811bac:	e0bfff15 	stw	r2,-4(fp)
  811bb0:	00002c06 	br	811c64 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811bb4:	0005303a 	rdctl	r2,status
  811bb8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811bbc:	e0fff817 	ldw	r3,-32(fp)
  811bc0:	00bfff84 	movi	r2,-2
  811bc4:	1884703a 	and	r2,r3,r2
  811bc8:	1001703a 	wrctl	status,r2
  
  return context;
  811bcc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  811bd0:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  811bd4:	e0bffe03 	ldbu	r2,-8(fp)
  811bd8:	00c020b4 	movhi	r3,130
  811bdc:	18fb4004 	addi	r3,r3,-4864
  811be0:	1085883a 	add	r2,r2,r2
  811be4:	1085883a 	add	r2,r2,r2
  811be8:	10c5883a 	add	r2,r2,r3
  811bec:	10800017 	ldw	r2,0(r2)
  811bf0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  811bf4:	e0bffc17 	ldw	r2,-16(fp)
  811bf8:	1004c03a 	cmpne	r2,r2,zero
  811bfc:	1000071e 	bne	r2,zero,811c1c <OSTaskDelReq+0x114>
  811c00:	e0bffb17 	ldw	r2,-20(fp)
  811c04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811c08:	e0bff717 	ldw	r2,-36(fp)
  811c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  811c10:	008010c4 	movi	r2,67
  811c14:	e0bfff15 	stw	r2,-4(fp)
  811c18:	00001206 	br	811c64 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  811c1c:	e0bffc17 	ldw	r2,-16(fp)
  811c20:	10800058 	cmpnei	r2,r2,1
  811c24:	1000071e 	bne	r2,zero,811c44 <OSTaskDelReq+0x13c>
  811c28:	e0bffb17 	ldw	r2,-20(fp)
  811c2c:	e0bff615 	stw	r2,-40(fp)
  811c30:	e0bff617 	ldw	r2,-40(fp)
  811c34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  811c38:	00800f44 	movi	r2,61
  811c3c:	e0bfff15 	stw	r2,-4(fp)
  811c40:	00000806 	br	811c64 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  811c44:	e0fffc17 	ldw	r3,-16(fp)
  811c48:	00800fc4 	movi	r2,63
  811c4c:	18800dc5 	stb	r2,55(r3)
  811c50:	e0bffb17 	ldw	r2,-20(fp)
  811c54:	e0bff515 	stw	r2,-44(fp)
  811c58:	e0bff517 	ldw	r2,-44(fp)
  811c5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811c60:	e03fff15 	stw	zero,-4(fp)
  811c64:	e0bfff17 	ldw	r2,-4(fp)
}
  811c68:	e037883a 	mov	sp,fp
  811c6c:	df000017 	ldw	fp,0(sp)
  811c70:	dec00104 	addi	sp,sp,4
  811c74:	f800283a 	ret

00811c78 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  811c78:	defff304 	addi	sp,sp,-52
  811c7c:	dfc00c15 	stw	ra,48(sp)
  811c80:	df000b15 	stw	fp,44(sp)
  811c84:	df000b04 	addi	fp,sp,44
  811c88:	e17ffd15 	stw	r5,-12(fp)
  811c8c:	e1bffe15 	stw	r6,-8(fp)
  811c90:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  811c94:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  811c98:	e0bffe17 	ldw	r2,-8(fp)
  811c9c:	1004c03a 	cmpne	r2,r2,zero
  811ca0:	1000021e 	bne	r2,zero,811cac <OSTaskNameGet+0x34>
        return (0);
  811ca4:	e03fff15 	stw	zero,-4(fp)
  811ca8:	00005b06 	br	811e18 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  811cac:	e0bffc03 	ldbu	r2,-16(fp)
  811cb0:	10800570 	cmpltui	r2,r2,21
  811cb4:	1000081e 	bne	r2,zero,811cd8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  811cb8:	e0bffc03 	ldbu	r2,-16(fp)
  811cbc:	10803fe0 	cmpeqi	r2,r2,255
  811cc0:	1000051e 	bne	r2,zero,811cd8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  811cc4:	e0fffe17 	ldw	r3,-8(fp)
  811cc8:	00800a84 	movi	r2,42
  811ccc:	18800005 	stb	r2,0(r3)
            return (0);
  811cd0:	e03fff15 	stw	zero,-4(fp)
  811cd4:	00005006 	br	811e18 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  811cd8:	e0bffd17 	ldw	r2,-12(fp)
  811cdc:	1004c03a 	cmpne	r2,r2,zero
  811ce0:	1000051e 	bne	r2,zero,811cf8 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  811ce4:	e0fffe17 	ldw	r3,-8(fp)
  811ce8:	00800304 	movi	r2,12
  811cec:	18800005 	stb	r2,0(r3)
        return (0);
  811cf0:	e03fff15 	stw	zero,-4(fp)
  811cf4:	00004806 	br	811e18 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  811cf8:	008020b4 	movhi	r2,130
  811cfc:	10a6b904 	addi	r2,r2,-25884
  811d00:	10800003 	ldbu	r2,0(r2)
  811d04:	10803fcc 	andi	r2,r2,255
  811d08:	1005003a 	cmpeq	r2,r2,zero
  811d0c:	1000051e 	bne	r2,zero,811d24 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  811d10:	e0fffe17 	ldw	r3,-8(fp)
  811d14:	00800444 	movi	r2,17
  811d18:	18800005 	stb	r2,0(r3)
        return (0);
  811d1c:	e03fff15 	stw	zero,-4(fp)
  811d20:	00003d06 	br	811e18 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d24:	0005303a 	rdctl	r2,status
  811d28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d2c:	e0fff817 	ldw	r3,-32(fp)
  811d30:	00bfff84 	movi	r2,-2
  811d34:	1884703a 	and	r2,r3,r2
  811d38:	1001703a 	wrctl	status,r2
  
  return context;
  811d3c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  811d40:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  811d44:	e0bffc03 	ldbu	r2,-16(fp)
  811d48:	10803fd8 	cmpnei	r2,r2,255
  811d4c:	1000051e 	bne	r2,zero,811d64 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  811d50:	008020b4 	movhi	r2,130
  811d54:	10a6ba04 	addi	r2,r2,-25880
  811d58:	10800017 	ldw	r2,0(r2)
  811d5c:	10800c83 	ldbu	r2,50(r2)
  811d60:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  811d64:	e0bffc03 	ldbu	r2,-16(fp)
  811d68:	00c020b4 	movhi	r3,130
  811d6c:	18fb4004 	addi	r3,r3,-4864
  811d70:	1085883a 	add	r2,r2,r2
  811d74:	1085883a 	add	r2,r2,r2
  811d78:	10c5883a 	add	r2,r2,r3
  811d7c:	10800017 	ldw	r2,0(r2)
  811d80:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  811d84:	e0bffb17 	ldw	r2,-20(fp)
  811d88:	1004c03a 	cmpne	r2,r2,zero
  811d8c:	1000091e 	bne	r2,zero,811db4 <OSTaskNameGet+0x13c>
  811d90:	e0bff917 	ldw	r2,-28(fp)
  811d94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811d98:	e0bff717 	ldw	r2,-36(fp)
  811d9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811da0:	e0fffe17 	ldw	r3,-8(fp)
  811da4:	008010c4 	movi	r2,67
  811da8:	18800005 	stb	r2,0(r3)
        return (0);
  811dac:	e03fff15 	stw	zero,-4(fp)
  811db0:	00001906 	br	811e18 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  811db4:	e0bffb17 	ldw	r2,-20(fp)
  811db8:	10800058 	cmpnei	r2,r2,1
  811dbc:	1000091e 	bne	r2,zero,811de4 <OSTaskNameGet+0x16c>
  811dc0:	e0bff917 	ldw	r2,-28(fp)
  811dc4:	e0bff615 	stw	r2,-40(fp)
  811dc8:	e0bff617 	ldw	r2,-40(fp)
  811dcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811dd0:	e0fffe17 	ldw	r3,-8(fp)
  811dd4:	008010c4 	movi	r2,67
  811dd8:	18800005 	stb	r2,0(r3)
        return (0);
  811ddc:	e03fff15 	stw	zero,-4(fp)
  811de0:	00000d06 	br	811e18 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  811de4:	e0bffb17 	ldw	r2,-20(fp)
  811de8:	11401304 	addi	r5,r2,76
  811dec:	e13ffd17 	ldw	r4,-12(fp)
  811df0:	080c6440 	call	80c644 <OS_StrCopy>
  811df4:	e0bffa05 	stb	r2,-24(fp)
  811df8:	e0bff917 	ldw	r2,-28(fp)
  811dfc:	e0bff515 	stw	r2,-44(fp)
  811e00:	e0bff517 	ldw	r2,-44(fp)
  811e04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811e08:	e0bffe17 	ldw	r2,-8(fp)
  811e0c:	10000005 	stb	zero,0(r2)
    return (len);
  811e10:	e0bffa03 	ldbu	r2,-24(fp)
  811e14:	e0bfff15 	stw	r2,-4(fp)
  811e18:	e0bfff17 	ldw	r2,-4(fp)
}
  811e1c:	e037883a 	mov	sp,fp
  811e20:	dfc00117 	ldw	ra,4(sp)
  811e24:	df000017 	ldw	fp,0(sp)
  811e28:	dec00204 	addi	sp,sp,8
  811e2c:	f800283a 	ret

00811e30 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  811e30:	defff304 	addi	sp,sp,-52
  811e34:	dfc00c15 	stw	ra,48(sp)
  811e38:	df000b15 	stw	fp,44(sp)
  811e3c:	df000b04 	addi	fp,sp,44
  811e40:	e17ffe15 	stw	r5,-8(fp)
  811e44:	e1bfff15 	stw	r6,-4(fp)
  811e48:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  811e4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  811e50:	e0bfff17 	ldw	r2,-4(fp)
  811e54:	1005003a 	cmpeq	r2,r2,zero
  811e58:	1000611e 	bne	r2,zero,811fe0 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  811e5c:	e0bffd03 	ldbu	r2,-12(fp)
  811e60:	10800570 	cmpltui	r2,r2,21
  811e64:	1000071e 	bne	r2,zero,811e84 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  811e68:	e0bffd03 	ldbu	r2,-12(fp)
  811e6c:	10803fe0 	cmpeqi	r2,r2,255
  811e70:	1000041e 	bne	r2,zero,811e84 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  811e74:	e0ffff17 	ldw	r3,-4(fp)
  811e78:	00800a84 	movi	r2,42
  811e7c:	18800005 	stb	r2,0(r3)
            return;
  811e80:	00005706 	br	811fe0 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  811e84:	e0bffe17 	ldw	r2,-8(fp)
  811e88:	1004c03a 	cmpne	r2,r2,zero
  811e8c:	1000041e 	bne	r2,zero,811ea0 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  811e90:	e0ffff17 	ldw	r3,-4(fp)
  811e94:	00800304 	movi	r2,12
  811e98:	18800005 	stb	r2,0(r3)
        return;
  811e9c:	00005006 	br	811fe0 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  811ea0:	008020b4 	movhi	r2,130
  811ea4:	10a6b904 	addi	r2,r2,-25884
  811ea8:	10800003 	ldbu	r2,0(r2)
  811eac:	10803fcc 	andi	r2,r2,255
  811eb0:	1005003a 	cmpeq	r2,r2,zero
  811eb4:	1000041e 	bne	r2,zero,811ec8 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  811eb8:	e0ffff17 	ldw	r3,-4(fp)
  811ebc:	00800484 	movi	r2,18
  811ec0:	18800005 	stb	r2,0(r3)
        return;
  811ec4:	00004606 	br	811fe0 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811ec8:	0005303a 	rdctl	r2,status
  811ecc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ed0:	e0fff917 	ldw	r3,-28(fp)
  811ed4:	00bfff84 	movi	r2,-2
  811ed8:	1884703a 	and	r2,r3,r2
  811edc:	1001703a 	wrctl	status,r2
  
  return context;
  811ee0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811ee4:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  811ee8:	e0bffd03 	ldbu	r2,-12(fp)
  811eec:	10803fd8 	cmpnei	r2,r2,255
  811ef0:	1000051e 	bne	r2,zero,811f08 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  811ef4:	008020b4 	movhi	r2,130
  811ef8:	10a6ba04 	addi	r2,r2,-25880
  811efc:	10800017 	ldw	r2,0(r2)
  811f00:	10800c83 	ldbu	r2,50(r2)
  811f04:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  811f08:	e0bffd03 	ldbu	r2,-12(fp)
  811f0c:	00c020b4 	movhi	r3,130
  811f10:	18fb4004 	addi	r3,r3,-4864
  811f14:	1085883a 	add	r2,r2,r2
  811f18:	1085883a 	add	r2,r2,r2
  811f1c:	10c5883a 	add	r2,r2,r3
  811f20:	10800017 	ldw	r2,0(r2)
  811f24:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  811f28:	e0bffb17 	ldw	r2,-20(fp)
  811f2c:	1004c03a 	cmpne	r2,r2,zero
  811f30:	1000081e 	bne	r2,zero,811f54 <OSTaskNameSet+0x124>
  811f34:	e0bffa17 	ldw	r2,-24(fp)
  811f38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f3c:	e0bff817 	ldw	r2,-32(fp)
  811f40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811f44:	e0ffff17 	ldw	r3,-4(fp)
  811f48:	008010c4 	movi	r2,67
  811f4c:	18800005 	stb	r2,0(r3)
        return;
  811f50:	00002306 	br	811fe0 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  811f54:	e0bffb17 	ldw	r2,-20(fp)
  811f58:	10800058 	cmpnei	r2,r2,1
  811f5c:	1000081e 	bne	r2,zero,811f80 <OSTaskNameSet+0x150>
  811f60:	e0bffa17 	ldw	r2,-24(fp)
  811f64:	e0bff715 	stw	r2,-36(fp)
  811f68:	e0bff717 	ldw	r2,-36(fp)
  811f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811f70:	e0ffff17 	ldw	r3,-4(fp)
  811f74:	008010c4 	movi	r2,67
  811f78:	18800005 	stb	r2,0(r3)
        return;
  811f7c:	00001806 	br	811fe0 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  811f80:	e13ffe17 	ldw	r4,-8(fp)
  811f84:	080c6c40 	call	80c6c4 <OS_StrLen>
  811f88:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  811f8c:	e0bffc03 	ldbu	r2,-16(fp)
  811f90:	10800830 	cmpltui	r2,r2,32
  811f94:	1000081e 	bne	r2,zero,811fb8 <OSTaskNameSet+0x188>
  811f98:	e0bffa17 	ldw	r2,-24(fp)
  811f9c:	e0bff615 	stw	r2,-40(fp)
  811fa0:	e0bff617 	ldw	r2,-40(fp)
  811fa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  811fa8:	e0ffff17 	ldw	r3,-4(fp)
  811fac:	00801044 	movi	r2,65
  811fb0:	18800005 	stb	r2,0(r3)
        return;
  811fb4:	00000a06 	br	811fe0 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  811fb8:	e0bffb17 	ldw	r2,-20(fp)
  811fbc:	11001304 	addi	r4,r2,76
  811fc0:	e17ffe17 	ldw	r5,-8(fp)
  811fc4:	080c6440 	call	80c644 <OS_StrCopy>
  811fc8:	e0bffa17 	ldw	r2,-24(fp)
  811fcc:	e0bff515 	stw	r2,-44(fp)
  811fd0:	e0bff517 	ldw	r2,-44(fp)
  811fd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811fd8:	e0bfff17 	ldw	r2,-4(fp)
  811fdc:	10000005 	stb	zero,0(r2)
}
  811fe0:	e037883a 	mov	sp,fp
  811fe4:	dfc00117 	ldw	ra,4(sp)
  811fe8:	df000017 	ldw	fp,0(sp)
  811fec:	dec00204 	addi	sp,sp,8
  811ff0:	f800283a 	ret

00811ff4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  811ff4:	defff304 	addi	sp,sp,-52
  811ff8:	dfc00c15 	stw	ra,48(sp)
  811ffc:	df000b15 	stw	fp,44(sp)
  812000:	df000b04 	addi	fp,sp,44
  812004:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  812008:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  81200c:	e0bffe03 	ldbu	r2,-8(fp)
  812010:	10800530 	cmpltui	r2,r2,20
  812014:	1000031e 	bne	r2,zero,812024 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  812018:	00800a84 	movi	r2,42
  81201c:	e0bfff15 	stw	r2,-4(fp)
  812020:	00007406 	br	8121f4 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812024:	0005303a 	rdctl	r2,status
  812028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81202c:	e0fffb17 	ldw	r3,-20(fp)
  812030:	00bfff84 	movi	r2,-2
  812034:	1884703a 	and	r2,r3,r2
  812038:	1001703a 	wrctl	status,r2
  
  return context;
  81203c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  812040:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  812044:	e0bffe03 	ldbu	r2,-8(fp)
  812048:	00c020b4 	movhi	r3,130
  81204c:	18fb4004 	addi	r3,r3,-4864
  812050:	1085883a 	add	r2,r2,r2
  812054:	1085883a 	add	r2,r2,r2
  812058:	10c5883a 	add	r2,r2,r3
  81205c:	10800017 	ldw	r2,0(r2)
  812060:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  812064:	e0bffd17 	ldw	r2,-12(fp)
  812068:	1004c03a 	cmpne	r2,r2,zero
  81206c:	1000071e 	bne	r2,zero,81208c <OSTaskResume+0x98>
  812070:	e0bffc17 	ldw	r2,-16(fp)
  812074:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812078:	e0bffa17 	ldw	r2,-24(fp)
  81207c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  812080:	00801184 	movi	r2,70
  812084:	e0bfff15 	stw	r2,-4(fp)
  812088:	00005a06 	br	8121f4 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  81208c:	e0bffd17 	ldw	r2,-12(fp)
  812090:	10800058 	cmpnei	r2,r2,1
  812094:	1000071e 	bne	r2,zero,8120b4 <OSTaskResume+0xc0>
  812098:	e0bffc17 	ldw	r2,-16(fp)
  81209c:	e0bff915 	stw	r2,-28(fp)
  8120a0:	e0bff917 	ldw	r2,-28(fp)
  8120a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8120a8:	008010c4 	movi	r2,67
  8120ac:	e0bfff15 	stw	r2,-4(fp)
  8120b0:	00005006 	br	8121f4 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  8120b4:	e0bffd17 	ldw	r2,-12(fp)
  8120b8:	10800c03 	ldbu	r2,48(r2)
  8120bc:	10803fcc 	andi	r2,r2,255
  8120c0:	1080020c 	andi	r2,r2,8
  8120c4:	1005003a 	cmpeq	r2,r2,zero
  8120c8:	1000441e 	bne	r2,zero,8121dc <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8120cc:	e0bffd17 	ldw	r2,-12(fp)
  8120d0:	10c00c03 	ldbu	r3,48(r2)
  8120d4:	00bffdc4 	movi	r2,-9
  8120d8:	1884703a 	and	r2,r3,r2
  8120dc:	1007883a 	mov	r3,r2
  8120e0:	e0bffd17 	ldw	r2,-12(fp)
  8120e4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  8120e8:	e0bffd17 	ldw	r2,-12(fp)
  8120ec:	10800c03 	ldbu	r2,48(r2)
  8120f0:	10803fcc 	andi	r2,r2,255
  8120f4:	1004c03a 	cmpne	r2,r2,zero
  8120f8:	1000321e 	bne	r2,zero,8121c4 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  8120fc:	e0bffd17 	ldw	r2,-12(fp)
  812100:	10800b8b 	ldhu	r2,46(r2)
  812104:	10bfffcc 	andi	r2,r2,65535
  812108:	1004c03a 	cmpne	r2,r2,zero
  81210c:	1000281e 	bne	r2,zero,8121b0 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  812110:	e0bffd17 	ldw	r2,-12(fp)
  812114:	10c00d83 	ldbu	r3,54(r2)
  812118:	008020b4 	movhi	r2,130
  81211c:	10a6b704 	addi	r2,r2,-25892
  812120:	10800003 	ldbu	r2,0(r2)
  812124:	1884b03a 	or	r2,r3,r2
  812128:	1007883a 	mov	r3,r2
  81212c:	008020b4 	movhi	r2,130
  812130:	10a6b704 	addi	r2,r2,-25892
  812134:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812138:	e0bffd17 	ldw	r2,-12(fp)
  81213c:	10800d03 	ldbu	r2,52(r2)
  812140:	11003fcc 	andi	r4,r2,255
  812144:	e0bffd17 	ldw	r2,-12(fp)
  812148:	10800d03 	ldbu	r2,52(r2)
  81214c:	10c03fcc 	andi	r3,r2,255
  812150:	008020b4 	movhi	r2,130
  812154:	10a6b744 	addi	r2,r2,-25891
  812158:	10c5883a 	add	r2,r2,r3
  81215c:	10c00003 	ldbu	r3,0(r2)
  812160:	e0bffd17 	ldw	r2,-12(fp)
  812164:	10800d43 	ldbu	r2,53(r2)
  812168:	1884b03a 	or	r2,r3,r2
  81216c:	1007883a 	mov	r3,r2
  812170:	008020b4 	movhi	r2,130
  812174:	10a6b744 	addi	r2,r2,-25891
  812178:	1105883a 	add	r2,r2,r4
  81217c:	10c00005 	stb	r3,0(r2)
  812180:	e0bffc17 	ldw	r2,-16(fp)
  812184:	e0bff815 	stw	r2,-32(fp)
  812188:	e0bff817 	ldw	r2,-32(fp)
  81218c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  812190:	008020b4 	movhi	r2,130
  812194:	10a6ab44 	addi	r2,r2,-25939
  812198:	10800003 	ldbu	r2,0(r2)
  81219c:	10803fcc 	andi	r2,r2,255
  8121a0:	10800058 	cmpnei	r2,r2,1
  8121a4:	10000b1e 	bne	r2,zero,8121d4 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  8121a8:	080c5000 	call	80c500 <OS_Sched>
  8121ac:	00000906 	br	8121d4 <OSTaskResume+0x1e0>
  8121b0:	e0bffc17 	ldw	r2,-16(fp)
  8121b4:	e0bff715 	stw	r2,-36(fp)
  8121b8:	e0bff717 	ldw	r2,-36(fp)
  8121bc:	1001703a 	wrctl	status,r2
  8121c0:	00000406 	br	8121d4 <OSTaskResume+0x1e0>
  8121c4:	e0bffc17 	ldw	r2,-16(fp)
  8121c8:	e0bff615 	stw	r2,-40(fp)
  8121cc:	e0bff617 	ldw	r2,-40(fp)
  8121d0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8121d4:	e03fff15 	stw	zero,-4(fp)
  8121d8:	00000606 	br	8121f4 <OSTaskResume+0x200>
  8121dc:	e0bffc17 	ldw	r2,-16(fp)
  8121e0:	e0bff515 	stw	r2,-44(fp)
  8121e4:	e0bff517 	ldw	r2,-44(fp)
  8121e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8121ec:	00801104 	movi	r2,68
  8121f0:	e0bfff15 	stw	r2,-4(fp)
  8121f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8121f8:	e037883a 	mov	sp,fp
  8121fc:	dfc00117 	ldw	ra,4(sp)
  812200:	df000017 	ldw	fp,0(sp)
  812204:	dec00204 	addi	sp,sp,8
  812208:	f800283a 	ret

0081220c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  81220c:	defff204 	addi	sp,sp,-56
  812210:	df000d15 	stw	fp,52(sp)
  812214:	df000d04 	addi	fp,sp,52
  812218:	e17ffe15 	stw	r5,-8(fp)
  81221c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  812220:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  812224:	e0bffd03 	ldbu	r2,-12(fp)
  812228:	10800570 	cmpltui	r2,r2,21
  81222c:	1000061e 	bne	r2,zero,812248 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  812230:	e0bffd03 	ldbu	r2,-12(fp)
  812234:	10803fe0 	cmpeqi	r2,r2,255
  812238:	1000031e 	bne	r2,zero,812248 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  81223c:	00800a84 	movi	r2,42
  812240:	e0bfff15 	stw	r2,-4(fp)
  812244:	00006b06 	br	8123f4 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  812248:	e0bffe17 	ldw	r2,-8(fp)
  81224c:	1004c03a 	cmpne	r2,r2,zero
  812250:	1000031e 	bne	r2,zero,812260 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  812254:	00800244 	movi	r2,9
  812258:	e0bfff15 	stw	r2,-4(fp)
  81225c:	00006506 	br	8123f4 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  812260:	e0bffe17 	ldw	r2,-8(fp)
  812264:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  812268:	e0bffe17 	ldw	r2,-8(fp)
  81226c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812270:	0005303a 	rdctl	r2,status
  812274:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812278:	e0fff717 	ldw	r3,-36(fp)
  81227c:	00bfff84 	movi	r2,-2
  812280:	1884703a 	and	r2,r3,r2
  812284:	1001703a 	wrctl	status,r2
  
  return context;
  812288:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81228c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  812290:	e0bffd03 	ldbu	r2,-12(fp)
  812294:	10803fd8 	cmpnei	r2,r2,255
  812298:	1000051e 	bne	r2,zero,8122b0 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  81229c:	008020b4 	movhi	r2,130
  8122a0:	10a6ba04 	addi	r2,r2,-25880
  8122a4:	10800017 	ldw	r2,0(r2)
  8122a8:	10800c83 	ldbu	r2,50(r2)
  8122ac:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8122b0:	e0bffd03 	ldbu	r2,-12(fp)
  8122b4:	00c020b4 	movhi	r3,130
  8122b8:	18fb4004 	addi	r3,r3,-4864
  8122bc:	1085883a 	add	r2,r2,r2
  8122c0:	1085883a 	add	r2,r2,r2
  8122c4:	10c5883a 	add	r2,r2,r3
  8122c8:	10800017 	ldw	r2,0(r2)
  8122cc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  8122d0:	e0bffc17 	ldw	r2,-16(fp)
  8122d4:	1004c03a 	cmpne	r2,r2,zero
  8122d8:	1000071e 	bne	r2,zero,8122f8 <OSTaskStkChk+0xec>
  8122dc:	e0bff817 	ldw	r2,-32(fp)
  8122e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8122e4:	e0bff617 	ldw	r2,-40(fp)
  8122e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8122ec:	008010c4 	movi	r2,67
  8122f0:	e0bfff15 	stw	r2,-4(fp)
  8122f4:	00003f06 	br	8123f4 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  8122f8:	e0bffc17 	ldw	r2,-16(fp)
  8122fc:	10800058 	cmpnei	r2,r2,1
  812300:	1000071e 	bne	r2,zero,812320 <OSTaskStkChk+0x114>
  812304:	e0bff817 	ldw	r2,-32(fp)
  812308:	e0bff515 	stw	r2,-44(fp)
  81230c:	e0bff517 	ldw	r2,-44(fp)
  812310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812314:	008010c4 	movi	r2,67
  812318:	e0bfff15 	stw	r2,-4(fp)
  81231c:	00003506 	br	8123f4 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  812320:	e0bffc17 	ldw	r2,-16(fp)
  812324:	1080040b 	ldhu	r2,16(r2)
  812328:	10bfffcc 	andi	r2,r2,65535
  81232c:	1080004c 	andi	r2,r2,1
  812330:	1004c03a 	cmpne	r2,r2,zero
  812334:	1000071e 	bne	r2,zero,812354 <OSTaskStkChk+0x148>
  812338:	e0bff817 	ldw	r2,-32(fp)
  81233c:	e0bff415 	stw	r2,-48(fp)
  812340:	e0bff417 	ldw	r2,-48(fp)
  812344:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  812348:	00801144 	movi	r2,69
  81234c:	e0bfff15 	stw	r2,-4(fp)
  812350:	00002806 	br	8123f4 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  812354:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  812358:	e0bffc17 	ldw	r2,-16(fp)
  81235c:	10800317 	ldw	r2,12(r2)
  812360:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  812364:	e0bffc17 	ldw	r2,-16(fp)
  812368:	10800217 	ldw	r2,8(r2)
  81236c:	e0bffb15 	stw	r2,-20(fp)
  812370:	e0bff817 	ldw	r2,-32(fp)
  812374:	e0bff315 	stw	r2,-52(fp)
  812378:	e0bff317 	ldw	r2,-52(fp)
  81237c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  812380:	00000306 	br	812390 <OSTaskStkChk+0x184>
        nfree++;
  812384:	e0bffa17 	ldw	r2,-24(fp)
  812388:	10800044 	addi	r2,r2,1
  81238c:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  812390:	e0bffb17 	ldw	r2,-20(fp)
  812394:	10800017 	ldw	r2,0(r2)
  812398:	1005003a 	cmpeq	r2,r2,zero
  81239c:	1007883a 	mov	r3,r2
  8123a0:	e0bffb17 	ldw	r2,-20(fp)
  8123a4:	10800104 	addi	r2,r2,4
  8123a8:	e0bffb15 	stw	r2,-20(fp)
  8123ac:	18803fcc 	andi	r2,r3,255
  8123b0:	1004c03a 	cmpne	r2,r2,zero
  8123b4:	103ff31e 	bne	r2,zero,812384 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  8123b8:	e0bffa17 	ldw	r2,-24(fp)
  8123bc:	1085883a 	add	r2,r2,r2
  8123c0:	1085883a 	add	r2,r2,r2
  8123c4:	1007883a 	mov	r3,r2
  8123c8:	e0bffe17 	ldw	r2,-8(fp)
  8123cc:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  8123d0:	e0fff917 	ldw	r3,-28(fp)
  8123d4:	e0bffa17 	ldw	r2,-24(fp)
  8123d8:	1885c83a 	sub	r2,r3,r2
  8123dc:	1085883a 	add	r2,r2,r2
  8123e0:	1085883a 	add	r2,r2,r2
  8123e4:	1007883a 	mov	r3,r2
  8123e8:	e0bffe17 	ldw	r2,-8(fp)
  8123ec:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8123f0:	e03fff15 	stw	zero,-4(fp)
  8123f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8123f8:	e037883a 	mov	sp,fp
  8123fc:	df000017 	ldw	fp,0(sp)
  812400:	dec00104 	addi	sp,sp,4
  812404:	f800283a 	ret

00812408 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  812408:	defff404 	addi	sp,sp,-48
  81240c:	dfc00b15 	stw	ra,44(sp)
  812410:	df000a15 	stw	fp,40(sp)
  812414:	df000a04 	addi	fp,sp,40
  812418:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81241c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  812420:	e0bffe03 	ldbu	r2,-8(fp)
  812424:	10800518 	cmpnei	r2,r2,20
  812428:	1000031e 	bne	r2,zero,812438 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  81242c:	008011c4 	movi	r2,71
  812430:	e0bfff15 	stw	r2,-4(fp)
  812434:	00007906 	br	81261c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  812438:	e0bffe03 	ldbu	r2,-8(fp)
  81243c:	10800530 	cmpltui	r2,r2,20
  812440:	1000061e 	bne	r2,zero,81245c <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  812444:	e0bffe03 	ldbu	r2,-8(fp)
  812448:	10803fe0 	cmpeqi	r2,r2,255
  81244c:	1000031e 	bne	r2,zero,81245c <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  812450:	00800a84 	movi	r2,42
  812454:	e0bfff15 	stw	r2,-4(fp)
  812458:	00007006 	br	81261c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81245c:	0005303a 	rdctl	r2,status
  812460:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812464:	e0fff917 	ldw	r3,-28(fp)
  812468:	00bfff84 	movi	r2,-2
  81246c:	1884703a 	and	r2,r3,r2
  812470:	1001703a 	wrctl	status,r2
  
  return context;
  812474:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  812478:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  81247c:	e0bffe03 	ldbu	r2,-8(fp)
  812480:	10803fd8 	cmpnei	r2,r2,255
  812484:	1000081e 	bne	r2,zero,8124a8 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  812488:	008020b4 	movhi	r2,130
  81248c:	10a6ba04 	addi	r2,r2,-25880
  812490:	10800017 	ldw	r2,0(r2)
  812494:	10800c83 	ldbu	r2,50(r2)
  812498:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  81249c:	00800044 	movi	r2,1
  8124a0:	e0bffd05 	stb	r2,-12(fp)
  8124a4:	00000b06 	br	8124d4 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  8124a8:	008020b4 	movhi	r2,130
  8124ac:	10a6ba04 	addi	r2,r2,-25880
  8124b0:	10800017 	ldw	r2,0(r2)
  8124b4:	10800c83 	ldbu	r2,50(r2)
  8124b8:	10c03fcc 	andi	r3,r2,255
  8124bc:	e0bffe03 	ldbu	r2,-8(fp)
  8124c0:	1880031e 	bne	r3,r2,8124d0 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  8124c4:	00800044 	movi	r2,1
  8124c8:	e0bffd05 	stb	r2,-12(fp)
  8124cc:	00000106 	br	8124d4 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  8124d0:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8124d4:	e0bffe03 	ldbu	r2,-8(fp)
  8124d8:	00c020b4 	movhi	r3,130
  8124dc:	18fb4004 	addi	r3,r3,-4864
  8124e0:	1085883a 	add	r2,r2,r2
  8124e4:	1085883a 	add	r2,r2,r2
  8124e8:	10c5883a 	add	r2,r2,r3
  8124ec:	10800017 	ldw	r2,0(r2)
  8124f0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  8124f4:	e0bffc17 	ldw	r2,-16(fp)
  8124f8:	1004c03a 	cmpne	r2,r2,zero
  8124fc:	1000071e 	bne	r2,zero,81251c <OSTaskSuspend+0x114>
  812500:	e0bffa17 	ldw	r2,-24(fp)
  812504:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812508:	e0bff817 	ldw	r2,-32(fp)
  81250c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  812510:	00801204 	movi	r2,72
  812514:	e0bfff15 	stw	r2,-4(fp)
  812518:	00004006 	br	81261c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  81251c:	e0bffc17 	ldw	r2,-16(fp)
  812520:	10800058 	cmpnei	r2,r2,1
  812524:	1000071e 	bne	r2,zero,812544 <OSTaskSuspend+0x13c>
  812528:	e0bffa17 	ldw	r2,-24(fp)
  81252c:	e0bff715 	stw	r2,-36(fp)
  812530:	e0bff717 	ldw	r2,-36(fp)
  812534:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812538:	008010c4 	movi	r2,67
  81253c:	e0bfff15 	stw	r2,-4(fp)
  812540:	00003606 	br	81261c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  812544:	e0bffc17 	ldw	r2,-16(fp)
  812548:	10800d03 	ldbu	r2,52(r2)
  81254c:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  812550:	e13ffb03 	ldbu	r4,-20(fp)
  812554:	e0fffb03 	ldbu	r3,-20(fp)
  812558:	008020b4 	movhi	r2,130
  81255c:	10a6b744 	addi	r2,r2,-25891
  812560:	10c5883a 	add	r2,r2,r3
  812564:	10800003 	ldbu	r2,0(r2)
  812568:	1007883a 	mov	r3,r2
  81256c:	e0bffc17 	ldw	r2,-16(fp)
  812570:	10800d43 	ldbu	r2,53(r2)
  812574:	0084303a 	nor	r2,zero,r2
  812578:	1884703a 	and	r2,r3,r2
  81257c:	1007883a 	mov	r3,r2
  812580:	008020b4 	movhi	r2,130
  812584:	10a6b744 	addi	r2,r2,-25891
  812588:	1105883a 	add	r2,r2,r4
  81258c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  812590:	e0fffb03 	ldbu	r3,-20(fp)
  812594:	008020b4 	movhi	r2,130
  812598:	10a6b744 	addi	r2,r2,-25891
  81259c:	10c5883a 	add	r2,r2,r3
  8125a0:	10800003 	ldbu	r2,0(r2)
  8125a4:	10803fcc 	andi	r2,r2,255
  8125a8:	1004c03a 	cmpne	r2,r2,zero
  8125ac:	10000c1e 	bne	r2,zero,8125e0 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  8125b0:	e0bffc17 	ldw	r2,-16(fp)
  8125b4:	10800d83 	ldbu	r2,54(r2)
  8125b8:	0084303a 	nor	r2,zero,r2
  8125bc:	1007883a 	mov	r3,r2
  8125c0:	008020b4 	movhi	r2,130
  8125c4:	10a6b704 	addi	r2,r2,-25892
  8125c8:	10800003 	ldbu	r2,0(r2)
  8125cc:	1884703a 	and	r2,r3,r2
  8125d0:	1007883a 	mov	r3,r2
  8125d4:	008020b4 	movhi	r2,130
  8125d8:	10a6b704 	addi	r2,r2,-25892
  8125dc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  8125e0:	e0bffc17 	ldw	r2,-16(fp)
  8125e4:	10800c03 	ldbu	r2,48(r2)
  8125e8:	10800214 	ori	r2,r2,8
  8125ec:	1007883a 	mov	r3,r2
  8125f0:	e0bffc17 	ldw	r2,-16(fp)
  8125f4:	10c00c05 	stb	r3,48(r2)
  8125f8:	e0bffa17 	ldw	r2,-24(fp)
  8125fc:	e0bff615 	stw	r2,-40(fp)
  812600:	e0bff617 	ldw	r2,-40(fp)
  812604:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  812608:	e0bffd03 	ldbu	r2,-12(fp)
  81260c:	10800058 	cmpnei	r2,r2,1
  812610:	1000011e 	bne	r2,zero,812618 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  812614:	080c5000 	call	80c500 <OS_Sched>
    }
    return (OS_ERR_NONE);
  812618:	e03fff15 	stw	zero,-4(fp)
  81261c:	e0bfff17 	ldw	r2,-4(fp)
}
  812620:	e037883a 	mov	sp,fp
  812624:	dfc00117 	ldw	ra,4(sp)
  812628:	df000017 	ldw	fp,0(sp)
  81262c:	dec00204 	addi	sp,sp,8
  812630:	f800283a 	ret

00812634 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  812634:	defff504 	addi	sp,sp,-44
  812638:	dfc00a15 	stw	ra,40(sp)
  81263c:	df000915 	stw	fp,36(sp)
  812640:	df000904 	addi	fp,sp,36
  812644:	e17ffe15 	stw	r5,-8(fp)
  812648:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81264c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  812650:	e0bffd03 	ldbu	r2,-12(fp)
  812654:	10800570 	cmpltui	r2,r2,21
  812658:	1000061e 	bne	r2,zero,812674 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  81265c:	e0bffd03 	ldbu	r2,-12(fp)
  812660:	10803fe0 	cmpeqi	r2,r2,255
  812664:	1000031e 	bne	r2,zero,812674 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  812668:	00800a84 	movi	r2,42
  81266c:	e0bfff15 	stw	r2,-4(fp)
  812670:	00003b06 	br	812760 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  812674:	e0bffe17 	ldw	r2,-8(fp)
  812678:	1004c03a 	cmpne	r2,r2,zero
  81267c:	1000031e 	bne	r2,zero,81268c <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  812680:	00800244 	movi	r2,9
  812684:	e0bfff15 	stw	r2,-4(fp)
  812688:	00003506 	br	812760 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81268c:	0005303a 	rdctl	r2,status
  812690:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812694:	e0fffa17 	ldw	r3,-24(fp)
  812698:	00bfff84 	movi	r2,-2
  81269c:	1884703a 	and	r2,r3,r2
  8126a0:	1001703a 	wrctl	status,r2
  
  return context;
  8126a4:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8126a8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  8126ac:	e0bffd03 	ldbu	r2,-12(fp)
  8126b0:	10803fd8 	cmpnei	r2,r2,255
  8126b4:	1000051e 	bne	r2,zero,8126cc <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  8126b8:	008020b4 	movhi	r2,130
  8126bc:	10a6ba04 	addi	r2,r2,-25880
  8126c0:	10800017 	ldw	r2,0(r2)
  8126c4:	10800c83 	ldbu	r2,50(r2)
  8126c8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8126cc:	e0bffd03 	ldbu	r2,-12(fp)
  8126d0:	00c020b4 	movhi	r3,130
  8126d4:	18fb4004 	addi	r3,r3,-4864
  8126d8:	1085883a 	add	r2,r2,r2
  8126dc:	1085883a 	add	r2,r2,r2
  8126e0:	10c5883a 	add	r2,r2,r3
  8126e4:	10800017 	ldw	r2,0(r2)
  8126e8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  8126ec:	e0bffc17 	ldw	r2,-16(fp)
  8126f0:	1004c03a 	cmpne	r2,r2,zero
  8126f4:	1000071e 	bne	r2,zero,812714 <OSTaskQuery+0xe0>
  8126f8:	e0bffb17 	ldw	r2,-20(fp)
  8126fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812700:	e0bff917 	ldw	r2,-28(fp)
  812704:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  812708:	00800a44 	movi	r2,41
  81270c:	e0bfff15 	stw	r2,-4(fp)
  812710:	00001306 	br	812760 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  812714:	e0bffc17 	ldw	r2,-16(fp)
  812718:	10800058 	cmpnei	r2,r2,1
  81271c:	1000071e 	bne	r2,zero,81273c <OSTaskQuery+0x108>
  812720:	e0bffb17 	ldw	r2,-20(fp)
  812724:	e0bff815 	stw	r2,-32(fp)
  812728:	e0bff817 	ldw	r2,-32(fp)
  81272c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812730:	008010c4 	movi	r2,67
  812734:	e0bfff15 	stw	r2,-4(fp)
  812738:	00000906 	br	812760 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  81273c:	e13ffe17 	ldw	r4,-8(fp)
  812740:	e17ffc17 	ldw	r5,-16(fp)
  812744:	01801b04 	movi	r6,108
  812748:	080c4940 	call	80c494 <OS_MemCopy>
  81274c:	e0bffb17 	ldw	r2,-20(fp)
  812750:	e0bff715 	stw	r2,-36(fp)
  812754:	e0bff717 	ldw	r2,-36(fp)
  812758:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  81275c:	e03fff15 	stw	zero,-4(fp)
  812760:	e0bfff17 	ldw	r2,-4(fp)
}
  812764:	e037883a 	mov	sp,fp
  812768:	dfc00117 	ldw	ra,4(sp)
  81276c:	df000017 	ldw	fp,0(sp)
  812770:	dec00204 	addi	sp,sp,8
  812774:	f800283a 	ret

00812778 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  812778:	defffc04 	addi	sp,sp,-16
  81277c:	df000315 	stw	fp,12(sp)
  812780:	df000304 	addi	fp,sp,12
  812784:	e13ffd15 	stw	r4,-12(fp)
  812788:	e17ffe15 	stw	r5,-8(fp)
  81278c:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  812790:	e0bfff0b 	ldhu	r2,-4(fp)
  812794:	1080004c 	andi	r2,r2,1
  812798:	10803fcc 	andi	r2,r2,255
  81279c:	1005003a 	cmpeq	r2,r2,zero
  8127a0:	1000101e 	bne	r2,zero,8127e4 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  8127a4:	e0bfff0b 	ldhu	r2,-4(fp)
  8127a8:	1080008c 	andi	r2,r2,2
  8127ac:	1005003a 	cmpeq	r2,r2,zero
  8127b0:	10000c1e 	bne	r2,zero,8127e4 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8127b4:	00000806 	br	8127d8 <OS_TaskStkClr+0x60>
                size--;
  8127b8:	e0bffe17 	ldw	r2,-8(fp)
  8127bc:	10bfffc4 	addi	r2,r2,-1
  8127c0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  8127c4:	e0bffd17 	ldw	r2,-12(fp)
  8127c8:	10000015 	stw	zero,0(r2)
  8127cc:	e0bffd17 	ldw	r2,-12(fp)
  8127d0:	10800104 	addi	r2,r2,4
  8127d4:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8127d8:	e0bffe17 	ldw	r2,-8(fp)
  8127dc:	1004c03a 	cmpne	r2,r2,zero
  8127e0:	103ff51e 	bne	r2,zero,8127b8 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  8127e4:	e037883a 	mov	sp,fp
  8127e8:	df000017 	ldw	fp,0(sp)
  8127ec:	dec00104 	addi	sp,sp,4
  8127f0:	f800283a 	ret

008127f4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  8127f4:	defff904 	addi	sp,sp,-28
  8127f8:	dfc00615 	stw	ra,24(sp)
  8127fc:	df000515 	stw	fp,20(sp)
  812800:	df000504 	addi	fp,sp,20
  812804:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812808:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81280c:	008020b4 	movhi	r2,130
  812810:	10a6b904 	addi	r2,r2,-25884
  812814:	10800003 	ldbu	r2,0(r2)
  812818:	10803fcc 	andi	r2,r2,255
  81281c:	1004c03a 	cmpne	r2,r2,zero
  812820:	1000421e 	bne	r2,zero,81292c <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  812824:	e0bfff0b 	ldhu	r2,-4(fp)
  812828:	1005003a 	cmpeq	r2,r2,zero
  81282c:	10003f1e 	bne	r2,zero,81292c <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812830:	0005303a 	rdctl	r2,status
  812834:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812838:	e0fffc17 	ldw	r3,-16(fp)
  81283c:	00bfff84 	movi	r2,-2
  812840:	1884703a 	and	r2,r3,r2
  812844:	1001703a 	wrctl	status,r2
  
  return context;
  812848:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  81284c:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  812850:	008020b4 	movhi	r2,130
  812854:	10a6ba04 	addi	r2,r2,-25880
  812858:	10800017 	ldw	r2,0(r2)
  81285c:	10800d03 	ldbu	r2,52(r2)
  812860:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  812864:	e13ffe03 	ldbu	r4,-8(fp)
  812868:	e0fffe03 	ldbu	r3,-8(fp)
  81286c:	008020b4 	movhi	r2,130
  812870:	10a6b744 	addi	r2,r2,-25891
  812874:	10c5883a 	add	r2,r2,r3
  812878:	10800003 	ldbu	r2,0(r2)
  81287c:	1007883a 	mov	r3,r2
  812880:	008020b4 	movhi	r2,130
  812884:	10a6ba04 	addi	r2,r2,-25880
  812888:	10800017 	ldw	r2,0(r2)
  81288c:	10800d43 	ldbu	r2,53(r2)
  812890:	0084303a 	nor	r2,zero,r2
  812894:	1884703a 	and	r2,r3,r2
  812898:	1007883a 	mov	r3,r2
  81289c:	008020b4 	movhi	r2,130
  8128a0:	10a6b744 	addi	r2,r2,-25891
  8128a4:	1105883a 	add	r2,r2,r4
  8128a8:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  8128ac:	e0fffe03 	ldbu	r3,-8(fp)
  8128b0:	008020b4 	movhi	r2,130
  8128b4:	10a6b744 	addi	r2,r2,-25891
  8128b8:	10c5883a 	add	r2,r2,r3
  8128bc:	10800003 	ldbu	r2,0(r2)
  8128c0:	10803fcc 	andi	r2,r2,255
  8128c4:	1004c03a 	cmpne	r2,r2,zero
  8128c8:	10000e1e 	bne	r2,zero,812904 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8128cc:	008020b4 	movhi	r2,130
  8128d0:	10a6ba04 	addi	r2,r2,-25880
  8128d4:	10800017 	ldw	r2,0(r2)
  8128d8:	10800d83 	ldbu	r2,54(r2)
  8128dc:	0084303a 	nor	r2,zero,r2
  8128e0:	1007883a 	mov	r3,r2
  8128e4:	008020b4 	movhi	r2,130
  8128e8:	10a6b704 	addi	r2,r2,-25892
  8128ec:	10800003 	ldbu	r2,0(r2)
  8128f0:	1884703a 	and	r2,r3,r2
  8128f4:	1007883a 	mov	r3,r2
  8128f8:	008020b4 	movhi	r2,130
  8128fc:	10a6b704 	addi	r2,r2,-25892
  812900:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  812904:	008020b4 	movhi	r2,130
  812908:	10a6ba04 	addi	r2,r2,-25880
  81290c:	10c00017 	ldw	r3,0(r2)
  812910:	e0bfff0b 	ldhu	r2,-4(fp)
  812914:	18800b8d 	sth	r2,46(r3)
  812918:	e0bffd17 	ldw	r2,-12(fp)
  81291c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812920:	e0bffb17 	ldw	r2,-20(fp)
  812924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  812928:	080c5000 	call	80c500 <OS_Sched>
    }
}
  81292c:	e037883a 	mov	sp,fp
  812930:	dfc00117 	ldw	ra,4(sp)
  812934:	df000017 	ldw	fp,0(sp)
  812938:	dec00204 	addi	sp,sp,8
  81293c:	f800283a 	ret

00812940 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  812940:	defff604 	addi	sp,sp,-40
  812944:	dfc00915 	stw	ra,36(sp)
  812948:	df000815 	stw	fp,32(sp)
  81294c:	dc000715 	stw	r16,28(sp)
  812950:	df000704 	addi	fp,sp,28
  812954:	e13ffb05 	stb	r4,-20(fp)
  812958:	e17ffc05 	stb	r5,-16(fp)
  81295c:	e1bffd05 	stb	r6,-12(fp)
  812960:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812964:	008020b4 	movhi	r2,130
  812968:	10a6b904 	addi	r2,r2,-25884
  81296c:	10800003 	ldbu	r2,0(r2)
  812970:	10803fcc 	andi	r2,r2,255
  812974:	1005003a 	cmpeq	r2,r2,zero
  812978:	1000031e 	bne	r2,zero,812988 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  81297c:	00801544 	movi	r2,85
  812980:	e0bfff15 	stw	r2,-4(fp)
  812984:	00004406 	br	812a98 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  812988:	e0bffb03 	ldbu	r2,-20(fp)
  81298c:	1004c03a 	cmpne	r2,r2,zero
  812990:	10000c1e 	bne	r2,zero,8129c4 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  812994:	e0bffc03 	ldbu	r2,-16(fp)
  812998:	1004c03a 	cmpne	r2,r2,zero
  81299c:	1000091e 	bne	r2,zero,8129c4 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  8129a0:	e0bffd03 	ldbu	r2,-12(fp)
  8129a4:	1004c03a 	cmpne	r2,r2,zero
  8129a8:	1000061e 	bne	r2,zero,8129c4 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  8129ac:	e0bffe0b 	ldhu	r2,-8(fp)
  8129b0:	1004c03a 	cmpne	r2,r2,zero
  8129b4:	1000031e 	bne	r2,zero,8129c4 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  8129b8:	00801504 	movi	r2,84
  8129bc:	e0bfff15 	stw	r2,-4(fp)
  8129c0:	00003506 	br	812a98 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  8129c4:	e0bffc03 	ldbu	r2,-16(fp)
  8129c8:	10800f30 	cmpltui	r2,r2,60
  8129cc:	1000031e 	bne	r2,zero,8129dc <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  8129d0:	00801444 	movi	r2,81
  8129d4:	e0bfff15 	stw	r2,-4(fp)
  8129d8:	00002f06 	br	812a98 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  8129dc:	e0bffd03 	ldbu	r2,-12(fp)
  8129e0:	10800f30 	cmpltui	r2,r2,60
  8129e4:	1000031e 	bne	r2,zero,8129f4 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  8129e8:	00801484 	movi	r2,82
  8129ec:	e0bfff15 	stw	r2,-4(fp)
  8129f0:	00002906 	br	812a98 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  8129f4:	e0bffe0b 	ldhu	r2,-8(fp)
  8129f8:	1080fa30 	cmpltui	r2,r2,1000
  8129fc:	1000031e 	bne	r2,zero,812a0c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  812a00:	008014c4 	movi	r2,83
  812a04:	e0bfff15 	stw	r2,-4(fp)
  812a08:	00002306 	br	812a98 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  812a0c:	e0bffb03 	ldbu	r2,-20(fp)
  812a10:	10c38424 	muli	r3,r2,3600
  812a14:	e0bffc03 	ldbu	r2,-16(fp)
  812a18:	10800f24 	muli	r2,r2,60
  812a1c:	1887883a 	add	r3,r3,r2
  812a20:	e0bffd03 	ldbu	r2,-12(fp)
  812a24:	1885883a 	add	r2,r3,r2
  812a28:	1400fa24 	muli	r16,r2,1000
  812a2c:	e0bffe0b 	ldhu	r2,-8(fp)
  812a30:	1100fa24 	muli	r4,r2,1000
  812a34:	0140fa04 	movi	r5,1000
  812a38:	08004340 	call	800434 <__udivsi3>
  812a3c:	8085883a 	add	r2,r16,r2
  812a40:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  812a44:	e0bffa17 	ldw	r2,-24(fp)
  812a48:	1004d43a 	srli	r2,r2,16
  812a4c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  812a50:	e0bffa17 	ldw	r2,-24(fp)
  812a54:	10bfffcc 	andi	r2,r2,65535
  812a58:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  812a5c:	e0bffa17 	ldw	r2,-24(fp)
  812a60:	113fffcc 	andi	r4,r2,65535
  812a64:	08127f40 	call	8127f4 <OSTimeDly>
    while (loops > 0) {
  812a68:	00000706 	br	812a88 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  812a6c:	01200014 	movui	r4,32768
  812a70:	08127f40 	call	8127f4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  812a74:	01200014 	movui	r4,32768
  812a78:	08127f40 	call	8127f4 <OSTimeDly>
        loops--;
  812a7c:	e0bff90b 	ldhu	r2,-28(fp)
  812a80:	10bfffc4 	addi	r2,r2,-1
  812a84:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  812a88:	e0bff90b 	ldhu	r2,-28(fp)
  812a8c:	1004c03a 	cmpne	r2,r2,zero
  812a90:	103ff61e 	bne	r2,zero,812a6c <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  812a94:	e03fff15 	stw	zero,-4(fp)
  812a98:	e0bfff17 	ldw	r2,-4(fp)
}
  812a9c:	e037883a 	mov	sp,fp
  812aa0:	dfc00217 	ldw	ra,8(sp)
  812aa4:	df000117 	ldw	fp,4(sp)
  812aa8:	dc000017 	ldw	r16,0(sp)
  812aac:	dec00304 	addi	sp,sp,12
  812ab0:	f800283a 	ret

00812ab4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  812ab4:	defff404 	addi	sp,sp,-48
  812ab8:	dfc00b15 	stw	ra,44(sp)
  812abc:	df000a15 	stw	fp,40(sp)
  812ac0:	df000a04 	addi	fp,sp,40
  812ac4:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812ac8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  812acc:	e0bffe03 	ldbu	r2,-8(fp)
  812ad0:	10800530 	cmpltui	r2,r2,20
  812ad4:	1000031e 	bne	r2,zero,812ae4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  812ad8:	00800a84 	movi	r2,42
  812adc:	e0bfff15 	stw	r2,-4(fp)
  812ae0:	00007206 	br	812cac <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812ae4:	0005303a 	rdctl	r2,status
  812ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812aec:	e0fffb17 	ldw	r3,-20(fp)
  812af0:	00bfff84 	movi	r2,-2
  812af4:	1884703a 	and	r2,r3,r2
  812af8:	1001703a 	wrctl	status,r2
  
  return context;
  812afc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812b00:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  812b04:	e0bffe03 	ldbu	r2,-8(fp)
  812b08:	00c020b4 	movhi	r3,130
  812b0c:	18fb4004 	addi	r3,r3,-4864
  812b10:	1085883a 	add	r2,r2,r2
  812b14:	1085883a 	add	r2,r2,r2
  812b18:	10c5883a 	add	r2,r2,r3
  812b1c:	10800017 	ldw	r2,0(r2)
  812b20:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  812b24:	e0bffd17 	ldw	r2,-12(fp)
  812b28:	1004c03a 	cmpne	r2,r2,zero
  812b2c:	1000071e 	bne	r2,zero,812b4c <OSTimeDlyResume+0x98>
  812b30:	e0bffc17 	ldw	r2,-16(fp)
  812b34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812b38:	e0bffa17 	ldw	r2,-24(fp)
  812b3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  812b40:	008010c4 	movi	r2,67
  812b44:	e0bfff15 	stw	r2,-4(fp)
  812b48:	00005806 	br	812cac <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  812b4c:	e0bffd17 	ldw	r2,-12(fp)
  812b50:	10800058 	cmpnei	r2,r2,1
  812b54:	1000071e 	bne	r2,zero,812b74 <OSTimeDlyResume+0xc0>
  812b58:	e0bffc17 	ldw	r2,-16(fp)
  812b5c:	e0bff915 	stw	r2,-28(fp)
  812b60:	e0bff917 	ldw	r2,-28(fp)
  812b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  812b68:	008010c4 	movi	r2,67
  812b6c:	e0bfff15 	stw	r2,-4(fp)
  812b70:	00004e06 	br	812cac <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  812b74:	e0bffd17 	ldw	r2,-12(fp)
  812b78:	10800b8b 	ldhu	r2,46(r2)
  812b7c:	10bfffcc 	andi	r2,r2,65535
  812b80:	1004c03a 	cmpne	r2,r2,zero
  812b84:	1000071e 	bne	r2,zero,812ba4 <OSTimeDlyResume+0xf0>
  812b88:	e0bffc17 	ldw	r2,-16(fp)
  812b8c:	e0bff815 	stw	r2,-32(fp)
  812b90:	e0bff817 	ldw	r2,-32(fp)
  812b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  812b98:	00801404 	movi	r2,80
  812b9c:	e0bfff15 	stw	r2,-4(fp)
  812ba0:	00004206 	br	812cac <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  812ba4:	e0bffd17 	ldw	r2,-12(fp)
  812ba8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  812bac:	e0bffd17 	ldw	r2,-12(fp)
  812bb0:	10800c03 	ldbu	r2,48(r2)
  812bb4:	10803fcc 	andi	r2,r2,255
  812bb8:	10800dcc 	andi	r2,r2,55
  812bbc:	1005003a 	cmpeq	r2,r2,zero
  812bc0:	10000b1e 	bne	r2,zero,812bf0 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  812bc4:	e0bffd17 	ldw	r2,-12(fp)
  812bc8:	10c00c03 	ldbu	r3,48(r2)
  812bcc:	00bff204 	movi	r2,-56
  812bd0:	1884703a 	and	r2,r3,r2
  812bd4:	1007883a 	mov	r3,r2
  812bd8:	e0bffd17 	ldw	r2,-12(fp)
  812bdc:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  812be0:	e0fffd17 	ldw	r3,-12(fp)
  812be4:	00800044 	movi	r2,1
  812be8:	18800c45 	stb	r2,49(r3)
  812bec:	00000206 	br	812bf8 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  812bf0:	e0bffd17 	ldw	r2,-12(fp)
  812bf4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  812bf8:	e0bffd17 	ldw	r2,-12(fp)
  812bfc:	10800c03 	ldbu	r2,48(r2)
  812c00:	10803fcc 	andi	r2,r2,255
  812c04:	1080020c 	andi	r2,r2,8
  812c08:	1004c03a 	cmpne	r2,r2,zero
  812c0c:	1000221e 	bne	r2,zero,812c98 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  812c10:	e0bffd17 	ldw	r2,-12(fp)
  812c14:	10c00d83 	ldbu	r3,54(r2)
  812c18:	008020b4 	movhi	r2,130
  812c1c:	10a6b704 	addi	r2,r2,-25892
  812c20:	10800003 	ldbu	r2,0(r2)
  812c24:	1884b03a 	or	r2,r3,r2
  812c28:	1007883a 	mov	r3,r2
  812c2c:	008020b4 	movhi	r2,130
  812c30:	10a6b704 	addi	r2,r2,-25892
  812c34:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812c38:	e0bffd17 	ldw	r2,-12(fp)
  812c3c:	10800d03 	ldbu	r2,52(r2)
  812c40:	11003fcc 	andi	r4,r2,255
  812c44:	e0bffd17 	ldw	r2,-12(fp)
  812c48:	10800d03 	ldbu	r2,52(r2)
  812c4c:	10c03fcc 	andi	r3,r2,255
  812c50:	008020b4 	movhi	r2,130
  812c54:	10a6b744 	addi	r2,r2,-25891
  812c58:	10c5883a 	add	r2,r2,r3
  812c5c:	10c00003 	ldbu	r3,0(r2)
  812c60:	e0bffd17 	ldw	r2,-12(fp)
  812c64:	10800d43 	ldbu	r2,53(r2)
  812c68:	1884b03a 	or	r2,r3,r2
  812c6c:	1007883a 	mov	r3,r2
  812c70:	008020b4 	movhi	r2,130
  812c74:	10a6b744 	addi	r2,r2,-25891
  812c78:	1105883a 	add	r2,r2,r4
  812c7c:	10c00005 	stb	r3,0(r2)
  812c80:	e0bffc17 	ldw	r2,-16(fp)
  812c84:	e0bff715 	stw	r2,-36(fp)
  812c88:	e0bff717 	ldw	r2,-36(fp)
  812c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  812c90:	080c5000 	call	80c500 <OS_Sched>
  812c94:	00000406 	br	812ca8 <OSTimeDlyResume+0x1f4>
  812c98:	e0bffc17 	ldw	r2,-16(fp)
  812c9c:	e0bff615 	stw	r2,-40(fp)
  812ca0:	e0bff617 	ldw	r2,-40(fp)
  812ca4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  812ca8:	e03fff15 	stw	zero,-4(fp)
  812cac:	e0bfff17 	ldw	r2,-4(fp)
}
  812cb0:	e037883a 	mov	sp,fp
  812cb4:	dfc00117 	ldw	ra,4(sp)
  812cb8:	df000017 	ldw	fp,0(sp)
  812cbc:	dec00204 	addi	sp,sp,8
  812cc0:	f800283a 	ret

00812cc4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  812cc4:	defffb04 	addi	sp,sp,-20
  812cc8:	df000415 	stw	fp,16(sp)
  812ccc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812cd0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812cd4:	0005303a 	rdctl	r2,status
  812cd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812cdc:	e0fffd17 	ldw	r3,-12(fp)
  812ce0:	00bfff84 	movi	r2,-2
  812ce4:	1884703a 	and	r2,r3,r2
  812ce8:	1001703a 	wrctl	status,r2
  
  return context;
  812cec:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  812cf0:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  812cf4:	008020b4 	movhi	r2,130
  812cf8:	10a6bb04 	addi	r2,r2,-25876
  812cfc:	10800017 	ldw	r2,0(r2)
  812d00:	e0bfff15 	stw	r2,-4(fp)
  812d04:	e0bffe17 	ldw	r2,-8(fp)
  812d08:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d0c:	e0bffc17 	ldw	r2,-16(fp)
  812d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  812d14:	e0bfff17 	ldw	r2,-4(fp)
}
  812d18:	e037883a 	mov	sp,fp
  812d1c:	df000017 	ldw	fp,0(sp)
  812d20:	dec00104 	addi	sp,sp,4
  812d24:	f800283a 	ret

00812d28 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  812d28:	defffb04 	addi	sp,sp,-20
  812d2c:	df000415 	stw	fp,16(sp)
  812d30:	df000404 	addi	fp,sp,16
  812d34:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812d38:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d3c:	0005303a 	rdctl	r2,status
  812d40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d44:	e0fffd17 	ldw	r3,-12(fp)
  812d48:	00bfff84 	movi	r2,-2
  812d4c:	1884703a 	and	r2,r3,r2
  812d50:	1001703a 	wrctl	status,r2
  
  return context;
  812d54:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  812d58:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  812d5c:	00c020b4 	movhi	r3,130
  812d60:	18e6bb04 	addi	r3,r3,-25876
  812d64:	e0bfff17 	ldw	r2,-4(fp)
  812d68:	18800015 	stw	r2,0(r3)
  812d6c:	e0bffe17 	ldw	r2,-8(fp)
  812d70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d74:	e0bffc17 	ldw	r2,-16(fp)
  812d78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  812d7c:	e037883a 	mov	sp,fp
  812d80:	df000017 	ldw	fp,0(sp)
  812d84:	dec00104 	addi	sp,sp,4
  812d88:	f800283a 	ret

00812d8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  812d8c:	defffd04 	addi	sp,sp,-12
  812d90:	dfc00215 	stw	ra,8(sp)
  812d94:	df000115 	stw	fp,4(sp)
  812d98:	df000104 	addi	fp,sp,4
  812d9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  812da0:	08154040 	call	815404 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  812da4:	00800044 	movi	r2,1
  812da8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  812dac:	e037883a 	mov	sp,fp
  812db0:	dfc00117 	ldw	ra,4(sp)
  812db4:	df000017 	ldw	fp,0(sp)
  812db8:	dec00204 	addi	sp,sp,8
  812dbc:	f800283a 	ret

00812dc0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  812dc0:	defffe04 	addi	sp,sp,-8
  812dc4:	dfc00115 	stw	ra,4(sp)
  812dc8:	df000015 	stw	fp,0(sp)
  812dcc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  812dd0:	01004474 	movhi	r4,273
  812dd4:	21241004 	addi	r4,r4,-28608
  812dd8:	000b883a 	mov	r5,zero
  812ddc:	000d883a 	mov	r6,zero
  812de0:	01c0fa04 	movi	r7,1000
  812de4:	08141980 	call	814198 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  812de8:	01002074 	movhi	r4,129
  812dec:	211b8d04 	addi	r4,r4,28212
  812df0:	000b883a 	mov	r5,zero
  812df4:	01800044 	movi	r6,1
  812df8:	08135140 	call	813514 <altera_avalon_jtag_uart_init>
  812dfc:	01002074 	movhi	r4,129
  812e00:	211b8304 	addi	r4,r4,28172
  812e04:	0812e340 	call	812e34 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  812e08:	01002074 	movhi	r4,129
  812e0c:	211f9e04 	addi	r4,r4,32376
  812e10:	08142d80 	call	8142d8 <alt_up_character_lcd_init>
  812e14:	01002074 	movhi	r4,129
  812e18:	211f9e04 	addi	r4,r4,32376
  812e1c:	0812e340 	call	812e34 <alt_dev_reg>
}
  812e20:	e037883a 	mov	sp,fp
  812e24:	dfc00117 	ldw	ra,4(sp)
  812e28:	df000017 	ldw	fp,0(sp)
  812e2c:	dec00204 	addi	sp,sp,8
  812e30:	f800283a 	ret

00812e34 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812e34:	defffd04 	addi	sp,sp,-12
  812e38:	dfc00215 	stw	ra,8(sp)
  812e3c:	df000115 	stw	fp,4(sp)
  812e40:	df000104 	addi	fp,sp,4
  812e44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812e48:	e13fff17 	ldw	r4,-4(fp)
  812e4c:	01402074 	movhi	r5,129
  812e50:	295fb104 	addi	r5,r5,32452
  812e54:	08148f00 	call	8148f0 <alt_dev_llist_insert>
}
  812e58:	e037883a 	mov	sp,fp
  812e5c:	dfc00117 	ldw	ra,4(sp)
  812e60:	df000017 	ldw	fp,0(sp)
  812e64:	dec00204 	addi	sp,sp,8
  812e68:	f800283a 	ret

00812e6c <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
  812e6c:	defff904 	addi	sp,sp,-28
  812e70:	dfc00615 	stw	ra,24(sp)
  812e74:	df000515 	stw	fp,20(sp)
  812e78:	df000504 	addi	fp,sp,20
  812e7c:	e13ffb15 	stw	r4,-20(fp)
  812e80:	e17ffc15 	stw	r5,-16(fp)
  812e84:	e1bffd15 	stw	r6,-12(fp)
  812e88:	e1fffe15 	stw	r7,-8(fp)
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
  812e8c:	e13ffb17 	ldw	r4,-20(fp)
  812e90:	01400fc4 	movi	r5,63
  812e94:	081305c0 	call	81305c <altera_avalon_fifo_clear_event>
  812e98:	1005003a 	cmpeq	r2,r2,zero
  812e9c:	1000031e 	bne	r2,zero,812eac <altera_avalon_fifo_init+0x40>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  812ea0:	00bfffc4 	movi	r2,-1
  812ea4:	e0bfff15 	stw	r2,-4(fp)
  812ea8:	00001906 	br	812f10 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
  812eac:	e13ffb17 	ldw	r4,-20(fp)
  812eb0:	e17ffc17 	ldw	r5,-16(fp)
  812eb4:	08130c40 	call	8130c4 <altera_avalon_fifo_write_ienable>
  812eb8:	1005003a 	cmpeq	r2,r2,zero
  812ebc:	1000031e 	bne	r2,zero,812ecc <altera_avalon_fifo_init+0x60>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  812ec0:	00bfff84 	movi	r2,-2
  812ec4:	e0bfff15 	stw	r2,-4(fp)
  812ec8:	00001106 	br	812f10 <altera_avalon_fifo_init+0xa4>
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
  812ecc:	e13ffb17 	ldw	r4,-20(fp)
  812ed0:	e17ffe17 	ldw	r5,-8(fp)
  812ed4:	08131240 	call	813124 <altera_avalon_fifo_write_almostfull>
  812ed8:	1005003a 	cmpeq	r2,r2,zero
  812edc:	1000031e 	bne	r2,zero,812eec <altera_avalon_fifo_init+0x80>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  812ee0:	00bfff44 	movi	r2,-3
  812ee4:	e0bfff15 	stw	r2,-4(fp)
  812ee8:	00000906 	br	812f10 <altera_avalon_fifo_init+0xa4>
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
  812eec:	e13ffb17 	ldw	r4,-20(fp)
  812ef0:	e17ffd17 	ldw	r5,-12(fp)
  812ef4:	08131840 	call	813184 <altera_avalon_fifo_write_almostempty>
  812ef8:	1005003a 	cmpeq	r2,r2,zero
  812efc:	1000031e 	bne	r2,zero,812f0c <altera_avalon_fifo_init+0xa0>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  812f00:	00bfff44 	movi	r2,-3
  812f04:	e0bfff15 	stw	r2,-4(fp)
  812f08:	00000106 	br	812f10 <altera_avalon_fifo_init+0xa4>
    }

    return ALTERA_AVALON_FIFO_OK;
  812f0c:	e03fff15 	stw	zero,-4(fp)
  812f10:	e0bfff17 	ldw	r2,-4(fp)
}
  812f14:	e037883a 	mov	sp,fp
  812f18:	dfc00117 	ldw	ra,4(sp)
  812f1c:	df000017 	ldw	fp,0(sp)
  812f20:	dec00204 	addi	sp,sp,8
  812f24:	f800283a 	ret

00812f28 <altera_avalon_fifo_read_status>:

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
  812f28:	defffd04 	addi	sp,sp,-12
  812f2c:	df000215 	stw	fp,8(sp)
  812f30:	df000204 	addi	fp,sp,8
  812f34:	e13ffe15 	stw	r4,-8(fp)
  812f38:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
  812f3c:	e0bffe17 	ldw	r2,-8(fp)
  812f40:	10800104 	addi	r2,r2,4
  812f44:	10800037 	ldwio	r2,0(r2)
  812f48:	1007883a 	mov	r3,r2
  812f4c:	e0bfff17 	ldw	r2,-4(fp)
  812f50:	1884703a 	and	r2,r3,r2
}
  812f54:	e037883a 	mov	sp,fp
  812f58:	df000017 	ldw	fp,0(sp)
  812f5c:	dec00104 	addi	sp,sp,4
  812f60:	f800283a 	ret

00812f64 <altera_avalon_fifo_read_ienable>:

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
  812f64:	defffd04 	addi	sp,sp,-12
  812f68:	df000215 	stw	fp,8(sp)
  812f6c:	df000204 	addi	fp,sp,8
  812f70:	e13ffe15 	stw	r4,-8(fp)
  812f74:	e17fff15 	stw	r5,-4(fp)
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
  812f78:	e0bffe17 	ldw	r2,-8(fp)
  812f7c:	10800304 	addi	r2,r2,12
  812f80:	10800037 	ldwio	r2,0(r2)
  812f84:	1007883a 	mov	r3,r2
  812f88:	e0bfff17 	ldw	r2,-4(fp)
  812f8c:	1884703a 	and	r2,r3,r2
}
  812f90:	e037883a 	mov	sp,fp
  812f94:	df000017 	ldw	fp,0(sp)
  812f98:	dec00104 	addi	sp,sp,4
  812f9c:	f800283a 	ret

00812fa0 <altera_avalon_fifo_read_almostfull>:

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
  812fa0:	defffe04 	addi	sp,sp,-8
  812fa4:	df000115 	stw	fp,4(sp)
  812fa8:	df000104 	addi	fp,sp,4
  812fac:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
  812fb0:	e0bfff17 	ldw	r2,-4(fp)
  812fb4:	10800404 	addi	r2,r2,16
  812fb8:	10800037 	ldwio	r2,0(r2)
}
  812fbc:	e037883a 	mov	sp,fp
  812fc0:	df000017 	ldw	fp,0(sp)
  812fc4:	dec00104 	addi	sp,sp,4
  812fc8:	f800283a 	ret

00812fcc <altera_avalon_fifo_read_almostempty>:

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
  812fcc:	defffe04 	addi	sp,sp,-8
  812fd0:	df000115 	stw	fp,4(sp)
  812fd4:	df000104 	addi	fp,sp,4
  812fd8:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
  812fdc:	e0bfff17 	ldw	r2,-4(fp)
  812fe0:	10800504 	addi	r2,r2,20
  812fe4:	10800037 	ldwio	r2,0(r2)
}
  812fe8:	e037883a 	mov	sp,fp
  812fec:	df000017 	ldw	fp,0(sp)
  812ff0:	dec00104 	addi	sp,sp,4
  812ff4:	f800283a 	ret

00812ff8 <altera_avalon_fifo_read_event>:

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
  812ff8:	defffd04 	addi	sp,sp,-12
  812ffc:	df000215 	stw	fp,8(sp)
  813000:	df000204 	addi	fp,sp,8
  813004:	e13ffe15 	stw	r4,-8(fp)
  813008:	e17fff15 	stw	r5,-4(fp)
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
  81300c:	e0bffe17 	ldw	r2,-8(fp)
  813010:	10800204 	addi	r2,r2,8
  813014:	10800037 	ldwio	r2,0(r2)
  813018:	1007883a 	mov	r3,r2
  81301c:	e0bfff17 	ldw	r2,-4(fp)
  813020:	1884703a 	and	r2,r3,r2
}
  813024:	e037883a 	mov	sp,fp
  813028:	df000017 	ldw	fp,0(sp)
  81302c:	dec00104 	addi	sp,sp,4
  813030:	f800283a 	ret

00813034 <altera_avalon_fifo_read_level>:

int altera_avalon_fifo_read_level(alt_u32 address)
{
  813034:	defffe04 	addi	sp,sp,-8
  813038:	df000115 	stw	fp,4(sp)
  81303c:	df000104 	addi	fp,sp,4
  813040:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
  813044:	e0bfff17 	ldw	r2,-4(fp)
  813048:	10800037 	ldwio	r2,0(r2)
}
  81304c:	e037883a 	mov	sp,fp
  813050:	df000017 	ldw	fp,0(sp)
  813054:	dec00104 	addi	sp,sp,4
  813058:	f800283a 	ret

0081305c <altera_avalon_fifo_clear_event>:

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
  81305c:	defffc04 	addi	sp,sp,-16
  813060:	df000315 	stw	fp,12(sp)
  813064:	df000304 	addi	fp,sp,12
  813068:	e13ffd15 	stw	r4,-12(fp)
  81306c:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
  813070:	e0bffd17 	ldw	r2,-12(fp)
  813074:	10800204 	addi	r2,r2,8
  813078:	e0fffe17 	ldw	r3,-8(fp)
  81307c:	10c00035 	stwio	r3,0(r2)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
  813080:	e0bffd17 	ldw	r2,-12(fp)
  813084:	10800204 	addi	r2,r2,8
  813088:	10800037 	ldwio	r2,0(r2)
  81308c:	1007883a 	mov	r3,r2
  813090:	e0bffe17 	ldw	r2,-8(fp)
  813094:	1884703a 	and	r2,r3,r2
  813098:	1004c03a 	cmpne	r2,r2,zero
  81309c:	1000021e 	bne	r2,zero,8130a8 <altera_avalon_fifo_clear_event+0x4c>
        return ALTERA_AVALON_FIFO_OK;
  8130a0:	e03fff15 	stw	zero,-4(fp)
  8130a4:	00000206 	br	8130b0 <altera_avalon_fifo_clear_event+0x54>
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
  8130a8:	00bfffc4 	movi	r2,-1
  8130ac:	e0bfff15 	stw	r2,-4(fp)
  8130b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8130b4:	e037883a 	mov	sp,fp
  8130b8:	df000017 	ldw	fp,0(sp)
  8130bc:	dec00104 	addi	sp,sp,4
  8130c0:	f800283a 	ret

008130c4 <altera_avalon_fifo_write_ienable>:

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
  8130c4:	defffc04 	addi	sp,sp,-16
  8130c8:	df000315 	stw	fp,12(sp)
  8130cc:	df000304 	addi	fp,sp,12
  8130d0:	e13ffd15 	stw	r4,-12(fp)
  8130d4:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
  8130d8:	e0bffd17 	ldw	r2,-12(fp)
  8130dc:	10800304 	addi	r2,r2,12
  8130e0:	e0fffe17 	ldw	r3,-8(fp)
  8130e4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
  8130e8:	e0bffd17 	ldw	r2,-12(fp)
  8130ec:	10800304 	addi	r2,r2,12
  8130f0:	10800037 	ldwio	r2,0(r2)
  8130f4:	1007883a 	mov	r3,r2
  8130f8:	e0bffe17 	ldw	r2,-8(fp)
  8130fc:	1880021e 	bne	r3,r2,813108 <altera_avalon_fifo_write_ienable+0x44>
        return ALTERA_AVALON_FIFO_OK;
  813100:	e03fff15 	stw	zero,-4(fp)
  813104:	00000206 	br	813110 <altera_avalon_fifo_write_ienable+0x4c>
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
  813108:	00bfff84 	movi	r2,-2
  81310c:	e0bfff15 	stw	r2,-4(fp)
  813110:	e0bfff17 	ldw	r2,-4(fp)
}
  813114:	e037883a 	mov	sp,fp
  813118:	df000017 	ldw	fp,0(sp)
  81311c:	dec00104 	addi	sp,sp,4
  813120:	f800283a 	ret

00813124 <altera_avalon_fifo_write_almostfull>:

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
  813124:	defffc04 	addi	sp,sp,-16
  813128:	df000315 	stw	fp,12(sp)
  81312c:	df000304 	addi	fp,sp,12
  813130:	e13ffd15 	stw	r4,-12(fp)
  813134:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
  813138:	e0bffd17 	ldw	r2,-12(fp)
  81313c:	10800404 	addi	r2,r2,16
  813140:	e0fffe17 	ldw	r3,-8(fp)
  813144:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
  813148:	e0bffd17 	ldw	r2,-12(fp)
  81314c:	10800404 	addi	r2,r2,16
  813150:	10800037 	ldwio	r2,0(r2)
  813154:	1007883a 	mov	r3,r2
  813158:	e0bffe17 	ldw	r2,-8(fp)
  81315c:	1880021e 	bne	r3,r2,813168 <altera_avalon_fifo_write_almostfull+0x44>
        return ALTERA_AVALON_FIFO_OK;
  813160:	e03fff15 	stw	zero,-4(fp)
  813164:	00000206 	br	813170 <altera_avalon_fifo_write_almostfull+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  813168:	00bfff44 	movi	r2,-3
  81316c:	e0bfff15 	stw	r2,-4(fp)
  813170:	e0bfff17 	ldw	r2,-4(fp)
}
  813174:	e037883a 	mov	sp,fp
  813178:	df000017 	ldw	fp,0(sp)
  81317c:	dec00104 	addi	sp,sp,4
  813180:	f800283a 	ret

00813184 <altera_avalon_fifo_write_almostempty>:

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
  813184:	defffc04 	addi	sp,sp,-16
  813188:	df000315 	stw	fp,12(sp)
  81318c:	df000304 	addi	fp,sp,12
  813190:	e13ffd15 	stw	r4,-12(fp)
  813194:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
  813198:	e0bffd17 	ldw	r2,-12(fp)
  81319c:	10800504 	addi	r2,r2,20
  8131a0:	e0fffe17 	ldw	r3,-8(fp)
  8131a4:	10c00035 	stwio	r3,0(r2)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
  8131a8:	e0bffd17 	ldw	r2,-12(fp)
  8131ac:	10800504 	addi	r2,r2,20
  8131b0:	10800037 	ldwio	r2,0(r2)
  8131b4:	1007883a 	mov	r3,r2
  8131b8:	e0bffe17 	ldw	r2,-8(fp)
  8131bc:	1880021e 	bne	r3,r2,8131c8 <altera_avalon_fifo_write_almostempty+0x44>
        return ALTERA_AVALON_FIFO_OK;
  8131c0:	e03fff15 	stw	zero,-4(fp)
  8131c4:	00000206 	br	8131d0 <altera_avalon_fifo_write_almostempty+0x4c>
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
  8131c8:	00bfff44 	movi	r2,-3
  8131cc:	e0bfff15 	stw	r2,-4(fp)
  8131d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8131d4:	e037883a 	mov	sp,fp
  8131d8:	df000017 	ldw	fp,0(sp)
  8131dc:	dec00104 	addi	sp,sp,4
  8131e0:	f800283a 	ret

008131e4 <altera_avalon_fifo_write_fifo>:

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
  8131e4:	defffa04 	addi	sp,sp,-24
  8131e8:	dfc00515 	stw	ra,20(sp)
  8131ec:	df000415 	stw	fp,16(sp)
  8131f0:	df000404 	addi	fp,sp,16
  8131f4:	e13ffc15 	stw	r4,-16(fp)
  8131f8:	e17ffd15 	stw	r5,-12(fp)
  8131fc:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  813200:	e13ffd17 	ldw	r4,-12(fp)
  813204:	01400044 	movi	r5,1
  813208:	0812f280 	call	812f28 <altera_avalon_fifo_read_status>
  81320c:	1004c03a 	cmpne	r2,r2,zero
  813210:	1000051e 	bne	r2,zero,813228 <altera_avalon_fifo_write_fifo+0x44>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
  813214:	e0bffc17 	ldw	r2,-16(fp)
  813218:	e0fffe17 	ldw	r3,-8(fp)
  81321c:	10c00035 	stwio	r3,0(r2)
        return ALTERA_AVALON_FIFO_OK;
  813220:	e03fff15 	stw	zero,-4(fp)
  813224:	00000206 	br	813230 <altera_avalon_fifo_write_fifo+0x4c>
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
  813228:	00bfff04 	movi	r2,-4
  81322c:	e0bfff15 	stw	r2,-4(fp)
  813230:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  813234:	e037883a 	mov	sp,fp
  813238:	dfc00117 	ldw	ra,4(sp)
  81323c:	df000017 	ldw	fp,0(sp)
  813240:	dec00204 	addi	sp,sp,8
  813244:	f800283a 	ret

00813248 <altera_avalon_read_fifo>:

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
  813248:	defffa04 	addi	sp,sp,-24
  81324c:	dfc00515 	stw	ra,20(sp)
  813250:	df000415 	stw	fp,16(sp)
  813254:	df000404 	addi	fp,sp,16
  813258:	e13ffd15 	stw	r4,-12(fp)
  81325c:	e17ffe15 	stw	r5,-8(fp)
  813260:	e1bfff15 	stw	r6,-4(fp)
    int return_val = 0;
  813264:	e03ffc15 	stw	zero,-16(fp)
    *data = 0;
  813268:	e0bfff17 	ldw	r2,-4(fp)
  81326c:	10000015 	stw	zero,0(r2)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  813270:	e13ffe17 	ldw	r4,-8(fp)
  813274:	01400084 	movi	r5,2
  813278:	0812f280 	call	812f28 <altera_avalon_fifo_read_status>
  81327c:	1004c03a 	cmpne	r2,r2,zero
  813280:	1000071e 	bne	r2,zero,8132a0 <altera_avalon_read_fifo+0x58>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
  813284:	e13ffe17 	ldw	r4,-8(fp)
  813288:	08130340 	call	813034 <altera_avalon_fifo_read_level>
  81328c:	e0bffc15 	stw	r2,-16(fp)
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  813290:	e0bffd17 	ldw	r2,-12(fp)
  813294:	10c00037 	ldwio	r3,0(r2)
  813298:	e0bfff17 	ldw	r2,-4(fp)
  81329c:	10c00015 	stw	r3,0(r2)
    
    }
    return return_val;
  8132a0:	e0bffc17 	ldw	r2,-16(fp)
}
  8132a4:	e037883a 	mov	sp,fp
  8132a8:	dfc00117 	ldw	ra,4(sp)
  8132ac:	df000017 	ldw	fp,0(sp)
  8132b0:	dec00204 	addi	sp,sp,8
  8132b4:	f800283a 	ret

008132b8 <altera_avalon_fifo_read_fifo>:

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
  8132b8:	defffb04 	addi	sp,sp,-20
  8132bc:	dfc00415 	stw	ra,16(sp)
  8132c0:	df000315 	stw	fp,12(sp)
  8132c4:	df000304 	addi	fp,sp,12
  8132c8:	e13ffd15 	stw	r4,-12(fp)
  8132cc:	e17ffe15 	stw	r5,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  8132d0:	e13ffe17 	ldw	r4,-8(fp)
  8132d4:	01400084 	movi	r5,2
  8132d8:	0812f280 	call	812f28 <altera_avalon_fifo_read_status>
  8132dc:	1004c03a 	cmpne	r2,r2,zero
  8132e0:	1000041e 	bne	r2,zero,8132f4 <altera_avalon_fifo_read_fifo+0x3c>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  8132e4:	e0bffd17 	ldw	r2,-12(fp)
  8132e8:	10800037 	ldwio	r2,0(r2)
  8132ec:	e0bfff15 	stw	r2,-4(fp)
  8132f0:	00000106 	br	8132f8 <altera_avalon_fifo_read_fifo+0x40>
    }
    return 0;
  8132f4:	e03fff15 	stw	zero,-4(fp)
  8132f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8132fc:	e037883a 	mov	sp,fp
  813300:	dfc00117 	ldw	ra,4(sp)
  813304:	df000017 	ldw	fp,0(sp)
  813308:	dec00204 	addi	sp,sp,8
  81330c:	f800283a 	ret

00813310 <altera_avalon_fifo_write_other_info>:

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
  813310:	defffa04 	addi	sp,sp,-24
  813314:	dfc00515 	stw	ra,20(sp)
  813318:	df000415 	stw	fp,16(sp)
  81331c:	df000404 	addi	fp,sp,16
  813320:	e13ffc15 	stw	r4,-16(fp)
  813324:	e17ffd15 	stw	r5,-12(fp)
  813328:	e1bffe15 	stw	r6,-8(fp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  81332c:	e13ffd17 	ldw	r4,-12(fp)
  813330:	01400044 	movi	r5,1
  813334:	0812f280 	call	812f28 <altera_avalon_fifo_read_status>
  813338:	1004c03a 	cmpne	r2,r2,zero
  81333c:	1000061e 	bne	r2,zero,813358 <altera_avalon_fifo_write_other_info+0x48>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
  813340:	e0bffc17 	ldw	r2,-16(fp)
  813344:	10800104 	addi	r2,r2,4
  813348:	e0fffe17 	ldw	r3,-8(fp)
  81334c:	10c00035 	stwio	r3,0(r2)
	return ALTERA_AVALON_FIFO_OK;
  813350:	e03fff15 	stw	zero,-4(fp)
  813354:	00000206 	br	813360 <altera_avalon_fifo_write_other_info+0x50>
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
  813358:	00bfff04 	movi	r2,-4
  81335c:	e0bfff15 	stw	r2,-4(fp)
  813360:	e0bfff17 	ldw	r2,-4(fp)
    }
}
  813364:	e037883a 	mov	sp,fp
  813368:	dfc00117 	ldw	ra,4(sp)
  81336c:	df000017 	ldw	fp,0(sp)
  813370:	dec00204 	addi	sp,sp,8
  813374:	f800283a 	ret

00813378 <altera_avalon_fifo_read_other_info>:

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
  813378:	defffe04 	addi	sp,sp,-8
  81337c:	df000115 	stw	fp,4(sp)
  813380:	df000104 	addi	fp,sp,4
  813384:	e13fff15 	stw	r4,-4(fp)
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
  813388:	e0bfff17 	ldw	r2,-4(fp)
  81338c:	10800104 	addi	r2,r2,4
  813390:	10800037 	ldwio	r2,0(r2)
}
  813394:	e037883a 	mov	sp,fp
  813398:	df000017 	ldw	fp,0(sp)
  81339c:	dec00104 	addi	sp,sp,4
  8133a0:	f800283a 	ret

008133a4 <altera_avalon_fifo_read_backpressure>:

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
  8133a4:	defffe04 	addi	sp,sp,-8
  8133a8:	df000115 	stw	fp,4(sp)
  8133ac:	df000104 	addi	fp,sp,4
  8133b0:	e13fff15 	stw	r4,-4(fp)
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
  8133b4:	e0bfff17 	ldw	r2,-4(fp)
  8133b8:	10800037 	ldwio	r2,0(r2)
}
  8133bc:	e037883a 	mov	sp,fp
  8133c0:	df000017 	ldw	fp,0(sp)
  8133c4:	dec00104 	addi	sp,sp,4
  8133c8:	f800283a 	ret

008133cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8133cc:	defffa04 	addi	sp,sp,-24
  8133d0:	dfc00515 	stw	ra,20(sp)
  8133d4:	df000415 	stw	fp,16(sp)
  8133d8:	df000404 	addi	fp,sp,16
  8133dc:	e13ffd15 	stw	r4,-12(fp)
  8133e0:	e17ffe15 	stw	r5,-8(fp)
  8133e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8133e8:	e0bffd17 	ldw	r2,-12(fp)
  8133ec:	10800017 	ldw	r2,0(r2)
  8133f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8133f4:	e0bffc17 	ldw	r2,-16(fp)
  8133f8:	11000a04 	addi	r4,r2,40
  8133fc:	e0bffd17 	ldw	r2,-12(fp)
  813400:	11c00217 	ldw	r7,8(r2)
  813404:	e17ffe17 	ldw	r5,-8(fp)
  813408:	e1bfff17 	ldw	r6,-4(fp)
  81340c:	0813b8c0 	call	813b8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  813410:	e037883a 	mov	sp,fp
  813414:	dfc00117 	ldw	ra,4(sp)
  813418:	df000017 	ldw	fp,0(sp)
  81341c:	dec00204 	addi	sp,sp,8
  813420:	f800283a 	ret

00813424 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813424:	defffa04 	addi	sp,sp,-24
  813428:	dfc00515 	stw	ra,20(sp)
  81342c:	df000415 	stw	fp,16(sp)
  813430:	df000404 	addi	fp,sp,16
  813434:	e13ffd15 	stw	r4,-12(fp)
  813438:	e17ffe15 	stw	r5,-8(fp)
  81343c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813440:	e0bffd17 	ldw	r2,-12(fp)
  813444:	10800017 	ldw	r2,0(r2)
  813448:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81344c:	e0bffc17 	ldw	r2,-16(fp)
  813450:	11000a04 	addi	r4,r2,40
  813454:	e0bffd17 	ldw	r2,-12(fp)
  813458:	11c00217 	ldw	r7,8(r2)
  81345c:	e17ffe17 	ldw	r5,-8(fp)
  813460:	e1bfff17 	ldw	r6,-4(fp)
  813464:	0813e4c0 	call	813e4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  813468:	e037883a 	mov	sp,fp
  81346c:	dfc00117 	ldw	ra,4(sp)
  813470:	df000017 	ldw	fp,0(sp)
  813474:	dec00204 	addi	sp,sp,8
  813478:	f800283a 	ret

0081347c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  81347c:	defffc04 	addi	sp,sp,-16
  813480:	dfc00315 	stw	ra,12(sp)
  813484:	df000215 	stw	fp,8(sp)
  813488:	df000204 	addi	fp,sp,8
  81348c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  813490:	e0bfff17 	ldw	r2,-4(fp)
  813494:	10800017 	ldw	r2,0(r2)
  813498:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81349c:	e0bffe17 	ldw	r2,-8(fp)
  8134a0:	11000a04 	addi	r4,r2,40
  8134a4:	e0bfff17 	ldw	r2,-4(fp)
  8134a8:	11400217 	ldw	r5,8(r2)
  8134ac:	0813a240 	call	813a24 <altera_avalon_jtag_uart_close>
}
  8134b0:	e037883a 	mov	sp,fp
  8134b4:	dfc00117 	ldw	ra,4(sp)
  8134b8:	df000017 	ldw	fp,0(sp)
  8134bc:	dec00204 	addi	sp,sp,8
  8134c0:	f800283a 	ret

008134c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8134c4:	defffa04 	addi	sp,sp,-24
  8134c8:	dfc00515 	stw	ra,20(sp)
  8134cc:	df000415 	stw	fp,16(sp)
  8134d0:	df000404 	addi	fp,sp,16
  8134d4:	e13ffd15 	stw	r4,-12(fp)
  8134d8:	e17ffe15 	stw	r5,-8(fp)
  8134dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8134e0:	e0bffd17 	ldw	r2,-12(fp)
  8134e4:	10800017 	ldw	r2,0(r2)
  8134e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8134ec:	e0bffc17 	ldw	r2,-16(fp)
  8134f0:	11000a04 	addi	r4,r2,40
  8134f4:	e17ffe17 	ldw	r5,-8(fp)
  8134f8:	e1bfff17 	ldw	r6,-4(fp)
  8134fc:	0813a980 	call	813a98 <altera_avalon_jtag_uart_ioctl>
}
  813500:	e037883a 	mov	sp,fp
  813504:	dfc00117 	ldw	ra,4(sp)
  813508:	df000017 	ldw	fp,0(sp)
  81350c:	dec00204 	addi	sp,sp,8
  813510:	f800283a 	ret

00813514 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  813514:	defff404 	addi	sp,sp,-48
  813518:	dfc00b15 	stw	ra,44(sp)
  81351c:	df000a15 	stw	fp,40(sp)
  813520:	df000a04 	addi	fp,sp,40
  813524:	e13ffd15 	stw	r4,-12(fp)
  813528:	e17ffe15 	stw	r5,-8(fp)
  81352c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  813530:	e0bffd17 	ldw	r2,-12(fp)
  813534:	10800c04 	addi	r2,r2,48
  813538:	e0bffb15 	stw	r2,-20(fp)
  81353c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  813540:	e13ffc0b 	ldhu	r4,-16(fp)
  813544:	e17ffc84 	addi	r5,fp,-14
  813548:	080d0a80 	call	80d0a8 <OSFlagCreate>
  81354c:	1007883a 	mov	r3,r2
  813550:	e0bffb17 	ldw	r2,-20(fp)
  813554:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  813558:	e0bffd17 	ldw	r2,-12(fp)
  81355c:	10800a04 	addi	r2,r2,40
  813560:	e0bff915 	stw	r2,-28(fp)
  813564:	00800044 	movi	r2,1
  813568:	e0bffa0d 	sth	r2,-24(fp)
  81356c:	e13ffa0b 	ldhu	r4,-24(fp)
  813570:	08102ac0 	call	8102ac <OSSemCreate>
  813574:	1007883a 	mov	r3,r2
  813578:	e0bff917 	ldw	r2,-28(fp)
  81357c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  813580:	e0bffd17 	ldw	r2,-12(fp)
  813584:	10800b04 	addi	r2,r2,44
  813588:	e0bff715 	stw	r2,-36(fp)
  81358c:	00800044 	movi	r2,1
  813590:	e0bff80d 	sth	r2,-32(fp)
  813594:	e13ff80b 	ldhu	r4,-32(fp)
  813598:	08102ac0 	call	8102ac <OSSemCreate>
  81359c:	1007883a 	mov	r3,r2
  8135a0:	e0bff717 	ldw	r2,-36(fp)
  8135a4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8135a8:	e0fffd17 	ldw	r3,-12(fp)
  8135ac:	00800044 	movi	r2,1
  8135b0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8135b4:	e0bffd17 	ldw	r2,-12(fp)
  8135b8:	10800017 	ldw	r2,0(r2)
  8135bc:	11000104 	addi	r4,r2,4
  8135c0:	e0bffd17 	ldw	r2,-12(fp)
  8135c4:	10800817 	ldw	r2,32(r2)
  8135c8:	1007883a 	mov	r3,r2
  8135cc:	2005883a 	mov	r2,r4
  8135d0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8135d4:	e13ffe17 	ldw	r4,-8(fp)
  8135d8:	e17fff17 	ldw	r5,-4(fp)
  8135dc:	d8000015 	stw	zero,0(sp)
  8135e0:	01802074 	movhi	r6,129
  8135e4:	318d9304 	addi	r6,r6,13900
  8135e8:	e1fffd17 	ldw	r7,-12(fp)
  8135ec:	0814b900 	call	814b90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8135f0:	e0bffd17 	ldw	r2,-12(fp)
  8135f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8135f8:	e0bffd17 	ldw	r2,-12(fp)
  8135fc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813600:	008020b4 	movhi	r2,130
  813604:	10a6c004 	addi	r2,r2,-25856
  813608:	10800017 	ldw	r2,0(r2)
  81360c:	100b883a 	mov	r5,r2
  813610:	01802074 	movhi	r6,129
  813614:	318e4404 	addi	r6,r6,14608
  813618:	e1fffd17 	ldw	r7,-12(fp)
  81361c:	08147580 	call	814758 <alt_alarm_start>
  813620:	1004403a 	cmpge	r2,r2,zero
  813624:	1000041e 	bne	r2,zero,813638 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  813628:	e0fffd17 	ldw	r3,-12(fp)
  81362c:	00a00034 	movhi	r2,32768
  813630:	10bfffc4 	addi	r2,r2,-1
  813634:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  813638:	e037883a 	mov	sp,fp
  81363c:	dfc00117 	ldw	ra,4(sp)
  813640:	df000017 	ldw	fp,0(sp)
  813644:	dec00204 	addi	sp,sp,8
  813648:	f800283a 	ret

0081364c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  81364c:	defff204 	addi	sp,sp,-56
  813650:	dfc00d15 	stw	ra,52(sp)
  813654:	df000c15 	stw	fp,48(sp)
  813658:	df000c04 	addi	fp,sp,48
  81365c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  813660:	e0bfff17 	ldw	r2,-4(fp)
  813664:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  813668:	e0bffd17 	ldw	r2,-12(fp)
  81366c:	10800017 	ldw	r2,0(r2)
  813670:	e0bffc15 	stw	r2,-16(fp)
  813674:	00000006 	br	813678 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813678:	e0bffc17 	ldw	r2,-16(fp)
  81367c:	10800104 	addi	r2,r2,4
  813680:	10800037 	ldwio	r2,0(r2)
  813684:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  813688:	e0bffb17 	ldw	r2,-20(fp)
  81368c:	1080c00c 	andi	r2,r2,768
  813690:	1005003a 	cmpeq	r2,r2,zero
  813694:	1000991e 	bne	r2,zero,8138fc <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  813698:	e0bffb17 	ldw	r2,-20(fp)
  81369c:	1080400c 	andi	r2,r2,256
  8136a0:	1005003a 	cmpeq	r2,r2,zero
  8136a4:	1000481e 	bne	r2,zero,8137c8 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8136a8:	00800074 	movhi	r2,1
  8136ac:	e0bffa15 	stw	r2,-24(fp)
  8136b0:	00000006 	br	8136b4 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8136b4:	e0bffd17 	ldw	r2,-12(fp)
  8136b8:	10800d17 	ldw	r2,52(r2)
  8136bc:	10800044 	addi	r2,r2,1
  8136c0:	1081ffcc 	andi	r2,r2,2047
  8136c4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  8136c8:	e0bffd17 	ldw	r2,-12(fp)
  8136cc:	10c00e17 	ldw	r3,56(r2)
  8136d0:	e0bff917 	ldw	r2,-28(fp)
  8136d4:	18802826 	beq	r3,r2,813778 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8136d8:	e0bffc17 	ldw	r2,-16(fp)
  8136dc:	10800037 	ldwio	r2,0(r2)
  8136e0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8136e4:	e0bffa17 	ldw	r2,-24(fp)
  8136e8:	10a0000c 	andi	r2,r2,32768
  8136ec:	1005003a 	cmpeq	r2,r2,zero
  8136f0:	1000211e 	bne	r2,zero,813778 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8136f4:	e0bffd17 	ldw	r2,-12(fp)
  8136f8:	10c00d17 	ldw	r3,52(r2)
  8136fc:	e0bffa17 	ldw	r2,-24(fp)
  813700:	1009883a 	mov	r4,r2
  813704:	e0bffd17 	ldw	r2,-12(fp)
  813708:	1885883a 	add	r2,r3,r2
  81370c:	10801104 	addi	r2,r2,68
  813710:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813714:	e0bffd17 	ldw	r2,-12(fp)
  813718:	10800d17 	ldw	r2,52(r2)
  81371c:	10800044 	addi	r2,r2,1
  813720:	10c1ffcc 	andi	r3,r2,2047
  813724:	e0bffd17 	ldw	r2,-12(fp)
  813728:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  81372c:	e0bffd17 	ldw	r2,-12(fp)
  813730:	10800c17 	ldw	r2,48(r2)
  813734:	e0bff615 	stw	r2,-40(fp)
  813738:	00800044 	movi	r2,1
  81373c:	e0bff70d 	sth	r2,-36(fp)
  813740:	00800044 	movi	r2,1
  813744:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813748:	008020b4 	movhi	r2,130
  81374c:	10a6ab44 	addi	r2,r2,-25939
  813750:	10800003 	ldbu	r2,0(r2)
  813754:	10803fcc 	andi	r2,r2,255
  813758:	1005003a 	cmpeq	r2,r2,zero
  81375c:	103fd51e 	bne	r2,zero,8136b4 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  813760:	e17ff70b 	ldhu	r5,-36(fp)
  813764:	e1bff783 	ldbu	r6,-34(fp)
  813768:	e1fffe04 	addi	r7,fp,-8
  81376c:	e13ff617 	ldw	r4,-40(fp)
  813770:	080ddd00 	call	80ddd0 <OSFlagPost>
    return err;
  813774:	003fcf06 	br	8136b4 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813778:	e0bffa17 	ldw	r2,-24(fp)
  81377c:	10bfffec 	andhi	r2,r2,65535
  813780:	1005003a 	cmpeq	r2,r2,zero
  813784:	1000101e 	bne	r2,zero,8137c8 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813788:	e0bffd17 	ldw	r2,-12(fp)
  81378c:	10c00817 	ldw	r3,32(r2)
  813790:	00bfff84 	movi	r2,-2
  813794:	1886703a 	and	r3,r3,r2
  813798:	e0bffd17 	ldw	r2,-12(fp)
  81379c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8137a0:	e0bffc17 	ldw	r2,-16(fp)
  8137a4:	11000104 	addi	r4,r2,4
  8137a8:	e0bffd17 	ldw	r2,-12(fp)
  8137ac:	10800817 	ldw	r2,32(r2)
  8137b0:	1007883a 	mov	r3,r2
  8137b4:	2005883a 	mov	r2,r4
  8137b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8137bc:	e0bffc17 	ldw	r2,-16(fp)
  8137c0:	10800104 	addi	r2,r2,4
  8137c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8137c8:	e0bffb17 	ldw	r2,-20(fp)
  8137cc:	1080800c 	andi	r2,r2,512
  8137d0:	1005003a 	cmpeq	r2,r2,zero
  8137d4:	103fa81e 	bne	r2,zero,813678 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8137d8:	e0bffb17 	ldw	r2,-20(fp)
  8137dc:	10bfffec 	andhi	r2,r2,65535
  8137e0:	1004d43a 	srli	r2,r2,16
  8137e4:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8137e8:	00002706 	br	813888 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8137ec:	e13ffc17 	ldw	r4,-16(fp)
  8137f0:	e0bffd17 	ldw	r2,-12(fp)
  8137f4:	10c01017 	ldw	r3,64(r2)
  8137f8:	e0bffd17 	ldw	r2,-12(fp)
  8137fc:	1885883a 	add	r2,r3,r2
  813800:	10821104 	addi	r2,r2,2116
  813804:	10800003 	ldbu	r2,0(r2)
  813808:	10c03fcc 	andi	r3,r2,255
  81380c:	18c0201c 	xori	r3,r3,128
  813810:	18ffe004 	addi	r3,r3,-128
  813814:	2005883a 	mov	r2,r4
  813818:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81381c:	e0bffd17 	ldw	r2,-12(fp)
  813820:	10801017 	ldw	r2,64(r2)
  813824:	10800044 	addi	r2,r2,1
  813828:	10c1ffcc 	andi	r3,r2,2047
  81382c:	e0bffd17 	ldw	r2,-12(fp)
  813830:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  813834:	e0bffd17 	ldw	r2,-12(fp)
  813838:	10800c17 	ldw	r2,48(r2)
  81383c:	e0bff415 	stw	r2,-48(fp)
  813840:	00800084 	movi	r2,2
  813844:	e0bff50d 	sth	r2,-44(fp)
  813848:	00800044 	movi	r2,1
  81384c:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813850:	008020b4 	movhi	r2,130
  813854:	10a6ab44 	addi	r2,r2,-25939
  813858:	10800003 	ldbu	r2,0(r2)
  81385c:	10803fcc 	andi	r2,r2,255
  813860:	1005003a 	cmpeq	r2,r2,zero
  813864:	1000051e 	bne	r2,zero,81387c <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  813868:	e17ff50b 	ldhu	r5,-44(fp)
  81386c:	e1bff583 	ldbu	r6,-42(fp)
  813870:	e1fffe44 	addi	r7,fp,-7
  813874:	e13ff417 	ldw	r4,-48(fp)
  813878:	080ddd00 	call	80ddd0 <OSFlagPost>

        space--;
  81387c:	e0bff817 	ldw	r2,-32(fp)
  813880:	10bfffc4 	addi	r2,r2,-1
  813884:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  813888:	e0bff817 	ldw	r2,-32(fp)
  81388c:	1005003a 	cmpeq	r2,r2,zero
  813890:	1000051e 	bne	r2,zero,8138a8 <altera_avalon_jtag_uart_irq+0x25c>
  813894:	e0bffd17 	ldw	r2,-12(fp)
  813898:	10c01017 	ldw	r3,64(r2)
  81389c:	e0bffd17 	ldw	r2,-12(fp)
  8138a0:	10800f17 	ldw	r2,60(r2)
  8138a4:	18bfd11e 	bne	r3,r2,8137ec <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8138a8:	e0bff817 	ldw	r2,-32(fp)
  8138ac:	1005003a 	cmpeq	r2,r2,zero
  8138b0:	103f711e 	bne	r2,zero,813678 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8138b4:	e0bffd17 	ldw	r2,-12(fp)
  8138b8:	10c00817 	ldw	r3,32(r2)
  8138bc:	00bfff44 	movi	r2,-3
  8138c0:	1886703a 	and	r3,r3,r2
  8138c4:	e0bffd17 	ldw	r2,-12(fp)
  8138c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8138cc:	e0bffd17 	ldw	r2,-12(fp)
  8138d0:	10800017 	ldw	r2,0(r2)
  8138d4:	11000104 	addi	r4,r2,4
  8138d8:	e0bffd17 	ldw	r2,-12(fp)
  8138dc:	10800817 	ldw	r2,32(r2)
  8138e0:	1007883a 	mov	r3,r2
  8138e4:	2005883a 	mov	r2,r4
  8138e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8138ec:	e0bffc17 	ldw	r2,-16(fp)
  8138f0:	10800104 	addi	r2,r2,4
  8138f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8138f8:	003f5f06 	br	813678 <altera_avalon_jtag_uart_irq+0x2c>
}
  8138fc:	e037883a 	mov	sp,fp
  813900:	dfc00117 	ldw	ra,4(sp)
  813904:	df000017 	ldw	fp,0(sp)
  813908:	dec00204 	addi	sp,sp,8
  81390c:	f800283a 	ret

00813910 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  813910:	defff804 	addi	sp,sp,-32
  813914:	dfc00715 	stw	ra,28(sp)
  813918:	df000615 	stw	fp,24(sp)
  81391c:	df000604 	addi	fp,sp,24
  813920:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  813924:	e0bfff17 	ldw	r2,-4(fp)
  813928:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  81392c:	e0bffd17 	ldw	r2,-12(fp)
  813930:	10800017 	ldw	r2,0(r2)
  813934:	10800104 	addi	r2,r2,4
  813938:	10800037 	ldwio	r2,0(r2)
  81393c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  813940:	e0bffc17 	ldw	r2,-16(fp)
  813944:	1081000c 	andi	r2,r2,1024
  813948:	1005003a 	cmpeq	r2,r2,zero
  81394c:	10000c1e 	bne	r2,zero,813980 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  813950:	e0bffd17 	ldw	r2,-12(fp)
  813954:	10800017 	ldw	r2,0(r2)
  813958:	11000104 	addi	r4,r2,4
  81395c:	e0bffd17 	ldw	r2,-12(fp)
  813960:	10800817 	ldw	r2,32(r2)
  813964:	10810014 	ori	r2,r2,1024
  813968:	1007883a 	mov	r3,r2
  81396c:	2005883a 	mov	r2,r4
  813970:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  813974:	e0bffd17 	ldw	r2,-12(fp)
  813978:	10000915 	stw	zero,36(r2)
  81397c:	00002106 	br	813a04 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  813980:	e0bffd17 	ldw	r2,-12(fp)
  813984:	10c00917 	ldw	r3,36(r2)
  813988:	00a00034 	movhi	r2,32768
  81398c:	10bfff04 	addi	r2,r2,-4
  813990:	10c01c36 	bltu	r2,r3,813a04 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  813994:	e0bffd17 	ldw	r2,-12(fp)
  813998:	10800917 	ldw	r2,36(r2)
  81399c:	10c00044 	addi	r3,r2,1
  8139a0:	e0bffd17 	ldw	r2,-12(fp)
  8139a4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  8139a8:	e0bffd17 	ldw	r2,-12(fp)
  8139ac:	10c00917 	ldw	r3,36(r2)
  8139b0:	e0bffd17 	ldw	r2,-12(fp)
  8139b4:	10800117 	ldw	r2,4(r2)
  8139b8:	18801236 	bltu	r3,r2,813a04 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  8139bc:	e0bffd17 	ldw	r2,-12(fp)
  8139c0:	10800c17 	ldw	r2,48(r2)
  8139c4:	e0bffa15 	stw	r2,-24(fp)
  8139c8:	00800104 	movi	r2,4
  8139cc:	e0bffb0d 	sth	r2,-20(fp)
  8139d0:	00800044 	movi	r2,1
  8139d4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8139d8:	008020b4 	movhi	r2,130
  8139dc:	10a6ab44 	addi	r2,r2,-25939
  8139e0:	10800003 	ldbu	r2,0(r2)
  8139e4:	10803fcc 	andi	r2,r2,255
  8139e8:	1005003a 	cmpeq	r2,r2,zero
  8139ec:	1000051e 	bne	r2,zero,813a04 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  8139f0:	e17ffb0b 	ldhu	r5,-20(fp)
  8139f4:	e1bffb83 	ldbu	r6,-18(fp)
  8139f8:	e1fffe04 	addi	r7,fp,-8
  8139fc:	e13ffa17 	ldw	r4,-24(fp)
  813a00:	080ddd00 	call	80ddd0 <OSFlagPost>
  813a04:	008020b4 	movhi	r2,130
  813a08:	10a6c004 	addi	r2,r2,-25856
  813a0c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  813a10:	e037883a 	mov	sp,fp
  813a14:	dfc00117 	ldw	ra,4(sp)
  813a18:	df000017 	ldw	fp,0(sp)
  813a1c:	dec00204 	addi	sp,sp,8
  813a20:	f800283a 	ret

00813a24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  813a24:	defffc04 	addi	sp,sp,-16
  813a28:	df000315 	stw	fp,12(sp)
  813a2c:	df000304 	addi	fp,sp,12
  813a30:	e13ffd15 	stw	r4,-12(fp)
  813a34:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813a38:	00000706 	br	813a58 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  813a3c:	e0bffe17 	ldw	r2,-8(fp)
  813a40:	1090000c 	andi	r2,r2,16384
  813a44:	1005003a 	cmpeq	r2,r2,zero
  813a48:	1000031e 	bne	r2,zero,813a58 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  813a4c:	00bffd44 	movi	r2,-11
  813a50:	e0bfff15 	stw	r2,-4(fp)
  813a54:	00000b06 	br	813a84 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813a58:	e0bffd17 	ldw	r2,-12(fp)
  813a5c:	10c01017 	ldw	r3,64(r2)
  813a60:	e0bffd17 	ldw	r2,-12(fp)
  813a64:	10800f17 	ldw	r2,60(r2)
  813a68:	18800526 	beq	r3,r2,813a80 <altera_avalon_jtag_uart_close+0x5c>
  813a6c:	e0bffd17 	ldw	r2,-12(fp)
  813a70:	10c00917 	ldw	r3,36(r2)
  813a74:	e0bffd17 	ldw	r2,-12(fp)
  813a78:	10800117 	ldw	r2,4(r2)
  813a7c:	18bfef36 	bltu	r3,r2,813a3c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813a80:	e03fff15 	stw	zero,-4(fp)
  813a84:	e0bfff17 	ldw	r2,-4(fp)
}
  813a88:	e037883a 	mov	sp,fp
  813a8c:	df000017 	ldw	fp,0(sp)
  813a90:	dec00104 	addi	sp,sp,4
  813a94:	f800283a 	ret

00813a98 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  813a98:	defff804 	addi	sp,sp,-32
  813a9c:	df000715 	stw	fp,28(sp)
  813aa0:	df000704 	addi	fp,sp,28
  813aa4:	e13ffb15 	stw	r4,-20(fp)
  813aa8:	e17ffc15 	stw	r5,-16(fp)
  813aac:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  813ab0:	00bff9c4 	movi	r2,-25
  813ab4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  813ab8:	e0bffc17 	ldw	r2,-16(fp)
  813abc:	e0bfff15 	stw	r2,-4(fp)
  813ac0:	e0ffff17 	ldw	r3,-4(fp)
  813ac4:	189a8060 	cmpeqi	r2,r3,27137
  813ac8:	1000041e 	bne	r2,zero,813adc <altera_avalon_jtag_uart_ioctl+0x44>
  813acc:	e0ffff17 	ldw	r3,-4(fp)
  813ad0:	189a80a0 	cmpeqi	r2,r3,27138
  813ad4:	10001b1e 	bne	r2,zero,813b44 <altera_avalon_jtag_uart_ioctl+0xac>
  813ad8:	00002706 	br	813b78 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  813adc:	e0bffb17 	ldw	r2,-20(fp)
  813ae0:	10c00117 	ldw	r3,4(r2)
  813ae4:	00a00034 	movhi	r2,32768
  813ae8:	10bfffc4 	addi	r2,r2,-1
  813aec:	18802226 	beq	r3,r2,813b78 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  813af0:	e0bffd17 	ldw	r2,-12(fp)
  813af4:	10800017 	ldw	r2,0(r2)
  813af8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  813afc:	e0bff917 	ldw	r2,-28(fp)
  813b00:	10800090 	cmplti	r2,r2,2
  813b04:	1000071e 	bne	r2,zero,813b24 <altera_avalon_jtag_uart_ioctl+0x8c>
  813b08:	e0fff917 	ldw	r3,-28(fp)
  813b0c:	00a00034 	movhi	r2,32768
  813b10:	10bfffc4 	addi	r2,r2,-1
  813b14:	18800326 	beq	r3,r2,813b24 <altera_avalon_jtag_uart_ioctl+0x8c>
  813b18:	e0bff917 	ldw	r2,-28(fp)
  813b1c:	e0bffe15 	stw	r2,-8(fp)
  813b20:	00000306 	br	813b30 <altera_avalon_jtag_uart_ioctl+0x98>
  813b24:	00e00034 	movhi	r3,32768
  813b28:	18ffff84 	addi	r3,r3,-2
  813b2c:	e0fffe15 	stw	r3,-8(fp)
  813b30:	e0bffb17 	ldw	r2,-20(fp)
  813b34:	e0fffe17 	ldw	r3,-8(fp)
  813b38:	10c00115 	stw	r3,4(r2)
      rc = 0;
  813b3c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  813b40:	00000d06 	br	813b78 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  813b44:	e0bffb17 	ldw	r2,-20(fp)
  813b48:	10c00117 	ldw	r3,4(r2)
  813b4c:	00a00034 	movhi	r2,32768
  813b50:	10bfffc4 	addi	r2,r2,-1
  813b54:	18800826 	beq	r3,r2,813b78 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813b58:	e13ffd17 	ldw	r4,-12(fp)
  813b5c:	e0bffb17 	ldw	r2,-20(fp)
  813b60:	10c00917 	ldw	r3,36(r2)
  813b64:	e0bffb17 	ldw	r2,-20(fp)
  813b68:	10800117 	ldw	r2,4(r2)
  813b6c:	1885803a 	cmpltu	r2,r3,r2
  813b70:	20800015 	stw	r2,0(r4)
      rc = 0;
  813b74:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  813b78:	e0bffa17 	ldw	r2,-24(fp)
}
  813b7c:	e037883a 	mov	sp,fp
  813b80:	df000017 	ldw	fp,0(sp)
  813b84:	dec00104 	addi	sp,sp,4
  813b88:	f800283a 	ret

00813b8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813b8c:	deffeb04 	addi	sp,sp,-84
  813b90:	dfc01415 	stw	ra,80(sp)
  813b94:	df001315 	stw	fp,76(sp)
  813b98:	df001304 	addi	fp,sp,76
  813b9c:	e13ffb15 	stw	r4,-20(fp)
  813ba0:	e17ffc15 	stw	r5,-16(fp)
  813ba4:	e1bffd15 	stw	r6,-12(fp)
  813ba8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  813bac:	e0bffc17 	ldw	r2,-16(fp)
  813bb0:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  813bb4:	e0bffb17 	ldw	r2,-20(fp)
  813bb8:	10800a17 	ldw	r2,40(r2)
  813bbc:	e0bff315 	stw	r2,-52(fp)
  813bc0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  813bc4:	e17ff40b 	ldhu	r5,-48(fp)
  813bc8:	e1bffa44 	addi	r6,fp,-23
  813bcc:	e13ff317 	ldw	r4,-52(fp)
  813bd0:	08106600 	call	810660 <OSSemPend>

  while (space > 0)
  813bd4:	00006406 	br	813d68 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  813bd8:	e0bffb17 	ldw	r2,-20(fp)
  813bdc:	10800d17 	ldw	r2,52(r2)
  813be0:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  813be4:	e0bffb17 	ldw	r2,-20(fp)
  813be8:	10800e17 	ldw	r2,56(r2)
  813bec:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  813bf0:	e0fff617 	ldw	r3,-40(fp)
  813bf4:	e0bff517 	ldw	r2,-44(fp)
  813bf8:	18800536 	bltu	r3,r2,813c10 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  813bfc:	e0bff617 	ldw	r2,-40(fp)
  813c00:	e0fff517 	ldw	r3,-44(fp)
  813c04:	10c5c83a 	sub	r2,r2,r3
  813c08:	e0bff715 	stw	r2,-36(fp)
  813c0c:	00000406 	br	813c20 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  813c10:	00820004 	movi	r2,2048
  813c14:	e0fff517 	ldw	r3,-44(fp)
  813c18:	10c5c83a 	sub	r2,r2,r3
  813c1c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  813c20:	e0bff717 	ldw	r2,-36(fp)
  813c24:	1005003a 	cmpeq	r2,r2,zero
  813c28:	10001f1e 	bne	r2,zero,813ca8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  813c2c:	e0fffd17 	ldw	r3,-12(fp)
  813c30:	e0bff717 	ldw	r2,-36(fp)
  813c34:	1880022e 	bgeu	r3,r2,813c40 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  813c38:	e0bffd17 	ldw	r2,-12(fp)
  813c3c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  813c40:	e0bffb17 	ldw	r2,-20(fp)
  813c44:	10c01104 	addi	r3,r2,68
  813c48:	e0bff517 	ldw	r2,-44(fp)
  813c4c:	1887883a 	add	r3,r3,r2
  813c50:	e0bff917 	ldw	r2,-28(fp)
  813c54:	1009883a 	mov	r4,r2
  813c58:	180b883a 	mov	r5,r3
  813c5c:	e1bff717 	ldw	r6,-36(fp)
  813c60:	08056d80 	call	8056d8 <memcpy>
      ptr   += n;
  813c64:	e0fff717 	ldw	r3,-36(fp)
  813c68:	e0bff917 	ldw	r2,-28(fp)
  813c6c:	10c5883a 	add	r2,r2,r3
  813c70:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  813c74:	e0fffd17 	ldw	r3,-12(fp)
  813c78:	e0bff717 	ldw	r2,-36(fp)
  813c7c:	1885c83a 	sub	r2,r3,r2
  813c80:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813c84:	e0fff517 	ldw	r3,-44(fp)
  813c88:	e0bff717 	ldw	r2,-36(fp)
  813c8c:	1885883a 	add	r2,r3,r2
  813c90:	10c1ffcc 	andi	r3,r2,2047
  813c94:	e0bffb17 	ldw	r2,-20(fp)
  813c98:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  813c9c:	e0bffd17 	ldw	r2,-12(fp)
  813ca0:	10800048 	cmpgei	r2,r2,1
  813ca4:	103fcc1e 	bne	r2,zero,813bd8 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  813ca8:	e0fff917 	ldw	r3,-28(fp)
  813cac:	e0bffc17 	ldw	r2,-16(fp)
  813cb0:	1880301e 	bne	r3,r2,813d74 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  813cb4:	e0bffe17 	ldw	r2,-8(fp)
  813cb8:	1090000c 	andi	r2,r2,16384
  813cbc:	1004c03a 	cmpne	r2,r2,zero
  813cc0:	10002c1e 	bne	r2,zero,813d74 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  813cc4:	008020b4 	movhi	r2,130
  813cc8:	10a6ab44 	addi	r2,r2,-25939
  813ccc:	10800003 	ldbu	r2,0(r2)
  813cd0:	10803fcc 	andi	r2,r2,255
  813cd4:	10800058 	cmpnei	r2,r2,1
  813cd8:	1000161e 	bne	r2,zero,813d34 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  813cdc:	e0bffb17 	ldw	r2,-20(fp)
  813ce0:	10800c17 	ldw	r2,48(r2)
  813ce4:	e0bff015 	stw	r2,-64(fp)
  813ce8:	00800144 	movi	r2,5
  813cec:	e0bff10d 	sth	r2,-60(fp)
  813cf0:	00bfe0c4 	movi	r2,-125
  813cf4:	e0bff185 	stb	r2,-58(fp)
  813cf8:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  813cfc:	008020b4 	movhi	r2,130
  813d00:	10a6ab44 	addi	r2,r2,-25939
  813d04:	10800003 	ldbu	r2,0(r2)
  813d08:	10803fcc 	andi	r2,r2,255
  813d0c:	1005003a 	cmpeq	r2,r2,zero
  813d10:	1000111e 	bne	r2,zero,813d58 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  813d14:	e17ff10b 	ldhu	r5,-60(fp)
  813d18:	e1bff183 	ldbu	r6,-58(fp)
  813d1c:	e1fff20b 	ldhu	r7,-56(fp)
  813d20:	e0bffa04 	addi	r2,fp,-24
  813d24:	d8800015 	stw	r2,0(sp)
  813d28:	e13ff017 	ldw	r4,-64(fp)
  813d2c:	080d7240 	call	80d724 <OSFlagPend>
    return err;
  813d30:	00000906 	br	813d58 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  813d34:	e0bffb17 	ldw	r2,-20(fp)
  813d38:	10c00d17 	ldw	r3,52(r2)
  813d3c:	e0bff617 	ldw	r2,-40(fp)
  813d40:	1880051e 	bne	r3,r2,813d58 <altera_avalon_jtag_uart_read+0x1cc>
  813d44:	e0bffb17 	ldw	r2,-20(fp)
  813d48:	10c00917 	ldw	r3,36(r2)
  813d4c:	e0bffb17 	ldw	r2,-20(fp)
  813d50:	10800117 	ldw	r2,4(r2)
  813d54:	18bff736 	bltu	r3,r2,813d34 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  813d58:	e0bffb17 	ldw	r2,-20(fp)
  813d5c:	10c00d17 	ldw	r3,52(r2)
  813d60:	e0bff617 	ldw	r2,-40(fp)
  813d64:	18800326 	beq	r3,r2,813d74 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813d68:	e0bffd17 	ldw	r2,-12(fp)
  813d6c:	10800048 	cmpgei	r2,r2,1
  813d70:	103f991e 	bne	r2,zero,813bd8 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  813d74:	e0bffb17 	ldw	r2,-20(fp)
  813d78:	11000a17 	ldw	r4,40(r2)
  813d7c:	0810a580 	call	810a58 <OSSemPost>

  if (ptr != buffer)
  813d80:	e0fff917 	ldw	r3,-28(fp)
  813d84:	e0bffc17 	ldw	r2,-16(fp)
  813d88:	18801926 	beq	r3,r2,813df0 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d8c:	0005303a 	rdctl	r2,status
  813d90:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d94:	e0ffef17 	ldw	r3,-68(fp)
  813d98:	00bfff84 	movi	r2,-2
  813d9c:	1884703a 	and	r2,r3,r2
  813da0:	1001703a 	wrctl	status,r2
  
  return context;
  813da4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  813da8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813dac:	e0bffb17 	ldw	r2,-20(fp)
  813db0:	10800817 	ldw	r2,32(r2)
  813db4:	10c00054 	ori	r3,r2,1
  813db8:	e0bffb17 	ldw	r2,-20(fp)
  813dbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813dc0:	e0bffb17 	ldw	r2,-20(fp)
  813dc4:	10800017 	ldw	r2,0(r2)
  813dc8:	11000104 	addi	r4,r2,4
  813dcc:	e0bffb17 	ldw	r2,-20(fp)
  813dd0:	10800817 	ldw	r2,32(r2)
  813dd4:	1007883a 	mov	r3,r2
  813dd8:	2005883a 	mov	r2,r4
  813ddc:	10c00035 	stwio	r3,0(r2)
  813de0:	e0bff817 	ldw	r2,-32(fp)
  813de4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813de8:	e0bfee17 	ldw	r2,-72(fp)
  813dec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  813df0:	e0fff917 	ldw	r3,-28(fp)
  813df4:	e0bffc17 	ldw	r2,-16(fp)
  813df8:	18800526 	beq	r3,r2,813e10 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  813dfc:	e0fff917 	ldw	r3,-28(fp)
  813e00:	e0bffc17 	ldw	r2,-16(fp)
  813e04:	1887c83a 	sub	r3,r3,r2
  813e08:	e0ffff15 	stw	r3,-4(fp)
  813e0c:	00000906 	br	813e34 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  813e10:	e0bffe17 	ldw	r2,-8(fp)
  813e14:	1090000c 	andi	r2,r2,16384
  813e18:	1005003a 	cmpeq	r2,r2,zero
  813e1c:	1000031e 	bne	r2,zero,813e2c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  813e20:	00bffd44 	movi	r2,-11
  813e24:	e0bfff15 	stw	r2,-4(fp)
  813e28:	00000206 	br	813e34 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  813e2c:	00bffec4 	movi	r2,-5
  813e30:	e0bfff15 	stw	r2,-4(fp)
  813e34:	e0bfff17 	ldw	r2,-4(fp)
}
  813e38:	e037883a 	mov	sp,fp
  813e3c:	dfc00117 	ldw	ra,4(sp)
  813e40:	df000017 	ldw	fp,0(sp)
  813e44:	dec00204 	addi	sp,sp,8
  813e48:	f800283a 	ret

00813e4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  813e4c:	deffeb04 	addi	sp,sp,-84
  813e50:	dfc01415 	stw	ra,80(sp)
  813e54:	df001315 	stw	fp,76(sp)
  813e58:	df001304 	addi	fp,sp,76
  813e5c:	e13ffb15 	stw	r4,-20(fp)
  813e60:	e17ffc15 	stw	r5,-16(fp)
  813e64:	e1bffd15 	stw	r6,-12(fp)
  813e68:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  813e6c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  813e70:	e0bffc17 	ldw	r2,-16(fp)
  813e74:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  813e78:	e0bffb17 	ldw	r2,-20(fp)
  813e7c:	10800b17 	ldw	r2,44(r2)
  813e80:	e0bff315 	stw	r2,-52(fp)
  813e84:	e03ff40d 	sth	zero,-48(fp)
  813e88:	e17ff40b 	ldhu	r5,-48(fp)
  813e8c:	e1bffa04 	addi	r6,fp,-24
  813e90:	e13ff317 	ldw	r4,-52(fp)
  813e94:	08106600 	call	810660 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813e98:	00003a06 	br	813f84 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  813e9c:	e0bffb17 	ldw	r2,-20(fp)
  813ea0:	10800f17 	ldw	r2,60(r2)
  813ea4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  813ea8:	e0bffb17 	ldw	r2,-20(fp)
  813eac:	10801017 	ldw	r2,64(r2)
  813eb0:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  813eb4:	e0fff917 	ldw	r3,-28(fp)
  813eb8:	e0bff817 	ldw	r2,-32(fp)
  813ebc:	1880062e 	bgeu	r3,r2,813ed8 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  813ec0:	e0fff817 	ldw	r3,-32(fp)
  813ec4:	e0bff917 	ldw	r2,-28(fp)
  813ec8:	1885c83a 	sub	r2,r3,r2
  813ecc:	10bfffc4 	addi	r2,r2,-1
  813ed0:	e0bff715 	stw	r2,-36(fp)
  813ed4:	00000c06 	br	813f08 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  813ed8:	e0bff817 	ldw	r2,-32(fp)
  813edc:	1005003a 	cmpeq	r2,r2,zero
  813ee0:	1000051e 	bne	r2,zero,813ef8 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  813ee4:	00820004 	movi	r2,2048
  813ee8:	e0fff917 	ldw	r3,-28(fp)
  813eec:	10c5c83a 	sub	r2,r2,r3
  813ef0:	e0bff715 	stw	r2,-36(fp)
  813ef4:	00000406 	br	813f08 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  813ef8:	0081ffc4 	movi	r2,2047
  813efc:	e0fff917 	ldw	r3,-28(fp)
  813f00:	10c5c83a 	sub	r2,r2,r3
  813f04:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  813f08:	e0bff717 	ldw	r2,-36(fp)
  813f0c:	1005003a 	cmpeq	r2,r2,zero
  813f10:	10001f1e 	bne	r2,zero,813f90 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  813f14:	e0fffd17 	ldw	r3,-12(fp)
  813f18:	e0bff717 	ldw	r2,-36(fp)
  813f1c:	1880022e 	bgeu	r3,r2,813f28 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  813f20:	e0bffd17 	ldw	r2,-12(fp)
  813f24:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  813f28:	e0bffb17 	ldw	r2,-20(fp)
  813f2c:	10c21104 	addi	r3,r2,2116
  813f30:	e0bff917 	ldw	r2,-28(fp)
  813f34:	1885883a 	add	r2,r3,r2
  813f38:	e0fffc17 	ldw	r3,-16(fp)
  813f3c:	1009883a 	mov	r4,r2
  813f40:	180b883a 	mov	r5,r3
  813f44:	e1bff717 	ldw	r6,-36(fp)
  813f48:	08056d80 	call	8056d8 <memcpy>
      ptr   += n;
  813f4c:	e0fff717 	ldw	r3,-36(fp)
  813f50:	e0bffc17 	ldw	r2,-16(fp)
  813f54:	10c5883a 	add	r2,r2,r3
  813f58:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  813f5c:	e0fffd17 	ldw	r3,-12(fp)
  813f60:	e0bff717 	ldw	r2,-36(fp)
  813f64:	1885c83a 	sub	r2,r3,r2
  813f68:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813f6c:	e0fff917 	ldw	r3,-28(fp)
  813f70:	e0bff717 	ldw	r2,-36(fp)
  813f74:	1885883a 	add	r2,r3,r2
  813f78:	10c1ffcc 	andi	r3,r2,2047
  813f7c:	e0bffb17 	ldw	r2,-20(fp)
  813f80:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813f84:	e0bffd17 	ldw	r2,-12(fp)
  813f88:	10800048 	cmpgei	r2,r2,1
  813f8c:	103fc31e 	bne	r2,zero,813e9c <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813f90:	0005303a 	rdctl	r2,status
  813f94:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813f98:	e0fff217 	ldw	r3,-56(fp)
  813f9c:	00bfff84 	movi	r2,-2
  813fa0:	1884703a 	and	r2,r3,r2
  813fa4:	1001703a 	wrctl	status,r2
  
  return context;
  813fa8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  813fac:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813fb0:	e0bffb17 	ldw	r2,-20(fp)
  813fb4:	10800817 	ldw	r2,32(r2)
  813fb8:	10c00094 	ori	r3,r2,2
  813fbc:	e0bffb17 	ldw	r2,-20(fp)
  813fc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813fc4:	e0bffb17 	ldw	r2,-20(fp)
  813fc8:	10800017 	ldw	r2,0(r2)
  813fcc:	11000104 	addi	r4,r2,4
  813fd0:	e0bffb17 	ldw	r2,-20(fp)
  813fd4:	10800817 	ldw	r2,32(r2)
  813fd8:	1007883a 	mov	r3,r2
  813fdc:	2005883a 	mov	r2,r4
  813fe0:	10c00035 	stwio	r3,0(r2)
  813fe4:	e0bff617 	ldw	r2,-40(fp)
  813fe8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813fec:	e0bff117 	ldw	r2,-60(fp)
  813ff0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  813ff4:	e0bffd17 	ldw	r2,-12(fp)
  813ff8:	10800050 	cmplti	r2,r2,1
  813ffc:	10002d1e 	bne	r2,zero,8140b4 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  814000:	e0bffe17 	ldw	r2,-8(fp)
  814004:	1090000c 	andi	r2,r2,16384
  814008:	1004c03a 	cmpne	r2,r2,zero
  81400c:	10002c1e 	bne	r2,zero,8140c0 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  814010:	008020b4 	movhi	r2,130
  814014:	10a6ab44 	addi	r2,r2,-25939
  814018:	10800003 	ldbu	r2,0(r2)
  81401c:	10803fcc 	andi	r2,r2,255
  814020:	10800058 	cmpnei	r2,r2,1
  814024:	1000161e 	bne	r2,zero,814080 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  814028:	e0bffb17 	ldw	r2,-20(fp)
  81402c:	10800c17 	ldw	r2,48(r2)
  814030:	e0bfee15 	stw	r2,-72(fp)
  814034:	00800184 	movi	r2,6
  814038:	e0bfef0d 	sth	r2,-68(fp)
  81403c:	00bfe0c4 	movi	r2,-125
  814040:	e0bfef85 	stb	r2,-66(fp)
  814044:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  814048:	008020b4 	movhi	r2,130
  81404c:	10a6ab44 	addi	r2,r2,-25939
  814050:	10800003 	ldbu	r2,0(r2)
  814054:	10803fcc 	andi	r2,r2,255
  814058:	1005003a 	cmpeq	r2,r2,zero
  81405c:	1000111e 	bne	r2,zero,8140a4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  814060:	e17fef0b 	ldhu	r5,-68(fp)
  814064:	e1bfef83 	ldbu	r6,-66(fp)
  814068:	e1fff00b 	ldhu	r7,-64(fp)
  81406c:	e0bffa44 	addi	r2,fp,-23
  814070:	d8800015 	stw	r2,0(sp)
  814074:	e13fee17 	ldw	r4,-72(fp)
  814078:	080d7240 	call	80d724 <OSFlagPend>
    return err;
  81407c:	00000906 	br	8140a4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  814080:	e0bffb17 	ldw	r2,-20(fp)
  814084:	10c01017 	ldw	r3,64(r2)
  814088:	e0bff817 	ldw	r2,-32(fp)
  81408c:	1880051e 	bne	r3,r2,8140a4 <altera_avalon_jtag_uart_write+0x258>
  814090:	e0bffb17 	ldw	r2,-20(fp)
  814094:	10c00917 	ldw	r3,36(r2)
  814098:	e0bffb17 	ldw	r2,-20(fp)
  81409c:	10800117 	ldw	r2,4(r2)
  8140a0:	18bff736 	bltu	r3,r2,814080 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8140a4:	e0bffb17 	ldw	r2,-20(fp)
  8140a8:	10c01017 	ldw	r3,64(r2)
  8140ac:	e0bff817 	ldw	r2,-32(fp)
  8140b0:	18800326 	beq	r3,r2,8140c0 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  8140b4:	e0bffd17 	ldw	r2,-12(fp)
  8140b8:	10800048 	cmpgei	r2,r2,1
  8140bc:	103fb11e 	bne	r2,zero,813f84 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8140c0:	e0bffb17 	ldw	r2,-20(fp)
  8140c4:	11000b17 	ldw	r4,44(r2)
  8140c8:	0810a580 	call	810a58 <OSSemPost>

  if (ptr != start)
  8140cc:	e0fffc17 	ldw	r3,-16(fp)
  8140d0:	e0bff517 	ldw	r2,-44(fp)
  8140d4:	18800526 	beq	r3,r2,8140ec <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  8140d8:	e0fffc17 	ldw	r3,-16(fp)
  8140dc:	e0bff517 	ldw	r2,-44(fp)
  8140e0:	1887c83a 	sub	r3,r3,r2
  8140e4:	e0ffff15 	stw	r3,-4(fp)
  8140e8:	00000906 	br	814110 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8140ec:	e0bffe17 	ldw	r2,-8(fp)
  8140f0:	1090000c 	andi	r2,r2,16384
  8140f4:	1005003a 	cmpeq	r2,r2,zero
  8140f8:	1000031e 	bne	r2,zero,814108 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  8140fc:	00bffd44 	movi	r2,-11
  814100:	e0bfff15 	stw	r2,-4(fp)
  814104:	00000206 	br	814110 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  814108:	00bffec4 	movi	r2,-5
  81410c:	e0bfff15 	stw	r2,-4(fp)
  814110:	e0bfff17 	ldw	r2,-4(fp)
}
  814114:	e037883a 	mov	sp,fp
  814118:	dfc00117 	ldw	ra,4(sp)
  81411c:	df000017 	ldw	fp,0(sp)
  814120:	dec00204 	addi	sp,sp,8
  814124:	f800283a 	ret

00814128 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  814128:	defffa04 	addi	sp,sp,-24
  81412c:	dfc00515 	stw	ra,20(sp)
  814130:	df000415 	stw	fp,16(sp)
  814134:	df000404 	addi	fp,sp,16
  814138:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81413c:	e0bfff17 	ldw	r2,-4(fp)
  814140:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  814144:	e0bfff17 	ldw	r2,-4(fp)
  814148:	10800104 	addi	r2,r2,4
  81414c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814150:	0005303a 	rdctl	r2,status
  814154:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814158:	e0fffd17 	ldw	r3,-12(fp)
  81415c:	00bfff84 	movi	r2,-2
  814160:	1884703a 	and	r2,r3,r2
  814164:	1001703a 	wrctl	status,r2
  
  return context;
  814168:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81416c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  814170:	08152f40 	call	8152f4 <alt_tick>
  814174:	e0bffe17 	ldw	r2,-8(fp)
  814178:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81417c:	e0bffc17 	ldw	r2,-16(fp)
  814180:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  814184:	e037883a 	mov	sp,fp
  814188:	dfc00117 	ldw	ra,4(sp)
  81418c:	df000017 	ldw	fp,0(sp)
  814190:	dec00204 	addi	sp,sp,8
  814194:	f800283a 	ret

00814198 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  814198:	defff804 	addi	sp,sp,-32
  81419c:	dfc00715 	stw	ra,28(sp)
  8141a0:	df000615 	stw	fp,24(sp)
  8141a4:	df000604 	addi	fp,sp,24
  8141a8:	e13ffc15 	stw	r4,-16(fp)
  8141ac:	e17ffd15 	stw	r5,-12(fp)
  8141b0:	e1bffe15 	stw	r6,-8(fp)
  8141b4:	e1ffff15 	stw	r7,-4(fp)
  8141b8:	e0bfff17 	ldw	r2,-4(fp)
  8141bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8141c0:	008020b4 	movhi	r2,130
  8141c4:	10a6c004 	addi	r2,r2,-25856
  8141c8:	10800017 	ldw	r2,0(r2)
  8141cc:	1004c03a 	cmpne	r2,r2,zero
  8141d0:	1000041e 	bne	r2,zero,8141e4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8141d4:	00c020b4 	movhi	r3,130
  8141d8:	18e6c004 	addi	r3,r3,-25856
  8141dc:	e0bffb17 	ldw	r2,-20(fp)
  8141e0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8141e4:	e0bffc17 	ldw	r2,-16(fp)
  8141e8:	10800104 	addi	r2,r2,4
  8141ec:	1007883a 	mov	r3,r2
  8141f0:	008001c4 	movi	r2,7
  8141f4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8141f8:	d8000015 	stw	zero,0(sp)
  8141fc:	e13ffd17 	ldw	r4,-12(fp)
  814200:	e17ffe17 	ldw	r5,-8(fp)
  814204:	01802074 	movhi	r6,129
  814208:	31904a04 	addi	r6,r6,16680
  81420c:	e1fffc17 	ldw	r7,-16(fp)
  814210:	0814b900 	call	814b90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  814214:	e037883a 	mov	sp,fp
  814218:	dfc00117 	ldw	ra,4(sp)
  81421c:	df000017 	ldw	fp,0(sp)
  814220:	dec00204 	addi	sp,sp,8
  814224:	f800283a 	ret

00814228 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  814228:	defffc04 	addi	sp,sp,-16
  81422c:	df000315 	stw	fp,12(sp)
  814230:	df000304 	addi	fp,sp,12
  814234:	e13ffe15 	stw	r4,-8(fp)
  814238:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  81423c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  814240:	e0bfff17 	ldw	r2,-4(fp)
  814244:	1004c03a 	cmpne	r2,r2,zero
  814248:	1000061e 	bne	r2,zero,814264 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81424c:	e0bffe17 	ldw	r2,-8(fp)
  814250:	1007883a 	mov	r3,r2
  814254:	e0bffd03 	ldbu	r2,-12(fp)
  814258:	10c4b03a 	or	r2,r2,r3
  81425c:	e0bffd05 	stb	r2,-12(fp)
  814260:	00000806 	br	814284 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  814264:	e0bffe17 	ldw	r2,-8(fp)
  814268:	1007883a 	mov	r3,r2
  81426c:	e0bffd03 	ldbu	r2,-12(fp)
  814270:	10c4b03a 	or	r2,r2,r3
  814274:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  814278:	e0bffd03 	ldbu	r2,-12(fp)
  81427c:	10801014 	ori	r2,r2,64
  814280:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  814284:	e0fffd03 	ldbu	r3,-12(fp)
  814288:	00bfe004 	movi	r2,-128
  81428c:	1884b03a 	or	r2,r3,r2
  814290:	10803fcc 	andi	r2,r2,255
}
  814294:	e037883a 	mov	sp,fp
  814298:	df000017 	ldw	fp,0(sp)
  81429c:	dec00104 	addi	sp,sp,4
  8142a0:	f800283a 	ret

008142a4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  8142a4:	defffd04 	addi	sp,sp,-12
  8142a8:	df000215 	stw	fp,8(sp)
  8142ac:	df000204 	addi	fp,sp,8
  8142b0:	e13ffe15 	stw	r4,-8(fp)
  8142b4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  8142b8:	e0bffe17 	ldw	r2,-8(fp)
  8142bc:	10800a17 	ldw	r2,40(r2)
  8142c0:	e0ffff03 	ldbu	r3,-4(fp)
  8142c4:	10c00025 	stbio	r3,0(r2)
}
  8142c8:	e037883a 	mov	sp,fp
  8142cc:	df000017 	ldw	fp,0(sp)
  8142d0:	dec00104 	addi	sp,sp,4
  8142d4:	f800283a 	ret

008142d8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  8142d8:	defffe04 	addi	sp,sp,-8
  8142dc:	df000115 	stw	fp,4(sp)
  8142e0:	df000104 	addi	fp,sp,4
  8142e4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8142e8:	e0bfff17 	ldw	r2,-4(fp)
  8142ec:	10800a17 	ldw	r2,40(r2)
  8142f0:	1007883a 	mov	r3,r2
  8142f4:	00800044 	movi	r2,1
  8142f8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8142fc:	e037883a 	mov	sp,fp
  814300:	df000017 	ldw	fp,0(sp)
  814304:	dec00104 	addi	sp,sp,4
  814308:	f800283a 	ret

0081430c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  81430c:	defffc04 	addi	sp,sp,-16
  814310:	dfc00315 	stw	ra,12(sp)
  814314:	df000215 	stw	fp,8(sp)
  814318:	df000204 	addi	fp,sp,8
  81431c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  814320:	e13fff17 	ldw	r4,-4(fp)
  814324:	01402074 	movhi	r5,129
  814328:	295fb104 	addi	r5,r5,32452
  81432c:	0814acc0 	call	814acc <alt_find_dev>
  814330:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  814334:	e0bffe17 	ldw	r2,-8(fp)
}
  814338:	e037883a 	mov	sp,fp
  81433c:	dfc00117 	ldw	ra,4(sp)
  814340:	df000017 	ldw	fp,0(sp)
  814344:	dec00204 	addi	sp,sp,8
  814348:	f800283a 	ret

0081434c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81434c:	defffb04 	addi	sp,sp,-20
  814350:	df000415 	stw	fp,16(sp)
  814354:	df000404 	addi	fp,sp,16
  814358:	e13ffd15 	stw	r4,-12(fp)
  81435c:	e17ffe15 	stw	r5,-8(fp)
  814360:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  814364:	e03ffc15 	stw	zero,-16(fp)
  814368:	00000f06 	br	8143a8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81436c:	e0bffd17 	ldw	r2,-12(fp)
  814370:	10800a17 	ldw	r2,40(r2)
  814374:	11000044 	addi	r4,r2,1
  814378:	e0fffc17 	ldw	r3,-16(fp)
  81437c:	e0bffe17 	ldw	r2,-8(fp)
  814380:	1885883a 	add	r2,r3,r2
  814384:	10800003 	ldbu	r2,0(r2)
  814388:	10c03fcc 	andi	r3,r2,255
  81438c:	18c0201c 	xori	r3,r3,128
  814390:	18ffe004 	addi	r3,r3,-128
  814394:	2005883a 	mov	r2,r4
  814398:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81439c:	e0bffc17 	ldw	r2,-16(fp)
  8143a0:	10800044 	addi	r2,r2,1
  8143a4:	e0bffc15 	stw	r2,-16(fp)
  8143a8:	e0fffc17 	ldw	r3,-16(fp)
  8143ac:	e0bfff17 	ldw	r2,-4(fp)
  8143b0:	18bfee36 	bltu	r3,r2,81436c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  8143b4:	e037883a 	mov	sp,fp
  8143b8:	df000017 	ldw	fp,0(sp)
  8143bc:	dec00104 	addi	sp,sp,4
  8143c0:	f800283a 	ret

008143c4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  8143c4:	defffd04 	addi	sp,sp,-12
  8143c8:	df000215 	stw	fp,8(sp)
  8143cc:	df000204 	addi	fp,sp,8
  8143d0:	e13ffe15 	stw	r4,-8(fp)
  8143d4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  8143d8:	00000d06 	br	814410 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  8143dc:	e0bffe17 	ldw	r2,-8(fp)
  8143e0:	10800a17 	ldw	r2,40(r2)
  8143e4:	11000044 	addi	r4,r2,1
  8143e8:	e0bfff17 	ldw	r2,-4(fp)
  8143ec:	10800003 	ldbu	r2,0(r2)
  8143f0:	10c03fcc 	andi	r3,r2,255
  8143f4:	18c0201c 	xori	r3,r3,128
  8143f8:	18ffe004 	addi	r3,r3,-128
  8143fc:	2005883a 	mov	r2,r4
  814400:	10c00025 	stbio	r3,0(r2)
		++ptr;
  814404:	e0bfff17 	ldw	r2,-4(fp)
  814408:	10800044 	addi	r2,r2,1
  81440c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  814410:	e0bfff17 	ldw	r2,-4(fp)
  814414:	10800003 	ldbu	r2,0(r2)
  814418:	10803fcc 	andi	r2,r2,255
  81441c:	1080201c 	xori	r2,r2,128
  814420:	10bfe004 	addi	r2,r2,-128
  814424:	1004c03a 	cmpne	r2,r2,zero
  814428:	103fec1e 	bne	r2,zero,8143dc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  81442c:	e037883a 	mov	sp,fp
  814430:	df000017 	ldw	fp,0(sp)
  814434:	dec00104 	addi	sp,sp,4
  814438:	f800283a 	ret

0081443c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  81443c:	defffb04 	addi	sp,sp,-20
  814440:	dfc00415 	stw	ra,16(sp)
  814444:	df000315 	stw	fp,12(sp)
  814448:	df000304 	addi	fp,sp,12
  81444c:	e13ffd15 	stw	r4,-12(fp)
  814450:	e17ffe15 	stw	r5,-8(fp)
  814454:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  814458:	e0bffd17 	ldw	r2,-12(fp)
  81445c:	10800017 	ldw	r2,0(r2)
  814460:	1009883a 	mov	r4,r2
  814464:	e1bfff17 	ldw	r6,-4(fp)
  814468:	e17ffe17 	ldw	r5,-8(fp)
  81446c:	081434c0 	call	81434c <alt_up_character_lcd_write>
	return 0;
  814470:	0005883a 	mov	r2,zero
}
  814474:	e037883a 	mov	sp,fp
  814478:	dfc00117 	ldw	ra,4(sp)
  81447c:	df000017 	ldw	fp,0(sp)
  814480:	dec00204 	addi	sp,sp,8
  814484:	f800283a 	ret

00814488 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  814488:	defff904 	addi	sp,sp,-28
  81448c:	dfc00615 	stw	ra,24(sp)
  814490:	df000515 	stw	fp,20(sp)
  814494:	df000504 	addi	fp,sp,20
  814498:	e13ffc15 	stw	r4,-16(fp)
  81449c:	e17ffd15 	stw	r5,-12(fp)
  8144a0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  8144a4:	e0bffd17 	ldw	r2,-12(fp)
  8144a8:	10800a28 	cmpgeui	r2,r2,40
  8144ac:	1000031e 	bne	r2,zero,8144bc <alt_up_character_lcd_set_cursor_pos+0x34>
  8144b0:	e0bffe17 	ldw	r2,-8(fp)
  8144b4:	108000b0 	cmpltui	r2,r2,2
  8144b8:	1000031e 	bne	r2,zero,8144c8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  8144bc:	00bfffc4 	movi	r2,-1
  8144c0:	e0bfff15 	stw	r2,-4(fp)
  8144c4:	00000806 	br	8144e8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8144c8:	e13ffd17 	ldw	r4,-12(fp)
  8144cc:	e17ffe17 	ldw	r5,-8(fp)
  8144d0:	08142280 	call	814228 <get_DDRAM_addr>
  8144d4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  8144d8:	e17ffb03 	ldbu	r5,-20(fp)
  8144dc:	e13ffc17 	ldw	r4,-16(fp)
  8144e0:	08142a40 	call	8142a4 <alt_up_character_lcd_send_cmd>
	return 0;
  8144e4:	e03fff15 	stw	zero,-4(fp)
  8144e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8144ec:	e037883a 	mov	sp,fp
  8144f0:	dfc00117 	ldw	ra,4(sp)
  8144f4:	df000017 	ldw	fp,0(sp)
  8144f8:	dec00204 	addi	sp,sp,8
  8144fc:	f800283a 	ret

00814500 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  814500:	defff904 	addi	sp,sp,-28
  814504:	dfc00615 	stw	ra,24(sp)
  814508:	df000515 	stw	fp,20(sp)
  81450c:	df000504 	addi	fp,sp,20
  814510:	e13ffc15 	stw	r4,-16(fp)
  814514:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  814518:	e0bffd17 	ldw	r2,-12(fp)
  81451c:	1005003a 	cmpeq	r2,r2,zero
  814520:	10001e1e 	bne	r2,zero,81459c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  814524:	e0bffd17 	ldw	r2,-12(fp)
  814528:	10800050 	cmplti	r2,r2,1
  81452c:	1000031e 	bne	r2,zero,81453c <alt_up_character_lcd_shift_cursor+0x3c>
  814530:	00800504 	movi	r2,20
  814534:	e0bfff05 	stb	r2,-4(fp)
  814538:	00000206 	br	814544 <alt_up_character_lcd_shift_cursor+0x44>
  81453c:	00c00404 	movi	r3,16
  814540:	e0ffff05 	stb	r3,-4(fp)
  814544:	e0bfff03 	ldbu	r2,-4(fp)
  814548:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81454c:	e0fffd17 	ldw	r3,-12(fp)
  814550:	e0fffe15 	stw	r3,-8(fp)
  814554:	e0fffe17 	ldw	r3,-8(fp)
  814558:	1804403a 	cmpge	r2,r3,zero
  81455c:	1000031e 	bne	r2,zero,81456c <alt_up_character_lcd_shift_cursor+0x6c>
  814560:	e0bffe17 	ldw	r2,-8(fp)
  814564:	0085c83a 	sub	r2,zero,r2
  814568:	e0bffe15 	stw	r2,-8(fp)
  81456c:	e0fffe17 	ldw	r3,-8(fp)
  814570:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814574:	00000306 	br	814584 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  814578:	e17ffb43 	ldbu	r5,-19(fp)
  81457c:	e13ffc17 	ldw	r4,-16(fp)
  814580:	08142a40 	call	8142a4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814584:	e0bffb03 	ldbu	r2,-20(fp)
  814588:	10bfffc4 	addi	r2,r2,-1
  81458c:	e0bffb05 	stb	r2,-20(fp)
  814590:	e0bffb03 	ldbu	r2,-20(fp)
  814594:	10803fd8 	cmpnei	r2,r2,255
  814598:	103ff71e 	bne	r2,zero,814578 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81459c:	e037883a 	mov	sp,fp
  8145a0:	dfc00117 	ldw	ra,4(sp)
  8145a4:	df000017 	ldw	fp,0(sp)
  8145a8:	dec00204 	addi	sp,sp,8
  8145ac:	f800283a 	ret

008145b0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8145b0:	defff904 	addi	sp,sp,-28
  8145b4:	dfc00615 	stw	ra,24(sp)
  8145b8:	df000515 	stw	fp,20(sp)
  8145bc:	df000504 	addi	fp,sp,20
  8145c0:	e13ffc15 	stw	r4,-16(fp)
  8145c4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8145c8:	e0bffd17 	ldw	r2,-12(fp)
  8145cc:	1005003a 	cmpeq	r2,r2,zero
  8145d0:	10001e1e 	bne	r2,zero,81464c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  8145d4:	e0bffd17 	ldw	r2,-12(fp)
  8145d8:	10800050 	cmplti	r2,r2,1
  8145dc:	1000031e 	bne	r2,zero,8145ec <alt_up_character_lcd_shift_display+0x3c>
  8145e0:	00800704 	movi	r2,28
  8145e4:	e0bfff05 	stb	r2,-4(fp)
  8145e8:	00000206 	br	8145f4 <alt_up_character_lcd_shift_display+0x44>
  8145ec:	00c00604 	movi	r3,24
  8145f0:	e0ffff05 	stb	r3,-4(fp)
  8145f4:	e0bfff03 	ldbu	r2,-4(fp)
  8145f8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8145fc:	e0fffd17 	ldw	r3,-12(fp)
  814600:	e0fffe15 	stw	r3,-8(fp)
  814604:	e0fffe17 	ldw	r3,-8(fp)
  814608:	1804403a 	cmpge	r2,r3,zero
  81460c:	1000031e 	bne	r2,zero,81461c <alt_up_character_lcd_shift_display+0x6c>
  814610:	e0bffe17 	ldw	r2,-8(fp)
  814614:	0085c83a 	sub	r2,zero,r2
  814618:	e0bffe15 	stw	r2,-8(fp)
  81461c:	e0fffe17 	ldw	r3,-8(fp)
  814620:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  814624:	00000306 	br	814634 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  814628:	e17ffb43 	ldbu	r5,-19(fp)
  81462c:	e13ffc17 	ldw	r4,-16(fp)
  814630:	08142a40 	call	8142a4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  814634:	e0bffb03 	ldbu	r2,-20(fp)
  814638:	10bfffc4 	addi	r2,r2,-1
  81463c:	e0bffb05 	stb	r2,-20(fp)
  814640:	e0bffb03 	ldbu	r2,-20(fp)
  814644:	10803fd8 	cmpnei	r2,r2,255
  814648:	103ff71e 	bne	r2,zero,814628 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81464c:	e037883a 	mov	sp,fp
  814650:	dfc00117 	ldw	ra,4(sp)
  814654:	df000017 	ldw	fp,0(sp)
  814658:	dec00204 	addi	sp,sp,8
  81465c:	f800283a 	ret

00814660 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  814660:	defff904 	addi	sp,sp,-28
  814664:	dfc00615 	stw	ra,24(sp)
  814668:	df000515 	stw	fp,20(sp)
  81466c:	df000504 	addi	fp,sp,20
  814670:	e13ffc15 	stw	r4,-16(fp)
  814674:	e17ffd15 	stw	r5,-12(fp)
  814678:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  81467c:	e0bffd17 	ldw	r2,-12(fp)
  814680:	10800a28 	cmpgeui	r2,r2,40
  814684:	1000031e 	bne	r2,zero,814694 <alt_up_character_lcd_erase_pos+0x34>
  814688:	e0bffe17 	ldw	r2,-8(fp)
  81468c:	108000b0 	cmpltui	r2,r2,2
  814690:	1000031e 	bne	r2,zero,8146a0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  814694:	00bfffc4 	movi	r2,-1
  814698:	e0bfff15 	stw	r2,-4(fp)
  81469c:	00000e06 	br	8146d8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8146a0:	e13ffd17 	ldw	r4,-12(fp)
  8146a4:	e17ffe17 	ldw	r5,-8(fp)
  8146a8:	08142280 	call	814228 <get_DDRAM_addr>
  8146ac:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  8146b0:	e17ffb03 	ldbu	r5,-20(fp)
  8146b4:	e13ffc17 	ldw	r4,-16(fp)
  8146b8:	08142a40 	call	8142a4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  8146bc:	e0bffc17 	ldw	r2,-16(fp)
  8146c0:	10800a17 	ldw	r2,40(r2)
  8146c4:	10800044 	addi	r2,r2,1
  8146c8:	1007883a 	mov	r3,r2
  8146cc:	00800804 	movi	r2,32
  8146d0:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  8146d4:	e03fff15 	stw	zero,-4(fp)
  8146d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8146dc:	e037883a 	mov	sp,fp
  8146e0:	dfc00117 	ldw	ra,4(sp)
  8146e4:	df000017 	ldw	fp,0(sp)
  8146e8:	dec00204 	addi	sp,sp,8
  8146ec:	f800283a 	ret

008146f0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  8146f0:	defffd04 	addi	sp,sp,-12
  8146f4:	dfc00215 	stw	ra,8(sp)
  8146f8:	df000115 	stw	fp,4(sp)
  8146fc:	df000104 	addi	fp,sp,4
  814700:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  814704:	e13fff17 	ldw	r4,-4(fp)
  814708:	01400304 	movi	r5,12
  81470c:	08142a40 	call	8142a4 <alt_up_character_lcd_send_cmd>
}
  814710:	e037883a 	mov	sp,fp
  814714:	dfc00117 	ldw	ra,4(sp)
  814718:	df000017 	ldw	fp,0(sp)
  81471c:	dec00204 	addi	sp,sp,8
  814720:	f800283a 	ret

00814724 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  814724:	defffd04 	addi	sp,sp,-12
  814728:	dfc00215 	stw	ra,8(sp)
  81472c:	df000115 	stw	fp,4(sp)
  814730:	df000104 	addi	fp,sp,4
  814734:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  814738:	e13fff17 	ldw	r4,-4(fp)
  81473c:	014003c4 	movi	r5,15
  814740:	08142a40 	call	8142a4 <alt_up_character_lcd_send_cmd>
}
  814744:	e037883a 	mov	sp,fp
  814748:	dfc00117 	ldw	ra,4(sp)
  81474c:	df000017 	ldw	fp,0(sp)
  814750:	dec00204 	addi	sp,sp,8
  814754:	f800283a 	ret

00814758 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  814758:	defff404 	addi	sp,sp,-48
  81475c:	df000b15 	stw	fp,44(sp)
  814760:	df000b04 	addi	fp,sp,44
  814764:	e13ffb15 	stw	r4,-20(fp)
  814768:	e17ffc15 	stw	r5,-16(fp)
  81476c:	e1bffd15 	stw	r6,-12(fp)
  814770:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  814774:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  814778:	008020b4 	movhi	r2,130
  81477c:	10a6c004 	addi	r2,r2,-25856
  814780:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  814784:	1005003a 	cmpeq	r2,r2,zero
  814788:	1000411e 	bne	r2,zero,814890 <alt_alarm_start+0x138>
  {
    if (alarm)
  81478c:	e0bffb17 	ldw	r2,-20(fp)
  814790:	1005003a 	cmpeq	r2,r2,zero
  814794:	10003b1e 	bne	r2,zero,814884 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  814798:	e0fffb17 	ldw	r3,-20(fp)
  81479c:	e0bffd17 	ldw	r2,-12(fp)
  8147a0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8147a4:	e0fffb17 	ldw	r3,-20(fp)
  8147a8:	e0bffe17 	ldw	r2,-8(fp)
  8147ac:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8147b0:	0005303a 	rdctl	r2,status
  8147b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8147b8:	e0fff817 	ldw	r3,-32(fp)
  8147bc:	00bfff84 	movi	r2,-2
  8147c0:	1884703a 	and	r2,r3,r2
  8147c4:	1001703a 	wrctl	status,r2
  
  return context;
  8147c8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8147cc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8147d0:	008020b4 	movhi	r2,130
  8147d4:	10a6c104 	addi	r2,r2,-25852
  8147d8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8147dc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8147e0:	e0fffc17 	ldw	r3,-16(fp)
  8147e4:	e0bff917 	ldw	r2,-28(fp)
  8147e8:	1885883a 	add	r2,r3,r2
  8147ec:	10c00044 	addi	r3,r2,1
  8147f0:	e0bffb17 	ldw	r2,-20(fp)
  8147f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8147f8:	e0bffb17 	ldw	r2,-20(fp)
  8147fc:	10c00217 	ldw	r3,8(r2)
  814800:	e0bff917 	ldw	r2,-28(fp)
  814804:	1880042e 	bgeu	r3,r2,814818 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  814808:	e0fffb17 	ldw	r3,-20(fp)
  81480c:	00800044 	movi	r2,1
  814810:	18800405 	stb	r2,16(r3)
  814814:	00000206 	br	814820 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  814818:	e0bffb17 	ldw	r2,-20(fp)
  81481c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  814820:	e0fffb17 	ldw	r3,-20(fp)
  814824:	00802074 	movhi	r2,129
  814828:	109fd604 	addi	r2,r2,32600
  81482c:	e0bff615 	stw	r2,-40(fp)
  814830:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  814834:	e0fff717 	ldw	r3,-36(fp)
  814838:	e0bff617 	ldw	r2,-40(fp)
  81483c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  814840:	e0bff617 	ldw	r2,-40(fp)
  814844:	10c00017 	ldw	r3,0(r2)
  814848:	e0bff717 	ldw	r2,-36(fp)
  81484c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814850:	e0bff617 	ldw	r2,-40(fp)
  814854:	10c00017 	ldw	r3,0(r2)
  814858:	e0bff717 	ldw	r2,-36(fp)
  81485c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  814860:	e0fff617 	ldw	r3,-40(fp)
  814864:	e0bff717 	ldw	r2,-36(fp)
  814868:	18800015 	stw	r2,0(r3)
  81486c:	e0bffa17 	ldw	r2,-24(fp)
  814870:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814874:	e0bff517 	ldw	r2,-44(fp)
  814878:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  81487c:	e03fff15 	stw	zero,-4(fp)
  814880:	00000506 	br	814898 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  814884:	00bffa84 	movi	r2,-22
  814888:	e0bfff15 	stw	r2,-4(fp)
  81488c:	00000206 	br	814898 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  814890:	00bfde84 	movi	r2,-134
  814894:	e0bfff15 	stw	r2,-4(fp)
  814898:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  81489c:	e037883a 	mov	sp,fp
  8148a0:	df000017 	ldw	fp,0(sp)
  8148a4:	dec00104 	addi	sp,sp,4
  8148a8:	f800283a 	ret

008148ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8148ac:	defffe04 	addi	sp,sp,-8
  8148b0:	df000115 	stw	fp,4(sp)
  8148b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8148b8:	e03fff15 	stw	zero,-4(fp)
  8148bc:	00000506 	br	8148d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  8148c0:	e0bfff17 	ldw	r2,-4(fp)
  8148c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8148c8:	e0bfff17 	ldw	r2,-4(fp)
  8148cc:	10800804 	addi	r2,r2,32
  8148d0:	e0bfff15 	stw	r2,-4(fp)
  8148d4:	e0bfff17 	ldw	r2,-4(fp)
  8148d8:	10820030 	cmpltui	r2,r2,2048
  8148dc:	103ff81e 	bne	r2,zero,8148c0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8148e0:	e037883a 	mov	sp,fp
  8148e4:	df000017 	ldw	fp,0(sp)
  8148e8:	dec00104 	addi	sp,sp,4
  8148ec:	f800283a 	ret

008148f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8148f0:	defff904 	addi	sp,sp,-28
  8148f4:	dfc00615 	stw	ra,24(sp)
  8148f8:	df000515 	stw	fp,20(sp)
  8148fc:	df000504 	addi	fp,sp,20
  814900:	e13ffd15 	stw	r4,-12(fp)
  814904:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  814908:	e0bffd17 	ldw	r2,-12(fp)
  81490c:	1005003a 	cmpeq	r2,r2,zero
  814910:	1000041e 	bne	r2,zero,814924 <alt_dev_llist_insert+0x34>
  814914:	e0bffd17 	ldw	r2,-12(fp)
  814918:	10800217 	ldw	r2,8(r2)
  81491c:	1004c03a 	cmpne	r2,r2,zero
  814920:	1000071e 	bne	r2,zero,814940 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  814924:	08149a40 	call	8149a4 <alt_get_errno>
  814928:	1007883a 	mov	r3,r2
  81492c:	00800584 	movi	r2,22
  814930:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  814934:	00bffa84 	movi	r2,-22
  814938:	e0bfff15 	stw	r2,-4(fp)
  81493c:	00001306 	br	81498c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  814940:	e0fffd17 	ldw	r3,-12(fp)
  814944:	e0bffe17 	ldw	r2,-8(fp)
  814948:	e0bffb15 	stw	r2,-20(fp)
  81494c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  814950:	e0fffc17 	ldw	r3,-16(fp)
  814954:	e0bffb17 	ldw	r2,-20(fp)
  814958:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  81495c:	e0bffb17 	ldw	r2,-20(fp)
  814960:	10c00017 	ldw	r3,0(r2)
  814964:	e0bffc17 	ldw	r2,-16(fp)
  814968:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81496c:	e0bffb17 	ldw	r2,-20(fp)
  814970:	10c00017 	ldw	r3,0(r2)
  814974:	e0bffc17 	ldw	r2,-16(fp)
  814978:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81497c:	e0fffb17 	ldw	r3,-20(fp)
  814980:	e0bffc17 	ldw	r2,-16(fp)
  814984:	18800015 	stw	r2,0(r3)

  return 0;  
  814988:	e03fff15 	stw	zero,-4(fp)
  81498c:	e0bfff17 	ldw	r2,-4(fp)
}
  814990:	e037883a 	mov	sp,fp
  814994:	dfc00117 	ldw	ra,4(sp)
  814998:	df000017 	ldw	fp,0(sp)
  81499c:	dec00204 	addi	sp,sp,8
  8149a0:	f800283a 	ret

008149a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8149a4:	defffd04 	addi	sp,sp,-12
  8149a8:	dfc00215 	stw	ra,8(sp)
  8149ac:	df000115 	stw	fp,4(sp)
  8149b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8149b4:	00802074 	movhi	r2,129
  8149b8:	109fb404 	addi	r2,r2,32464
  8149bc:	10800017 	ldw	r2,0(r2)
  8149c0:	1005003a 	cmpeq	r2,r2,zero
  8149c4:	1000061e 	bne	r2,zero,8149e0 <alt_get_errno+0x3c>
  8149c8:	00802074 	movhi	r2,129
  8149cc:	109fb404 	addi	r2,r2,32464
  8149d0:	10800017 	ldw	r2,0(r2)
  8149d4:	103ee83a 	callr	r2
  8149d8:	e0bfff15 	stw	r2,-4(fp)
  8149dc:	00000306 	br	8149ec <alt_get_errno+0x48>
  8149e0:	008020b4 	movhi	r2,130
  8149e4:	10a6a204 	addi	r2,r2,-25976
  8149e8:	e0bfff15 	stw	r2,-4(fp)
  8149ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8149f0:	e037883a 	mov	sp,fp
  8149f4:	dfc00117 	ldw	ra,4(sp)
  8149f8:	df000017 	ldw	fp,0(sp)
  8149fc:	dec00204 	addi	sp,sp,8
  814a00:	f800283a 	ret

00814a04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  814a04:	defffd04 	addi	sp,sp,-12
  814a08:	dfc00215 	stw	ra,8(sp)
  814a0c:	df000115 	stw	fp,4(sp)
  814a10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  814a14:	00bfff04 	movi	r2,-4
  814a18:	00c02074 	movhi	r3,129
  814a1c:	18d7f204 	addi	r3,r3,24520
  814a20:	1885883a 	add	r2,r3,r2
  814a24:	e0bfff15 	stw	r2,-4(fp)
  814a28:	00000606 	br	814a44 <_do_ctors+0x40>
        (*ctor) (); 
  814a2c:	e0bfff17 	ldw	r2,-4(fp)
  814a30:	10800017 	ldw	r2,0(r2)
  814a34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  814a38:	e0bfff17 	ldw	r2,-4(fp)
  814a3c:	10bfff04 	addi	r2,r2,-4
  814a40:	e0bfff15 	stw	r2,-4(fp)
  814a44:	e0ffff17 	ldw	r3,-4(fp)
  814a48:	00802074 	movhi	r2,129
  814a4c:	1097f104 	addi	r2,r2,24516
  814a50:	18bff62e 	bgeu	r3,r2,814a2c <_do_ctors+0x28>
        (*ctor) (); 
}
  814a54:	e037883a 	mov	sp,fp
  814a58:	dfc00117 	ldw	ra,4(sp)
  814a5c:	df000017 	ldw	fp,0(sp)
  814a60:	dec00204 	addi	sp,sp,8
  814a64:	f800283a 	ret

00814a68 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  814a68:	defffd04 	addi	sp,sp,-12
  814a6c:	dfc00215 	stw	ra,8(sp)
  814a70:	df000115 	stw	fp,4(sp)
  814a74:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814a78:	00bfff04 	movi	r2,-4
  814a7c:	00c02074 	movhi	r3,129
  814a80:	18d7f204 	addi	r3,r3,24520
  814a84:	1885883a 	add	r2,r3,r2
  814a88:	e0bfff15 	stw	r2,-4(fp)
  814a8c:	00000606 	br	814aa8 <_do_dtors+0x40>
        (*dtor) (); 
  814a90:	e0bfff17 	ldw	r2,-4(fp)
  814a94:	10800017 	ldw	r2,0(r2)
  814a98:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814a9c:	e0bfff17 	ldw	r2,-4(fp)
  814aa0:	10bfff04 	addi	r2,r2,-4
  814aa4:	e0bfff15 	stw	r2,-4(fp)
  814aa8:	e0ffff17 	ldw	r3,-4(fp)
  814aac:	00802074 	movhi	r2,129
  814ab0:	1097f204 	addi	r2,r2,24520
  814ab4:	18bff62e 	bgeu	r3,r2,814a90 <_do_dtors+0x28>
        (*dtor) (); 
}
  814ab8:	e037883a 	mov	sp,fp
  814abc:	dfc00117 	ldw	ra,4(sp)
  814ac0:	df000017 	ldw	fp,0(sp)
  814ac4:	dec00204 	addi	sp,sp,8
  814ac8:	f800283a 	ret

00814acc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  814acc:	defff904 	addi	sp,sp,-28
  814ad0:	dfc00615 	stw	ra,24(sp)
  814ad4:	df000515 	stw	fp,20(sp)
  814ad8:	df000504 	addi	fp,sp,20
  814adc:	e13ffd15 	stw	r4,-12(fp)
  814ae0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  814ae4:	e0bffe17 	ldw	r2,-8(fp)
  814ae8:	10800017 	ldw	r2,0(r2)
  814aec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  814af0:	e13ffd17 	ldw	r4,-12(fp)
  814af4:	08073ac0 	call	8073ac <strlen>
  814af8:	10800044 	addi	r2,r2,1
  814afc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814b00:	00000d06 	br	814b38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  814b04:	e0bffc17 	ldw	r2,-16(fp)
  814b08:	11000217 	ldw	r4,8(r2)
  814b0c:	e1bffb17 	ldw	r6,-20(fp)
  814b10:	e17ffd17 	ldw	r5,-12(fp)
  814b14:	0815bfc0 	call	815bfc <memcmp>
  814b18:	1004c03a 	cmpne	r2,r2,zero
  814b1c:	1000031e 	bne	r2,zero,814b2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  814b20:	e0bffc17 	ldw	r2,-16(fp)
  814b24:	e0bfff15 	stw	r2,-4(fp)
  814b28:	00000706 	br	814b48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  814b2c:	e0bffc17 	ldw	r2,-16(fp)
  814b30:	10800017 	ldw	r2,0(r2)
  814b34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814b38:	e0fffe17 	ldw	r3,-8(fp)
  814b3c:	e0bffc17 	ldw	r2,-16(fp)
  814b40:	10fff01e 	bne	r2,r3,814b04 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  814b44:	e03fff15 	stw	zero,-4(fp)
  814b48:	e0bfff17 	ldw	r2,-4(fp)
}
  814b4c:	e037883a 	mov	sp,fp
  814b50:	dfc00117 	ldw	ra,4(sp)
  814b54:	df000017 	ldw	fp,0(sp)
  814b58:	dec00204 	addi	sp,sp,8
  814b5c:	f800283a 	ret

00814b60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  814b60:	defffe04 	addi	sp,sp,-8
  814b64:	dfc00115 	stw	ra,4(sp)
  814b68:	df000015 	stw	fp,0(sp)
  814b6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  814b70:	0009883a 	mov	r4,zero
  814b74:	01440004 	movi	r5,4096
  814b78:	0815b200 	call	815b20 <alt_icache_flush>
#endif
}
  814b7c:	e037883a 	mov	sp,fp
  814b80:	dfc00117 	ldw	ra,4(sp)
  814b84:	df000017 	ldw	fp,0(sp)
  814b88:	dec00204 	addi	sp,sp,8
  814b8c:	f800283a 	ret

00814b90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814b90:	defff904 	addi	sp,sp,-28
  814b94:	dfc00615 	stw	ra,24(sp)
  814b98:	df000515 	stw	fp,20(sp)
  814b9c:	df000504 	addi	fp,sp,20
  814ba0:	e13ffc15 	stw	r4,-16(fp)
  814ba4:	e17ffd15 	stw	r5,-12(fp)
  814ba8:	e1bffe15 	stw	r6,-8(fp)
  814bac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  814bb0:	e0800217 	ldw	r2,8(fp)
  814bb4:	d8800015 	stw	r2,0(sp)
  814bb8:	e13ffc17 	ldw	r4,-16(fp)
  814bbc:	e17ffd17 	ldw	r5,-12(fp)
  814bc0:	e1bffe17 	ldw	r6,-8(fp)
  814bc4:	e1ffff17 	ldw	r7,-4(fp)
  814bc8:	0814d640 	call	814d64 <alt_iic_isr_register>
}  
  814bcc:	e037883a 	mov	sp,fp
  814bd0:	dfc00117 	ldw	ra,4(sp)
  814bd4:	df000017 	ldw	fp,0(sp)
  814bd8:	dec00204 	addi	sp,sp,8
  814bdc:	f800283a 	ret

00814be0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  814be0:	defff904 	addi	sp,sp,-28
  814be4:	df000615 	stw	fp,24(sp)
  814be8:	df000604 	addi	fp,sp,24
  814bec:	e13ffe15 	stw	r4,-8(fp)
  814bf0:	e17fff15 	stw	r5,-4(fp)
  814bf4:	e0bfff17 	ldw	r2,-4(fp)
  814bf8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814bfc:	0005303a 	rdctl	r2,status
  814c00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c04:	e0fffb17 	ldw	r3,-20(fp)
  814c08:	00bfff84 	movi	r2,-2
  814c0c:	1884703a 	and	r2,r3,r2
  814c10:	1001703a 	wrctl	status,r2
  
  return context;
  814c14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814c18:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  814c1c:	e0fffc17 	ldw	r3,-16(fp)
  814c20:	00800044 	movi	r2,1
  814c24:	10c4983a 	sll	r2,r2,r3
  814c28:	1007883a 	mov	r3,r2
  814c2c:	008020b4 	movhi	r2,130
  814c30:	10a6bf04 	addi	r2,r2,-25860
  814c34:	10800017 	ldw	r2,0(r2)
  814c38:	1886b03a 	or	r3,r3,r2
  814c3c:	008020b4 	movhi	r2,130
  814c40:	10a6bf04 	addi	r2,r2,-25860
  814c44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814c48:	008020b4 	movhi	r2,130
  814c4c:	10a6bf04 	addi	r2,r2,-25860
  814c50:	10800017 	ldw	r2,0(r2)
  814c54:	100170fa 	wrctl	ienable,r2
  814c58:	e0bffd17 	ldw	r2,-12(fp)
  814c5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c60:	e0bffa17 	ldw	r2,-24(fp)
  814c64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814c68:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814c6c:	e037883a 	mov	sp,fp
  814c70:	df000017 	ldw	fp,0(sp)
  814c74:	dec00104 	addi	sp,sp,4
  814c78:	f800283a 	ret

00814c7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814c7c:	defff904 	addi	sp,sp,-28
  814c80:	df000615 	stw	fp,24(sp)
  814c84:	df000604 	addi	fp,sp,24
  814c88:	e13ffe15 	stw	r4,-8(fp)
  814c8c:	e17fff15 	stw	r5,-4(fp)
  814c90:	e0bfff17 	ldw	r2,-4(fp)
  814c94:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c98:	0005303a 	rdctl	r2,status
  814c9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814ca0:	e0fffb17 	ldw	r3,-20(fp)
  814ca4:	00bfff84 	movi	r2,-2
  814ca8:	1884703a 	and	r2,r3,r2
  814cac:	1001703a 	wrctl	status,r2
  
  return context;
  814cb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814cb4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814cb8:	e0fffc17 	ldw	r3,-16(fp)
  814cbc:	00800044 	movi	r2,1
  814cc0:	10c4983a 	sll	r2,r2,r3
  814cc4:	0084303a 	nor	r2,zero,r2
  814cc8:	1007883a 	mov	r3,r2
  814ccc:	008020b4 	movhi	r2,130
  814cd0:	10a6bf04 	addi	r2,r2,-25860
  814cd4:	10800017 	ldw	r2,0(r2)
  814cd8:	1886703a 	and	r3,r3,r2
  814cdc:	008020b4 	movhi	r2,130
  814ce0:	10a6bf04 	addi	r2,r2,-25860
  814ce4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814ce8:	008020b4 	movhi	r2,130
  814cec:	10a6bf04 	addi	r2,r2,-25860
  814cf0:	10800017 	ldw	r2,0(r2)
  814cf4:	100170fa 	wrctl	ienable,r2
  814cf8:	e0bffd17 	ldw	r2,-12(fp)
  814cfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814d00:	e0bffa17 	ldw	r2,-24(fp)
  814d04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814d08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  814d0c:	e037883a 	mov	sp,fp
  814d10:	df000017 	ldw	fp,0(sp)
  814d14:	dec00104 	addi	sp,sp,4
  814d18:	f800283a 	ret

00814d1c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  814d1c:	defffc04 	addi	sp,sp,-16
  814d20:	df000315 	stw	fp,12(sp)
  814d24:	df000304 	addi	fp,sp,12
  814d28:	e13ffe15 	stw	r4,-8(fp)
  814d2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  814d30:	000530fa 	rdctl	r2,ienable
  814d34:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  814d38:	e0ffff17 	ldw	r3,-4(fp)
  814d3c:	00800044 	movi	r2,1
  814d40:	10c4983a 	sll	r2,r2,r3
  814d44:	1007883a 	mov	r3,r2
  814d48:	e0bffd17 	ldw	r2,-12(fp)
  814d4c:	1884703a 	and	r2,r3,r2
  814d50:	1004c03a 	cmpne	r2,r2,zero
}
  814d54:	e037883a 	mov	sp,fp
  814d58:	df000017 	ldw	fp,0(sp)
  814d5c:	dec00104 	addi	sp,sp,4
  814d60:	f800283a 	ret

00814d64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814d64:	defff404 	addi	sp,sp,-48
  814d68:	dfc00b15 	stw	ra,44(sp)
  814d6c:	df000a15 	stw	fp,40(sp)
  814d70:	df000a04 	addi	fp,sp,40
  814d74:	e13ffb15 	stw	r4,-20(fp)
  814d78:	e17ffc15 	stw	r5,-16(fp)
  814d7c:	e1bffd15 	stw	r6,-12(fp)
  814d80:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814d84:	00bffa84 	movi	r2,-22
  814d88:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814d8c:	e0bffc17 	ldw	r2,-16(fp)
  814d90:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814d94:	e0bff917 	ldw	r2,-28(fp)
  814d98:	10800808 	cmpgei	r2,r2,32
  814d9c:	1000291e 	bne	r2,zero,814e44 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814da0:	0005303a 	rdctl	r2,status
  814da4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814da8:	e0fff717 	ldw	r3,-36(fp)
  814dac:	00bfff84 	movi	r2,-2
  814db0:	1884703a 	and	r2,r3,r2
  814db4:	1001703a 	wrctl	status,r2
  
  return context;
  814db8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814dbc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  814dc0:	e0bff917 	ldw	r2,-28(fp)
  814dc4:	00c020b4 	movhi	r3,130
  814dc8:	18fb5504 	addi	r3,r3,-4780
  814dcc:	100490fa 	slli	r2,r2,3
  814dd0:	10c7883a 	add	r3,r2,r3
  814dd4:	e0bffd17 	ldw	r2,-12(fp)
  814dd8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  814ddc:	e0bff917 	ldw	r2,-28(fp)
  814de0:	00c020b4 	movhi	r3,130
  814de4:	18fb5504 	addi	r3,r3,-4780
  814de8:	100490fa 	slli	r2,r2,3
  814dec:	10c5883a 	add	r2,r2,r3
  814df0:	10c00104 	addi	r3,r2,4
  814df4:	e0bffe17 	ldw	r2,-8(fp)
  814df8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814dfc:	e0bffd17 	ldw	r2,-12(fp)
  814e00:	1005003a 	cmpeq	r2,r2,zero
  814e04:	1000051e 	bne	r2,zero,814e1c <alt_iic_isr_register+0xb8>
  814e08:	e17ff917 	ldw	r5,-28(fp)
  814e0c:	e13ffb17 	ldw	r4,-20(fp)
  814e10:	0814be00 	call	814be0 <alt_ic_irq_enable>
  814e14:	e0bfff15 	stw	r2,-4(fp)
  814e18:	00000406 	br	814e2c <alt_iic_isr_register+0xc8>
  814e1c:	e17ff917 	ldw	r5,-28(fp)
  814e20:	e13ffb17 	ldw	r4,-20(fp)
  814e24:	0814c7c0 	call	814c7c <alt_ic_irq_disable>
  814e28:	e0bfff15 	stw	r2,-4(fp)
  814e2c:	e0bfff17 	ldw	r2,-4(fp)
  814e30:	e0bffa15 	stw	r2,-24(fp)
  814e34:	e0bff817 	ldw	r2,-32(fp)
  814e38:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814e3c:	e0bff617 	ldw	r2,-40(fp)
  814e40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814e44:	e0bffa17 	ldw	r2,-24(fp)
}
  814e48:	e037883a 	mov	sp,fp
  814e4c:	dfc00117 	ldw	ra,4(sp)
  814e50:	df000017 	ldw	fp,0(sp)
  814e54:	dec00204 	addi	sp,sp,8
  814e58:	f800283a 	ret

00814e5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814e5c:	defff904 	addi	sp,sp,-28
  814e60:	dfc00615 	stw	ra,24(sp)
  814e64:	df000515 	stw	fp,20(sp)
  814e68:	df000504 	addi	fp,sp,20
  814e6c:	e13ffc15 	stw	r4,-16(fp)
  814e70:	e17ffd15 	stw	r5,-12(fp)
  814e74:	e1bffe15 	stw	r6,-8(fp)
  814e78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814e7c:	e13ffd17 	ldw	r4,-12(fp)
  814e80:	e17ffe17 	ldw	r5,-8(fp)
  814e84:	e1bfff17 	ldw	r6,-4(fp)
  814e88:	08150740 	call	815074 <open>
  814e8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814e90:	e0bffb17 	ldw	r2,-20(fp)
  814e94:	1004803a 	cmplt	r2,r2,zero
  814e98:	10001c1e 	bne	r2,zero,814f0c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  814e9c:	e0bffb17 	ldw	r2,-20(fp)
  814ea0:	00c02074 	movhi	r3,129
  814ea4:	18db2304 	addi	r3,r3,27788
  814ea8:	10800324 	muli	r2,r2,12
  814eac:	10c5883a 	add	r2,r2,r3
  814eb0:	10c00017 	ldw	r3,0(r2)
  814eb4:	e0bffc17 	ldw	r2,-16(fp)
  814eb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814ebc:	e0bffb17 	ldw	r2,-20(fp)
  814ec0:	00c02074 	movhi	r3,129
  814ec4:	18db2304 	addi	r3,r3,27788
  814ec8:	10800324 	muli	r2,r2,12
  814ecc:	10c5883a 	add	r2,r2,r3
  814ed0:	10800104 	addi	r2,r2,4
  814ed4:	10c00017 	ldw	r3,0(r2)
  814ed8:	e0bffc17 	ldw	r2,-16(fp)
  814edc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  814ee0:	e0bffb17 	ldw	r2,-20(fp)
  814ee4:	00c02074 	movhi	r3,129
  814ee8:	18db2304 	addi	r3,r3,27788
  814eec:	10800324 	muli	r2,r2,12
  814ef0:	10c5883a 	add	r2,r2,r3
  814ef4:	10800204 	addi	r2,r2,8
  814ef8:	10c00017 	ldw	r3,0(r2)
  814efc:	e0bffc17 	ldw	r2,-16(fp)
  814f00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  814f04:	e13ffb17 	ldw	r4,-20(fp)
  814f08:	080a5440 	call	80a544 <alt_release_fd>
  }
} 
  814f0c:	e037883a 	mov	sp,fp
  814f10:	dfc00117 	ldw	ra,4(sp)
  814f14:	df000017 	ldw	fp,0(sp)
  814f18:	dec00204 	addi	sp,sp,8
  814f1c:	f800283a 	ret

00814f20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  814f20:	defffb04 	addi	sp,sp,-20
  814f24:	dfc00415 	stw	ra,16(sp)
  814f28:	df000315 	stw	fp,12(sp)
  814f2c:	df000304 	addi	fp,sp,12
  814f30:	e13ffd15 	stw	r4,-12(fp)
  814f34:	e17ffe15 	stw	r5,-8(fp)
  814f38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  814f3c:	01002074 	movhi	r4,129
  814f40:	211b2604 	addi	r4,r4,27800
  814f44:	e17ffd17 	ldw	r5,-12(fp)
  814f48:	01800044 	movi	r6,1
  814f4c:	01c07fc4 	movi	r7,511
  814f50:	0814e5c0 	call	814e5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814f54:	01002074 	movhi	r4,129
  814f58:	211b2304 	addi	r4,r4,27788
  814f5c:	e17ffe17 	ldw	r5,-8(fp)
  814f60:	000d883a 	mov	r6,zero
  814f64:	01c07fc4 	movi	r7,511
  814f68:	0814e5c0 	call	814e5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814f6c:	01002074 	movhi	r4,129
  814f70:	211b2904 	addi	r4,r4,27812
  814f74:	e17fff17 	ldw	r5,-4(fp)
  814f78:	01800044 	movi	r6,1
  814f7c:	01c07fc4 	movi	r7,511
  814f80:	0814e5c0 	call	814e5c <alt_open_fd>
}  
  814f84:	e037883a 	mov	sp,fp
  814f88:	dfc00117 	ldw	ra,4(sp)
  814f8c:	df000017 	ldw	fp,0(sp)
  814f90:	dec00204 	addi	sp,sp,8
  814f94:	f800283a 	ret

00814f98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  814f98:	defffc04 	addi	sp,sp,-16
  814f9c:	df000315 	stw	fp,12(sp)
  814fa0:	df000304 	addi	fp,sp,12
  814fa4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  814fa8:	e0bffe17 	ldw	r2,-8(fp)
  814fac:	10800217 	ldw	r2,8(r2)
  814fb0:	10d00034 	orhi	r3,r2,16384
  814fb4:	e0bffe17 	ldw	r2,-8(fp)
  814fb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  814fbc:	e03ffd15 	stw	zero,-12(fp)
  814fc0:	00002006 	br	815044 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  814fc4:	e0bffd17 	ldw	r2,-12(fp)
  814fc8:	00c02074 	movhi	r3,129
  814fcc:	18db2304 	addi	r3,r3,27788
  814fd0:	10800324 	muli	r2,r2,12
  814fd4:	10c5883a 	add	r2,r2,r3
  814fd8:	10c00017 	ldw	r3,0(r2)
  814fdc:	e0bffe17 	ldw	r2,-8(fp)
  814fe0:	10800017 	ldw	r2,0(r2)
  814fe4:	1880141e 	bne	r3,r2,815038 <alt_file_locked+0xa0>
  814fe8:	e0bffd17 	ldw	r2,-12(fp)
  814fec:	00c02074 	movhi	r3,129
  814ff0:	18db2304 	addi	r3,r3,27788
  814ff4:	10800324 	muli	r2,r2,12
  814ff8:	10c5883a 	add	r2,r2,r3
  814ffc:	10800204 	addi	r2,r2,8
  815000:	10800017 	ldw	r2,0(r2)
  815004:	1004403a 	cmpge	r2,r2,zero
  815008:	10000b1e 	bne	r2,zero,815038 <alt_file_locked+0xa0>
  81500c:	e0bffd17 	ldw	r2,-12(fp)
  815010:	10800324 	muli	r2,r2,12
  815014:	1007883a 	mov	r3,r2
  815018:	00802074 	movhi	r2,129
  81501c:	109b2304 	addi	r2,r2,27788
  815020:	1887883a 	add	r3,r3,r2
  815024:	e0bffe17 	ldw	r2,-8(fp)
  815028:	18800326 	beq	r3,r2,815038 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81502c:	00bffcc4 	movi	r2,-13
  815030:	e0bfff15 	stw	r2,-4(fp)
  815034:	00000a06 	br	815060 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  815038:	e0bffd17 	ldw	r2,-12(fp)
  81503c:	10800044 	addi	r2,r2,1
  815040:	e0bffd15 	stw	r2,-12(fp)
  815044:	00802074 	movhi	r2,129
  815048:	109fb304 	addi	r2,r2,32460
  81504c:	10800017 	ldw	r2,0(r2)
  815050:	1007883a 	mov	r3,r2
  815054:	e0bffd17 	ldw	r2,-12(fp)
  815058:	18bfda2e 	bgeu	r3,r2,814fc4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  81505c:	e03fff15 	stw	zero,-4(fp)
  815060:	e0bfff17 	ldw	r2,-4(fp)
}
  815064:	e037883a 	mov	sp,fp
  815068:	df000017 	ldw	fp,0(sp)
  81506c:	dec00104 	addi	sp,sp,4
  815070:	f800283a 	ret

00815074 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  815074:	defff404 	addi	sp,sp,-48
  815078:	dfc00b15 	stw	ra,44(sp)
  81507c:	df000a15 	stw	fp,40(sp)
  815080:	df000a04 	addi	fp,sp,40
  815084:	e13ffb15 	stw	r4,-20(fp)
  815088:	e17ffc15 	stw	r5,-16(fp)
  81508c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  815090:	00bfffc4 	movi	r2,-1
  815094:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  815098:	00bffb44 	movi	r2,-19
  81509c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8150a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8150a4:	e13ffb17 	ldw	r4,-20(fp)
  8150a8:	01402074 	movhi	r5,129
  8150ac:	295fb104 	addi	r5,r5,32452
  8150b0:	0814acc0 	call	814acc <alt_find_dev>
  8150b4:	e0bffa15 	stw	r2,-24(fp)
  8150b8:	e0bffa17 	ldw	r2,-24(fp)
  8150bc:	1004c03a 	cmpne	r2,r2,zero
  8150c0:	1000051e 	bne	r2,zero,8150d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8150c4:	e13ffb17 	ldw	r4,-20(fp)
  8150c8:	081590c0 	call	81590c <alt_find_file>
  8150cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8150d0:	00800044 	movi	r2,1
  8150d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8150d8:	e0bffa17 	ldw	r2,-24(fp)
  8150dc:	1005003a 	cmpeq	r2,r2,zero
  8150e0:	1000301e 	bne	r2,zero,8151a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8150e4:	e13ffa17 	ldw	r4,-24(fp)
  8150e8:	0815a2c0 	call	815a2c <alt_get_fd>
  8150ec:	e0bff815 	stw	r2,-32(fp)
  8150f0:	e0bff817 	ldw	r2,-32(fp)
  8150f4:	1004403a 	cmpge	r2,r2,zero
  8150f8:	1000031e 	bne	r2,zero,815108 <open+0x94>
    {
      status = index;
  8150fc:	e0bff817 	ldw	r2,-32(fp)
  815100:	e0bff715 	stw	r2,-36(fp)
  815104:	00002906 	br	8151ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  815108:	e0bff817 	ldw	r2,-32(fp)
  81510c:	10800324 	muli	r2,r2,12
  815110:	1007883a 	mov	r3,r2
  815114:	00802074 	movhi	r2,129
  815118:	109b2304 	addi	r2,r2,27788
  81511c:	1885883a 	add	r2,r3,r2
  815120:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  815124:	e0fffc17 	ldw	r3,-16(fp)
  815128:	00900034 	movhi	r2,16384
  81512c:	10bfffc4 	addi	r2,r2,-1
  815130:	1886703a 	and	r3,r3,r2
  815134:	e0bff917 	ldw	r2,-28(fp)
  815138:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81513c:	e0bff617 	ldw	r2,-40(fp)
  815140:	1004c03a 	cmpne	r2,r2,zero
  815144:	1000061e 	bne	r2,zero,815160 <open+0xec>
  815148:	e13ff917 	ldw	r4,-28(fp)
  81514c:	0814f980 	call	814f98 <alt_file_locked>
  815150:	e0bff715 	stw	r2,-36(fp)
  815154:	e0bff717 	ldw	r2,-36(fp)
  815158:	1004803a 	cmplt	r2,r2,zero
  81515c:	1000131e 	bne	r2,zero,8151ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  815160:	e0bffa17 	ldw	r2,-24(fp)
  815164:	10800317 	ldw	r2,12(r2)
  815168:	1005003a 	cmpeq	r2,r2,zero
  81516c:	1000091e 	bne	r2,zero,815194 <open+0x120>
  815170:	e0bffa17 	ldw	r2,-24(fp)
  815174:	10800317 	ldw	r2,12(r2)
  815178:	e13ff917 	ldw	r4,-28(fp)
  81517c:	e17ffb17 	ldw	r5,-20(fp)
  815180:	e1bffc17 	ldw	r6,-16(fp)
  815184:	e1fffd17 	ldw	r7,-12(fp)
  815188:	103ee83a 	callr	r2
  81518c:	e0bfff15 	stw	r2,-4(fp)
  815190:	00000106 	br	815198 <open+0x124>
  815194:	e03fff15 	stw	zero,-4(fp)
  815198:	e0bfff17 	ldw	r2,-4(fp)
  81519c:	e0bff715 	stw	r2,-36(fp)
  8151a0:	00000206 	br	8151ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8151a4:	00bffb44 	movi	r2,-19
  8151a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8151ac:	e0bff717 	ldw	r2,-36(fp)
  8151b0:	1004403a 	cmpge	r2,r2,zero
  8151b4:	1000091e 	bne	r2,zero,8151dc <open+0x168>
  {
    alt_release_fd (index);  
  8151b8:	e13ff817 	ldw	r4,-32(fp)
  8151bc:	080a5440 	call	80a544 <alt_release_fd>
    ALT_ERRNO = -status;
  8151c0:	08151fc0 	call	8151fc <alt_get_errno>
  8151c4:	e0fff717 	ldw	r3,-36(fp)
  8151c8:	00c7c83a 	sub	r3,zero,r3
  8151cc:	10c00015 	stw	r3,0(r2)
    return -1;
  8151d0:	00bfffc4 	movi	r2,-1
  8151d4:	e0bffe15 	stw	r2,-8(fp)
  8151d8:	00000206 	br	8151e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  8151dc:	e0bff817 	ldw	r2,-32(fp)
  8151e0:	e0bffe15 	stw	r2,-8(fp)
  8151e4:	e0bffe17 	ldw	r2,-8(fp)
}
  8151e8:	e037883a 	mov	sp,fp
  8151ec:	dfc00117 	ldw	ra,4(sp)
  8151f0:	df000017 	ldw	fp,0(sp)
  8151f4:	dec00204 	addi	sp,sp,8
  8151f8:	f800283a 	ret

008151fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8151fc:	defffd04 	addi	sp,sp,-12
  815200:	dfc00215 	stw	ra,8(sp)
  815204:	df000115 	stw	fp,4(sp)
  815208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81520c:	00802074 	movhi	r2,129
  815210:	109fb404 	addi	r2,r2,32464
  815214:	10800017 	ldw	r2,0(r2)
  815218:	1005003a 	cmpeq	r2,r2,zero
  81521c:	1000061e 	bne	r2,zero,815238 <alt_get_errno+0x3c>
  815220:	00802074 	movhi	r2,129
  815224:	109fb404 	addi	r2,r2,32464
  815228:	10800017 	ldw	r2,0(r2)
  81522c:	103ee83a 	callr	r2
  815230:	e0bfff15 	stw	r2,-4(fp)
  815234:	00000306 	br	815244 <alt_get_errno+0x48>
  815238:	008020b4 	movhi	r2,130
  81523c:	10a6a204 	addi	r2,r2,-25976
  815240:	e0bfff15 	stw	r2,-4(fp)
  815244:	e0bfff17 	ldw	r2,-4(fp)
}
  815248:	e037883a 	mov	sp,fp
  81524c:	dfc00117 	ldw	ra,4(sp)
  815250:	df000017 	ldw	fp,0(sp)
  815254:	dec00204 	addi	sp,sp,8
  815258:	f800283a 	ret

0081525c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81525c:	defffa04 	addi	sp,sp,-24
  815260:	df000515 	stw	fp,20(sp)
  815264:	df000504 	addi	fp,sp,20
  815268:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81526c:	0005303a 	rdctl	r2,status
  815270:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815274:	e0fffd17 	ldw	r3,-12(fp)
  815278:	00bfff84 	movi	r2,-2
  81527c:	1884703a 	and	r2,r3,r2
  815280:	1001703a 	wrctl	status,r2
  
  return context;
  815284:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  815288:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  81528c:	e0bfff17 	ldw	r2,-4(fp)
  815290:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  815294:	e0bffc17 	ldw	r2,-16(fp)
  815298:	10c00017 	ldw	r3,0(r2)
  81529c:	e0bffc17 	ldw	r2,-16(fp)
  8152a0:	10800117 	ldw	r2,4(r2)
  8152a4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8152a8:	e0bffc17 	ldw	r2,-16(fp)
  8152ac:	10c00117 	ldw	r3,4(r2)
  8152b0:	e0bffc17 	ldw	r2,-16(fp)
  8152b4:	10800017 	ldw	r2,0(r2)
  8152b8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8152bc:	e0fffc17 	ldw	r3,-16(fp)
  8152c0:	e0bffc17 	ldw	r2,-16(fp)
  8152c4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8152c8:	e0fffc17 	ldw	r3,-16(fp)
  8152cc:	e0bffc17 	ldw	r2,-16(fp)
  8152d0:	18800015 	stw	r2,0(r3)
  8152d4:	e0bffe17 	ldw	r2,-8(fp)
  8152d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8152dc:	e0bffb17 	ldw	r2,-20(fp)
  8152e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8152e4:	e037883a 	mov	sp,fp
  8152e8:	df000017 	ldw	fp,0(sp)
  8152ec:	dec00104 	addi	sp,sp,4
  8152f0:	f800283a 	ret

008152f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8152f4:	defffb04 	addi	sp,sp,-20
  8152f8:	dfc00415 	stw	ra,16(sp)
  8152fc:	df000315 	stw	fp,12(sp)
  815300:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  815304:	d0a02d17 	ldw	r2,-32588(gp)
  815308:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81530c:	d0a71817 	ldw	r2,-25504(gp)
  815310:	10800044 	addi	r2,r2,1
  815314:	d0a71815 	stw	r2,-25504(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  815318:	00003106 	br	8153e0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81531c:	e0bffe17 	ldw	r2,-8(fp)
  815320:	10800017 	ldw	r2,0(r2)
  815324:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  815328:	e0bffe17 	ldw	r2,-8(fp)
  81532c:	10800403 	ldbu	r2,16(r2)
  815330:	10803fcc 	andi	r2,r2,255
  815334:	1005003a 	cmpeq	r2,r2,zero
  815338:	1000051e 	bne	r2,zero,815350 <alt_tick+0x5c>
  81533c:	d0a71817 	ldw	r2,-25504(gp)
  815340:	1004c03a 	cmpne	r2,r2,zero
  815344:	1000021e 	bne	r2,zero,815350 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  815348:	e0bffe17 	ldw	r2,-8(fp)
  81534c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  815350:	e0bffe17 	ldw	r2,-8(fp)
  815354:	10c00217 	ldw	r3,8(r2)
  815358:	d0a71817 	ldw	r2,-25504(gp)
  81535c:	10c01e36 	bltu	r2,r3,8153d8 <alt_tick+0xe4>
  815360:	e0bffe17 	ldw	r2,-8(fp)
  815364:	10800403 	ldbu	r2,16(r2)
  815368:	10803fcc 	andi	r2,r2,255
  81536c:	1004c03a 	cmpne	r2,r2,zero
  815370:	1000191e 	bne	r2,zero,8153d8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  815374:	e0bffe17 	ldw	r2,-8(fp)
  815378:	10c00317 	ldw	r3,12(r2)
  81537c:	e0bffe17 	ldw	r2,-8(fp)
  815380:	11000517 	ldw	r4,20(r2)
  815384:	183ee83a 	callr	r3
  815388:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81538c:	e0bffd17 	ldw	r2,-12(fp)
  815390:	1004c03a 	cmpne	r2,r2,zero
  815394:	1000031e 	bne	r2,zero,8153a4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  815398:	e13ffe17 	ldw	r4,-8(fp)
  81539c:	081525c0 	call	81525c <alt_alarm_stop>
  8153a0:	00000d06 	br	8153d8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8153a4:	e0bffe17 	ldw	r2,-8(fp)
  8153a8:	10c00217 	ldw	r3,8(r2)
  8153ac:	e0bffd17 	ldw	r2,-12(fp)
  8153b0:	1887883a 	add	r3,r3,r2
  8153b4:	e0bffe17 	ldw	r2,-8(fp)
  8153b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8153bc:	e0bffe17 	ldw	r2,-8(fp)
  8153c0:	10c00217 	ldw	r3,8(r2)
  8153c4:	d0a71817 	ldw	r2,-25504(gp)
  8153c8:	1880032e 	bgeu	r3,r2,8153d8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8153cc:	e0fffe17 	ldw	r3,-8(fp)
  8153d0:	00800044 	movi	r2,1
  8153d4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8153d8:	e0bfff17 	ldw	r2,-4(fp)
  8153dc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8153e0:	d0e02d04 	addi	r3,gp,-32588
  8153e4:	e0bffe17 	ldw	r2,-8(fp)
  8153e8:	10ffcc1e 	bne	r2,r3,81531c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8153ec:	080b8440 	call	80b844 <OSTimeTick>
}
  8153f0:	e037883a 	mov	sp,fp
  8153f4:	dfc00117 	ldw	ra,4(sp)
  8153f8:	df000017 	ldw	fp,0(sp)
  8153fc:	dec00204 	addi	sp,sp,8
  815400:	f800283a 	ret

00815404 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  815404:	deffff04 	addi	sp,sp,-4
  815408:	df000015 	stw	fp,0(sp)
  81540c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  815410:	000170fa 	wrctl	ienable,zero
}
  815414:	e037883a 	mov	sp,fp
  815418:	df000017 	ldw	fp,0(sp)
  81541c:	dec00104 	addi	sp,sp,4
  815420:	f800283a 	ret

00815424 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  815424:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  815428:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81542c:	d1271117 	ldw	r4,-25532(gp)

      stw ra,  0(sp)
  815430:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  815434:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  815438:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81543c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  815440:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  815444:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  815448:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81544c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  815450:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  815454:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  815458:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81545c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  815460:	08158440 	call	815844 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  815464:	d1270c17 	ldw	r4,-25552(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  815468:	d1670407 	ldb	r5,-25584(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81546c:	d1271115 	stw	r4,-25532(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  815470:	d1670445 	stb	r5,-25583(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  815474:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  815478:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81547c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  815480:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  815484:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  815488:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  81548c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  815490:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  815494:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  815498:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  81549c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  8154a0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  8154a4:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  8154a8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  8154ac:	f800283a 	ret

008154b0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  8154b0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  8154b4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  8154b8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  8154bc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8154c0:	08158440 	call	815844 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  8154c4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  8154c8:	d4a70245 	stb	r18,-25591(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  8154cc:	003fe506 	br	815464 <OSCtxSw+0x40>

008154d0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  8154d0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  8154d4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  8154d8:	10800054 	ori	r2,r2,1
      wrctl status, r2
  8154dc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  8154e0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  8154e4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  8154e8:	dec00204 	addi	sp,sp,8

      callr r2
  8154ec:	103ee83a 	callr	r2

      nop
  8154f0:	0001883a 	nop

008154f4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  8154f4:	defff704 	addi	sp,sp,-36
  8154f8:	dfc00815 	stw	ra,32(sp)
  8154fc:	df000715 	stw	fp,28(sp)
  815500:	df000704 	addi	fp,sp,28
  815504:	e13ffc15 	stw	r4,-16(fp)
  815508:	e17ffd15 	stw	r5,-12(fp)
  81550c:	e1bffe15 	stw	r6,-8(fp)
  815510:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  815514:	e0bffe17 	ldw	r2,-8(fp)
  815518:	1007883a 	mov	r3,r2
  81551c:	00bfff04 	movi	r2,-4
  815520:	1884703a 	and	r2,r3,r2
  815524:	10bf0004 	addi	r2,r2,-1024
  815528:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  81552c:	e0bff917 	ldw	r2,-28(fp)
  815530:	10000015 	stw	zero,0(r2)
  815534:	e0bff917 	ldw	r2,-28(fp)
  815538:	10c0bb04 	addi	r3,r2,748
  81553c:	e0bff917 	ldw	r2,-28(fp)
  815540:	10c00115 	stw	r3,4(r2)
  815544:	e0bff917 	ldw	r2,-28(fp)
  815548:	1080bb04 	addi	r2,r2,748
  81554c:	10c01704 	addi	r3,r2,92
  815550:	e0bff917 	ldw	r2,-28(fp)
  815554:	10c00215 	stw	r3,8(r2)
  815558:	e0bff917 	ldw	r2,-28(fp)
  81555c:	1080bb04 	addi	r2,r2,748
  815560:	10c02e04 	addi	r3,r2,184
  815564:	e0bff917 	ldw	r2,-28(fp)
  815568:	10c00315 	stw	r3,12(r2)
  81556c:	e0bff917 	ldw	r2,-28(fp)
  815570:	10000415 	stw	zero,16(r2)
  815574:	e0bff917 	ldw	r2,-28(fp)
  815578:	10800504 	addi	r2,r2,20
  81557c:	1009883a 	mov	r4,r2
  815580:	01800644 	movi	r6,25
  815584:	000b883a 	mov	r5,zero
  815588:	08058580 	call	805858 <memset>
  81558c:	e0bff917 	ldw	r2,-28(fp)
  815590:	10000c15 	stw	zero,48(r2)
  815594:	e0fff917 	ldw	r3,-28(fp)
  815598:	00802074 	movhi	r2,129
  81559c:	10991304 	addi	r2,r2,25676
  8155a0:	18800d15 	stw	r2,52(r3)
  8155a4:	e0bff917 	ldw	r2,-28(fp)
  8155a8:	10000e15 	stw	zero,56(r2)
  8155ac:	e0bff917 	ldw	r2,-28(fp)
  8155b0:	10000f15 	stw	zero,60(r2)
  8155b4:	e0bff917 	ldw	r2,-28(fp)
  8155b8:	10001015 	stw	zero,64(r2)
  8155bc:	e0bff917 	ldw	r2,-28(fp)
  8155c0:	10001115 	stw	zero,68(r2)
  8155c4:	e0bff917 	ldw	r2,-28(fp)
  8155c8:	10001215 	stw	zero,72(r2)
  8155cc:	e0bff917 	ldw	r2,-28(fp)
  8155d0:	10001315 	stw	zero,76(r2)
  8155d4:	e0bff917 	ldw	r2,-28(fp)
  8155d8:	10001415 	stw	zero,80(r2)
  8155dc:	e0bff917 	ldw	r2,-28(fp)
  8155e0:	10001515 	stw	zero,84(r2)
  8155e4:	e0bff917 	ldw	r2,-28(fp)
  8155e8:	10001615 	stw	zero,88(r2)
  8155ec:	e0bff917 	ldw	r2,-28(fp)
  8155f0:	10001715 	stw	zero,92(r2)
  8155f4:	e0bff917 	ldw	r2,-28(fp)
  8155f8:	10001805 	stb	zero,96(r2)
  8155fc:	e0bff917 	ldw	r2,-28(fp)
  815600:	10801f04 	addi	r2,r2,124
  815604:	10000015 	stw	zero,0(r2)
  815608:	10000115 	stw	zero,4(r2)
  81560c:	10000215 	stw	zero,8(r2)
  815610:	10000315 	stw	zero,12(r2)
  815614:	10000415 	stw	zero,16(r2)
  815618:	10000515 	stw	zero,20(r2)
  81561c:	10000615 	stw	zero,24(r2)
  815620:	10000715 	stw	zero,28(r2)
  815624:	10000815 	stw	zero,32(r2)
  815628:	e0bff917 	ldw	r2,-28(fp)
  81562c:	10002815 	stw	zero,160(r2)
  815630:	e0fff917 	ldw	r3,-28(fp)
  815634:	00800044 	movi	r2,1
  815638:	18802915 	stw	r2,164(r3)
  81563c:	18002a15 	stw	zero,168(r3)
  815640:	e0fff917 	ldw	r3,-28(fp)
  815644:	008cc384 	movi	r2,13070
  815648:	18802b0d 	sth	r2,172(r3)
  81564c:	e0fff917 	ldw	r3,-28(fp)
  815650:	00aaf344 	movi	r2,-21555
  815654:	18802b8d 	sth	r2,174(r3)
  815658:	e0fff917 	ldw	r3,-28(fp)
  81565c:	00848d04 	movi	r2,4660
  815660:	18802c0d 	sth	r2,176(r3)
  815664:	e0fff917 	ldw	r3,-28(fp)
  815668:	00b99b44 	movi	r2,-6547
  81566c:	18802c8d 	sth	r2,178(r3)
  815670:	e0fff917 	ldw	r3,-28(fp)
  815674:	00b7bb04 	movi	r2,-8468
  815678:	18802d0d 	sth	r2,180(r3)
  81567c:	e0fff917 	ldw	r3,-28(fp)
  815680:	00800144 	movi	r2,5
  815684:	18802d8d 	sth	r2,182(r3)
  815688:	e0fff917 	ldw	r3,-28(fp)
  81568c:	008002c4 	movi	r2,11
  815690:	18802e0d 	sth	r2,184(r3)
  815694:	e0bff917 	ldw	r2,-28(fp)
  815698:	10002f15 	stw	zero,188(r2)
  81569c:	e0bff917 	ldw	r2,-28(fp)
  8156a0:	10003015 	stw	zero,192(r2)
  8156a4:	e0bff917 	ldw	r2,-28(fp)
  8156a8:	10003115 	stw	zero,196(r2)
  8156ac:	e0bff917 	ldw	r2,-28(fp)
  8156b0:	10003215 	stw	zero,200(r2)
  8156b4:	e0bff917 	ldw	r2,-28(fp)
  8156b8:	10003315 	stw	zero,204(r2)
  8156bc:	e0bff917 	ldw	r2,-28(fp)
  8156c0:	10003415 	stw	zero,208(r2)
  8156c4:	e0bff917 	ldw	r2,-28(fp)
  8156c8:	10003e15 	stw	zero,248(r2)
  8156cc:	e0bff917 	ldw	r2,-28(fp)
  8156d0:	10003f15 	stw	zero,252(r2)
  8156d4:	e0bff917 	ldw	r2,-28(fp)
  8156d8:	10004015 	stw	zero,256(r2)
  8156dc:	e0bff917 	ldw	r2,-28(fp)
  8156e0:	10004115 	stw	zero,260(r2)
  8156e4:	e0bff917 	ldw	r2,-28(fp)
  8156e8:	10004215 	stw	zero,264(r2)
  8156ec:	e0bff917 	ldw	r2,-28(fp)
  8156f0:	10004315 	stw	zero,268(r2)
  8156f4:	e0bff917 	ldw	r2,-28(fp)
  8156f8:	10004415 	stw	zero,272(r2)
  8156fc:	e0bff917 	ldw	r2,-28(fp)
  815700:	10004515 	stw	zero,276(r2)
  815704:	e0bff917 	ldw	r2,-28(fp)
  815708:	10004615 	stw	zero,280(r2)
  81570c:	e0bff917 	ldw	r2,-28(fp)
  815710:	10004715 	stw	zero,284(r2)
  815714:	e0bff917 	ldw	r2,-28(fp)
  815718:	10003505 	stb	zero,212(r2)
  81571c:	e0bff917 	ldw	r2,-28(fp)
  815720:	10003705 	stb	zero,220(r2)
  815724:	e0bff917 	ldw	r2,-28(fp)
  815728:	10003d15 	stw	zero,244(r2)
  81572c:	e0bff917 	ldw	r2,-28(fp)
  815730:	10005215 	stw	zero,328(r2)
  815734:	e0bff917 	ldw	r2,-28(fp)
  815738:	10005315 	stw	zero,332(r2)
  81573c:	e0bff917 	ldw	r2,-28(fp)
  815740:	10005415 	stw	zero,336(r2)
  815744:	e0bff917 	ldw	r2,-28(fp)
  815748:	10005515 	stw	zero,340(r2)
  81574c:	e0bff917 	ldw	r2,-28(fp)
  815750:	1000b515 	stw	zero,724(r2)
  815754:	e0bff917 	ldw	r2,-28(fp)
  815758:	10007515 	stw	zero,468(r2)
  81575c:	e0bff917 	ldw	r2,-28(fp)
  815760:	1000b715 	stw	zero,732(r2)
  815764:	e0bff917 	ldw	r2,-28(fp)
  815768:	1000b815 	stw	zero,736(r2)
  81576c:	e0bff917 	ldw	r2,-28(fp)
  815770:	1000b915 	stw	zero,740(r2)
  815774:	e0bff917 	ldw	r2,-28(fp)
  815778:	1000ba15 	stw	zero,744(r2)
  81577c:	e0bff917 	ldw	r2,-28(fp)
  815780:	1080bb04 	addi	r2,r2,748
  815784:	1009883a 	mov	r4,r2
  815788:	01804504 	movi	r6,276
  81578c:	000b883a 	mov	r5,zero
  815790:	08058580 	call	805858 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  815794:	e0bff917 	ldw	r2,-28(fp)
  815798:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  81579c:	e0bffb17 	ldw	r2,-20(fp)
  8157a0:	10bff304 	addi	r2,r2,-52
  8157a4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  8157a8:	e0bffa17 	ldw	r2,-24(fp)
  8157ac:	10c00c04 	addi	r3,r2,48
  8157b0:	e0bffc17 	ldw	r2,-16(fp)
  8157b4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  8157b8:	e0bffa17 	ldw	r2,-24(fp)
  8157bc:	10c00b04 	addi	r3,r2,44
  8157c0:	e0bffd17 	ldw	r2,-12(fp)
  8157c4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  8157c8:	e0bffa17 	ldw	r2,-24(fp)
  8157cc:	10c00a04 	addi	r3,r2,40
  8157d0:	e0bff917 	ldw	r2,-28(fp)
  8157d4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  8157d8:	00802074 	movhi	r2,129
  8157dc:	10953404 	addi	r2,r2,21712
  8157e0:	10c00104 	addi	r3,r2,4
  8157e4:	e0bffa17 	ldw	r2,-24(fp)
  8157e8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  8157ec:	e0bffa17 	ldw	r2,-24(fp)
}
  8157f0:	e037883a 	mov	sp,fp
  8157f4:	dfc00117 	ldw	ra,4(sp)
  8157f8:	df000017 	ldw	fp,0(sp)
  8157fc:	dec00204 	addi	sp,sp,8
  815800:	f800283a 	ret

00815804 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  815804:	defffe04 	addi	sp,sp,-8
  815808:	df000115 	stw	fp,4(sp)
  81580c:	df000104 	addi	fp,sp,4
  815810:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  815814:	e037883a 	mov	sp,fp
  815818:	df000017 	ldw	fp,0(sp)
  81581c:	dec00104 	addi	sp,sp,4
  815820:	f800283a 	ret

00815824 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  815824:	defffe04 	addi	sp,sp,-8
  815828:	df000115 	stw	fp,4(sp)
  81582c:	df000104 	addi	fp,sp,4
  815830:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  815834:	e037883a 	mov	sp,fp
  815838:	df000017 	ldw	fp,0(sp)
  81583c:	dec00104 	addi	sp,sp,4
  815840:	f800283a 	ret

00815844 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  815844:	deffff04 	addi	sp,sp,-4
  815848:	df000015 	stw	fp,0(sp)
  81584c:	d839883a 	mov	fp,sp
}
  815850:	e037883a 	mov	sp,fp
  815854:	df000017 	ldw	fp,0(sp)
  815858:	dec00104 	addi	sp,sp,4
  81585c:	f800283a 	ret

00815860 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  815860:	deffff04 	addi	sp,sp,-4
  815864:	df000015 	stw	fp,0(sp)
  815868:	d839883a 	mov	fp,sp
}
  81586c:	e037883a 	mov	sp,fp
  815870:	df000017 	ldw	fp,0(sp)
  815874:	dec00104 	addi	sp,sp,4
  815878:	f800283a 	ret

0081587c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  81587c:	deffff04 	addi	sp,sp,-4
  815880:	df000015 	stw	fp,0(sp)
  815884:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  815888:	e037883a 	mov	sp,fp
  81588c:	df000017 	ldw	fp,0(sp)
  815890:	dec00104 	addi	sp,sp,4
  815894:	f800283a 	ret

00815898 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  815898:	deffff04 	addi	sp,sp,-4
  81589c:	df000015 	stw	fp,0(sp)
  8158a0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  8158a4:	e037883a 	mov	sp,fp
  8158a8:	df000017 	ldw	fp,0(sp)
  8158ac:	dec00104 	addi	sp,sp,4
  8158b0:	f800283a 	ret

008158b4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  8158b4:	deffff04 	addi	sp,sp,-4
  8158b8:	df000015 	stw	fp,0(sp)
  8158bc:	d839883a 	mov	fp,sp
}
  8158c0:	e037883a 	mov	sp,fp
  8158c4:	df000017 	ldw	fp,0(sp)
  8158c8:	dec00104 	addi	sp,sp,4
  8158cc:	f800283a 	ret

008158d0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  8158d0:	deffff04 	addi	sp,sp,-4
  8158d4:	df000015 	stw	fp,0(sp)
  8158d8:	d839883a 	mov	fp,sp
}
  8158dc:	e037883a 	mov	sp,fp
  8158e0:	df000017 	ldw	fp,0(sp)
  8158e4:	dec00104 	addi	sp,sp,4
  8158e8:	f800283a 	ret

008158ec <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  8158ec:	defffe04 	addi	sp,sp,-8
  8158f0:	df000115 	stw	fp,4(sp)
  8158f4:	df000104 	addi	fp,sp,4
  8158f8:	e13fff15 	stw	r4,-4(fp)
}
  8158fc:	e037883a 	mov	sp,fp
  815900:	df000017 	ldw	fp,0(sp)
  815904:	dec00104 	addi	sp,sp,4
  815908:	f800283a 	ret

0081590c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  81590c:	defffa04 	addi	sp,sp,-24
  815910:	dfc00515 	stw	ra,20(sp)
  815914:	df000415 	stw	fp,16(sp)
  815918:	df000404 	addi	fp,sp,16
  81591c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  815920:	00802074 	movhi	r2,129
  815924:	109faf04 	addi	r2,r2,32444
  815928:	10800017 	ldw	r2,0(r2)
  81592c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  815930:	00003306 	br	815a00 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  815934:	e0bffd17 	ldw	r2,-12(fp)
  815938:	11000217 	ldw	r4,8(r2)
  81593c:	08073ac0 	call	8073ac <strlen>
  815940:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  815944:	e0bffd17 	ldw	r2,-12(fp)
  815948:	10c00217 	ldw	r3,8(r2)
  81594c:	e0bffc17 	ldw	r2,-16(fp)
  815950:	1885883a 	add	r2,r3,r2
  815954:	10bfffc4 	addi	r2,r2,-1
  815958:	10800003 	ldbu	r2,0(r2)
  81595c:	10803fcc 	andi	r2,r2,255
  815960:	1080201c 	xori	r2,r2,128
  815964:	10bfe004 	addi	r2,r2,-128
  815968:	10800bd8 	cmpnei	r2,r2,47
  81596c:	1000031e 	bne	r2,zero,81597c <alt_find_file+0x70>
    {
      len -= 1;
  815970:	e0bffc17 	ldw	r2,-16(fp)
  815974:	10bfffc4 	addi	r2,r2,-1
  815978:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  81597c:	e0bffc17 	ldw	r2,-16(fp)
  815980:	1007883a 	mov	r3,r2
  815984:	e0bffe17 	ldw	r2,-8(fp)
  815988:	1885883a 	add	r2,r3,r2
  81598c:	10800003 	ldbu	r2,0(r2)
  815990:	10803fcc 	andi	r2,r2,255
  815994:	1080201c 	xori	r2,r2,128
  815998:	10bfe004 	addi	r2,r2,-128
  81599c:	10800be0 	cmpeqi	r2,r2,47
  8159a0:	10000a1e 	bne	r2,zero,8159cc <alt_find_file+0xc0>
  8159a4:	e0bffc17 	ldw	r2,-16(fp)
  8159a8:	1007883a 	mov	r3,r2
  8159ac:	e0bffe17 	ldw	r2,-8(fp)
  8159b0:	1885883a 	add	r2,r3,r2
  8159b4:	10800003 	ldbu	r2,0(r2)
  8159b8:	10803fcc 	andi	r2,r2,255
  8159bc:	1080201c 	xori	r2,r2,128
  8159c0:	10bfe004 	addi	r2,r2,-128
  8159c4:	1004c03a 	cmpne	r2,r2,zero
  8159c8:	10000a1e 	bne	r2,zero,8159f4 <alt_find_file+0xe8>
  8159cc:	e0bffd17 	ldw	r2,-12(fp)
  8159d0:	11000217 	ldw	r4,8(r2)
  8159d4:	e1bffc17 	ldw	r6,-16(fp)
  8159d8:	e17ffe17 	ldw	r5,-8(fp)
  8159dc:	0815bfc0 	call	815bfc <memcmp>
  8159e0:	1004c03a 	cmpne	r2,r2,zero
  8159e4:	1000031e 	bne	r2,zero,8159f4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8159e8:	e0bffd17 	ldw	r2,-12(fp)
  8159ec:	e0bfff15 	stw	r2,-4(fp)
  8159f0:	00000806 	br	815a14 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8159f4:	e0bffd17 	ldw	r2,-12(fp)
  8159f8:	10800017 	ldw	r2,0(r2)
  8159fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  815a00:	00c02074 	movhi	r3,129
  815a04:	18dfaf04 	addi	r3,r3,32444
  815a08:	e0bffd17 	ldw	r2,-12(fp)
  815a0c:	10ffc91e 	bne	r2,r3,815934 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  815a10:	e03fff15 	stw	zero,-4(fp)
  815a14:	e0bfff17 	ldw	r2,-4(fp)
}
  815a18:	e037883a 	mov	sp,fp
  815a1c:	dfc00117 	ldw	ra,4(sp)
  815a20:	df000017 	ldw	fp,0(sp)
  815a24:	dec00204 	addi	sp,sp,8
  815a28:	f800283a 	ret

00815a2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  815a2c:	defff804 	addi	sp,sp,-32
  815a30:	dfc00715 	stw	ra,28(sp)
  815a34:	df000615 	stw	fp,24(sp)
  815a38:	df000604 	addi	fp,sp,24
  815a3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  815a40:	00bffa04 	movi	r2,-24
  815a44:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  815a48:	008020b4 	movhi	r2,130
  815a4c:	10a6a304 	addi	r2,r2,-25972
  815a50:	10800017 	ldw	r2,0(r2)
  815a54:	e0bffa15 	stw	r2,-24(fp)
  815a58:	e03ffb0d 	sth	zero,-20(fp)
  815a5c:	e17ffb0b 	ldhu	r5,-20(fp)
  815a60:	e1bffe04 	addi	r6,fp,-8
  815a64:	e13ffa17 	ldw	r4,-24(fp)
  815a68:	08106600 	call	810660 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  815a6c:	e03ffd15 	stw	zero,-12(fp)
  815a70:	00001e06 	br	815aec <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  815a74:	e0bffd17 	ldw	r2,-12(fp)
  815a78:	00c02074 	movhi	r3,129
  815a7c:	18db2304 	addi	r3,r3,27788
  815a80:	10800324 	muli	r2,r2,12
  815a84:	10c5883a 	add	r2,r2,r3
  815a88:	10800017 	ldw	r2,0(r2)
  815a8c:	1004c03a 	cmpne	r2,r2,zero
  815a90:	1000131e 	bne	r2,zero,815ae0 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  815a94:	e0bffd17 	ldw	r2,-12(fp)
  815a98:	00c02074 	movhi	r3,129
  815a9c:	18db2304 	addi	r3,r3,27788
  815aa0:	10800324 	muli	r2,r2,12
  815aa4:	10c7883a 	add	r3,r2,r3
  815aa8:	e0bfff17 	ldw	r2,-4(fp)
  815aac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  815ab0:	00802074 	movhi	r2,129
  815ab4:	109fb304 	addi	r2,r2,32460
  815ab8:	10c00017 	ldw	r3,0(r2)
  815abc:	e0bffd17 	ldw	r2,-12(fp)
  815ac0:	1880040e 	bge	r3,r2,815ad4 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  815ac4:	00c02074 	movhi	r3,129
  815ac8:	18dfb304 	addi	r3,r3,32460
  815acc:	e0bffd17 	ldw	r2,-12(fp)
  815ad0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  815ad4:	e0bffd17 	ldw	r2,-12(fp)
  815ad8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  815adc:	00000606 	br	815af8 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  815ae0:	e0bffd17 	ldw	r2,-12(fp)
  815ae4:	10800044 	addi	r2,r2,1
  815ae8:	e0bffd15 	stw	r2,-12(fp)
  815aec:	e0bffd17 	ldw	r2,-12(fp)
  815af0:	10800810 	cmplti	r2,r2,32
  815af4:	103fdf1e 	bne	r2,zero,815a74 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  815af8:	008020b4 	movhi	r2,130
  815afc:	10a6a304 	addi	r2,r2,-25972
  815b00:	11000017 	ldw	r4,0(r2)
  815b04:	0810a580 	call	810a58 <OSSemPost>

  return rc;
  815b08:	e0bffc17 	ldw	r2,-16(fp)
}
  815b0c:	e037883a 	mov	sp,fp
  815b10:	dfc00117 	ldw	ra,4(sp)
  815b14:	df000017 	ldw	fp,0(sp)
  815b18:	dec00204 	addi	sp,sp,8
  815b1c:	f800283a 	ret

00815b20 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  815b20:	defffb04 	addi	sp,sp,-20
  815b24:	df000415 	stw	fp,16(sp)
  815b28:	df000404 	addi	fp,sp,16
  815b2c:	e13ffe15 	stw	r4,-8(fp)
  815b30:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  815b34:	e0bfff17 	ldw	r2,-4(fp)
  815b38:	10840070 	cmpltui	r2,r2,4097
  815b3c:	1000021e 	bne	r2,zero,815b48 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  815b40:	00840004 	movi	r2,4096
  815b44:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  815b48:	e0fffe17 	ldw	r3,-8(fp)
  815b4c:	e0bfff17 	ldw	r2,-4(fp)
  815b50:	1885883a 	add	r2,r3,r2
  815b54:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  815b58:	e0bffe17 	ldw	r2,-8(fp)
  815b5c:	e0bffd15 	stw	r2,-12(fp)
  815b60:	00000506 	br	815b78 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  815b64:	e0bffd17 	ldw	r2,-12(fp)
  815b68:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  815b6c:	e0bffd17 	ldw	r2,-12(fp)
  815b70:	10800804 	addi	r2,r2,32
  815b74:	e0bffd15 	stw	r2,-12(fp)
  815b78:	e0fffd17 	ldw	r3,-12(fp)
  815b7c:	e0bffc17 	ldw	r2,-16(fp)
  815b80:	18bff836 	bltu	r3,r2,815b64 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  815b84:	e0bffe17 	ldw	r2,-8(fp)
  815b88:	108007cc 	andi	r2,r2,31
  815b8c:	1005003a 	cmpeq	r2,r2,zero
  815b90:	1000021e 	bne	r2,zero,815b9c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  815b94:	e0bffd17 	ldw	r2,-12(fp)
  815b98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  815b9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  815ba0:	e037883a 	mov	sp,fp
  815ba4:	df000017 	ldw	fp,0(sp)
  815ba8:	dec00104 	addi	sp,sp,4
  815bac:	f800283a 	ret

00815bb0 <atexit>:
  815bb0:	200b883a 	mov	r5,r4
  815bb4:	000d883a 	mov	r6,zero
  815bb8:	0009883a 	mov	r4,zero
  815bbc:	000f883a 	mov	r7,zero
  815bc0:	0815c701 	jmpi	815c70 <__register_exitproc>

00815bc4 <exit>:
  815bc4:	defffe04 	addi	sp,sp,-8
  815bc8:	000b883a 	mov	r5,zero
  815bcc:	dc000015 	stw	r16,0(sp)
  815bd0:	dfc00115 	stw	ra,4(sp)
  815bd4:	2021883a 	mov	r16,r4
  815bd8:	0815da80 	call	815da8 <__call_exitprocs>
  815bdc:	00802074 	movhi	r2,129
  815be0:	109faa04 	addi	r2,r2,32424
  815be4:	11000017 	ldw	r4,0(r2)
  815be8:	20800f17 	ldw	r2,60(r4)
  815bec:	10000126 	beq	r2,zero,815bf4 <exit+0x30>
  815bf0:	103ee83a 	callr	r2
  815bf4:	8009883a 	mov	r4,r16
  815bf8:	0815f980 	call	815f98 <_exit>

00815bfc <memcmp>:
  815bfc:	00c000c4 	movi	r3,3
  815c00:	1980032e 	bgeu	r3,r6,815c10 <memcmp+0x14>
  815c04:	2144b03a 	or	r2,r4,r5
  815c08:	10c4703a 	and	r2,r2,r3
  815c0c:	10000f26 	beq	r2,zero,815c4c <memcmp+0x50>
  815c10:	31ffffc4 	addi	r7,r6,-1
  815c14:	3000061e 	bne	r6,zero,815c30 <memcmp+0x34>
  815c18:	00000a06 	br	815c44 <memcmp+0x48>
  815c1c:	39ffffc4 	addi	r7,r7,-1
  815c20:	00bfffc4 	movi	r2,-1
  815c24:	21000044 	addi	r4,r4,1
  815c28:	29400044 	addi	r5,r5,1
  815c2c:	38800526 	beq	r7,r2,815c44 <memcmp+0x48>
  815c30:	20c00003 	ldbu	r3,0(r4)
  815c34:	28800003 	ldbu	r2,0(r5)
  815c38:	18bff826 	beq	r3,r2,815c1c <memcmp+0x20>
  815c3c:	1885c83a 	sub	r2,r3,r2
  815c40:	f800283a 	ret
  815c44:	0005883a 	mov	r2,zero
  815c48:	f800283a 	ret
  815c4c:	180f883a 	mov	r7,r3
  815c50:	20c00017 	ldw	r3,0(r4)
  815c54:	28800017 	ldw	r2,0(r5)
  815c58:	18bfed1e 	bne	r3,r2,815c10 <memcmp+0x14>
  815c5c:	31bfff04 	addi	r6,r6,-4
  815c60:	21000104 	addi	r4,r4,4
  815c64:	29400104 	addi	r5,r5,4
  815c68:	39bff936 	bltu	r7,r6,815c50 <memcmp+0x54>
  815c6c:	003fe806 	br	815c10 <memcmp+0x14>

00815c70 <__register_exitproc>:
  815c70:	defffa04 	addi	sp,sp,-24
  815c74:	00802074 	movhi	r2,129
  815c78:	109faa04 	addi	r2,r2,32424
  815c7c:	dc000015 	stw	r16,0(sp)
  815c80:	14000017 	ldw	r16,0(r2)
  815c84:	dd000415 	stw	r20,16(sp)
  815c88:	2829883a 	mov	r20,r5
  815c8c:	81405217 	ldw	r5,328(r16)
  815c90:	dcc00315 	stw	r19,12(sp)
  815c94:	dc800215 	stw	r18,8(sp)
  815c98:	dc400115 	stw	r17,4(sp)
  815c9c:	dfc00515 	stw	ra,20(sp)
  815ca0:	2023883a 	mov	r17,r4
  815ca4:	3027883a 	mov	r19,r6
  815ca8:	3825883a 	mov	r18,r7
  815cac:	28002526 	beq	r5,zero,815d44 <__register_exitproc+0xd4>
  815cb0:	29000117 	ldw	r4,4(r5)
  815cb4:	008007c4 	movi	r2,31
  815cb8:	11002716 	blt	r2,r4,815d58 <__register_exitproc+0xe8>
  815cbc:	8800101e 	bne	r17,zero,815d00 <__register_exitproc+0x90>
  815cc0:	2105883a 	add	r2,r4,r4
  815cc4:	1085883a 	add	r2,r2,r2
  815cc8:	20c00044 	addi	r3,r4,1
  815ccc:	1145883a 	add	r2,r2,r5
  815cd0:	0009883a 	mov	r4,zero
  815cd4:	15000215 	stw	r20,8(r2)
  815cd8:	28c00115 	stw	r3,4(r5)
  815cdc:	2005883a 	mov	r2,r4
  815ce0:	dfc00517 	ldw	ra,20(sp)
  815ce4:	dd000417 	ldw	r20,16(sp)
  815ce8:	dcc00317 	ldw	r19,12(sp)
  815cec:	dc800217 	ldw	r18,8(sp)
  815cf0:	dc400117 	ldw	r17,4(sp)
  815cf4:	dc000017 	ldw	r16,0(sp)
  815cf8:	dec00604 	addi	sp,sp,24
  815cfc:	f800283a 	ret
  815d00:	29802204 	addi	r6,r5,136
  815d04:	00800044 	movi	r2,1
  815d08:	110e983a 	sll	r7,r2,r4
  815d0c:	30c04017 	ldw	r3,256(r6)
  815d10:	2105883a 	add	r2,r4,r4
  815d14:	1085883a 	add	r2,r2,r2
  815d18:	1185883a 	add	r2,r2,r6
  815d1c:	19c6b03a 	or	r3,r3,r7
  815d20:	14802015 	stw	r18,128(r2)
  815d24:	14c00015 	stw	r19,0(r2)
  815d28:	00800084 	movi	r2,2
  815d2c:	30c04015 	stw	r3,256(r6)
  815d30:	88bfe31e 	bne	r17,r2,815cc0 <__register_exitproc+0x50>
  815d34:	30804117 	ldw	r2,260(r6)
  815d38:	11c4b03a 	or	r2,r2,r7
  815d3c:	30804115 	stw	r2,260(r6)
  815d40:	003fdf06 	br	815cc0 <__register_exitproc+0x50>
  815d44:	008020b4 	movhi	r2,130
  815d48:	10bb9504 	addi	r2,r2,-4524
  815d4c:	100b883a 	mov	r5,r2
  815d50:	80805215 	stw	r2,328(r16)
  815d54:	003fd606 	br	815cb0 <__register_exitproc+0x40>
  815d58:	00800034 	movhi	r2,0
  815d5c:	10800004 	addi	r2,r2,0
  815d60:	1000021e 	bne	r2,zero,815d6c <__register_exitproc+0xfc>
  815d64:	013fffc4 	movi	r4,-1
  815d68:	003fdc06 	br	815cdc <__register_exitproc+0x6c>
  815d6c:	01006404 	movi	r4,400
  815d70:	103ee83a 	callr	r2
  815d74:	1007883a 	mov	r3,r2
  815d78:	103ffa26 	beq	r2,zero,815d64 <__register_exitproc+0xf4>
  815d7c:	80805217 	ldw	r2,328(r16)
  815d80:	180b883a 	mov	r5,r3
  815d84:	18000115 	stw	zero,4(r3)
  815d88:	18800015 	stw	r2,0(r3)
  815d8c:	80c05215 	stw	r3,328(r16)
  815d90:	18006215 	stw	zero,392(r3)
  815d94:	18006315 	stw	zero,396(r3)
  815d98:	0009883a 	mov	r4,zero
  815d9c:	883fc826 	beq	r17,zero,815cc0 <__register_exitproc+0x50>
  815da0:	003fd706 	br	815d00 <__register_exitproc+0x90>

00815da4 <register_fini>:
  815da4:	f800283a 	ret

00815da8 <__call_exitprocs>:
  815da8:	00802074 	movhi	r2,129
  815dac:	109faa04 	addi	r2,r2,32424
  815db0:	10800017 	ldw	r2,0(r2)
  815db4:	defff304 	addi	sp,sp,-52
  815db8:	df000b15 	stw	fp,44(sp)
  815dbc:	d8800115 	stw	r2,4(sp)
  815dc0:	00800034 	movhi	r2,0
  815dc4:	10800004 	addi	r2,r2,0
  815dc8:	1005003a 	cmpeq	r2,r2,zero
  815dcc:	d8800215 	stw	r2,8(sp)
  815dd0:	d8800117 	ldw	r2,4(sp)
  815dd4:	dd400815 	stw	r21,32(sp)
  815dd8:	dd000715 	stw	r20,28(sp)
  815ddc:	10805204 	addi	r2,r2,328
  815de0:	dfc00c15 	stw	ra,48(sp)
  815de4:	ddc00a15 	stw	r23,40(sp)
  815de8:	dd800915 	stw	r22,36(sp)
  815dec:	dcc00615 	stw	r19,24(sp)
  815df0:	dc800515 	stw	r18,20(sp)
  815df4:	dc400415 	stw	r17,16(sp)
  815df8:	dc000315 	stw	r16,12(sp)
  815dfc:	282b883a 	mov	r21,r5
  815e00:	2039883a 	mov	fp,r4
  815e04:	d8800015 	stw	r2,0(sp)
  815e08:	2829003a 	cmpeq	r20,r5,zero
  815e0c:	d8800117 	ldw	r2,4(sp)
  815e10:	14405217 	ldw	r17,328(r2)
  815e14:	88001026 	beq	r17,zero,815e58 <__call_exitprocs+0xb0>
  815e18:	ddc00017 	ldw	r23,0(sp)
  815e1c:	88800117 	ldw	r2,4(r17)
  815e20:	8c802204 	addi	r18,r17,136
  815e24:	143fffc4 	addi	r16,r2,-1
  815e28:	80000916 	blt	r16,zero,815e50 <__call_exitprocs+0xa8>
  815e2c:	05bfffc4 	movi	r22,-1
  815e30:	a000151e 	bne	r20,zero,815e88 <__call_exitprocs+0xe0>
  815e34:	8409883a 	add	r4,r16,r16
  815e38:	2105883a 	add	r2,r4,r4
  815e3c:	1485883a 	add	r2,r2,r18
  815e40:	10c02017 	ldw	r3,128(r2)
  815e44:	a8c01126 	beq	r21,r3,815e8c <__call_exitprocs+0xe4>
  815e48:	843fffc4 	addi	r16,r16,-1
  815e4c:	85bff81e 	bne	r16,r22,815e30 <__call_exitprocs+0x88>
  815e50:	d8800217 	ldw	r2,8(sp)
  815e54:	10003126 	beq	r2,zero,815f1c <__call_exitprocs+0x174>
  815e58:	dfc00c17 	ldw	ra,48(sp)
  815e5c:	df000b17 	ldw	fp,44(sp)
  815e60:	ddc00a17 	ldw	r23,40(sp)
  815e64:	dd800917 	ldw	r22,36(sp)
  815e68:	dd400817 	ldw	r21,32(sp)
  815e6c:	dd000717 	ldw	r20,28(sp)
  815e70:	dcc00617 	ldw	r19,24(sp)
  815e74:	dc800517 	ldw	r18,20(sp)
  815e78:	dc400417 	ldw	r17,16(sp)
  815e7c:	dc000317 	ldw	r16,12(sp)
  815e80:	dec00d04 	addi	sp,sp,52
  815e84:	f800283a 	ret
  815e88:	8409883a 	add	r4,r16,r16
  815e8c:	88c00117 	ldw	r3,4(r17)
  815e90:	2105883a 	add	r2,r4,r4
  815e94:	1445883a 	add	r2,r2,r17
  815e98:	18ffffc4 	addi	r3,r3,-1
  815e9c:	11800217 	ldw	r6,8(r2)
  815ea0:	1c001526 	beq	r3,r16,815ef8 <__call_exitprocs+0x150>
  815ea4:	10000215 	stw	zero,8(r2)
  815ea8:	303fe726 	beq	r6,zero,815e48 <__call_exitprocs+0xa0>
  815eac:	00c00044 	movi	r3,1
  815eb0:	1c06983a 	sll	r3,r3,r16
  815eb4:	90804017 	ldw	r2,256(r18)
  815eb8:	8cc00117 	ldw	r19,4(r17)
  815ebc:	1884703a 	and	r2,r3,r2
  815ec0:	10001426 	beq	r2,zero,815f14 <__call_exitprocs+0x16c>
  815ec4:	90804117 	ldw	r2,260(r18)
  815ec8:	1884703a 	and	r2,r3,r2
  815ecc:	10000c1e 	bne	r2,zero,815f00 <__call_exitprocs+0x158>
  815ed0:	2105883a 	add	r2,r4,r4
  815ed4:	1485883a 	add	r2,r2,r18
  815ed8:	11400017 	ldw	r5,0(r2)
  815edc:	e009883a 	mov	r4,fp
  815ee0:	303ee83a 	callr	r6
  815ee4:	88800117 	ldw	r2,4(r17)
  815ee8:	98bfc81e 	bne	r19,r2,815e0c <__call_exitprocs+0x64>
  815eec:	b8800017 	ldw	r2,0(r23)
  815ef0:	147fd526 	beq	r2,r17,815e48 <__call_exitprocs+0xa0>
  815ef4:	003fc506 	br	815e0c <__call_exitprocs+0x64>
  815ef8:	8c000115 	stw	r16,4(r17)
  815efc:	003fea06 	br	815ea8 <__call_exitprocs+0x100>
  815f00:	2105883a 	add	r2,r4,r4
  815f04:	1485883a 	add	r2,r2,r18
  815f08:	11000017 	ldw	r4,0(r2)
  815f0c:	303ee83a 	callr	r6
  815f10:	003ff406 	br	815ee4 <__call_exitprocs+0x13c>
  815f14:	303ee83a 	callr	r6
  815f18:	003ff206 	br	815ee4 <__call_exitprocs+0x13c>
  815f1c:	88800117 	ldw	r2,4(r17)
  815f20:	1000081e 	bne	r2,zero,815f44 <__call_exitprocs+0x19c>
  815f24:	89000017 	ldw	r4,0(r17)
  815f28:	20000726 	beq	r4,zero,815f48 <__call_exitprocs+0x1a0>
  815f2c:	b9000015 	stw	r4,0(r23)
  815f30:	8809883a 	mov	r4,r17
  815f34:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  815f38:	bc400017 	ldw	r17,0(r23)
  815f3c:	883fb71e 	bne	r17,zero,815e1c <__call_exitprocs+0x74>
  815f40:	003fc506 	br	815e58 <__call_exitprocs+0xb0>
  815f44:	89000017 	ldw	r4,0(r17)
  815f48:	882f883a 	mov	r23,r17
  815f4c:	2023883a 	mov	r17,r4
  815f50:	883fb21e 	bne	r17,zero,815e1c <__call_exitprocs+0x74>
  815f54:	003fc006 	br	815e58 <__call_exitprocs+0xb0>

00815f58 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  815f58:	defffd04 	addi	sp,sp,-12
  815f5c:	df000215 	stw	fp,8(sp)
  815f60:	df000204 	addi	fp,sp,8
  815f64:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  815f68:	e0bfff17 	ldw	r2,-4(fp)
  815f6c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  815f70:	e0bffe17 	ldw	r2,-8(fp)
  815f74:	1005003a 	cmpeq	r2,r2,zero
  815f78:	1000021e 	bne	r2,zero,815f84 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  815f7c:	002af070 	cmpltui	zero,zero,43969
  815f80:	00000106 	br	815f88 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  815f84:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  815f88:	e037883a 	mov	sp,fp
  815f8c:	df000017 	ldw	fp,0(sp)
  815f90:	dec00104 	addi	sp,sp,4
  815f94:	f800283a 	ret

00815f98 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  815f98:	defffd04 	addi	sp,sp,-12
  815f9c:	dfc00215 	stw	ra,8(sp)
  815fa0:	df000115 	stw	fp,4(sp)
  815fa4:	df000104 	addi	fp,sp,4
  815fa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  815fac:	008020b4 	movhi	r2,130
  815fb0:	10a6ab44 	addi	r2,r2,-25939
  815fb4:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  815fb8:	e13fff17 	ldw	r4,-4(fp)
  815fbc:	0815f580 	call	815f58 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  815fc0:	003fff06 	br	815fc0 <_exit+0x28>
  815fc4:	00815da4 	muli	r2,zero,1398
